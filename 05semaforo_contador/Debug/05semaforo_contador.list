
05semaforo_contador.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005314  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08005424  08005424  00015424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055cc  080055cc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080055cc  080055cc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055cc  080055cc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055cc  080055cc  000155cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055d0  080055d0  000155d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080055d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001074  20000074  08005648  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010e8  08005648  000210e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c35  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003134  00000000  00000000  00034cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00037e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  00038fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a3dc  00000000  00000000  0003a030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012213  00000000  00000000  0005440c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093eed  00000000  00000000  0006661f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fa50c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005130  00000000  00000000  000fa560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	0800540c 	.word	0x0800540c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	0800540c 	.word	0x0800540c

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000090 	.word	0x20000090
 800017c:	200000e4 	.word	0x200000e4

08000180 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af00      	add	r7, sp, #0
 8000186:	60f8      	str	r0, [r7, #12]
 8000188:	60b9      	str	r1, [r7, #8]
 800018a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 50);
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	b29a      	uxth	r2, r3
 8000190:	2332      	movs	r3, #50	; 0x32
 8000192:	68b9      	ldr	r1, [r7, #8]
 8000194:	4803      	ldr	r0, [pc, #12]	; (80001a4 <_write+0x24>)
 8000196:	f001 fc78 	bl	8001a8a <HAL_UART_Transmit>
	return len;
 800019a:	687b      	ldr	r3, [r7, #4]
}
 800019c:	4618      	mov	r0, r3
 800019e:	3710      	adds	r7, #16
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	20001040 	.word	0x20001040

080001a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001a8:	b5b0      	push	{r4, r5, r7, lr}
 80001aa:	b098      	sub	sp, #96	; 0x60
 80001ac:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001ae:	f000 faf5 	bl	800079c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001b2:	f000 f859 	bl	8000268 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001b6:	f000 f8c7 	bl	8000348 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80001ba:	f000 f89b 	bl	80002f4 <MX_USART1_UART_Init>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of myCountingSem01 */
	osSemaphoreDef(myCountingSem01);
 80001be:	2300      	movs	r3, #0
 80001c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80001c2:	2300      	movs	r3, #0
 80001c4:	65fb      	str	r3, [r7, #92]	; 0x5c
	myCountingSem01Handle = osSemaphoreCreate(osSemaphore(myCountingSem01), 2);
 80001c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80001ca:	2102      	movs	r1, #2
 80001cc:	4618      	mov	r0, r3
 80001ce:	f001 fe56 	bl	8001e7e <osSemaphoreCreate>
 80001d2:	4603      	mov	r3, r0
 80001d4:	4a1d      	ldr	r2, [pc, #116]	; (800024c <main+0xa4>)
 80001d6:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, Task01, osPriorityNormal, 0, 128);
 80001d8:	4b1d      	ldr	r3, [pc, #116]	; (8000250 <main+0xa8>)
 80001da:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80001de:	461d      	mov	r5, r3
 80001e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f001 fde3 	bl	8001dbe <osThreadCreate>
 80001f8:	4603      	mov	r3, r0
 80001fa:	4a16      	ldr	r2, [pc, #88]	; (8000254 <main+0xac>)
 80001fc:	6013      	str	r3, [r2, #0]

	/* definition and creation of myTask02 */
	osThreadDef(myTask02, Task02, osPriorityNormal, 0, 128);
 80001fe:	4b16      	ldr	r3, [pc, #88]	; (8000258 <main+0xb0>)
 8000200:	f107 0420 	add.w	r4, r7, #32
 8000204:	461d      	mov	r5, r3
 8000206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800020a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800020e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000212:	f107 0320 	add.w	r3, r7, #32
 8000216:	2100      	movs	r1, #0
 8000218:	4618      	mov	r0, r3
 800021a:	f001 fdd0 	bl	8001dbe <osThreadCreate>
 800021e:	4603      	mov	r3, r0
 8000220:	4a0e      	ldr	r2, [pc, #56]	; (800025c <main+0xb4>)
 8000222:	6013      	str	r3, [r2, #0]

	/* definition and creation of myTask03 */
	osThreadDef(myTask03, Task03, osPriorityNormal, 0, 128);
 8000224:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <main+0xb8>)
 8000226:	1d3c      	adds	r4, r7, #4
 8000228:	461d      	mov	r5, r3
 800022a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800022c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800022e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000232:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f001 fdbf 	bl	8001dbe <osThreadCreate>
 8000240:	4603      	mov	r3, r0
 8000242:	4a08      	ldr	r2, [pc, #32]	; (8000264 <main+0xbc>)
 8000244:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000246:	f001 fdb3 	bl	8001db0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800024a:	e7fe      	b.n	800024a <main+0xa2>
 800024c:	20001084 	.word	0x20001084
 8000250:	08005448 	.word	0x08005448
 8000254:	2000103c 	.word	0x2000103c
 8000258:	08005464 	.word	0x08005464
 800025c:	20001080 	.word	0x20001080
 8000260:	08005480 	.word	0x08005480
 8000264:	20001088 	.word	0x20001088

08000268 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000268:	b580      	push	{r7, lr}
 800026a:	b090      	sub	sp, #64	; 0x40
 800026c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800026e:	f107 0318 	add.w	r3, r7, #24
 8000272:	2228      	movs	r2, #40	; 0x28
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f004 f960 	bl	800453c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]
 8000288:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800028a:	2301      	movs	r3, #1
 800028c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800028e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000292:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000298:	2301      	movs	r3, #1
 800029a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029c:	2302      	movs	r3, #2
 800029e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80002ac:	f107 0318 	add.w	r3, r7, #24
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 fd09 	bl	8000cc8 <HAL_RCC_OscConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x58>
		Error_Handler();
 80002bc:	f000 f8be 	bl	800043c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002c0:	230f      	movs	r3, #15
 80002c2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c4:	2302      	movs	r3, #2
 80002c6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002d0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2102      	movs	r1, #2
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 ff74 	bl	80011c8 <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x82>
		Error_Handler();
 80002e6:	f000 f8a9 	bl	800043c <Error_Handler>
	}
}
 80002ea:	bf00      	nop
 80002ec:	3740      	adds	r7, #64	; 0x40
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
	...

080002f4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80002f8:	4b11      	ldr	r3, [pc, #68]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 80002fa:	4a12      	ldr	r2, [pc, #72]	; (8000344 <MX_USART1_UART_Init+0x50>)
 80002fc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80002fe:	4b10      	ldr	r3, [pc, #64]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 8000300:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000304:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000306:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800030c:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000312:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 800031a:	220c      	movs	r2, #12
 800031c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031e:	4b08      	ldr	r3, [pc, #32]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 8000326:	2200      	movs	r2, #0
 8000328:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800032a:	4805      	ldr	r0, [pc, #20]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 800032c:	f001 fb60 	bl	80019f0 <HAL_UART_Init>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000336:	f000 f881 	bl	800043c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20001040 	.word	0x20001040
 8000344:	40013800 	.word	0x40013800

08000348 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800034e:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <MX_GPIO_Init+0x40>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	4a0d      	ldr	r2, [pc, #52]	; (8000388 <MX_GPIO_Init+0x40>)
 8000354:	f043 0320 	orr.w	r3, r3, #32
 8000358:	6193      	str	r3, [r2, #24]
 800035a:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <MX_GPIO_Init+0x40>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	f003 0320 	and.w	r3, r3, #32
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <MX_GPIO_Init+0x40>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	4a07      	ldr	r2, [pc, #28]	; (8000388 <MX_GPIO_Init+0x40>)
 800036c:	f043 0304 	orr.w	r3, r3, #4
 8000370:	6193      	str	r3, [r2, #24]
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <MX_GPIO_Init+0x40>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	f003 0304 	and.w	r3, r3, #4
 800037a:	603b      	str	r3, [r7, #0]
 800037c:	683b      	ldr	r3, [r7, #0]

}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr
 8000388:	40021000 	.word	0x40021000

0800038c <Task01>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task01 */
void Task01(void const *argument) {
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(2000);
 8000394:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000398:	f001 fd5d 	bl	8001e56 <osDelay>
		printf("tarea 1 suelta el conteo del semaforo\n\r");
 800039c:	4804      	ldr	r0, [pc, #16]	; (80003b0 <Task01+0x24>)
 800039e:	f004 f8d5 	bl	800454c <iprintf>
		osSemaphoreRelease(myCountingSem01Handle);
 80003a2:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <Task01+0x28>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4618      	mov	r0, r3
 80003a8:	f001 fdf6 	bl	8001f98 <osSemaphoreRelease>
		osDelay(2000);
 80003ac:	e7f2      	b.n	8000394 <Task01+0x8>
 80003ae:	bf00      	nop
 80003b0:	0800549c 	.word	0x0800549c
 80003b4:	20001084 	.word	0x20001084

080003b8 <Task02>:
 * @brief Function implementing the myTask02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task02 */
void Task02(void const *argument) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task02 */
	/* Infinite loop */
	for (;;) {
		osDelay(2000);
 80003c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003c4:	f001 fd47 	bl	8001e56 <osDelay>
		printf("tarea 2 suelta el conteo del semaforo\n\r");
 80003c8:	4804      	ldr	r0, [pc, #16]	; (80003dc <Task02+0x24>)
 80003ca:	f004 f8bf 	bl	800454c <iprintf>
		osSemaphoreRelease(myCountingSem01Handle);
 80003ce:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <Task02+0x28>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4618      	mov	r0, r3
 80003d4:	f001 fde0 	bl	8001f98 <osSemaphoreRelease>
		osDelay(2000);
 80003d8:	e7f2      	b.n	80003c0 <Task02+0x8>
 80003da:	bf00      	nop
 80003dc:	080054c4 	.word	0x080054c4
 80003e0:	20001084 	.word	0x20001084

080003e4 <Task03>:
 * @brief Function implementing the myTask03 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task03 */
void Task03(void const *argument) {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task03 */
	/* Infinite loop */
	for (;;) {
		osSemaphoreWait(myCountingSem01Handle, 4000);
 80003ec:	4b08      	ldr	r3, [pc, #32]	; (8000410 <Task03+0x2c>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80003f4:	4618      	mov	r0, r3
 80003f6:	f001 fd81 	bl	8001efc <osSemaphoreWait>
		osSemaphoreWait(myCountingSem01Handle, 4000);
 80003fa:	4b05      	ldr	r3, [pc, #20]	; (8000410 <Task03+0x2c>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8000402:	4618      	mov	r0, r3
 8000404:	f001 fd7a 	bl	8001efc <osSemaphoreWait>
		printf("tarea 3 sincronizando\n\r");
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <Task03+0x30>)
 800040a:	f004 f89f 	bl	800454c <iprintf>
		osSemaphoreWait(myCountingSem01Handle, 4000);
 800040e:	e7ed      	b.n	80003ec <Task03+0x8>
 8000410:	20001084 	.word	0x20001084
 8000414:	080054ec 	.word	0x080054ec

08000418 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a04      	ldr	r2, [pc, #16]	; (8000438 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d101      	bne.n	800042e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800042a:	f000 f9cd 	bl	80007c8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40012c00 	.word	0x40012c00

0800043c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000440:	b672      	cpsid	i
}
 8000442:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000444:	e7fe      	b.n	8000444 <Error_Handler+0x8>
	...

08000448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800044e:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <HAL_MspInit+0x68>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	4a17      	ldr	r2, [pc, #92]	; (80004b0 <HAL_MspInit+0x68>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	6193      	str	r3, [r2, #24]
 800045a:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <HAL_MspInit+0x68>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	60bb      	str	r3, [r7, #8]
 8000464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000466:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <HAL_MspInit+0x68>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	4a11      	ldr	r2, [pc, #68]	; (80004b0 <HAL_MspInit+0x68>)
 800046c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000470:	61d3      	str	r3, [r2, #28]
 8000472:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <HAL_MspInit+0x68>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800047e:	2200      	movs	r2, #0
 8000480:	210f      	movs	r1, #15
 8000482:	f06f 0001 	mvn.w	r0, #1
 8000486:	f000 fa70 	bl	800096a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800048a:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <HAL_MspInit+0x6c>)
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	4a04      	ldr	r2, [pc, #16]	; (80004b4 <HAL_MspInit+0x6c>)
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a6:	bf00      	nop
 80004a8:	3710      	adds	r7, #16
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40010000 	.word	0x40010000

080004b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a1c      	ldr	r2, [pc, #112]	; (8000544 <HAL_UART_MspInit+0x8c>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d131      	bne.n	800053c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004d8:	4b1b      	ldr	r3, [pc, #108]	; (8000548 <HAL_UART_MspInit+0x90>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a1a      	ldr	r2, [pc, #104]	; (8000548 <HAL_UART_MspInit+0x90>)
 80004de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b18      	ldr	r3, [pc, #96]	; (8000548 <HAL_UART_MspInit+0x90>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f0:	4b15      	ldr	r3, [pc, #84]	; (8000548 <HAL_UART_MspInit+0x90>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a14      	ldr	r2, [pc, #80]	; (8000548 <HAL_UART_MspInit+0x90>)
 80004f6:	f043 0304 	orr.w	r3, r3, #4
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <HAL_UART_MspInit+0x90>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0304 	and.w	r3, r3, #4
 8000504:	60bb      	str	r3, [r7, #8]
 8000506:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800050c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800050e:	2302      	movs	r3, #2
 8000510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000512:	2303      	movs	r3, #3
 8000514:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000516:	f107 0310 	add.w	r3, r7, #16
 800051a:	4619      	mov	r1, r3
 800051c:	480b      	ldr	r0, [pc, #44]	; (800054c <HAL_UART_MspInit+0x94>)
 800051e:	f000 fa4f 	bl	80009c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000526:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000528:	2300      	movs	r3, #0
 800052a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	f107 0310 	add.w	r3, r7, #16
 8000534:	4619      	mov	r1, r3
 8000536:	4805      	ldr	r0, [pc, #20]	; (800054c <HAL_UART_MspInit+0x94>)
 8000538:	f000 fa42 	bl	80009c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800053c:	bf00      	nop
 800053e:	3720      	adds	r7, #32
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40013800 	.word	0x40013800
 8000548:	40021000 	.word	0x40021000
 800054c:	40010800 	.word	0x40010800

08000550 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08c      	sub	sp, #48	; 0x30
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000560:	2200      	movs	r2, #0
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	2019      	movs	r0, #25
 8000566:	f000 fa00 	bl	800096a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800056a:	2019      	movs	r0, #25
 800056c:	f000 fa19 	bl	80009a2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000570:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <HAL_InitTick+0x9c>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a1d      	ldr	r2, [pc, #116]	; (80005ec <HAL_InitTick+0x9c>)
 8000576:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <HAL_InitTick+0x9c>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000588:	f107 0210 	add.w	r2, r7, #16
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	4611      	mov	r1, r2
 8000592:	4618      	mov	r0, r3
 8000594:	f000 ff94 	bl	80014c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000598:	f000 ff7e 	bl	8001498 <HAL_RCC_GetPCLK2Freq>
 800059c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800059e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005a0:	4a13      	ldr	r2, [pc, #76]	; (80005f0 <HAL_InitTick+0xa0>)
 80005a2:	fba2 2303 	umull	r2, r3, r2, r3
 80005a6:	0c9b      	lsrs	r3, r3, #18
 80005a8:	3b01      	subs	r3, #1
 80005aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <HAL_InitTick+0xa4>)
 80005ae:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <HAL_InitTick+0xa8>)
 80005b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80005b2:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <HAL_InitTick+0xa4>)
 80005b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005b8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80005ba:	4a0e      	ldr	r2, [pc, #56]	; (80005f4 <HAL_InitTick+0xa4>)
 80005bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005be:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <HAL_InitTick+0xa4>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <HAL_InitTick+0xa4>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80005cc:	4809      	ldr	r0, [pc, #36]	; (80005f4 <HAL_InitTick+0xa4>)
 80005ce:	f000 ffc5 	bl	800155c <HAL_TIM_Base_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d104      	bne.n	80005e2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80005d8:	4806      	ldr	r0, [pc, #24]	; (80005f4 <HAL_InitTick+0xa4>)
 80005da:	f001 f817 	bl	800160c <HAL_TIM_Base_Start_IT>
 80005de:	4603      	mov	r3, r0
 80005e0:	e000      	b.n	80005e4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80005e2:	2301      	movs	r3, #1
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3730      	adds	r7, #48	; 0x30
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40021000 	.word	0x40021000
 80005f0:	431bde83 	.word	0x431bde83
 80005f4:	2000108c 	.word	0x2000108c
 80005f8:	40012c00 	.word	0x40012c00

080005fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <NMI_Handler+0x4>

08000602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000606:	e7fe      	b.n	8000606 <HardFault_Handler+0x4>

08000608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800060c:	e7fe      	b.n	800060c <MemManage_Handler+0x4>

0800060e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000612:	e7fe      	b.n	8000612 <BusFault_Handler+0x4>

08000614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000618:	e7fe      	b.n	8000618 <UsageFault_Handler+0x4>

0800061a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr
	...

08000628 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800062c:	4802      	ldr	r0, [pc, #8]	; (8000638 <TIM1_UP_IRQHandler+0x10>)
 800062e:	f001 f83f 	bl	80016b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	2000108c 	.word	0x2000108c

0800063c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
 800064c:	e00a      	b.n	8000664 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800064e:	f3af 8000 	nop.w
 8000652:	4601      	mov	r1, r0
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	1c5a      	adds	r2, r3, #1
 8000658:	60ba      	str	r2, [r7, #8]
 800065a:	b2ca      	uxtb	r2, r1
 800065c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	3301      	adds	r3, #1
 8000662:	617b      	str	r3, [r7, #20]
 8000664:	697a      	ldr	r2, [r7, #20]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	429a      	cmp	r2, r3
 800066a:	dbf0      	blt.n	800064e <_read+0x12>
	}

return len;
 800066c:	687b      	ldr	r3, [r7, #4]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3718      	adds	r7, #24
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000676:	b480      	push	{r7}
 8000678:	b083      	sub	sp, #12
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
	return -1;
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000682:	4618      	mov	r0, r3
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr

0800068c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800069c:	605a      	str	r2, [r3, #4]
	return 0;
 800069e:	2300      	movs	r3, #0
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr

080006aa <_isatty>:

int _isatty(int file)
{
 80006aa:	b480      	push	{r7}
 80006ac:	b083      	sub	sp, #12
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
	return 1;
 80006b2:	2301      	movs	r3, #1
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr

080006be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006be:	b480      	push	{r7}
 80006c0:	b085      	sub	sp, #20
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	60f8      	str	r0, [r7, #12]
 80006c6:	60b9      	str	r1, [r7, #8]
 80006c8:	607a      	str	r2, [r7, #4]
	return 0;
 80006ca:	2300      	movs	r3, #0
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
	...

080006d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e0:	4a14      	ldr	r2, [pc, #80]	; (8000734 <_sbrk+0x5c>)
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <_sbrk+0x60>)
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <_sbrk+0x64>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d102      	bne.n	80006fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <_sbrk+0x64>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	; (8000740 <_sbrk+0x68>)
 80006f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <_sbrk+0x64>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	693a      	ldr	r2, [r7, #16]
 8000704:	429a      	cmp	r2, r3
 8000706:	d207      	bcs.n	8000718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000708:	f003 fee0 	bl	80044cc <__errno>
 800070c:	4603      	mov	r3, r0
 800070e:	220c      	movs	r2, #12
 8000710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000712:	f04f 33ff 	mov.w	r3, #4294967295
 8000716:	e009      	b.n	800072c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <_sbrk+0x64>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800071e:	4b07      	ldr	r3, [pc, #28]	; (800073c <_sbrk+0x64>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4413      	add	r3, r2
 8000726:	4a05      	ldr	r2, [pc, #20]	; (800073c <_sbrk+0x64>)
 8000728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800072a:	68fb      	ldr	r3, [r7, #12]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20005000 	.word	0x20005000
 8000738:	00000400 	.word	0x00000400
 800073c:	200002e4 	.word	0x200002e4
 8000740:	200010e8 	.word	0x200010e8

08000744 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000750:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000752:	e003      	b.n	800075c <LoopCopyDataInit>

08000754 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000754:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000756:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000758:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800075a:	3104      	adds	r1, #4

0800075c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800075c:	480a      	ldr	r0, [pc, #40]	; (8000788 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000760:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000762:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000764:	d3f6      	bcc.n	8000754 <CopyDataInit>
  ldr r2, =_sbss
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000768:	e002      	b.n	8000770 <LoopFillZerobss>

0800076a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800076c:	f842 3b04 	str.w	r3, [r2], #4

08000770 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000772:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000774:	d3f9      	bcc.n	800076a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000776:	f7ff ffe5 	bl	8000744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800077a:	f003 fead 	bl	80044d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800077e:	f7ff fd13 	bl	80001a8 <main>
  bx lr
 8000782:	4770      	bx	lr
  ldr r3, =_sidata
 8000784:	080055d4 	.word	0x080055d4
  ldr r0, =_sdata
 8000788:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800078c:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000790:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000794:	200010e8 	.word	0x200010e8

08000798 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC1_2_IRQHandler>
	...

0800079c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <HAL_Init+0x28>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <HAL_Init+0x28>)
 80007a6:	f043 0310 	orr.w	r3, r3, #16
 80007aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ac:	2003      	movs	r0, #3
 80007ae:	f000 f8d1 	bl	8000954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b2:	2000      	movs	r0, #0
 80007b4:	f7ff fecc 	bl	8000550 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b8:	f7ff fe46 	bl	8000448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40022000 	.word	0x40022000

080007c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <HAL_IncTick+0x1c>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <HAL_IncTick+0x20>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4413      	add	r3, r2
 80007d8:	4a03      	ldr	r2, [pc, #12]	; (80007e8 <HAL_IncTick+0x20>)
 80007da:	6013      	str	r3, [r2, #0]
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr
 80007e4:	20000008 	.word	0x20000008
 80007e8:	200010d4 	.word	0x200010d4

080007ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  return uwTick;
 80007f0:	4b02      	ldr	r3, [pc, #8]	; (80007fc <HAL_GetTick+0x10>)
 80007f2:	681b      	ldr	r3, [r3, #0]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	200010d4 	.word	0x200010d4

08000800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <__NVIC_SetPriorityGrouping+0x44>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800081c:	4013      	ands	r3, r2
 800081e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800082c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000832:	4a04      	ldr	r2, [pc, #16]	; (8000844 <__NVIC_SetPriorityGrouping+0x44>)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	60d3      	str	r3, [r2, #12]
}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <__NVIC_GetPriorityGrouping+0x18>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	0a1b      	lsrs	r3, r3, #8
 8000852:	f003 0307 	and.w	r3, r3, #7
}
 8000856:	4618      	mov	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000872:	2b00      	cmp	r3, #0
 8000874:	db0b      	blt.n	800088e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	f003 021f 	and.w	r2, r3, #31
 800087c:	4906      	ldr	r1, [pc, #24]	; (8000898 <__NVIC_EnableIRQ+0x34>)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	095b      	lsrs	r3, r3, #5
 8000884:	2001      	movs	r0, #1
 8000886:	fa00 f202 	lsl.w	r2, r0, r2
 800088a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	e000e100 	.word	0xe000e100

0800089c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	6039      	str	r1, [r7, #0]
 80008a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	db0a      	blt.n	80008c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	490c      	ldr	r1, [pc, #48]	; (80008e8 <__NVIC_SetPriority+0x4c>)
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	0112      	lsls	r2, r2, #4
 80008bc:	b2d2      	uxtb	r2, r2
 80008be:	440b      	add	r3, r1
 80008c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c4:	e00a      	b.n	80008dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4908      	ldr	r1, [pc, #32]	; (80008ec <__NVIC_SetPriority+0x50>)
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	f003 030f 	and.w	r3, r3, #15
 80008d2:	3b04      	subs	r3, #4
 80008d4:	0112      	lsls	r2, r2, #4
 80008d6:	b2d2      	uxtb	r2, r2
 80008d8:	440b      	add	r3, r1
 80008da:	761a      	strb	r2, [r3, #24]
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000e100 	.word	0xe000e100
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b089      	sub	sp, #36	; 0x24
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	f1c3 0307 	rsb	r3, r3, #7
 800090a:	2b04      	cmp	r3, #4
 800090c:	bf28      	it	cs
 800090e:	2304      	movcs	r3, #4
 8000910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	3304      	adds	r3, #4
 8000916:	2b06      	cmp	r3, #6
 8000918:	d902      	bls.n	8000920 <NVIC_EncodePriority+0x30>
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	3b03      	subs	r3, #3
 800091e:	e000      	b.n	8000922 <NVIC_EncodePriority+0x32>
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000924:	f04f 32ff 	mov.w	r2, #4294967295
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	43da      	mvns	r2, r3
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	401a      	ands	r2, r3
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000938:	f04f 31ff 	mov.w	r1, #4294967295
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	fa01 f303 	lsl.w	r3, r1, r3
 8000942:	43d9      	mvns	r1, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000948:	4313      	orrs	r3, r2
         );
}
 800094a:	4618      	mov	r0, r3
 800094c:	3724      	adds	r7, #36	; 0x24
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr

08000954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff ff4f 	bl	8000800 <__NVIC_SetPriorityGrouping>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800096a:	b580      	push	{r7, lr}
 800096c:	b086      	sub	sp, #24
 800096e:	af00      	add	r7, sp, #0
 8000970:	4603      	mov	r3, r0
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607a      	str	r2, [r7, #4]
 8000976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800097c:	f7ff ff64 	bl	8000848 <__NVIC_GetPriorityGrouping>
 8000980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	68b9      	ldr	r1, [r7, #8]
 8000986:	6978      	ldr	r0, [r7, #20]
 8000988:	f7ff ffb2 	bl	80008f0 <NVIC_EncodePriority>
 800098c:	4602      	mov	r2, r0
 800098e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000992:	4611      	mov	r1, r2
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ff81 	bl	800089c <__NVIC_SetPriority>
}
 800099a:	bf00      	nop
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	4603      	mov	r3, r0
 80009aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff ff57 	bl	8000864 <__NVIC_EnableIRQ>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b08b      	sub	sp, #44	; 0x2c
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009d2:	e169      	b.n	8000ca8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009d4:	2201      	movs	r2, #1
 80009d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	69fa      	ldr	r2, [r7, #28]
 80009e4:	4013      	ands	r3, r2
 80009e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009e8:	69ba      	ldr	r2, [r7, #24]
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	f040 8158 	bne.w	8000ca2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	4a9a      	ldr	r2, [pc, #616]	; (8000c60 <HAL_GPIO_Init+0x2a0>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d05e      	beq.n	8000aba <HAL_GPIO_Init+0xfa>
 80009fc:	4a98      	ldr	r2, [pc, #608]	; (8000c60 <HAL_GPIO_Init+0x2a0>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d875      	bhi.n	8000aee <HAL_GPIO_Init+0x12e>
 8000a02:	4a98      	ldr	r2, [pc, #608]	; (8000c64 <HAL_GPIO_Init+0x2a4>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d058      	beq.n	8000aba <HAL_GPIO_Init+0xfa>
 8000a08:	4a96      	ldr	r2, [pc, #600]	; (8000c64 <HAL_GPIO_Init+0x2a4>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d86f      	bhi.n	8000aee <HAL_GPIO_Init+0x12e>
 8000a0e:	4a96      	ldr	r2, [pc, #600]	; (8000c68 <HAL_GPIO_Init+0x2a8>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d052      	beq.n	8000aba <HAL_GPIO_Init+0xfa>
 8000a14:	4a94      	ldr	r2, [pc, #592]	; (8000c68 <HAL_GPIO_Init+0x2a8>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d869      	bhi.n	8000aee <HAL_GPIO_Init+0x12e>
 8000a1a:	4a94      	ldr	r2, [pc, #592]	; (8000c6c <HAL_GPIO_Init+0x2ac>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d04c      	beq.n	8000aba <HAL_GPIO_Init+0xfa>
 8000a20:	4a92      	ldr	r2, [pc, #584]	; (8000c6c <HAL_GPIO_Init+0x2ac>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d863      	bhi.n	8000aee <HAL_GPIO_Init+0x12e>
 8000a26:	4a92      	ldr	r2, [pc, #584]	; (8000c70 <HAL_GPIO_Init+0x2b0>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d046      	beq.n	8000aba <HAL_GPIO_Init+0xfa>
 8000a2c:	4a90      	ldr	r2, [pc, #576]	; (8000c70 <HAL_GPIO_Init+0x2b0>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d85d      	bhi.n	8000aee <HAL_GPIO_Init+0x12e>
 8000a32:	2b12      	cmp	r3, #18
 8000a34:	d82a      	bhi.n	8000a8c <HAL_GPIO_Init+0xcc>
 8000a36:	2b12      	cmp	r3, #18
 8000a38:	d859      	bhi.n	8000aee <HAL_GPIO_Init+0x12e>
 8000a3a:	a201      	add	r2, pc, #4	; (adr r2, 8000a40 <HAL_GPIO_Init+0x80>)
 8000a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a40:	08000abb 	.word	0x08000abb
 8000a44:	08000a95 	.word	0x08000a95
 8000a48:	08000aa7 	.word	0x08000aa7
 8000a4c:	08000ae9 	.word	0x08000ae9
 8000a50:	08000aef 	.word	0x08000aef
 8000a54:	08000aef 	.word	0x08000aef
 8000a58:	08000aef 	.word	0x08000aef
 8000a5c:	08000aef 	.word	0x08000aef
 8000a60:	08000aef 	.word	0x08000aef
 8000a64:	08000aef 	.word	0x08000aef
 8000a68:	08000aef 	.word	0x08000aef
 8000a6c:	08000aef 	.word	0x08000aef
 8000a70:	08000aef 	.word	0x08000aef
 8000a74:	08000aef 	.word	0x08000aef
 8000a78:	08000aef 	.word	0x08000aef
 8000a7c:	08000aef 	.word	0x08000aef
 8000a80:	08000aef 	.word	0x08000aef
 8000a84:	08000a9d 	.word	0x08000a9d
 8000a88:	08000ab1 	.word	0x08000ab1
 8000a8c:	4a79      	ldr	r2, [pc, #484]	; (8000c74 <HAL_GPIO_Init+0x2b4>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d013      	beq.n	8000aba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a92:	e02c      	b.n	8000aee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	623b      	str	r3, [r7, #32]
          break;
 8000a9a:	e029      	b.n	8000af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	623b      	str	r3, [r7, #32]
          break;
 8000aa4:	e024      	b.n	8000af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	3308      	adds	r3, #8
 8000aac:	623b      	str	r3, [r7, #32]
          break;
 8000aae:	e01f      	b.n	8000af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	330c      	adds	r3, #12
 8000ab6:	623b      	str	r3, [r7, #32]
          break;
 8000ab8:	e01a      	b.n	8000af0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d102      	bne.n	8000ac8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ac2:	2304      	movs	r3, #4
 8000ac4:	623b      	str	r3, [r7, #32]
          break;
 8000ac6:	e013      	b.n	8000af0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d105      	bne.n	8000adc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	69fa      	ldr	r2, [r7, #28]
 8000ad8:	611a      	str	r2, [r3, #16]
          break;
 8000ada:	e009      	b.n	8000af0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000adc:	2308      	movs	r3, #8
 8000ade:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	69fa      	ldr	r2, [r7, #28]
 8000ae4:	615a      	str	r2, [r3, #20]
          break;
 8000ae6:	e003      	b.n	8000af0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	623b      	str	r3, [r7, #32]
          break;
 8000aec:	e000      	b.n	8000af0 <HAL_GPIO_Init+0x130>
          break;
 8000aee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	2bff      	cmp	r3, #255	; 0xff
 8000af4:	d801      	bhi.n	8000afa <HAL_GPIO_Init+0x13a>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	e001      	b.n	8000afe <HAL_GPIO_Init+0x13e>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	3304      	adds	r3, #4
 8000afe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	2bff      	cmp	r3, #255	; 0xff
 8000b04:	d802      	bhi.n	8000b0c <HAL_GPIO_Init+0x14c>
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	e002      	b.n	8000b12 <HAL_GPIO_Init+0x152>
 8000b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0e:	3b08      	subs	r3, #8
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	210f      	movs	r1, #15
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b20:	43db      	mvns	r3, r3
 8000b22:	401a      	ands	r2, r3
 8000b24:	6a39      	ldr	r1, [r7, #32]
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2c:	431a      	orrs	r2, r3
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	f000 80b1 	beq.w	8000ca2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b40:	4b4d      	ldr	r3, [pc, #308]	; (8000c78 <HAL_GPIO_Init+0x2b8>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	4a4c      	ldr	r2, [pc, #304]	; (8000c78 <HAL_GPIO_Init+0x2b8>)
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	6193      	str	r3, [r2, #24]
 8000b4c:	4b4a      	ldr	r3, [pc, #296]	; (8000c78 <HAL_GPIO_Init+0x2b8>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b58:	4a48      	ldr	r2, [pc, #288]	; (8000c7c <HAL_GPIO_Init+0x2bc>)
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	089b      	lsrs	r3, r3, #2
 8000b5e:	3302      	adds	r3, #2
 8000b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b68:	f003 0303 	and.w	r3, r3, #3
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	220f      	movs	r2, #15
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	43db      	mvns	r3, r3
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a40      	ldr	r2, [pc, #256]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d013      	beq.n	8000bac <HAL_GPIO_Init+0x1ec>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a3f      	ldr	r2, [pc, #252]	; (8000c84 <HAL_GPIO_Init+0x2c4>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d00d      	beq.n	8000ba8 <HAL_GPIO_Init+0x1e8>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a3e      	ldr	r2, [pc, #248]	; (8000c88 <HAL_GPIO_Init+0x2c8>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d007      	beq.n	8000ba4 <HAL_GPIO_Init+0x1e4>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a3d      	ldr	r2, [pc, #244]	; (8000c8c <HAL_GPIO_Init+0x2cc>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d101      	bne.n	8000ba0 <HAL_GPIO_Init+0x1e0>
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	e006      	b.n	8000bae <HAL_GPIO_Init+0x1ee>
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	e004      	b.n	8000bae <HAL_GPIO_Init+0x1ee>
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	e002      	b.n	8000bae <HAL_GPIO_Init+0x1ee>
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e000      	b.n	8000bae <HAL_GPIO_Init+0x1ee>
 8000bac:	2300      	movs	r3, #0
 8000bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bb0:	f002 0203 	and.w	r2, r2, #3
 8000bb4:	0092      	lsls	r2, r2, #2
 8000bb6:	4093      	lsls	r3, r2
 8000bb8:	68fa      	ldr	r2, [r7, #12]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bbe:	492f      	ldr	r1, [pc, #188]	; (8000c7c <HAL_GPIO_Init+0x2bc>)
 8000bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc2:	089b      	lsrs	r3, r3, #2
 8000bc4:	3302      	adds	r3, #2
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d006      	beq.n	8000be6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bd8:	4b2d      	ldr	r3, [pc, #180]	; (8000c90 <HAL_GPIO_Init+0x2d0>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	492c      	ldr	r1, [pc, #176]	; (8000c90 <HAL_GPIO_Init+0x2d0>)
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	600b      	str	r3, [r1, #0]
 8000be4:	e006      	b.n	8000bf4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000be6:	4b2a      	ldr	r3, [pc, #168]	; (8000c90 <HAL_GPIO_Init+0x2d0>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	43db      	mvns	r3, r3
 8000bee:	4928      	ldr	r1, [pc, #160]	; (8000c90 <HAL_GPIO_Init+0x2d0>)
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d006      	beq.n	8000c0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c00:	4b23      	ldr	r3, [pc, #140]	; (8000c90 <HAL_GPIO_Init+0x2d0>)
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	4922      	ldr	r1, [pc, #136]	; (8000c90 <HAL_GPIO_Init+0x2d0>)
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	604b      	str	r3, [r1, #4]
 8000c0c:	e006      	b.n	8000c1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c0e:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <HAL_GPIO_Init+0x2d0>)
 8000c10:	685a      	ldr	r2, [r3, #4]
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	43db      	mvns	r3, r3
 8000c16:	491e      	ldr	r1, [pc, #120]	; (8000c90 <HAL_GPIO_Init+0x2d0>)
 8000c18:	4013      	ands	r3, r2
 8000c1a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d006      	beq.n	8000c36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c28:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <HAL_GPIO_Init+0x2d0>)
 8000c2a:	689a      	ldr	r2, [r3, #8]
 8000c2c:	4918      	ldr	r1, [pc, #96]	; (8000c90 <HAL_GPIO_Init+0x2d0>)
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	608b      	str	r3, [r1, #8]
 8000c34:	e006      	b.n	8000c44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c36:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <HAL_GPIO_Init+0x2d0>)
 8000c38:	689a      	ldr	r2, [r3, #8]
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	4914      	ldr	r1, [pc, #80]	; (8000c90 <HAL_GPIO_Init+0x2d0>)
 8000c40:	4013      	ands	r3, r2
 8000c42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d021      	beq.n	8000c94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <HAL_GPIO_Init+0x2d0>)
 8000c52:	68da      	ldr	r2, [r3, #12]
 8000c54:	490e      	ldr	r1, [pc, #56]	; (8000c90 <HAL_GPIO_Init+0x2d0>)
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	60cb      	str	r3, [r1, #12]
 8000c5c:	e021      	b.n	8000ca2 <HAL_GPIO_Init+0x2e2>
 8000c5e:	bf00      	nop
 8000c60:	10320000 	.word	0x10320000
 8000c64:	10310000 	.word	0x10310000
 8000c68:	10220000 	.word	0x10220000
 8000c6c:	10210000 	.word	0x10210000
 8000c70:	10120000 	.word	0x10120000
 8000c74:	10110000 	.word	0x10110000
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40010000 	.word	0x40010000
 8000c80:	40010800 	.word	0x40010800
 8000c84:	40010c00 	.word	0x40010c00
 8000c88:	40011000 	.word	0x40011000
 8000c8c:	40011400 	.word	0x40011400
 8000c90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <HAL_GPIO_Init+0x304>)
 8000c96:	68da      	ldr	r2, [r3, #12]
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	4909      	ldr	r1, [pc, #36]	; (8000cc4 <HAL_GPIO_Init+0x304>)
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cae:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f47f ae8e 	bne.w	80009d4 <HAL_GPIO_Init+0x14>
  }
}
 8000cb8:	bf00      	nop
 8000cba:	bf00      	nop
 8000cbc:	372c      	adds	r7, #44	; 0x2c
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr
 8000cc4:	40010400 	.word	0x40010400

08000cc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d101      	bne.n	8000cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e26c      	b.n	80011b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f000 8087 	beq.w	8000df6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ce8:	4b92      	ldr	r3, [pc, #584]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 030c 	and.w	r3, r3, #12
 8000cf0:	2b04      	cmp	r3, #4
 8000cf2:	d00c      	beq.n	8000d0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cf4:	4b8f      	ldr	r3, [pc, #572]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 030c 	and.w	r3, r3, #12
 8000cfc:	2b08      	cmp	r3, #8
 8000cfe:	d112      	bne.n	8000d26 <HAL_RCC_OscConfig+0x5e>
 8000d00:	4b8c      	ldr	r3, [pc, #560]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d0c:	d10b      	bne.n	8000d26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d0e:	4b89      	ldr	r3, [pc, #548]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d06c      	beq.n	8000df4 <HAL_RCC_OscConfig+0x12c>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d168      	bne.n	8000df4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e246      	b.n	80011b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d2e:	d106      	bne.n	8000d3e <HAL_RCC_OscConfig+0x76>
 8000d30:	4b80      	ldr	r3, [pc, #512]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a7f      	ldr	r2, [pc, #508]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d3a:	6013      	str	r3, [r2, #0]
 8000d3c:	e02e      	b.n	8000d9c <HAL_RCC_OscConfig+0xd4>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d10c      	bne.n	8000d60 <HAL_RCC_OscConfig+0x98>
 8000d46:	4b7b      	ldr	r3, [pc, #492]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a7a      	ldr	r2, [pc, #488]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	4b78      	ldr	r3, [pc, #480]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a77      	ldr	r2, [pc, #476]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d5c:	6013      	str	r3, [r2, #0]
 8000d5e:	e01d      	b.n	8000d9c <HAL_RCC_OscConfig+0xd4>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d68:	d10c      	bne.n	8000d84 <HAL_RCC_OscConfig+0xbc>
 8000d6a:	4b72      	ldr	r3, [pc, #456]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a71      	ldr	r2, [pc, #452]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	4b6f      	ldr	r3, [pc, #444]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a6e      	ldr	r2, [pc, #440]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	e00b      	b.n	8000d9c <HAL_RCC_OscConfig+0xd4>
 8000d84:	4b6b      	ldr	r3, [pc, #428]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a6a      	ldr	r2, [pc, #424]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	4b68      	ldr	r3, [pc, #416]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a67      	ldr	r2, [pc, #412]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d013      	beq.n	8000dcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da4:	f7ff fd22 	bl	80007ec <HAL_GetTick>
 8000da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000daa:	e008      	b.n	8000dbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dac:	f7ff fd1e 	bl	80007ec <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b64      	cmp	r3, #100	; 0x64
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e1fa      	b.n	80011b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dbe:	4b5d      	ldr	r3, [pc, #372]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0f0      	beq.n	8000dac <HAL_RCC_OscConfig+0xe4>
 8000dca:	e014      	b.n	8000df6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dcc:	f7ff fd0e 	bl	80007ec <HAL_GetTick>
 8000dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dd2:	e008      	b.n	8000de6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dd4:	f7ff fd0a 	bl	80007ec <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b64      	cmp	r3, #100	; 0x64
 8000de0:	d901      	bls.n	8000de6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e1e6      	b.n	80011b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000de6:	4b53      	ldr	r3, [pc, #332]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1f0      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x10c>
 8000df2:	e000      	b.n	8000df6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d063      	beq.n	8000eca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e02:	4b4c      	ldr	r3, [pc, #304]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 030c 	and.w	r3, r3, #12
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d00b      	beq.n	8000e26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e0e:	4b49      	ldr	r3, [pc, #292]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 030c 	and.w	r3, r3, #12
 8000e16:	2b08      	cmp	r3, #8
 8000e18:	d11c      	bne.n	8000e54 <HAL_RCC_OscConfig+0x18c>
 8000e1a:	4b46      	ldr	r3, [pc, #280]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d116      	bne.n	8000e54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e26:	4b43      	ldr	r3, [pc, #268]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d005      	beq.n	8000e3e <HAL_RCC_OscConfig+0x176>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	691b      	ldr	r3, [r3, #16]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d001      	beq.n	8000e3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e1ba      	b.n	80011b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e3e:	4b3d      	ldr	r3, [pc, #244]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	00db      	lsls	r3, r3, #3
 8000e4c:	4939      	ldr	r1, [pc, #228]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e52:	e03a      	b.n	8000eca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	691b      	ldr	r3, [r3, #16]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d020      	beq.n	8000e9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e5c:	4b36      	ldr	r3, [pc, #216]	; (8000f38 <HAL_RCC_OscConfig+0x270>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e62:	f7ff fcc3 	bl	80007ec <HAL_GetTick>
 8000e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e68:	e008      	b.n	8000e7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e6a:	f7ff fcbf 	bl	80007ec <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d901      	bls.n	8000e7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e19b      	b.n	80011b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e7c:	4b2d      	ldr	r3, [pc, #180]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0f0      	beq.n	8000e6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e88:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	695b      	ldr	r3, [r3, #20]
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	4927      	ldr	r1, [pc, #156]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	600b      	str	r3, [r1, #0]
 8000e9c:	e015      	b.n	8000eca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e9e:	4b26      	ldr	r3, [pc, #152]	; (8000f38 <HAL_RCC_OscConfig+0x270>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea4:	f7ff fca2 	bl	80007ec <HAL_GetTick>
 8000ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eaa:	e008      	b.n	8000ebe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eac:	f7ff fc9e 	bl	80007ec <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d901      	bls.n	8000ebe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e17a      	b.n	80011b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ebe:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1f0      	bne.n	8000eac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0308 	and.w	r3, r3, #8
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d03a      	beq.n	8000f4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d019      	beq.n	8000f12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ede:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <HAL_RCC_OscConfig+0x274>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee4:	f7ff fc82 	bl	80007ec <HAL_GetTick>
 8000ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eea:	e008      	b.n	8000efe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eec:	f7ff fc7e 	bl	80007ec <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e15a      	b.n	80011b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000efe:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <HAL_RCC_OscConfig+0x26c>)
 8000f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d0f0      	beq.n	8000eec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	f000 fb08 	bl	8001520 <RCC_Delay>
 8000f10:	e01c      	b.n	8000f4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_RCC_OscConfig+0x274>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f18:	f7ff fc68 	bl	80007ec <HAL_GetTick>
 8000f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f1e:	e00f      	b.n	8000f40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f20:	f7ff fc64 	bl	80007ec <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d908      	bls.n	8000f40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e140      	b.n	80011b4 <HAL_RCC_OscConfig+0x4ec>
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000
 8000f38:	42420000 	.word	0x42420000
 8000f3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f40:	4b9e      	ldr	r3, [pc, #632]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 8000f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1e9      	bne.n	8000f20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f000 80a6 	beq.w	80010a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f5e:	4b97      	ldr	r3, [pc, #604]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d10d      	bne.n	8000f86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b94      	ldr	r3, [pc, #592]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	4a93      	ldr	r2, [pc, #588]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	61d3      	str	r3, [r2, #28]
 8000f76:	4b91      	ldr	r3, [pc, #580]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f82:	2301      	movs	r3, #1
 8000f84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f86:	4b8e      	ldr	r3, [pc, #568]	; (80011c0 <HAL_RCC_OscConfig+0x4f8>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d118      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f92:	4b8b      	ldr	r3, [pc, #556]	; (80011c0 <HAL_RCC_OscConfig+0x4f8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a8a      	ldr	r2, [pc, #552]	; (80011c0 <HAL_RCC_OscConfig+0x4f8>)
 8000f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f9e:	f7ff fc25 	bl	80007ec <HAL_GetTick>
 8000fa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa4:	e008      	b.n	8000fb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fa6:	f7ff fc21 	bl	80007ec <HAL_GetTick>
 8000faa:	4602      	mov	r2, r0
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	2b64      	cmp	r3, #100	; 0x64
 8000fb2:	d901      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e0fd      	b.n	80011b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb8:	4b81      	ldr	r3, [pc, #516]	; (80011c0 <HAL_RCC_OscConfig+0x4f8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d0f0      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d106      	bne.n	8000fda <HAL_RCC_OscConfig+0x312>
 8000fcc:	4b7b      	ldr	r3, [pc, #492]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 8000fce:	6a1b      	ldr	r3, [r3, #32]
 8000fd0:	4a7a      	ldr	r2, [pc, #488]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6213      	str	r3, [r2, #32]
 8000fd8:	e02d      	b.n	8001036 <HAL_RCC_OscConfig+0x36e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d10c      	bne.n	8000ffc <HAL_RCC_OscConfig+0x334>
 8000fe2:	4b76      	ldr	r3, [pc, #472]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 8000fe4:	6a1b      	ldr	r3, [r3, #32]
 8000fe6:	4a75      	ldr	r2, [pc, #468]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 8000fe8:	f023 0301 	bic.w	r3, r3, #1
 8000fec:	6213      	str	r3, [r2, #32]
 8000fee:	4b73      	ldr	r3, [pc, #460]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 8000ff0:	6a1b      	ldr	r3, [r3, #32]
 8000ff2:	4a72      	ldr	r2, [pc, #456]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 8000ff4:	f023 0304 	bic.w	r3, r3, #4
 8000ff8:	6213      	str	r3, [r2, #32]
 8000ffa:	e01c      	b.n	8001036 <HAL_RCC_OscConfig+0x36e>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	2b05      	cmp	r3, #5
 8001002:	d10c      	bne.n	800101e <HAL_RCC_OscConfig+0x356>
 8001004:	4b6d      	ldr	r3, [pc, #436]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 8001006:	6a1b      	ldr	r3, [r3, #32]
 8001008:	4a6c      	ldr	r2, [pc, #432]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 800100a:	f043 0304 	orr.w	r3, r3, #4
 800100e:	6213      	str	r3, [r2, #32]
 8001010:	4b6a      	ldr	r3, [pc, #424]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	4a69      	ldr	r2, [pc, #420]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6213      	str	r3, [r2, #32]
 800101c:	e00b      	b.n	8001036 <HAL_RCC_OscConfig+0x36e>
 800101e:	4b67      	ldr	r3, [pc, #412]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 8001020:	6a1b      	ldr	r3, [r3, #32]
 8001022:	4a66      	ldr	r2, [pc, #408]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 8001024:	f023 0301 	bic.w	r3, r3, #1
 8001028:	6213      	str	r3, [r2, #32]
 800102a:	4b64      	ldr	r3, [pc, #400]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 800102c:	6a1b      	ldr	r3, [r3, #32]
 800102e:	4a63      	ldr	r2, [pc, #396]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 8001030:	f023 0304 	bic.w	r3, r3, #4
 8001034:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d015      	beq.n	800106a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800103e:	f7ff fbd5 	bl	80007ec <HAL_GetTick>
 8001042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001044:	e00a      	b.n	800105c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001046:	f7ff fbd1 	bl	80007ec <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	f241 3288 	movw	r2, #5000	; 0x1388
 8001054:	4293      	cmp	r3, r2
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e0ab      	b.n	80011b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800105c:	4b57      	ldr	r3, [pc, #348]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d0ee      	beq.n	8001046 <HAL_RCC_OscConfig+0x37e>
 8001068:	e014      	b.n	8001094 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800106a:	f7ff fbbf 	bl	80007ec <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001070:	e00a      	b.n	8001088 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001072:	f7ff fbbb 	bl	80007ec <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001080:	4293      	cmp	r3, r2
 8001082:	d901      	bls.n	8001088 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	e095      	b.n	80011b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001088:	4b4c      	ldr	r3, [pc, #304]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 800108a:	6a1b      	ldr	r3, [r3, #32]
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1ee      	bne.n	8001072 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001094:	7dfb      	ldrb	r3, [r7, #23]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d105      	bne.n	80010a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800109a:	4b48      	ldr	r3, [pc, #288]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	4a47      	ldr	r2, [pc, #284]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 80010a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 8081 	beq.w	80011b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010b0:	4b42      	ldr	r3, [pc, #264]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 030c 	and.w	r3, r3, #12
 80010b8:	2b08      	cmp	r3, #8
 80010ba:	d061      	beq.n	8001180 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69db      	ldr	r3, [r3, #28]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d146      	bne.n	8001152 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010c4:	4b3f      	ldr	r3, [pc, #252]	; (80011c4 <HAL_RCC_OscConfig+0x4fc>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ca:	f7ff fb8f 	bl	80007ec <HAL_GetTick>
 80010ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d0:	e008      	b.n	80010e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010d2:	f7ff fb8b 	bl	80007ec <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e067      	b.n	80011b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010e4:	4b35      	ldr	r3, [pc, #212]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1f0      	bne.n	80010d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f8:	d108      	bne.n	800110c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010fa:	4b30      	ldr	r3, [pc, #192]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	492d      	ldr	r1, [pc, #180]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 8001108:	4313      	orrs	r3, r2
 800110a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800110c:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a19      	ldr	r1, [r3, #32]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111c:	430b      	orrs	r3, r1
 800111e:	4927      	ldr	r1, [pc, #156]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 8001120:	4313      	orrs	r3, r2
 8001122:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001124:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <HAL_RCC_OscConfig+0x4fc>)
 8001126:	2201      	movs	r2, #1
 8001128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112a:	f7ff fb5f 	bl	80007ec <HAL_GetTick>
 800112e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001130:	e008      	b.n	8001144 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001132:	f7ff fb5b 	bl	80007ec <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d901      	bls.n	8001144 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e037      	b.n	80011b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001144:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0f0      	beq.n	8001132 <HAL_RCC_OscConfig+0x46a>
 8001150:	e02f      	b.n	80011b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001152:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <HAL_RCC_OscConfig+0x4fc>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001158:	f7ff fb48 	bl	80007ec <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001160:	f7ff fb44 	bl	80007ec <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e020      	b.n	80011b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001172:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f0      	bne.n	8001160 <HAL_RCC_OscConfig+0x498>
 800117e:	e018      	b.n	80011b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69db      	ldr	r3, [r3, #28]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d101      	bne.n	800118c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e013      	b.n	80011b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800118c:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <HAL_RCC_OscConfig+0x4f4>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	429a      	cmp	r2, r3
 800119e:	d106      	bne.n	80011ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d001      	beq.n	80011b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e000      	b.n	80011b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40007000 	.word	0x40007000
 80011c4:	42420060 	.word	0x42420060

080011c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e0d0      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011dc:	4b6a      	ldr	r3, [pc, #424]	; (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d910      	bls.n	800120c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ea:	4b67      	ldr	r3, [pc, #412]	; (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f023 0207 	bic.w	r2, r3, #7
 80011f2:	4965      	ldr	r1, [pc, #404]	; (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fa:	4b63      	ldr	r3, [pc, #396]	; (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d001      	beq.n	800120c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e0b8      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d020      	beq.n	800125a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001224:	4b59      	ldr	r3, [pc, #356]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	4a58      	ldr	r2, [pc, #352]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 800122a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800122e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0308 	and.w	r3, r3, #8
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800123c:	4b53      	ldr	r3, [pc, #332]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	4a52      	ldr	r2, [pc, #328]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001242:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001246:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001248:	4b50      	ldr	r3, [pc, #320]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	494d      	ldr	r1, [pc, #308]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001256:	4313      	orrs	r3, r2
 8001258:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d040      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d107      	bne.n	800127e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126e:	4b47      	ldr	r3, [pc, #284]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d115      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e07f      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b02      	cmp	r3, #2
 8001284:	d107      	bne.n	8001296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001286:	4b41      	ldr	r3, [pc, #260]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d109      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e073      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001296:	4b3d      	ldr	r3, [pc, #244]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e06b      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012a6:	4b39      	ldr	r3, [pc, #228]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f023 0203 	bic.w	r2, r3, #3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	4936      	ldr	r1, [pc, #216]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 80012b4:	4313      	orrs	r3, r2
 80012b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012b8:	f7ff fa98 	bl	80007ec <HAL_GetTick>
 80012bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012be:	e00a      	b.n	80012d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c0:	f7ff fa94 	bl	80007ec <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e053      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012d6:	4b2d      	ldr	r3, [pc, #180]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 020c 	and.w	r2, r3, #12
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d1eb      	bne.n	80012c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012e8:	4b27      	ldr	r3, [pc, #156]	; (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d210      	bcs.n	8001318 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f6:	4b24      	ldr	r3, [pc, #144]	; (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f023 0207 	bic.w	r2, r3, #7
 80012fe:	4922      	ldr	r1, [pc, #136]	; (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	4313      	orrs	r3, r2
 8001304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001306:	4b20      	ldr	r3, [pc, #128]	; (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	d001      	beq.n	8001318 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e032      	b.n	800137e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	2b00      	cmp	r3, #0
 8001322:	d008      	beq.n	8001336 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001324:	4b19      	ldr	r3, [pc, #100]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	4916      	ldr	r1, [pc, #88]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001332:	4313      	orrs	r3, r2
 8001334:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d009      	beq.n	8001356 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001342:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	490e      	ldr	r1, [pc, #56]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001352:	4313      	orrs	r3, r2
 8001354:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001356:	f000 f821 	bl	800139c <HAL_RCC_GetSysClockFreq>
 800135a:	4602      	mov	r2, r0
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_RCC_ClockConfig+0x1c4>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	490a      	ldr	r1, [pc, #40]	; (8001390 <HAL_RCC_ClockConfig+0x1c8>)
 8001368:	5ccb      	ldrb	r3, [r1, r3]
 800136a:	fa22 f303 	lsr.w	r3, r2, r3
 800136e:	4a09      	ldr	r2, [pc, #36]	; (8001394 <HAL_RCC_ClockConfig+0x1cc>)
 8001370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_RCC_ClockConfig+0x1d0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f8ea 	bl	8000550 <HAL_InitTick>

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40022000 	.word	0x40022000
 800138c:	40021000 	.word	0x40021000
 8001390:	0800551c 	.word	0x0800551c
 8001394:	20000000 	.word	0x20000000
 8001398:	20000004 	.word	0x20000004

0800139c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800139c:	b490      	push	{r4, r7}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013a2:	4b2a      	ldr	r3, [pc, #168]	; (800144c <HAL_RCC_GetSysClockFreq+0xb0>)
 80013a4:	1d3c      	adds	r4, r7, #4
 80013a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013ac:	f240 2301 	movw	r3, #513	; 0x201
 80013b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
 80013ba:	2300      	movs	r3, #0
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013c6:	4b22      	ldr	r3, [pc, #136]	; (8001450 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f003 030c 	and.w	r3, r3, #12
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	d002      	beq.n	80013dc <HAL_RCC_GetSysClockFreq+0x40>
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d003      	beq.n	80013e2 <HAL_RCC_GetSysClockFreq+0x46>
 80013da:	e02d      	b.n	8001438 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013de:	623b      	str	r3, [r7, #32]
      break;
 80013e0:	e02d      	b.n	800143e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	0c9b      	lsrs	r3, r3, #18
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013ee:	4413      	add	r3, r2
 80013f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d013      	beq.n	8001428 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001400:	4b13      	ldr	r3, [pc, #76]	; (8001450 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	0c5b      	lsrs	r3, r3, #17
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800140e:	4413      	add	r3, r2
 8001410:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001414:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	4a0e      	ldr	r2, [pc, #56]	; (8001454 <HAL_RCC_GetSysClockFreq+0xb8>)
 800141a:	fb02 f203 	mul.w	r2, r2, r3
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	fbb2 f3f3 	udiv	r3, r2, r3
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
 8001426:	e004      	b.n	8001432 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <HAL_RCC_GetSysClockFreq+0xbc>)
 800142c:	fb02 f303 	mul.w	r3, r2, r3
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	623b      	str	r3, [r7, #32]
      break;
 8001436:	e002      	b.n	800143e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_RCC_GetSysClockFreq+0xb8>)
 800143a:	623b      	str	r3, [r7, #32]
      break;
 800143c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800143e:	6a3b      	ldr	r3, [r7, #32]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3728      	adds	r7, #40	; 0x28
 8001444:	46bd      	mov	sp, r7
 8001446:	bc90      	pop	{r4, r7}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	08005504 	.word	0x08005504
 8001450:	40021000 	.word	0x40021000
 8001454:	007a1200 	.word	0x007a1200
 8001458:	003d0900 	.word	0x003d0900

0800145c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001460:	4b02      	ldr	r3, [pc, #8]	; (800146c <HAL_RCC_GetHCLKFreq+0x10>)
 8001462:	681b      	ldr	r3, [r3, #0]
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	20000000 	.word	0x20000000

08001470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001474:	f7ff fff2 	bl	800145c <HAL_RCC_GetHCLKFreq>
 8001478:	4602      	mov	r2, r0
 800147a:	4b05      	ldr	r3, [pc, #20]	; (8001490 <HAL_RCC_GetPCLK1Freq+0x20>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	0a1b      	lsrs	r3, r3, #8
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	4903      	ldr	r1, [pc, #12]	; (8001494 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001486:	5ccb      	ldrb	r3, [r1, r3]
 8001488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800148c:	4618      	mov	r0, r3
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40021000 	.word	0x40021000
 8001494:	0800552c 	.word	0x0800552c

08001498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800149c:	f7ff ffde 	bl	800145c <HAL_RCC_GetHCLKFreq>
 80014a0:	4602      	mov	r2, r0
 80014a2:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	0adb      	lsrs	r3, r3, #11
 80014a8:	f003 0307 	and.w	r3, r3, #7
 80014ac:	4903      	ldr	r1, [pc, #12]	; (80014bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80014ae:	5ccb      	ldrb	r3, [r1, r3]
 80014b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40021000 	.word	0x40021000
 80014bc:	0800552c 	.word	0x0800552c

080014c0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	220f      	movs	r2, #15
 80014ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <HAL_RCC_GetClockConfig+0x58>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 0203 	and.w	r2, r3, #3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014dc:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <HAL_RCC_GetClockConfig+0x58>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_RCC_GetClockConfig+0x58>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <HAL_RCC_GetClockConfig+0x58>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	08db      	lsrs	r3, r3, #3
 80014fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_RCC_GetClockConfig+0x5c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0207 	and.w	r2, r3, #7
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	40021000 	.word	0x40021000
 800151c:	40022000 	.word	0x40022000

08001520 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001528:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <RCC_Delay+0x34>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <RCC_Delay+0x38>)
 800152e:	fba2 2303 	umull	r2, r3, r2, r3
 8001532:	0a5b      	lsrs	r3, r3, #9
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	fb02 f303 	mul.w	r3, r2, r3
 800153a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800153c:	bf00      	nop
  }
  while (Delay --);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	1e5a      	subs	r2, r3, #1
 8001542:	60fa      	str	r2, [r7, #12]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1f9      	bne.n	800153c <RCC_Delay+0x1c>
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	20000000 	.word	0x20000000
 8001558:	10624dd3 	.word	0x10624dd3

0800155c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e041      	b.n	80015f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d106      	bne.n	8001588 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 f839 	bl	80015fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2202      	movs	r2, #2
 800158c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3304      	adds	r3, #4
 8001598:	4619      	mov	r1, r3
 800159a:	4610      	mov	r0, r2
 800159c:	f000 f9b4 	bl	8001908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b01      	cmp	r3, #1
 800161e:	d001      	beq.n	8001624 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e03a      	b.n	800169a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2202      	movs	r2, #2
 8001628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 0201 	orr.w	r2, r2, #1
 800163a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a18      	ldr	r2, [pc, #96]	; (80016a4 <HAL_TIM_Base_Start_IT+0x98>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d00e      	beq.n	8001664 <HAL_TIM_Base_Start_IT+0x58>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800164e:	d009      	beq.n	8001664 <HAL_TIM_Base_Start_IT+0x58>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d004      	beq.n	8001664 <HAL_TIM_Base_Start_IT+0x58>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a13      	ldr	r2, [pc, #76]	; (80016ac <HAL_TIM_Base_Start_IT+0xa0>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d111      	bne.n	8001688 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b06      	cmp	r3, #6
 8001674:	d010      	beq.n	8001698 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f042 0201 	orr.w	r2, r2, #1
 8001684:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001686:	e007      	b.n	8001698 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 0201 	orr.w	r2, r2, #1
 8001696:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	40012c00 	.word	0x40012c00
 80016a8:	40000400 	.word	0x40000400
 80016ac:	40000800 	.word	0x40000800

080016b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d122      	bne.n	800170c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d11b      	bne.n	800170c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f06f 0202 	mvn.w	r2, #2
 80016dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 f8ed 	bl	80018d2 <HAL_TIM_IC_CaptureCallback>
 80016f8:	e005      	b.n	8001706 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f8e0 	bl	80018c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 f8ef 	bl	80018e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	2b04      	cmp	r3, #4
 8001718:	d122      	bne.n	8001760 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b04      	cmp	r3, #4
 8001726:	d11b      	bne.n	8001760 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f06f 0204 	mvn.w	r2, #4
 8001730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2202      	movs	r2, #2
 8001736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 f8c3 	bl	80018d2 <HAL_TIM_IC_CaptureCallback>
 800174c:	e005      	b.n	800175a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f8b6 	bl	80018c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 f8c5 	bl	80018e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b08      	cmp	r3, #8
 800176c:	d122      	bne.n	80017b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b08      	cmp	r3, #8
 800177a:	d11b      	bne.n	80017b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f06f 0208 	mvn.w	r2, #8
 8001784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2204      	movs	r2, #4
 800178a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 f899 	bl	80018d2 <HAL_TIM_IC_CaptureCallback>
 80017a0:	e005      	b.n	80017ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f88c 	bl	80018c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 f89b 	bl	80018e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	f003 0310 	and.w	r3, r3, #16
 80017be:	2b10      	cmp	r3, #16
 80017c0:	d122      	bne.n	8001808 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	2b10      	cmp	r3, #16
 80017ce:	d11b      	bne.n	8001808 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f06f 0210 	mvn.w	r2, #16
 80017d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2208      	movs	r2, #8
 80017de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f86f 	bl	80018d2 <HAL_TIM_IC_CaptureCallback>
 80017f4:	e005      	b.n	8001802 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 f862 	bl	80018c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 f871 	bl	80018e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b01      	cmp	r3, #1
 8001814:	d10e      	bne.n	8001834 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b01      	cmp	r3, #1
 8001822:	d107      	bne.n	8001834 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f06f 0201 	mvn.w	r2, #1
 800182c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7fe fdf2 	bl	8000418 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183e:	2b80      	cmp	r3, #128	; 0x80
 8001840:	d10e      	bne.n	8001860 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184c:	2b80      	cmp	r3, #128	; 0x80
 800184e:	d107      	bne.n	8001860 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f8bf 	bl	80019de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800186a:	2b40      	cmp	r3, #64	; 0x40
 800186c:	d10e      	bne.n	800188c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001878:	2b40      	cmp	r3, #64	; 0x40
 800187a:	d107      	bne.n	800188c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f835 	bl	80018f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	f003 0320 	and.w	r3, r3, #32
 8001896:	2b20      	cmp	r3, #32
 8001898:	d10e      	bne.n	80018b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	f003 0320 	and.w	r3, r3, #32
 80018a4:	2b20      	cmp	r3, #32
 80018a6:	d107      	bne.n	80018b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f06f 0220 	mvn.w	r2, #32
 80018b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f88a 	bl	80019cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr

080018d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr

080018f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr

08001908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a29      	ldr	r2, [pc, #164]	; (80019c0 <TIM_Base_SetConfig+0xb8>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d00b      	beq.n	8001938 <TIM_Base_SetConfig+0x30>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001926:	d007      	beq.n	8001938 <TIM_Base_SetConfig+0x30>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a26      	ldr	r2, [pc, #152]	; (80019c4 <TIM_Base_SetConfig+0xbc>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d003      	beq.n	8001938 <TIM_Base_SetConfig+0x30>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a25      	ldr	r2, [pc, #148]	; (80019c8 <TIM_Base_SetConfig+0xc0>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d108      	bne.n	800194a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800193e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	4313      	orrs	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a1c      	ldr	r2, [pc, #112]	; (80019c0 <TIM_Base_SetConfig+0xb8>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d00b      	beq.n	800196a <TIM_Base_SetConfig+0x62>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001958:	d007      	beq.n	800196a <TIM_Base_SetConfig+0x62>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a19      	ldr	r2, [pc, #100]	; (80019c4 <TIM_Base_SetConfig+0xbc>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d003      	beq.n	800196a <TIM_Base_SetConfig+0x62>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a18      	ldr	r2, [pc, #96]	; (80019c8 <TIM_Base_SetConfig+0xc0>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d108      	bne.n	800197c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	4313      	orrs	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	4313      	orrs	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a07      	ldr	r2, [pc, #28]	; (80019c0 <TIM_Base_SetConfig+0xb8>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d103      	bne.n	80019b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	691a      	ldr	r2, [r3, #16]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	615a      	str	r2, [r3, #20]
}
 80019b6:	bf00      	nop
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	40012c00 	.word	0x40012c00
 80019c4:	40000400 	.word	0x40000400
 80019c8:	40000800 	.word	0x40000800

080019cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr

080019de <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e03f      	b.n	8001a82 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d106      	bne.n	8001a1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7fe fd4e 	bl	80004b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2224      	movs	r2, #36	; 0x24
 8001a20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f905 	bl	8001c44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	691a      	ldr	r2, [r3, #16]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	695a      	ldr	r2, [r3, #20]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2220      	movs	r2, #32
 8001a74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b08a      	sub	sp, #40	; 0x28
 8001a8e:	af02      	add	r7, sp, #8
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	603b      	str	r3, [r7, #0]
 8001a96:	4613      	mov	r3, r2
 8001a98:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b20      	cmp	r3, #32
 8001aa8:	d17c      	bne.n	8001ba4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d002      	beq.n	8001ab6 <HAL_UART_Transmit+0x2c>
 8001ab0:	88fb      	ldrh	r3, [r7, #6]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e075      	b.n	8001ba6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_UART_Transmit+0x3e>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e06e      	b.n	8001ba6 <HAL_UART_Transmit+0x11c>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2221      	movs	r2, #33	; 0x21
 8001ada:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001ade:	f7fe fe85 	bl	80007ec <HAL_GetTick>
 8001ae2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	88fa      	ldrh	r2, [r7, #6]
 8001ae8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	88fa      	ldrh	r2, [r7, #6]
 8001aee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001af8:	d108      	bne.n	8001b0c <HAL_UART_Transmit+0x82>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d104      	bne.n	8001b0c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	e003      	b.n	8001b14 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001b1c:	e02a      	b.n	8001b74 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	2200      	movs	r2, #0
 8001b26:	2180      	movs	r1, #128	; 0x80
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 f840 	bl	8001bae <UART_WaitOnFlagUntilTimeout>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e036      	b.n	8001ba6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10b      	bne.n	8001b56 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	3302      	adds	r3, #2
 8001b52:	61bb      	str	r3, [r7, #24]
 8001b54:	e007      	b.n	8001b66 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	781a      	ldrb	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	3301      	adds	r3, #1
 8001b64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1cf      	bne.n	8001b1e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2200      	movs	r2, #0
 8001b86:	2140      	movs	r1, #64	; 0x40
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 f810 	bl	8001bae <UART_WaitOnFlagUntilTimeout>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e006      	b.n	8001ba6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e000      	b.n	8001ba6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ba4:	2302      	movs	r3, #2
  }
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3720      	adds	r7, #32
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b084      	sub	sp, #16
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	603b      	str	r3, [r7, #0]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bbe:	e02c      	b.n	8001c1a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc6:	d028      	beq.n	8001c1a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d007      	beq.n	8001bde <UART_WaitOnFlagUntilTimeout+0x30>
 8001bce:	f7fe fe0d 	bl	80007ec <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d21d      	bcs.n	8001c1a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001bec:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	695a      	ldr	r2, [r3, #20]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 0201 	bic.w	r2, r2, #1
 8001bfc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2220      	movs	r2, #32
 8001c02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e00f      	b.n	8001c3a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	4013      	ands	r3, r2
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	bf0c      	ite	eq
 8001c2a:	2301      	moveq	r3, #1
 8001c2c:	2300      	movne	r3, #0
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	461a      	mov	r2, r3
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d0c3      	beq.n	8001bc0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001c7e:	f023 030c 	bic.w	r3, r3, #12
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6812      	ldr	r2, [r2, #0]
 8001c86:	68b9      	ldr	r1, [r7, #8]
 8001c88:	430b      	orrs	r3, r1
 8001c8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699a      	ldr	r2, [r3, #24]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a2c      	ldr	r2, [pc, #176]	; (8001d58 <UART_SetConfig+0x114>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d103      	bne.n	8001cb4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001cac:	f7ff fbf4 	bl	8001498 <HAL_RCC_GetPCLK2Freq>
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	e002      	b.n	8001cba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001cb4:	f7ff fbdc 	bl	8001470 <HAL_RCC_GetPCLK1Freq>
 8001cb8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009a      	lsls	r2, r3, #2
 8001cc4:	441a      	add	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd0:	4a22      	ldr	r2, [pc, #136]	; (8001d5c <UART_SetConfig+0x118>)
 8001cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd6:	095b      	lsrs	r3, r3, #5
 8001cd8:	0119      	lsls	r1, r3, #4
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	009a      	lsls	r2, r3, #2
 8001ce4:	441a      	add	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <UART_SetConfig+0x118>)
 8001cf2:	fba3 0302 	umull	r0, r3, r3, r2
 8001cf6:	095b      	lsrs	r3, r3, #5
 8001cf8:	2064      	movs	r0, #100	; 0x64
 8001cfa:	fb00 f303 	mul.w	r3, r0, r3
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	011b      	lsls	r3, r3, #4
 8001d02:	3332      	adds	r3, #50	; 0x32
 8001d04:	4a15      	ldr	r2, [pc, #84]	; (8001d5c <UART_SetConfig+0x118>)
 8001d06:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0a:	095b      	lsrs	r3, r3, #5
 8001d0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d10:	4419      	add	r1, r3
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	009a      	lsls	r2, r3, #2
 8001d1c:	441a      	add	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <UART_SetConfig+0x118>)
 8001d2a:	fba3 0302 	umull	r0, r3, r3, r2
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	2064      	movs	r0, #100	; 0x64
 8001d32:	fb00 f303 	mul.w	r3, r0, r3
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	3332      	adds	r3, #50	; 0x32
 8001d3c:	4a07      	ldr	r2, [pc, #28]	; (8001d5c <UART_SetConfig+0x118>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	095b      	lsrs	r3, r3, #5
 8001d44:	f003 020f 	and.w	r2, r3, #15
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	440a      	add	r2, r1
 8001d4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001d50:	bf00      	nop
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40013800 	.word	0x40013800
 8001d5c:	51eb851f 	.word	0x51eb851f

08001d60 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001d6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d72:	2b84      	cmp	r3, #132	; 0x84
 8001d74:	d005      	beq.n	8001d82 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001d76:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3303      	adds	r3, #3
 8001d80:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001d82:	68fb      	ldr	r3, [r7, #12]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr

08001d8e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d94:	f3ef 8305 	mrs	r3, IPSR
 8001d98:	607b      	str	r3, [r7, #4]
  return(result);
 8001d9a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	bf14      	ite	ne
 8001da0:	2301      	movne	r3, #1
 8001da2:	2300      	moveq	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001db4:	f001 f97a 	bl	80030ac <vTaskStartScheduler>
  
  return osOK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001dbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc0:	b089      	sub	sp, #36	; 0x24
 8001dc2:	af04      	add	r7, sp, #16
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d020      	beq.n	8001e12 <osThreadCreate+0x54>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d01c      	beq.n	8001e12 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685c      	ldr	r4, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681d      	ldr	r5, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691e      	ldr	r6, [r3, #16]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ffb8 	bl	8001d60 <makeFreeRtosPriority>
 8001df0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001dfa:	9202      	str	r2, [sp, #8]
 8001dfc:	9301      	str	r3, [sp, #4]
 8001dfe:	9100      	str	r1, [sp, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	4632      	mov	r2, r6
 8001e04:	4629      	mov	r1, r5
 8001e06:	4620      	mov	r0, r4
 8001e08:	f000 ff91 	bl	8002d2e <xTaskCreateStatic>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	e01c      	b.n	8001e4c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685c      	ldr	r4, [r3, #4]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e1e:	b29e      	uxth	r6, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ff9a 	bl	8001d60 <makeFreeRtosPriority>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	f107 030c 	add.w	r3, r7, #12
 8001e32:	9301      	str	r3, [sp, #4]
 8001e34:	9200      	str	r2, [sp, #0]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	4632      	mov	r2, r6
 8001e3a:	4629      	mov	r1, r5
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	f000 ffd2 	bl	8002de6 <xTaskCreate>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d001      	beq.n	8001e4c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	e000      	b.n	8001e4e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e56 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <osDelay+0x16>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	e000      	b.n	8001e6e <osDelay+0x18>
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f001 f8e8 	bl	8003044 <vTaskDelay>
  
  return osOK;
 8001e74:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b086      	sub	sp, #24
 8001e82:	af02      	add	r7, sp, #8
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d016      	beq.n	8001ebe <osSemaphoreCreate+0x40>
    if (count == 1) {
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d10a      	bne.n	8001eac <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	9200      	str	r2, [sp, #0]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	2001      	movs	r0, #1
 8001ea4:	f000 f9c6 	bl	8002234 <xQueueGenericCreateStatic>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	e023      	b.n	8001ef4 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8001eac:	6838      	ldr	r0, [r7, #0]
 8001eae:	6839      	ldr	r1, [r7, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	f000 fa91 	bl	80023dc <xQueueCreateCountingSemaphoreStatic>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	e01a      	b.n	8001ef4 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d110      	bne.n	8001ee6 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	2001      	movs	r0, #1
 8001eca:	f000 fa2a 	bl	8002322 <xQueueGenericCreate>
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d005      	beq.n	8001ee2 <osSemaphoreCreate+0x64>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2100      	movs	r1, #0
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 fae7 	bl	80024b0 <xQueueGenericSend>
      return sema;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	e006      	b.n	8001ef4 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	4611      	mov	r1, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f000 faac 	bl	800244a <xQueueCreateCountingSemaphore>
 8001ef2:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	e03a      	b.n	8001f8a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1e:	d103      	bne.n	8001f28 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8001f20:	f04f 33ff 	mov.w	r3, #4294967295
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	e009      	b.n	8001f3c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d006      	beq.n	8001f3c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <osSemaphoreWait+0x40>
      ticks = 1;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8001f3c:	f7ff ff27 	bl	8001d8e <inHandlerMode>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d017      	beq.n	8001f76 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001f46:	f107 0308 	add.w	r3, r7, #8
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 fd46 	bl	80029e0 <xQueueReceiveFromISR>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d001      	beq.n	8001f5e <osSemaphoreWait+0x62>
      return osErrorOS;
 8001f5a:	23ff      	movs	r3, #255	; 0xff
 8001f5c:	e015      	b.n	8001f8a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d011      	beq.n	8001f88 <osSemaphoreWait+0x8c>
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <osSemaphoreWait+0x98>)
 8001f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	f3bf 8f4f 	dsb	sy
 8001f70:	f3bf 8f6f 	isb	sy
 8001f74:	e008      	b.n	8001f88 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8001f76:	68f9      	ldr	r1, [r7, #12]
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 fc25 	bl	80027c8 <xQueueSemaphoreTake>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d001      	beq.n	8001f88 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8001f84:	23ff      	movs	r3, #255	; 0xff
 8001f86:	e000      	b.n	8001f8a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	e000ed04 	.word	0xe000ed04

08001f98 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8001fa8:	f7ff fef1 	bl	8001d8e <inHandlerMode>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d016      	beq.n	8001fe0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001fb2:	f107 0308 	add.w	r3, r7, #8
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 fb77 	bl	80026ac <xQueueGiveFromISR>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d001      	beq.n	8001fc8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8001fc4:	23ff      	movs	r3, #255	; 0xff
 8001fc6:	e017      	b.n	8001ff8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d013      	beq.n	8001ff6 <osSemaphoreRelease+0x5e>
 8001fce:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <osSemaphoreRelease+0x68>)
 8001fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	f3bf 8f4f 	dsb	sy
 8001fda:	f3bf 8f6f 	isb	sy
 8001fde:	e00a      	b.n	8001ff6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 fa62 	bl	80024b0 <xQueueGenericSend>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d001      	beq.n	8001ff6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8001ff2:	23ff      	movs	r3, #255	; 0xff
 8001ff4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	e000ed04 	.word	0xe000ed04

08002004 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f103 0208 	add.w	r2, r3, #8
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f04f 32ff 	mov.w	r2, #4294967295
 800201c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f103 0208 	add.w	r2, r3, #8
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f103 0208 	add.w	r2, r3, #8
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr

08002042 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800205a:	b480      	push	{r7}
 800205c:	b085      	sub	sp, #20
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	601a      	str	r2, [r3, #0]
}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr

080020a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b6:	d103      	bne.n	80020c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	e00c      	b.n	80020da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3308      	adds	r3, #8
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	e002      	b.n	80020ce <vListInsert+0x2e>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d2f6      	bcs.n	80020c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	601a      	str	r2, [r3, #0]
}
 8002106:	bf00      	nop
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6892      	ldr	r2, [r2, #8]
 8002126:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6852      	ldr	r2, [r2, #4]
 8002130:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	429a      	cmp	r2, r3
 800213a:	d103      	bne.n	8002144 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	1e5a      	subs	r2, r3, #1
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
	...

08002164 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10a      	bne.n	800218e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800217c:	f383 8811 	msr	BASEPRI, r3
 8002180:	f3bf 8f6f 	isb	sy
 8002184:	f3bf 8f4f 	dsb	sy
 8002188:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800218a:	bf00      	nop
 800218c:	e7fe      	b.n	800218c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800218e:	f001 fec5 	bl	8003f1c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219a:	68f9      	ldr	r1, [r7, #12]
 800219c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800219e:	fb01 f303 	mul.w	r3, r1, r3
 80021a2:	441a      	add	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021be:	3b01      	subs	r3, #1
 80021c0:	68f9      	ldr	r1, [r7, #12]
 80021c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	441a      	add	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	22ff      	movs	r2, #255	; 0xff
 80021d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	22ff      	movs	r2, #255	; 0xff
 80021da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d114      	bne.n	800220e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01a      	beq.n	8002222 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	3310      	adds	r3, #16
 80021f0:	4618      	mov	r0, r3
 80021f2:	f001 f9a1 	bl	8003538 <xTaskRemoveFromEventList>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d012      	beq.n	8002222 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <xQueueGenericReset+0xcc>)
 80021fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	f3bf 8f4f 	dsb	sy
 8002208:	f3bf 8f6f 	isb	sy
 800220c:	e009      	b.n	8002222 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	3310      	adds	r3, #16
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fef6 	bl	8002004 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	3324      	adds	r3, #36	; 0x24
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fef1 	bl	8002004 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002222:	f001 feab 	bl	8003f7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002226:	2301      	movs	r3, #1
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	e000ed04 	.word	0xe000ed04

08002234 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08e      	sub	sp, #56	; 0x38
 8002238:	af02      	add	r7, sp, #8
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
 8002240:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10a      	bne.n	800225e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800224c:	f383 8811 	msr	BASEPRI, r3
 8002250:	f3bf 8f6f 	isb	sy
 8002254:	f3bf 8f4f 	dsb	sy
 8002258:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800225a:	bf00      	nop
 800225c:	e7fe      	b.n	800225c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10a      	bne.n	800227a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002268:	f383 8811 	msr	BASEPRI, r3
 800226c:	f3bf 8f6f 	isb	sy
 8002270:	f3bf 8f4f 	dsb	sy
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002276:	bf00      	nop
 8002278:	e7fe      	b.n	8002278 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d002      	beq.n	8002286 <xQueueGenericCreateStatic+0x52>
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <xQueueGenericCreateStatic+0x56>
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <xQueueGenericCreateStatic+0x58>
 800228a:	2300      	movs	r3, #0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10a      	bne.n	80022a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002294:	f383 8811 	msr	BASEPRI, r3
 8002298:	f3bf 8f6f 	isb	sy
 800229c:	f3bf 8f4f 	dsb	sy
 80022a0:	623b      	str	r3, [r7, #32]
}
 80022a2:	bf00      	nop
 80022a4:	e7fe      	b.n	80022a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d102      	bne.n	80022b2 <xQueueGenericCreateStatic+0x7e>
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <xQueueGenericCreateStatic+0x82>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <xQueueGenericCreateStatic+0x84>
 80022b6:	2300      	movs	r3, #0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10a      	bne.n	80022d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80022bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c0:	f383 8811 	msr	BASEPRI, r3
 80022c4:	f3bf 8f6f 	isb	sy
 80022c8:	f3bf 8f4f 	dsb	sy
 80022cc:	61fb      	str	r3, [r7, #28]
}
 80022ce:	bf00      	nop
 80022d0:	e7fe      	b.n	80022d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80022d2:	2348      	movs	r3, #72	; 0x48
 80022d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	2b48      	cmp	r3, #72	; 0x48
 80022da:	d00a      	beq.n	80022f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80022dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e0:	f383 8811 	msr	BASEPRI, r3
 80022e4:	f3bf 8f6f 	isb	sy
 80022e8:	f3bf 8f4f 	dsb	sy
 80022ec:	61bb      	str	r3, [r7, #24]
}
 80022ee:	bf00      	nop
 80022f0:	e7fe      	b.n	80022f0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80022f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00d      	beq.n	8002318 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80022fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002304:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	4613      	mov	r3, r2
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f843 	bl	800239e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800231a:	4618      	mov	r0, r3
 800231c:	3730      	adds	r7, #48	; 0x30
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002322:	b580      	push	{r7, lr}
 8002324:	b08a      	sub	sp, #40	; 0x28
 8002326:	af02      	add	r7, sp, #8
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	4613      	mov	r3, r2
 800232e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10a      	bne.n	800234c <xQueueGenericCreate+0x2a>
	__asm volatile
 8002336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800233a:	f383 8811 	msr	BASEPRI, r3
 800233e:	f3bf 8f6f 	isb	sy
 8002342:	f3bf 8f4f 	dsb	sy
 8002346:	613b      	str	r3, [r7, #16]
}
 8002348:	bf00      	nop
 800234a:	e7fe      	b.n	800234a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d102      	bne.n	8002358 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
 8002356:	e004      	b.n	8002362 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	fb02 f303 	mul.w	r3, r2, r3
 8002360:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3348      	adds	r3, #72	; 0x48
 8002366:	4618      	mov	r0, r3
 8002368:	f001 fed8 	bl	800411c <pvPortMalloc>
 800236c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00f      	beq.n	8002394 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	3348      	adds	r3, #72	; 0x48
 8002378:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002382:	79fa      	ldrb	r2, [r7, #7]
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	4613      	mov	r3, r2
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	68b9      	ldr	r1, [r7, #8]
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 f805 	bl	800239e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002394:	69bb      	ldr	r3, [r7, #24]
	}
 8002396:	4618      	mov	r0, r3
 8002398:	3720      	adds	r7, #32
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
 80023aa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d103      	bne.n	80023ba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	e002      	b.n	80023c0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023cc:	2101      	movs	r1, #1
 80023ce:	69b8      	ldr	r0, [r7, #24]
 80023d0:	f7ff fec8 	bl	8002164 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80023d4:	bf00      	nop
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10a      	bne.n	8002404 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80023ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f2:	f383 8811 	msr	BASEPRI, r3
 80023f6:	f3bf 8f6f 	isb	sy
 80023fa:	f3bf 8f4f 	dsb	sy
 80023fe:	61bb      	str	r3, [r7, #24]
}
 8002400:	bf00      	nop
 8002402:	e7fe      	b.n	8002402 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	429a      	cmp	r2, r3
 800240a:	d90a      	bls.n	8002422 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800240c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002410:	f383 8811 	msr	BASEPRI, r3
 8002414:	f3bf 8f6f 	isb	sy
 8002418:	f3bf 8f4f 	dsb	sy
 800241c:	617b      	str	r3, [r7, #20]
}
 800241e:	bf00      	nop
 8002420:	e7fe      	b.n	8002420 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002422:	2302      	movs	r3, #2
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	2100      	movs	r1, #0
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f7ff ff01 	bl	8002234 <xQueueGenericCreateStatic>
 8002432:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002440:	69fb      	ldr	r3, [r7, #28]
	}
 8002442:	4618      	mov	r0, r3
 8002444:	3720      	adds	r7, #32
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800244a:	b580      	push	{r7, lr}
 800244c:	b086      	sub	sp, #24
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10a      	bne.n	8002470 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800245a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800245e:	f383 8811 	msr	BASEPRI, r3
 8002462:	f3bf 8f6f 	isb	sy
 8002466:	f3bf 8f4f 	dsb	sy
 800246a:	613b      	str	r3, [r7, #16]
}
 800246c:	bf00      	nop
 800246e:	e7fe      	b.n	800246e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	429a      	cmp	r2, r3
 8002476:	d90a      	bls.n	800248e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8002478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247c:	f383 8811 	msr	BASEPRI, r3
 8002480:	f3bf 8f6f 	isb	sy
 8002484:	f3bf 8f4f 	dsb	sy
 8002488:	60fb      	str	r3, [r7, #12]
}
 800248a:	bf00      	nop
 800248c:	e7fe      	b.n	800248c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800248e:	2202      	movs	r2, #2
 8002490:	2100      	movs	r1, #0
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff ff45 	bl	8002322 <xQueueGenericCreate>
 8002498:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d002      	beq.n	80024a6 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80024a6:	697b      	ldr	r3, [r7, #20]
	}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08e      	sub	sp, #56	; 0x38
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024be:	2300      	movs	r3, #0
 80024c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80024c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10a      	bne.n	80024e2 <xQueueGenericSend+0x32>
	__asm volatile
 80024cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d0:	f383 8811 	msr	BASEPRI, r3
 80024d4:	f3bf 8f6f 	isb	sy
 80024d8:	f3bf 8f4f 	dsb	sy
 80024dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80024de:	bf00      	nop
 80024e0:	e7fe      	b.n	80024e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d103      	bne.n	80024f0 <xQueueGenericSend+0x40>
 80024e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <xQueueGenericSend+0x44>
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <xQueueGenericSend+0x46>
 80024f4:	2300      	movs	r3, #0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10a      	bne.n	8002510 <xQueueGenericSend+0x60>
	__asm volatile
 80024fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024fe:	f383 8811 	msr	BASEPRI, r3
 8002502:	f3bf 8f6f 	isb	sy
 8002506:	f3bf 8f4f 	dsb	sy
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800250c:	bf00      	nop
 800250e:	e7fe      	b.n	800250e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d103      	bne.n	800251e <xQueueGenericSend+0x6e>
 8002516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <xQueueGenericSend+0x72>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <xQueueGenericSend+0x74>
 8002522:	2300      	movs	r3, #0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10a      	bne.n	800253e <xQueueGenericSend+0x8e>
	__asm volatile
 8002528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252c:	f383 8811 	msr	BASEPRI, r3
 8002530:	f3bf 8f6f 	isb	sy
 8002534:	f3bf 8f4f 	dsb	sy
 8002538:	623b      	str	r3, [r7, #32]
}
 800253a:	bf00      	nop
 800253c:	e7fe      	b.n	800253c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800253e:	f001 f9bb 	bl	80038b8 <xTaskGetSchedulerState>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d102      	bne.n	800254e <xQueueGenericSend+0x9e>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <xQueueGenericSend+0xa2>
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <xQueueGenericSend+0xa4>
 8002552:	2300      	movs	r3, #0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10a      	bne.n	800256e <xQueueGenericSend+0xbe>
	__asm volatile
 8002558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255c:	f383 8811 	msr	BASEPRI, r3
 8002560:	f3bf 8f6f 	isb	sy
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	61fb      	str	r3, [r7, #28]
}
 800256a:	bf00      	nop
 800256c:	e7fe      	b.n	800256c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800256e:	f001 fcd5 	bl	8003f1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257a:	429a      	cmp	r2, r3
 800257c:	d302      	bcc.n	8002584 <xQueueGenericSend+0xd4>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d129      	bne.n	80025d8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	68b9      	ldr	r1, [r7, #8]
 8002588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800258a:	f000 fac0 	bl	8002b0e <prvCopyDataToQueue>
 800258e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	2b00      	cmp	r3, #0
 8002596:	d010      	beq.n	80025ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259a:	3324      	adds	r3, #36	; 0x24
 800259c:	4618      	mov	r0, r3
 800259e:	f000 ffcb 	bl	8003538 <xTaskRemoveFromEventList>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d013      	beq.n	80025d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80025a8:	4b3f      	ldr	r3, [pc, #252]	; (80026a8 <xQueueGenericSend+0x1f8>)
 80025aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	f3bf 8f4f 	dsb	sy
 80025b4:	f3bf 8f6f 	isb	sy
 80025b8:	e00a      	b.n	80025d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80025ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d007      	beq.n	80025d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80025c0:	4b39      	ldr	r3, [pc, #228]	; (80026a8 <xQueueGenericSend+0x1f8>)
 80025c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	f3bf 8f4f 	dsb	sy
 80025cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80025d0:	f001 fcd4 	bl	8003f7c <vPortExitCritical>
				return pdPASS;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e063      	b.n	80026a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d103      	bne.n	80025e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80025de:	f001 fccd 	bl	8003f7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	e05c      	b.n	80026a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d106      	bne.n	80025fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	4618      	mov	r0, r3
 80025f2:	f001 f803 	bl	80035fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025f6:	2301      	movs	r3, #1
 80025f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80025fa:	f001 fcbf 	bl	8003f7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80025fe:	f000 fdb5 	bl	800316c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002602:	f001 fc8b 	bl	8003f1c <vPortEnterCritical>
 8002606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800260c:	b25b      	sxtb	r3, r3
 800260e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002612:	d103      	bne.n	800261c <xQueueGenericSend+0x16c>
 8002614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800261c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002622:	b25b      	sxtb	r3, r3
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d103      	bne.n	8002632 <xQueueGenericSend+0x182>
 800262a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002632:	f001 fca3 	bl	8003f7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002636:	1d3a      	adds	r2, r7, #4
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	4611      	mov	r1, r2
 800263e:	4618      	mov	r0, r3
 8002640:	f000 fff2 	bl	8003628 <xTaskCheckForTimeOut>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d124      	bne.n	8002694 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800264a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800264c:	f000 fb57 	bl	8002cfe <prvIsQueueFull>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d018      	beq.n	8002688 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002658:	3310      	adds	r3, #16
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f000 ff46 	bl	80034f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002666:	f000 fae2 	bl	8002c2e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800266a:	f000 fd8d 	bl	8003188 <xTaskResumeAll>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	f47f af7c 	bne.w	800256e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <xQueueGenericSend+0x1f8>)
 8002678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	f3bf 8f4f 	dsb	sy
 8002682:	f3bf 8f6f 	isb	sy
 8002686:	e772      	b.n	800256e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800268a:	f000 fad0 	bl	8002c2e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800268e:	f000 fd7b 	bl	8003188 <xTaskResumeAll>
 8002692:	e76c      	b.n	800256e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002696:	f000 faca 	bl	8002c2e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800269a:	f000 fd75 	bl	8003188 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800269e:	2300      	movs	r3, #0
		}
	}
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3738      	adds	r7, #56	; 0x38
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	e000ed04 	.word	0xe000ed04

080026ac <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08e      	sub	sp, #56	; 0x38
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80026ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10a      	bne.n	80026d6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80026c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c4:	f383 8811 	msr	BASEPRI, r3
 80026c8:	f3bf 8f6f 	isb	sy
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	623b      	str	r3, [r7, #32]
}
 80026d2:	bf00      	nop
 80026d4:	e7fe      	b.n	80026d4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80026d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <xQueueGiveFromISR+0x48>
	__asm volatile
 80026de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e2:	f383 8811 	msr	BASEPRI, r3
 80026e6:	f3bf 8f6f 	isb	sy
 80026ea:	f3bf 8f4f 	dsb	sy
 80026ee:	61fb      	str	r3, [r7, #28]
}
 80026f0:	bf00      	nop
 80026f2:	e7fe      	b.n	80026f2 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80026f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d103      	bne.n	8002704 <xQueueGiveFromISR+0x58>
 80026fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <xQueueGiveFromISR+0x5c>
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <xQueueGiveFromISR+0x5e>
 8002708:	2300      	movs	r3, #0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10a      	bne.n	8002724 <xQueueGiveFromISR+0x78>
	__asm volatile
 800270e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002712:	f383 8811 	msr	BASEPRI, r3
 8002716:	f3bf 8f6f 	isb	sy
 800271a:	f3bf 8f4f 	dsb	sy
 800271e:	61bb      	str	r3, [r7, #24]
}
 8002720:	bf00      	nop
 8002722:	e7fe      	b.n	8002722 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002724:	f001 fcbc 	bl	80040a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002728:	f3ef 8211 	mrs	r2, BASEPRI
 800272c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002730:	f383 8811 	msr	BASEPRI, r3
 8002734:	f3bf 8f6f 	isb	sy
 8002738:	f3bf 8f4f 	dsb	sy
 800273c:	617a      	str	r2, [r7, #20]
 800273e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002740:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002742:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002748:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800274a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002750:	429a      	cmp	r2, r3
 8002752:	d22b      	bcs.n	80027ac <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002756:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800275a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800275e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002760:	1c5a      	adds	r2, r3, #1
 8002762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002764:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002766:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800276a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276e:	d112      	bne.n	8002796 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	2b00      	cmp	r3, #0
 8002776:	d016      	beq.n	80027a6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277a:	3324      	adds	r3, #36	; 0x24
 800277c:	4618      	mov	r0, r3
 800277e:	f000 fedb 	bl	8003538 <xTaskRemoveFromEventList>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00e      	beq.n	80027a6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2201      	movs	r2, #1
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	e007      	b.n	80027a6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002796:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800279a:	3301      	adds	r3, #1
 800279c:	b2db      	uxtb	r3, r3
 800279e:	b25a      	sxtb	r2, r3
 80027a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80027a6:	2301      	movs	r3, #1
 80027a8:	637b      	str	r3, [r7, #52]	; 0x34
 80027aa:	e001      	b.n	80027b0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	637b      	str	r3, [r7, #52]	; 0x34
 80027b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80027ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80027bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3738      	adds	r7, #56	; 0x38
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08e      	sub	sp, #56	; 0x38
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80027d2:	2300      	movs	r3, #0
 80027d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80027da:	2300      	movs	r3, #0
 80027dc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80027de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10a      	bne.n	80027fa <xQueueSemaphoreTake+0x32>
	__asm volatile
 80027e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e8:	f383 8811 	msr	BASEPRI, r3
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	f3bf 8f4f 	dsb	sy
 80027f4:	623b      	str	r3, [r7, #32]
}
 80027f6:	bf00      	nop
 80027f8:	e7fe      	b.n	80027f8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80027fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00a      	beq.n	8002818 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002806:	f383 8811 	msr	BASEPRI, r3
 800280a:	f3bf 8f6f 	isb	sy
 800280e:	f3bf 8f4f 	dsb	sy
 8002812:	61fb      	str	r3, [r7, #28]
}
 8002814:	bf00      	nop
 8002816:	e7fe      	b.n	8002816 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002818:	f001 f84e 	bl	80038b8 <xTaskGetSchedulerState>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d102      	bne.n	8002828 <xQueueSemaphoreTake+0x60>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <xQueueSemaphoreTake+0x64>
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <xQueueSemaphoreTake+0x66>
 800282c:	2300      	movs	r3, #0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10a      	bne.n	8002848 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002836:	f383 8811 	msr	BASEPRI, r3
 800283a:	f3bf 8f6f 	isb	sy
 800283e:	f3bf 8f4f 	dsb	sy
 8002842:	61bb      	str	r3, [r7, #24]
}
 8002844:	bf00      	nop
 8002846:	e7fe      	b.n	8002846 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002848:	f001 fb68 	bl	8003f1c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800284c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002850:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002854:	2b00      	cmp	r3, #0
 8002856:	d024      	beq.n	80028a2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285a:	1e5a      	subs	r2, r3, #1
 800285c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d104      	bne.n	8002872 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002868:	f001 f9f0 	bl	8003c4c <pvTaskIncrementMutexHeldCount>
 800286c:	4602      	mov	r2, r0
 800286e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002870:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00f      	beq.n	800289a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287c:	3310      	adds	r3, #16
 800287e:	4618      	mov	r0, r3
 8002880:	f000 fe5a 	bl	8003538 <xTaskRemoveFromEventList>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d007      	beq.n	800289a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800288a:	4b54      	ldr	r3, [pc, #336]	; (80029dc <xQueueSemaphoreTake+0x214>)
 800288c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	f3bf 8f4f 	dsb	sy
 8002896:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800289a:	f001 fb6f 	bl	8003f7c <vPortExitCritical>
				return pdPASS;
 800289e:	2301      	movs	r3, #1
 80028a0:	e097      	b.n	80029d2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d111      	bne.n	80028cc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80028a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80028ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b2:	f383 8811 	msr	BASEPRI, r3
 80028b6:	f3bf 8f6f 	isb	sy
 80028ba:	f3bf 8f4f 	dsb	sy
 80028be:	617b      	str	r3, [r7, #20]
}
 80028c0:	bf00      	nop
 80028c2:	e7fe      	b.n	80028c2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80028c4:	f001 fb5a 	bl	8003f7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80028c8:	2300      	movs	r3, #0
 80028ca:	e082      	b.n	80029d2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d106      	bne.n	80028e0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028d2:	f107 030c 	add.w	r3, r7, #12
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fe90 	bl	80035fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028dc:	2301      	movs	r3, #1
 80028de:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028e0:	f001 fb4c 	bl	8003f7c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028e4:	f000 fc42 	bl	800316c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028e8:	f001 fb18 	bl	8003f1c <vPortEnterCritical>
 80028ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028f2:	b25b      	sxtb	r3, r3
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d103      	bne.n	8002902 <xQueueSemaphoreTake+0x13a>
 80028fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002904:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002908:	b25b      	sxtb	r3, r3
 800290a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290e:	d103      	bne.n	8002918 <xQueueSemaphoreTake+0x150>
 8002910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002918:	f001 fb30 	bl	8003f7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800291c:	463a      	mov	r2, r7
 800291e:	f107 030c 	add.w	r3, r7, #12
 8002922:	4611      	mov	r1, r2
 8002924:	4618      	mov	r0, r3
 8002926:	f000 fe7f 	bl	8003628 <xTaskCheckForTimeOut>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d132      	bne.n	8002996 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002930:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002932:	f000 f9ce 	bl	8002cd2 <prvIsQueueEmpty>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d026      	beq.n	800298a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800293c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d109      	bne.n	8002958 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002944:	f001 faea 	bl	8003f1c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	4618      	mov	r0, r3
 800294e:	f000 ffd1 	bl	80038f4 <xTaskPriorityInherit>
 8002952:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002954:	f001 fb12 	bl	8003f7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295a:	3324      	adds	r3, #36	; 0x24
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	4611      	mov	r1, r2
 8002960:	4618      	mov	r0, r3
 8002962:	f000 fdc5 	bl	80034f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002966:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002968:	f000 f961 	bl	8002c2e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800296c:	f000 fc0c 	bl	8003188 <xTaskResumeAll>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	f47f af68 	bne.w	8002848 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002978:	4b18      	ldr	r3, [pc, #96]	; (80029dc <xQueueSemaphoreTake+0x214>)
 800297a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	f3bf 8f4f 	dsb	sy
 8002984:	f3bf 8f6f 	isb	sy
 8002988:	e75e      	b.n	8002848 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800298a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800298c:	f000 f94f 	bl	8002c2e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002990:	f000 fbfa 	bl	8003188 <xTaskResumeAll>
 8002994:	e758      	b.n	8002848 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002996:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002998:	f000 f949 	bl	8002c2e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800299c:	f000 fbf4 	bl	8003188 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80029a2:	f000 f996 	bl	8002cd2 <prvIsQueueEmpty>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f43f af4d 	beq.w	8002848 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80029ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00d      	beq.n	80029d0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80029b4:	f001 fab2 	bl	8003f1c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80029b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80029ba:	f000 f891 	bl	8002ae0 <prvGetDisinheritPriorityAfterTimeout>
 80029be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80029c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029c6:	4618      	mov	r0, r3
 80029c8:	f001 f8a0 	bl	8003b0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80029cc:	f001 fad6 	bl	8003f7c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80029d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3738      	adds	r7, #56	; 0x38
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	e000ed04 	.word	0xe000ed04

080029e0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08e      	sub	sp, #56	; 0x38
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80029f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10a      	bne.n	8002a0c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80029f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fa:	f383 8811 	msr	BASEPRI, r3
 80029fe:	f3bf 8f6f 	isb	sy
 8002a02:	f3bf 8f4f 	dsb	sy
 8002a06:	623b      	str	r3, [r7, #32]
}
 8002a08:	bf00      	nop
 8002a0a:	e7fe      	b.n	8002a0a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d103      	bne.n	8002a1a <xQueueReceiveFromISR+0x3a>
 8002a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <xQueueReceiveFromISR+0x3e>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <xQueueReceiveFromISR+0x40>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10a      	bne.n	8002a3a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a28:	f383 8811 	msr	BASEPRI, r3
 8002a2c:	f3bf 8f6f 	isb	sy
 8002a30:	f3bf 8f4f 	dsb	sy
 8002a34:	61fb      	str	r3, [r7, #28]
}
 8002a36:	bf00      	nop
 8002a38:	e7fe      	b.n	8002a38 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a3a:	f001 fb31 	bl	80040a0 <vPortValidateInterruptPriority>
	__asm volatile
 8002a3e:	f3ef 8211 	mrs	r2, BASEPRI
 8002a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a46:	f383 8811 	msr	BASEPRI, r3
 8002a4a:	f3bf 8f6f 	isb	sy
 8002a4e:	f3bf 8f4f 	dsb	sy
 8002a52:	61ba      	str	r2, [r7, #24]
 8002a54:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002a56:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a58:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d02f      	beq.n	8002ac6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a70:	68b9      	ldr	r1, [r7, #8]
 8002a72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a74:	f000 f8b5 	bl	8002be2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7a:	1e5a      	subs	r2, r3, #1
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002a80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a88:	d112      	bne.n	8002ab0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d016      	beq.n	8002ac0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	3310      	adds	r3, #16
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fd4e 	bl	8003538 <xTaskRemoveFromEventList>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00e      	beq.n	8002ac0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00b      	beq.n	8002ac0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	e007      	b.n	8002ac0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	b25a      	sxtb	r2, r3
 8002aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ac4:	e001      	b.n	8002aca <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8002aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002acc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f383 8811 	msr	BASEPRI, r3
}
 8002ad4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3738      	adds	r7, #56	; 0x38
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d006      	beq.n	8002afe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f1c3 0307 	rsb	r3, r3, #7
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	e001      	b.n	8002b02 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002b02:	68fb      	ldr	r3, [r7, #12]
	}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b086      	sub	sp, #24
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b22:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10d      	bne.n	8002b48 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d14d      	bne.n	8002bd0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 ff61 	bl	8003a00 <xTaskPriorityDisinherit>
 8002b3e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	e043      	b.n	8002bd0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d119      	bne.n	8002b82 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6898      	ldr	r0, [r3, #8]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	461a      	mov	r2, r3
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	f001 fce1 	bl	8004520 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	441a      	add	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d32b      	bcc.n	8002bd0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	e026      	b.n	8002bd0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	68d8      	ldr	r0, [r3, #12]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	68b9      	ldr	r1, [r7, #8]
 8002b8e:	f001 fcc7 	bl	8004520 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	425b      	negs	r3, r3
 8002b9c:	441a      	add	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d207      	bcs.n	8002bbe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	425b      	negs	r3, r3
 8002bb8:	441a      	add	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d105      	bne.n	8002bd0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002bd8:	697b      	ldr	r3, [r7, #20]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d018      	beq.n	8002c26 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	441a      	add	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d303      	bcc.n	8002c16 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68d9      	ldr	r1, [r3, #12]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	461a      	mov	r2, r3
 8002c20:	6838      	ldr	r0, [r7, #0]
 8002c22:	f001 fc7d 	bl	8004520 <memcpy>
	}
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b084      	sub	sp, #16
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002c36:	f001 f971 	bl	8003f1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c40:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c42:	e011      	b.n	8002c68 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d012      	beq.n	8002c72 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3324      	adds	r3, #36	; 0x24
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 fc71 	bl	8003538 <xTaskRemoveFromEventList>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002c5c:	f000 fd46 	bl	80036ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	dce9      	bgt.n	8002c44 <prvUnlockQueue+0x16>
 8002c70:	e000      	b.n	8002c74 <prvUnlockQueue+0x46>
					break;
 8002c72:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	22ff      	movs	r2, #255	; 0xff
 8002c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002c7c:	f001 f97e 	bl	8003f7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c80:	f001 f94c 	bl	8003f1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c8a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c8c:	e011      	b.n	8002cb2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d012      	beq.n	8002cbc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3310      	adds	r3, #16
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fc4c 	bl	8003538 <xTaskRemoveFromEventList>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002ca6:	f000 fd21 	bl	80036ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002caa:	7bbb      	ldrb	r3, [r7, #14]
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002cb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	dce9      	bgt.n	8002c8e <prvUnlockQueue+0x60>
 8002cba:	e000      	b.n	8002cbe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002cbc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	22ff      	movs	r2, #255	; 0xff
 8002cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002cc6:	f001 f959 	bl	8003f7c <vPortExitCritical>
}
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002cda:	f001 f91f 	bl	8003f1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d102      	bne.n	8002cec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	e001      	b.n	8002cf0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cf0:	f001 f944 	bl	8003f7c <vPortExitCritical>

	return xReturn;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b084      	sub	sp, #16
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d06:	f001 f909 	bl	8003f1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d102      	bne.n	8002d1c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002d16:	2301      	movs	r3, #1
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	e001      	b.n	8002d20 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d20:	f001 f92c 	bl	8003f7c <vPortExitCritical>

	return xReturn;
 8002d24:	68fb      	ldr	r3, [r7, #12]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b08e      	sub	sp, #56	; 0x38
 8002d32:	af04      	add	r7, sp, #16
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
 8002d3a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10a      	bne.n	8002d58 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d46:	f383 8811 	msr	BASEPRI, r3
 8002d4a:	f3bf 8f6f 	isb	sy
 8002d4e:	f3bf 8f4f 	dsb	sy
 8002d52:	623b      	str	r3, [r7, #32]
}
 8002d54:	bf00      	nop
 8002d56:	e7fe      	b.n	8002d56 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10a      	bne.n	8002d74 <xTaskCreateStatic+0x46>
	__asm volatile
 8002d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d62:	f383 8811 	msr	BASEPRI, r3
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	61fb      	str	r3, [r7, #28]
}
 8002d70:	bf00      	nop
 8002d72:	e7fe      	b.n	8002d72 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d74:	2354      	movs	r3, #84	; 0x54
 8002d76:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	2b54      	cmp	r3, #84	; 0x54
 8002d7c:	d00a      	beq.n	8002d94 <xTaskCreateStatic+0x66>
	__asm volatile
 8002d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d82:	f383 8811 	msr	BASEPRI, r3
 8002d86:	f3bf 8f6f 	isb	sy
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	61bb      	str	r3, [r7, #24]
}
 8002d90:	bf00      	nop
 8002d92:	e7fe      	b.n	8002d92 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d01e      	beq.n	8002dd8 <xTaskCreateStatic+0xaa>
 8002d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d01b      	beq.n	8002dd8 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	2202      	movs	r2, #2
 8002dae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002db2:	2300      	movs	r3, #0
 8002db4:	9303      	str	r3, [sp, #12]
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	9302      	str	r3, [sp, #8]
 8002dba:	f107 0314 	add.w	r3, r7, #20
 8002dbe:	9301      	str	r3, [sp, #4]
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 f850 	bl	8002e70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002dd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dd2:	f000 f8cd 	bl	8002f70 <prvAddNewTaskToReadyList>
 8002dd6:	e001      	b.n	8002ddc <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002ddc:	697b      	ldr	r3, [r7, #20]
	}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3728      	adds	r7, #40	; 0x28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b08c      	sub	sp, #48	; 0x30
 8002dea:	af04      	add	r7, sp, #16
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	603b      	str	r3, [r7, #0]
 8002df2:	4613      	mov	r3, r2
 8002df4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002df6:	88fb      	ldrh	r3, [r7, #6]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f001 f98e 	bl	800411c <pvPortMalloc>
 8002e00:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00e      	beq.n	8002e26 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002e08:	2054      	movs	r0, #84	; 0x54
 8002e0a:	f001 f987 	bl	800411c <pvPortMalloc>
 8002e0e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e1c:	e005      	b.n	8002e2a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e1e:	6978      	ldr	r0, [r7, #20]
 8002e20:	f001 fa40 	bl	80042a4 <vPortFree>
 8002e24:	e001      	b.n	8002e2a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d017      	beq.n	8002e60 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e38:	88fa      	ldrh	r2, [r7, #6]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	9303      	str	r3, [sp, #12]
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	9302      	str	r3, [sp, #8]
 8002e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e44:	9301      	str	r3, [sp, #4]
 8002e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68b9      	ldr	r1, [r7, #8]
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 f80e 	bl	8002e70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e54:	69f8      	ldr	r0, [r7, #28]
 8002e56:	f000 f88b 	bl	8002f70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	61bb      	str	r3, [r7, #24]
 8002e5e:	e002      	b.n	8002e66 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e60:	f04f 33ff 	mov.w	r3, #4294967295
 8002e64:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e66:	69bb      	ldr	r3, [r7, #24]
	}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3720      	adds	r7, #32
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	f023 0307 	bic.w	r3, r3, #7
 8002e96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea6:	f383 8811 	msr	BASEPRI, r3
 8002eaa:	f3bf 8f6f 	isb	sy
 8002eae:	f3bf 8f4f 	dsb	sy
 8002eb2:	617b      	str	r3, [r7, #20]
}
 8002eb4:	bf00      	nop
 8002eb6:	e7fe      	b.n	8002eb6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61fb      	str	r3, [r7, #28]
 8002ebc:	e012      	b.n	8002ee4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	7819      	ldrb	r1, [r3, #0]
 8002ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	4413      	add	r3, r2
 8002ecc:	3334      	adds	r3, #52	; 0x34
 8002ece:	460a      	mov	r2, r1
 8002ed0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d006      	beq.n	8002eec <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	61fb      	str	r3, [r7, #28]
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	2b0f      	cmp	r3, #15
 8002ee8:	d9e9      	bls.n	8002ebe <prvInitialiseNewTask+0x4e>
 8002eea:	e000      	b.n	8002eee <prvInitialiseNewTask+0x7e>
		{
			break;
 8002eec:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef8:	2b06      	cmp	r3, #6
 8002efa:	d901      	bls.n	8002f00 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002efc:	2306      	movs	r3, #6
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f0a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0e:	2200      	movs	r2, #0
 8002f10:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f14:	3304      	adds	r3, #4
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff f893 	bl	8002042 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1e:	3318      	adds	r3, #24
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff f88e 	bl	8002042 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2e:	f1c3 0207 	rsb	r2, r3, #7
 8002f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3e:	2200      	movs	r2, #0
 8002f40:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	68f9      	ldr	r1, [r7, #12]
 8002f4e:	69b8      	ldr	r0, [r7, #24]
 8002f50:	f000 fef6 	bl	8003d40 <pxPortInitialiseStack>
 8002f54:	4602      	mov	r2, r0
 8002f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f58:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f66:	bf00      	nop
 8002f68:	3720      	adds	r7, #32
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f78:	f000 ffd0 	bl	8003f1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f7c:	4b2a      	ldr	r3, [pc, #168]	; (8003028 <prvAddNewTaskToReadyList+0xb8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3301      	adds	r3, #1
 8002f82:	4a29      	ldr	r2, [pc, #164]	; (8003028 <prvAddNewTaskToReadyList+0xb8>)
 8002f84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f86:	4b29      	ldr	r3, [pc, #164]	; (800302c <prvAddNewTaskToReadyList+0xbc>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f8e:	4a27      	ldr	r2, [pc, #156]	; (800302c <prvAddNewTaskToReadyList+0xbc>)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f94:	4b24      	ldr	r3, [pc, #144]	; (8003028 <prvAddNewTaskToReadyList+0xb8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d110      	bne.n	8002fbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f9c:	f000 fbca 	bl	8003734 <prvInitialiseTaskLists>
 8002fa0:	e00d      	b.n	8002fbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002fa2:	4b23      	ldr	r3, [pc, #140]	; (8003030 <prvAddNewTaskToReadyList+0xc0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d109      	bne.n	8002fbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002faa:	4b20      	ldr	r3, [pc, #128]	; (800302c <prvAddNewTaskToReadyList+0xbc>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d802      	bhi.n	8002fbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002fb8:	4a1c      	ldr	r2, [pc, #112]	; (800302c <prvAddNewTaskToReadyList+0xbc>)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002fbe:	4b1d      	ldr	r3, [pc, #116]	; (8003034 <prvAddNewTaskToReadyList+0xc4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	4a1b      	ldr	r2, [pc, #108]	; (8003034 <prvAddNewTaskToReadyList+0xc4>)
 8002fc6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	2201      	movs	r2, #1
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	4b19      	ldr	r3, [pc, #100]	; (8003038 <prvAddNewTaskToReadyList+0xc8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	4a18      	ldr	r2, [pc, #96]	; (8003038 <prvAddNewTaskToReadyList+0xc8>)
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fde:	4613      	mov	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4a15      	ldr	r2, [pc, #84]	; (800303c <prvAddNewTaskToReadyList+0xcc>)
 8002fe8:	441a      	add	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3304      	adds	r3, #4
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	f7ff f832 	bl	800205a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002ff6:	f000 ffc1 	bl	8003f7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002ffa:	4b0d      	ldr	r3, [pc, #52]	; (8003030 <prvAddNewTaskToReadyList+0xc0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00e      	beq.n	8003020 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003002:	4b0a      	ldr	r3, [pc, #40]	; (800302c <prvAddNewTaskToReadyList+0xbc>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300c:	429a      	cmp	r2, r3
 800300e:	d207      	bcs.n	8003020 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <prvAddNewTaskToReadyList+0xd0>)
 8003012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	f3bf 8f4f 	dsb	sy
 800301c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003020:	bf00      	nop
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	200003e8 	.word	0x200003e8
 800302c:	200002e8 	.word	0x200002e8
 8003030:	200003f4 	.word	0x200003f4
 8003034:	20000404 	.word	0x20000404
 8003038:	200003f0 	.word	0x200003f0
 800303c:	200002ec 	.word	0x200002ec
 8003040:	e000ed04 	.word	0xe000ed04

08003044 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d017      	beq.n	8003086 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003056:	4b13      	ldr	r3, [pc, #76]	; (80030a4 <vTaskDelay+0x60>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <vTaskDelay+0x30>
	__asm volatile
 800305e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003062:	f383 8811 	msr	BASEPRI, r3
 8003066:	f3bf 8f6f 	isb	sy
 800306a:	f3bf 8f4f 	dsb	sy
 800306e:	60bb      	str	r3, [r7, #8]
}
 8003070:	bf00      	nop
 8003072:	e7fe      	b.n	8003072 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003074:	f000 f87a 	bl	800316c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003078:	2100      	movs	r1, #0
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fdfa 	bl	8003c74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003080:	f000 f882 	bl	8003188 <xTaskResumeAll>
 8003084:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d107      	bne.n	800309c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <vTaskDelay+0x64>)
 800308e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	f3bf 8f4f 	dsb	sy
 8003098:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800309c:	bf00      	nop
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20000410 	.word	0x20000410
 80030a8:	e000ed04 	.word	0xe000ed04

080030ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	; 0x28
 80030b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80030ba:	463a      	mov	r2, r7
 80030bc:	1d39      	adds	r1, r7, #4
 80030be:	f107 0308 	add.w	r3, r7, #8
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd f844 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80030c8:	6839      	ldr	r1, [r7, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	9202      	str	r2, [sp, #8]
 80030d0:	9301      	str	r3, [sp, #4]
 80030d2:	2300      	movs	r3, #0
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	2300      	movs	r3, #0
 80030d8:	460a      	mov	r2, r1
 80030da:	491e      	ldr	r1, [pc, #120]	; (8003154 <vTaskStartScheduler+0xa8>)
 80030dc:	481e      	ldr	r0, [pc, #120]	; (8003158 <vTaskStartScheduler+0xac>)
 80030de:	f7ff fe26 	bl	8002d2e <xTaskCreateStatic>
 80030e2:	4603      	mov	r3, r0
 80030e4:	4a1d      	ldr	r2, [pc, #116]	; (800315c <vTaskStartScheduler+0xb0>)
 80030e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80030e8:	4b1c      	ldr	r3, [pc, #112]	; (800315c <vTaskStartScheduler+0xb0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80030f0:	2301      	movs	r3, #1
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	e001      	b.n	80030fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d116      	bne.n	800312e <vTaskStartScheduler+0x82>
	__asm volatile
 8003100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003104:	f383 8811 	msr	BASEPRI, r3
 8003108:	f3bf 8f6f 	isb	sy
 800310c:	f3bf 8f4f 	dsb	sy
 8003110:	613b      	str	r3, [r7, #16]
}
 8003112:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003114:	4b12      	ldr	r3, [pc, #72]	; (8003160 <vTaskStartScheduler+0xb4>)
 8003116:	f04f 32ff 	mov.w	r2, #4294967295
 800311a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800311c:	4b11      	ldr	r3, [pc, #68]	; (8003164 <vTaskStartScheduler+0xb8>)
 800311e:	2201      	movs	r2, #1
 8003120:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003122:	4b11      	ldr	r3, [pc, #68]	; (8003168 <vTaskStartScheduler+0xbc>)
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003128:	f000 fe86 	bl	8003e38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800312c:	e00e      	b.n	800314c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d10a      	bne.n	800314c <vTaskStartScheduler+0xa0>
	__asm volatile
 8003136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	60fb      	str	r3, [r7, #12]
}
 8003148:	bf00      	nop
 800314a:	e7fe      	b.n	800314a <vTaskStartScheduler+0x9e>
}
 800314c:	bf00      	nop
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	08005514 	.word	0x08005514
 8003158:	08003705 	.word	0x08003705
 800315c:	2000040c 	.word	0x2000040c
 8003160:	20000408 	.word	0x20000408
 8003164:	200003f4 	.word	0x200003f4
 8003168:	200003ec 	.word	0x200003ec

0800316c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003170:	4b04      	ldr	r3, [pc, #16]	; (8003184 <vTaskSuspendAll+0x18>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	3301      	adds	r3, #1
 8003176:	4a03      	ldr	r2, [pc, #12]	; (8003184 <vTaskSuspendAll+0x18>)
 8003178:	6013      	str	r3, [r2, #0]
}
 800317a:	bf00      	nop
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	20000410 	.word	0x20000410

08003188 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003192:	2300      	movs	r3, #0
 8003194:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003196:	4b41      	ldr	r3, [pc, #260]	; (800329c <xTaskResumeAll+0x114>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10a      	bne.n	80031b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800319e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a2:	f383 8811 	msr	BASEPRI, r3
 80031a6:	f3bf 8f6f 	isb	sy
 80031aa:	f3bf 8f4f 	dsb	sy
 80031ae:	603b      	str	r3, [r7, #0]
}
 80031b0:	bf00      	nop
 80031b2:	e7fe      	b.n	80031b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80031b4:	f000 feb2 	bl	8003f1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80031b8:	4b38      	ldr	r3, [pc, #224]	; (800329c <xTaskResumeAll+0x114>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3b01      	subs	r3, #1
 80031be:	4a37      	ldr	r2, [pc, #220]	; (800329c <xTaskResumeAll+0x114>)
 80031c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031c2:	4b36      	ldr	r3, [pc, #216]	; (800329c <xTaskResumeAll+0x114>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d161      	bne.n	800328e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031ca:	4b35      	ldr	r3, [pc, #212]	; (80032a0 <xTaskResumeAll+0x118>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d05d      	beq.n	800328e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031d2:	e02e      	b.n	8003232 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80031d4:	4b33      	ldr	r3, [pc, #204]	; (80032a4 <xTaskResumeAll+0x11c>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	3318      	adds	r3, #24
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fe ff95 	bl	8002110 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	3304      	adds	r3, #4
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fe ff90 	bl	8002110 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	2201      	movs	r2, #1
 80031f6:	409a      	lsls	r2, r3
 80031f8:	4b2b      	ldr	r3, [pc, #172]	; (80032a8 <xTaskResumeAll+0x120>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	4a2a      	ldr	r2, [pc, #168]	; (80032a8 <xTaskResumeAll+0x120>)
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4a27      	ldr	r2, [pc, #156]	; (80032ac <xTaskResumeAll+0x124>)
 8003210:	441a      	add	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	3304      	adds	r3, #4
 8003216:	4619      	mov	r1, r3
 8003218:	4610      	mov	r0, r2
 800321a:	f7fe ff1e 	bl	800205a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003222:	4b23      	ldr	r3, [pc, #140]	; (80032b0 <xTaskResumeAll+0x128>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	429a      	cmp	r2, r3
 800322a:	d302      	bcc.n	8003232 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800322c:	4b21      	ldr	r3, [pc, #132]	; (80032b4 <xTaskResumeAll+0x12c>)
 800322e:	2201      	movs	r2, #1
 8003230:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003232:	4b1c      	ldr	r3, [pc, #112]	; (80032a4 <xTaskResumeAll+0x11c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1cc      	bne.n	80031d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003240:	f000 fb16 	bl	8003870 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003244:	4b1c      	ldr	r3, [pc, #112]	; (80032b8 <xTaskResumeAll+0x130>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d010      	beq.n	8003272 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003250:	f000 f836 	bl	80032c0 <xTaskIncrementTick>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800325a:	4b16      	ldr	r3, [pc, #88]	; (80032b4 <xTaskResumeAll+0x12c>)
 800325c:	2201      	movs	r2, #1
 800325e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3b01      	subs	r3, #1
 8003264:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1f1      	bne.n	8003250 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800326c:	4b12      	ldr	r3, [pc, #72]	; (80032b8 <xTaskResumeAll+0x130>)
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003272:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <xTaskResumeAll+0x12c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d009      	beq.n	800328e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800327a:	2301      	movs	r3, #1
 800327c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800327e:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <xTaskResumeAll+0x134>)
 8003280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800328e:	f000 fe75 	bl	8003f7c <vPortExitCritical>

	return xAlreadyYielded;
 8003292:	68bb      	ldr	r3, [r7, #8]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	20000410 	.word	0x20000410
 80032a0:	200003e8 	.word	0x200003e8
 80032a4:	200003a8 	.word	0x200003a8
 80032a8:	200003f0 	.word	0x200003f0
 80032ac:	200002ec 	.word	0x200002ec
 80032b0:	200002e8 	.word	0x200002e8
 80032b4:	200003fc 	.word	0x200003fc
 80032b8:	200003f8 	.word	0x200003f8
 80032bc:	e000ed04 	.word	0xe000ed04

080032c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032ca:	4b51      	ldr	r3, [pc, #324]	; (8003410 <xTaskIncrementTick+0x150>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f040 808d 	bne.w	80033ee <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032d4:	4b4f      	ldr	r3, [pc, #316]	; (8003414 <xTaskIncrementTick+0x154>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3301      	adds	r3, #1
 80032da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80032dc:	4a4d      	ldr	r2, [pc, #308]	; (8003414 <xTaskIncrementTick+0x154>)
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d120      	bne.n	800332a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80032e8:	4b4b      	ldr	r3, [pc, #300]	; (8003418 <xTaskIncrementTick+0x158>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <xTaskIncrementTick+0x48>
	__asm volatile
 80032f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f6:	f383 8811 	msr	BASEPRI, r3
 80032fa:	f3bf 8f6f 	isb	sy
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	603b      	str	r3, [r7, #0]
}
 8003304:	bf00      	nop
 8003306:	e7fe      	b.n	8003306 <xTaskIncrementTick+0x46>
 8003308:	4b43      	ldr	r3, [pc, #268]	; (8003418 <xTaskIncrementTick+0x158>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	4b43      	ldr	r3, [pc, #268]	; (800341c <xTaskIncrementTick+0x15c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a41      	ldr	r2, [pc, #260]	; (8003418 <xTaskIncrementTick+0x158>)
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	4a41      	ldr	r2, [pc, #260]	; (800341c <xTaskIncrementTick+0x15c>)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	4b40      	ldr	r3, [pc, #256]	; (8003420 <xTaskIncrementTick+0x160>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	3301      	adds	r3, #1
 8003322:	4a3f      	ldr	r2, [pc, #252]	; (8003420 <xTaskIncrementTick+0x160>)
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	f000 faa3 	bl	8003870 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800332a:	4b3e      	ldr	r3, [pc, #248]	; (8003424 <xTaskIncrementTick+0x164>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	429a      	cmp	r2, r3
 8003332:	d34d      	bcc.n	80033d0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003334:	4b38      	ldr	r3, [pc, #224]	; (8003418 <xTaskIncrementTick+0x158>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <xTaskIncrementTick+0x82>
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <xTaskIncrementTick+0x84>
 8003342:	2300      	movs	r3, #0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d004      	beq.n	8003352 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003348:	4b36      	ldr	r3, [pc, #216]	; (8003424 <xTaskIncrementTick+0x164>)
 800334a:	f04f 32ff 	mov.w	r2, #4294967295
 800334e:	601a      	str	r2, [r3, #0]
					break;
 8003350:	e03e      	b.n	80033d0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003352:	4b31      	ldr	r3, [pc, #196]	; (8003418 <xTaskIncrementTick+0x158>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	429a      	cmp	r2, r3
 8003368:	d203      	bcs.n	8003372 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800336a:	4a2e      	ldr	r2, [pc, #184]	; (8003424 <xTaskIncrementTick+0x164>)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6013      	str	r3, [r2, #0]
						break;
 8003370:	e02e      	b.n	80033d0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	3304      	adds	r3, #4
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe feca 	bl	8002110 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003380:	2b00      	cmp	r3, #0
 8003382:	d004      	beq.n	800338e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	3318      	adds	r3, #24
 8003388:	4618      	mov	r0, r3
 800338a:	f7fe fec1 	bl	8002110 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003392:	2201      	movs	r2, #1
 8003394:	409a      	lsls	r2, r3
 8003396:	4b24      	ldr	r3, [pc, #144]	; (8003428 <xTaskIncrementTick+0x168>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4313      	orrs	r3, r2
 800339c:	4a22      	ldr	r2, [pc, #136]	; (8003428 <xTaskIncrementTick+0x168>)
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a4:	4613      	mov	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4a1f      	ldr	r2, [pc, #124]	; (800342c <xTaskIncrementTick+0x16c>)
 80033ae:	441a      	add	r2, r3
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	3304      	adds	r3, #4
 80033b4:	4619      	mov	r1, r3
 80033b6:	4610      	mov	r0, r2
 80033b8:	f7fe fe4f 	bl	800205a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c0:	4b1b      	ldr	r3, [pc, #108]	; (8003430 <xTaskIncrementTick+0x170>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d3b4      	bcc.n	8003334 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80033ca:	2301      	movs	r3, #1
 80033cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033ce:	e7b1      	b.n	8003334 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033d0:	4b17      	ldr	r3, [pc, #92]	; (8003430 <xTaskIncrementTick+0x170>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d6:	4915      	ldr	r1, [pc, #84]	; (800342c <xTaskIncrementTick+0x16c>)
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d907      	bls.n	80033f8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80033e8:	2301      	movs	r3, #1
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	e004      	b.n	80033f8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80033ee:	4b11      	ldr	r3, [pc, #68]	; (8003434 <xTaskIncrementTick+0x174>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3301      	adds	r3, #1
 80033f4:	4a0f      	ldr	r2, [pc, #60]	; (8003434 <xTaskIncrementTick+0x174>)
 80033f6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80033f8:	4b0f      	ldr	r3, [pc, #60]	; (8003438 <xTaskIncrementTick+0x178>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003400:	2301      	movs	r3, #1
 8003402:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003404:	697b      	ldr	r3, [r7, #20]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20000410 	.word	0x20000410
 8003414:	200003ec 	.word	0x200003ec
 8003418:	200003a0 	.word	0x200003a0
 800341c:	200003a4 	.word	0x200003a4
 8003420:	20000400 	.word	0x20000400
 8003424:	20000408 	.word	0x20000408
 8003428:	200003f0 	.word	0x200003f0
 800342c:	200002ec 	.word	0x200002ec
 8003430:	200002e8 	.word	0x200002e8
 8003434:	200003f8 	.word	0x200003f8
 8003438:	200003fc 	.word	0x200003fc

0800343c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003442:	4b26      	ldr	r3, [pc, #152]	; (80034dc <vTaskSwitchContext+0xa0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800344a:	4b25      	ldr	r3, [pc, #148]	; (80034e0 <vTaskSwitchContext+0xa4>)
 800344c:	2201      	movs	r2, #1
 800344e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003450:	e03f      	b.n	80034d2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003452:	4b23      	ldr	r3, [pc, #140]	; (80034e0 <vTaskSwitchContext+0xa4>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003458:	4b22      	ldr	r3, [pc, #136]	; (80034e4 <vTaskSwitchContext+0xa8>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	fab3 f383 	clz	r3, r3
 8003464:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003466:	7afb      	ldrb	r3, [r7, #11]
 8003468:	f1c3 031f 	rsb	r3, r3, #31
 800346c:	617b      	str	r3, [r7, #20]
 800346e:	491e      	ldr	r1, [pc, #120]	; (80034e8 <vTaskSwitchContext+0xac>)
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10a      	bne.n	8003498 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003486:	f383 8811 	msr	BASEPRI, r3
 800348a:	f3bf 8f6f 	isb	sy
 800348e:	f3bf 8f4f 	dsb	sy
 8003492:	607b      	str	r3, [r7, #4]
}
 8003494:	bf00      	nop
 8003496:	e7fe      	b.n	8003496 <vTaskSwitchContext+0x5a>
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4a11      	ldr	r2, [pc, #68]	; (80034e8 <vTaskSwitchContext+0xac>)
 80034a4:	4413      	add	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	605a      	str	r2, [r3, #4]
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	3308      	adds	r3, #8
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d104      	bne.n	80034c8 <vTaskSwitchContext+0x8c>
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	605a      	str	r2, [r3, #4]
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	4a07      	ldr	r2, [pc, #28]	; (80034ec <vTaskSwitchContext+0xb0>)
 80034d0:	6013      	str	r3, [r2, #0]
}
 80034d2:	bf00      	nop
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr
 80034dc:	20000410 	.word	0x20000410
 80034e0:	200003fc 	.word	0x200003fc
 80034e4:	200003f0 	.word	0x200003f0
 80034e8:	200002ec 	.word	0x200002ec
 80034ec:	200002e8 	.word	0x200002e8

080034f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10a      	bne.n	8003516 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003504:	f383 8811 	msr	BASEPRI, r3
 8003508:	f3bf 8f6f 	isb	sy
 800350c:	f3bf 8f4f 	dsb	sy
 8003510:	60fb      	str	r3, [r7, #12]
}
 8003512:	bf00      	nop
 8003514:	e7fe      	b.n	8003514 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003516:	4b07      	ldr	r3, [pc, #28]	; (8003534 <vTaskPlaceOnEventList+0x44>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	3318      	adds	r3, #24
 800351c:	4619      	mov	r1, r3
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fe fdbe 	bl	80020a0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003524:	2101      	movs	r1, #1
 8003526:	6838      	ldr	r0, [r7, #0]
 8003528:	f000 fba4 	bl	8003c74 <prvAddCurrentTaskToDelayedList>
}
 800352c:	bf00      	nop
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	200002e8 	.word	0x200002e8

08003538 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10a      	bne.n	8003564 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800354e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003552:	f383 8811 	msr	BASEPRI, r3
 8003556:	f3bf 8f6f 	isb	sy
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	60fb      	str	r3, [r7, #12]
}
 8003560:	bf00      	nop
 8003562:	e7fe      	b.n	8003562 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	3318      	adds	r3, #24
 8003568:	4618      	mov	r0, r3
 800356a:	f7fe fdd1 	bl	8002110 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800356e:	4b1d      	ldr	r3, [pc, #116]	; (80035e4 <xTaskRemoveFromEventList+0xac>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d11c      	bne.n	80035b0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	3304      	adds	r3, #4
 800357a:	4618      	mov	r0, r3
 800357c:	f7fe fdc8 	bl	8002110 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	2201      	movs	r2, #1
 8003586:	409a      	lsls	r2, r3
 8003588:	4b17      	ldr	r3, [pc, #92]	; (80035e8 <xTaskRemoveFromEventList+0xb0>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4313      	orrs	r3, r2
 800358e:	4a16      	ldr	r2, [pc, #88]	; (80035e8 <xTaskRemoveFromEventList+0xb0>)
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003596:	4613      	mov	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4a13      	ldr	r2, [pc, #76]	; (80035ec <xTaskRemoveFromEventList+0xb4>)
 80035a0:	441a      	add	r2, r3
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	3304      	adds	r3, #4
 80035a6:	4619      	mov	r1, r3
 80035a8:	4610      	mov	r0, r2
 80035aa:	f7fe fd56 	bl	800205a <vListInsertEnd>
 80035ae:	e005      	b.n	80035bc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	3318      	adds	r3, #24
 80035b4:	4619      	mov	r1, r3
 80035b6:	480e      	ldr	r0, [pc, #56]	; (80035f0 <xTaskRemoveFromEventList+0xb8>)
 80035b8:	f7fe fd4f 	bl	800205a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c0:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <xTaskRemoveFromEventList+0xbc>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d905      	bls.n	80035d6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80035ca:	2301      	movs	r3, #1
 80035cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80035ce:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <xTaskRemoveFromEventList+0xc0>)
 80035d0:	2201      	movs	r2, #1
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	e001      	b.n	80035da <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80035da:	697b      	ldr	r3, [r7, #20]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	20000410 	.word	0x20000410
 80035e8:	200003f0 	.word	0x200003f0
 80035ec:	200002ec 	.word	0x200002ec
 80035f0:	200003a8 	.word	0x200003a8
 80035f4:	200002e8 	.word	0x200002e8
 80035f8:	200003fc 	.word	0x200003fc

080035fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003604:	4b06      	ldr	r3, [pc, #24]	; (8003620 <vTaskInternalSetTimeOutState+0x24>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800360c:	4b05      	ldr	r3, [pc, #20]	; (8003624 <vTaskInternalSetTimeOutState+0x28>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	605a      	str	r2, [r3, #4]
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	20000400 	.word	0x20000400
 8003624:	200003ec 	.word	0x200003ec

08003628 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363c:	f383 8811 	msr	BASEPRI, r3
 8003640:	f3bf 8f6f 	isb	sy
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	613b      	str	r3, [r7, #16]
}
 800364a:	bf00      	nop
 800364c:	e7fe      	b.n	800364c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10a      	bne.n	800366a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	60fb      	str	r3, [r7, #12]
}
 8003666:	bf00      	nop
 8003668:	e7fe      	b.n	8003668 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800366a:	f000 fc57 	bl	8003f1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800366e:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <xTaskCheckForTimeOut+0xbc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003686:	d102      	bne.n	800368e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003688:	2300      	movs	r3, #0
 800368a:	61fb      	str	r3, [r7, #28]
 800368c:	e023      	b.n	80036d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	4b15      	ldr	r3, [pc, #84]	; (80036e8 <xTaskCheckForTimeOut+0xc0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d007      	beq.n	80036aa <xTaskCheckForTimeOut+0x82>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d302      	bcc.n	80036aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80036a4:	2301      	movs	r3, #1
 80036a6:	61fb      	str	r3, [r7, #28]
 80036a8:	e015      	b.n	80036d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d20b      	bcs.n	80036cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	1ad2      	subs	r2, r2, r3
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7ff ff9b 	bl	80035fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
 80036ca:	e004      	b.n	80036d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80036d2:	2301      	movs	r3, #1
 80036d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80036d6:	f000 fc51 	bl	8003f7c <vPortExitCritical>

	return xReturn;
 80036da:	69fb      	ldr	r3, [r7, #28]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3720      	adds	r7, #32
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	200003ec 	.word	0x200003ec
 80036e8:	20000400 	.word	0x20000400

080036ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80036f0:	4b03      	ldr	r3, [pc, #12]	; (8003700 <vTaskMissedYield+0x14>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	601a      	str	r2, [r3, #0]
}
 80036f6:	bf00      	nop
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	200003fc 	.word	0x200003fc

08003704 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800370c:	f000 f852 	bl	80037b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003710:	4b06      	ldr	r3, [pc, #24]	; (800372c <prvIdleTask+0x28>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d9f9      	bls.n	800370c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003718:	4b05      	ldr	r3, [pc, #20]	; (8003730 <prvIdleTask+0x2c>)
 800371a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	f3bf 8f4f 	dsb	sy
 8003724:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003728:	e7f0      	b.n	800370c <prvIdleTask+0x8>
 800372a:	bf00      	nop
 800372c:	200002ec 	.word	0x200002ec
 8003730:	e000ed04 	.word	0xe000ed04

08003734 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800373a:	2300      	movs	r3, #0
 800373c:	607b      	str	r3, [r7, #4]
 800373e:	e00c      	b.n	800375a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4a12      	ldr	r2, [pc, #72]	; (8003794 <prvInitialiseTaskLists+0x60>)
 800374c:	4413      	add	r3, r2
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe fc58 	bl	8002004 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	3301      	adds	r3, #1
 8003758:	607b      	str	r3, [r7, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b06      	cmp	r3, #6
 800375e:	d9ef      	bls.n	8003740 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003760:	480d      	ldr	r0, [pc, #52]	; (8003798 <prvInitialiseTaskLists+0x64>)
 8003762:	f7fe fc4f 	bl	8002004 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003766:	480d      	ldr	r0, [pc, #52]	; (800379c <prvInitialiseTaskLists+0x68>)
 8003768:	f7fe fc4c 	bl	8002004 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800376c:	480c      	ldr	r0, [pc, #48]	; (80037a0 <prvInitialiseTaskLists+0x6c>)
 800376e:	f7fe fc49 	bl	8002004 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003772:	480c      	ldr	r0, [pc, #48]	; (80037a4 <prvInitialiseTaskLists+0x70>)
 8003774:	f7fe fc46 	bl	8002004 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003778:	480b      	ldr	r0, [pc, #44]	; (80037a8 <prvInitialiseTaskLists+0x74>)
 800377a:	f7fe fc43 	bl	8002004 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800377e:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <prvInitialiseTaskLists+0x78>)
 8003780:	4a05      	ldr	r2, [pc, #20]	; (8003798 <prvInitialiseTaskLists+0x64>)
 8003782:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003784:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <prvInitialiseTaskLists+0x7c>)
 8003786:	4a05      	ldr	r2, [pc, #20]	; (800379c <prvInitialiseTaskLists+0x68>)
 8003788:	601a      	str	r2, [r3, #0]
}
 800378a:	bf00      	nop
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	200002ec 	.word	0x200002ec
 8003798:	20000378 	.word	0x20000378
 800379c:	2000038c 	.word	0x2000038c
 80037a0:	200003a8 	.word	0x200003a8
 80037a4:	200003bc 	.word	0x200003bc
 80037a8:	200003d4 	.word	0x200003d4
 80037ac:	200003a0 	.word	0x200003a0
 80037b0:	200003a4 	.word	0x200003a4

080037b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037ba:	e019      	b.n	80037f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80037bc:	f000 fbae 	bl	8003f1c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80037c0:	4b10      	ldr	r3, [pc, #64]	; (8003804 <prvCheckTasksWaitingTermination+0x50>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3304      	adds	r3, #4
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fe fc9f 	bl	8002110 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80037d2:	4b0d      	ldr	r3, [pc, #52]	; (8003808 <prvCheckTasksWaitingTermination+0x54>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	4a0b      	ldr	r2, [pc, #44]	; (8003808 <prvCheckTasksWaitingTermination+0x54>)
 80037da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80037dc:	4b0b      	ldr	r3, [pc, #44]	; (800380c <prvCheckTasksWaitingTermination+0x58>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3b01      	subs	r3, #1
 80037e2:	4a0a      	ldr	r2, [pc, #40]	; (800380c <prvCheckTasksWaitingTermination+0x58>)
 80037e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80037e6:	f000 fbc9 	bl	8003f7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f810 	bl	8003810 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037f0:	4b06      	ldr	r3, [pc, #24]	; (800380c <prvCheckTasksWaitingTermination+0x58>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1e1      	bne.n	80037bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80037f8:	bf00      	nop
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	200003bc 	.word	0x200003bc
 8003808:	200003e8 	.word	0x200003e8
 800380c:	200003d0 	.word	0x200003d0

08003810 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800381e:	2b00      	cmp	r3, #0
 8003820:	d108      	bne.n	8003834 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fd3c 	bl	80042a4 <vPortFree>
				vPortFree( pxTCB );
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fd39 	bl	80042a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003832:	e018      	b.n	8003866 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800383a:	2b01      	cmp	r3, #1
 800383c:	d103      	bne.n	8003846 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fd30 	bl	80042a4 <vPortFree>
	}
 8003844:	e00f      	b.n	8003866 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800384c:	2b02      	cmp	r3, #2
 800384e:	d00a      	beq.n	8003866 <prvDeleteTCB+0x56>
	__asm volatile
 8003850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003854:	f383 8811 	msr	BASEPRI, r3
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	60fb      	str	r3, [r7, #12]
}
 8003862:	bf00      	nop
 8003864:	e7fe      	b.n	8003864 <prvDeleteTCB+0x54>
	}
 8003866:	bf00      	nop
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003876:	4b0e      	ldr	r3, [pc, #56]	; (80038b0 <prvResetNextTaskUnblockTime+0x40>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <prvResetNextTaskUnblockTime+0x14>
 8003880:	2301      	movs	r3, #1
 8003882:	e000      	b.n	8003886 <prvResetNextTaskUnblockTime+0x16>
 8003884:	2300      	movs	r3, #0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d004      	beq.n	8003894 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800388a:	4b0a      	ldr	r3, [pc, #40]	; (80038b4 <prvResetNextTaskUnblockTime+0x44>)
 800388c:	f04f 32ff 	mov.w	r2, #4294967295
 8003890:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003892:	e008      	b.n	80038a6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003894:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <prvResetNextTaskUnblockTime+0x40>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	4a04      	ldr	r2, [pc, #16]	; (80038b4 <prvResetNextTaskUnblockTime+0x44>)
 80038a4:	6013      	str	r3, [r2, #0]
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr
 80038b0:	200003a0 	.word	0x200003a0
 80038b4:	20000408 	.word	0x20000408

080038b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80038be:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <xTaskGetSchedulerState+0x34>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d102      	bne.n	80038cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80038c6:	2301      	movs	r3, #1
 80038c8:	607b      	str	r3, [r7, #4]
 80038ca:	e008      	b.n	80038de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038cc:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <xTaskGetSchedulerState+0x38>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d102      	bne.n	80038da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80038d4:	2302      	movs	r3, #2
 80038d6:	607b      	str	r3, [r7, #4]
 80038d8:	e001      	b.n	80038de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80038da:	2300      	movs	r3, #0
 80038dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80038de:	687b      	ldr	r3, [r7, #4]
	}
 80038e0:	4618      	mov	r0, r3
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc80      	pop	{r7}
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	200003f4 	.word	0x200003f4
 80038f0:	20000410 	.word	0x20000410

080038f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d06e      	beq.n	80039e8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390e:	4b39      	ldr	r3, [pc, #228]	; (80039f4 <xTaskPriorityInherit+0x100>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	429a      	cmp	r2, r3
 8003916:	d25e      	bcs.n	80039d6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	2b00      	cmp	r3, #0
 800391e:	db06      	blt.n	800392e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003920:	4b34      	ldr	r3, [pc, #208]	; (80039f4 <xTaskPriorityInherit+0x100>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	f1c3 0207 	rsb	r2, r3, #7
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	6959      	ldr	r1, [r3, #20]
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4a2e      	ldr	r2, [pc, #184]	; (80039f8 <xTaskPriorityInherit+0x104>)
 8003940:	4413      	add	r3, r2
 8003942:	4299      	cmp	r1, r3
 8003944:	d101      	bne.n	800394a <xTaskPriorityInherit+0x56>
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <xTaskPriorityInherit+0x58>
 800394a:	2300      	movs	r3, #0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d03a      	beq.n	80039c6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	3304      	adds	r3, #4
 8003954:	4618      	mov	r0, r3
 8003956:	f7fe fbdb 	bl	8002110 <uxListRemove>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d115      	bne.n	800398c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003964:	4924      	ldr	r1, [pc, #144]	; (80039f8 <xTaskPriorityInherit+0x104>)
 8003966:	4613      	mov	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10a      	bne.n	800398c <xTaskPriorityInherit+0x98>
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397a:	2201      	movs	r2, #1
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43da      	mvns	r2, r3
 8003982:	4b1e      	ldr	r3, [pc, #120]	; (80039fc <xTaskPriorityInherit+0x108>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4013      	ands	r3, r2
 8003988:	4a1c      	ldr	r2, [pc, #112]	; (80039fc <xTaskPriorityInherit+0x108>)
 800398a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800398c:	4b19      	ldr	r3, [pc, #100]	; (80039f4 <xTaskPriorityInherit+0x100>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399a:	2201      	movs	r2, #1
 800399c:	409a      	lsls	r2, r3
 800399e:	4b17      	ldr	r3, [pc, #92]	; (80039fc <xTaskPriorityInherit+0x108>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	4a15      	ldr	r2, [pc, #84]	; (80039fc <xTaskPriorityInherit+0x108>)
 80039a6:	6013      	str	r3, [r2, #0]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4a10      	ldr	r2, [pc, #64]	; (80039f8 <xTaskPriorityInherit+0x104>)
 80039b6:	441a      	add	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	3304      	adds	r3, #4
 80039bc:	4619      	mov	r1, r3
 80039be:	4610      	mov	r0, r2
 80039c0:	f7fe fb4b 	bl	800205a <vListInsertEnd>
 80039c4:	e004      	b.n	80039d0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80039c6:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <xTaskPriorityInherit+0x100>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80039d0:	2301      	movs	r3, #1
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	e008      	b.n	80039e8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039da:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <xTaskPriorityInherit+0x100>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d201      	bcs.n	80039e8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80039e4:	2301      	movs	r3, #1
 80039e6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80039e8:	68fb      	ldr	r3, [r7, #12]
	}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	200002e8 	.word	0x200002e8
 80039f8:	200002ec 	.word	0x200002ec
 80039fc:	200003f0 	.word	0x200003f0

08003a00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d06e      	beq.n	8003af4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003a16:	4b3a      	ldr	r3, [pc, #232]	; (8003b00 <xTaskPriorityDisinherit+0x100>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d00a      	beq.n	8003a36 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	60fb      	str	r3, [r7, #12]
}
 8003a32:	bf00      	nop
 8003a34:	e7fe      	b.n	8003a34 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10a      	bne.n	8003a54 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a42:	f383 8811 	msr	BASEPRI, r3
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	60bb      	str	r3, [r7, #8]
}
 8003a50:	bf00      	nop
 8003a52:	e7fe      	b.n	8003a52 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a58:	1e5a      	subs	r2, r3, #1
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d044      	beq.n	8003af4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d140      	bne.n	8003af4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	3304      	adds	r3, #4
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fe fb4a 	bl	8002110 <uxListRemove>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d115      	bne.n	8003aae <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a86:	491f      	ldr	r1, [pc, #124]	; (8003b04 <xTaskPriorityDisinherit+0x104>)
 8003a88:	4613      	mov	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10a      	bne.n	8003aae <xTaskPriorityDisinherit+0xae>
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	4b18      	ldr	r3, [pc, #96]	; (8003b08 <xTaskPriorityDisinherit+0x108>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	4a17      	ldr	r2, [pc, #92]	; (8003b08 <xTaskPriorityDisinherit+0x108>)
 8003aac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aba:	f1c3 0207 	rsb	r2, r3, #7
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	4b0f      	ldr	r3, [pc, #60]	; (8003b08 <xTaskPriorityDisinherit+0x108>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	4a0d      	ldr	r2, [pc, #52]	; (8003b08 <xTaskPriorityDisinherit+0x108>)
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4a08      	ldr	r2, [pc, #32]	; (8003b04 <xTaskPriorityDisinherit+0x104>)
 8003ae2:	441a      	add	r2, r3
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4610      	mov	r0, r2
 8003aec:	f7fe fab5 	bl	800205a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003af0:	2301      	movs	r3, #1
 8003af2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003af4:	697b      	ldr	r3, [r7, #20]
	}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3718      	adds	r7, #24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	200002e8 	.word	0x200002e8
 8003b04:	200002ec 	.word	0x200002ec
 8003b08:	200003f0 	.word	0x200003f0

08003b0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b088      	sub	sp, #32
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 8088 	beq.w	8003c36 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10a      	bne.n	8003b44 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8003b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b32:	f383 8811 	msr	BASEPRI, r3
 8003b36:	f3bf 8f6f 	isb	sy
 8003b3a:	f3bf 8f4f 	dsb	sy
 8003b3e:	60fb      	str	r3, [r7, #12]
}
 8003b40:	bf00      	nop
 8003b42:	e7fe      	b.n	8003b42 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d902      	bls.n	8003b54 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	61fb      	str	r3, [r7, #28]
 8003b52:	e002      	b.n	8003b5a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b58:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d068      	beq.n	8003c36 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d163      	bne.n	8003c36 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003b6e:	4b34      	ldr	r3, [pc, #208]	; (8003c40 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d10a      	bne.n	8003b8e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8003b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	60bb      	str	r3, [r7, #8]
}
 8003b8a:	bf00      	nop
 8003b8c:	e7fe      	b.n	8003b8c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b92:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	69fa      	ldr	r2, [r7, #28]
 8003b98:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	db04      	blt.n	8003bac <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	f1c3 0207 	rsb	r2, r3, #7
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	6959      	ldr	r1, [r3, #20]
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4a22      	ldr	r2, [pc, #136]	; (8003c44 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003bbc:	4413      	add	r3, r2
 8003bbe:	4299      	cmp	r1, r3
 8003bc0:	d101      	bne.n	8003bc6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e000      	b.n	8003bc8 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d034      	beq.n	8003c36 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fe fa9d 	bl	8002110 <uxListRemove>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d115      	bne.n	8003c08 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be0:	4918      	ldr	r1, [pc, #96]	; (8003c44 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	440b      	add	r3, r1
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10a      	bne.n	8003c08 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	43da      	mvns	r2, r3
 8003bfe:	4b12      	ldr	r3, [pc, #72]	; (8003c48 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4013      	ands	r3, r2
 8003c04:	4a10      	ldr	r2, [pc, #64]	; (8003c48 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003c06:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	409a      	lsls	r2, r3
 8003c10:	4b0d      	ldr	r3, [pc, #52]	; (8003c48 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	4a0c      	ldr	r2, [pc, #48]	; (8003c48 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1e:	4613      	mov	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4a07      	ldr	r2, [pc, #28]	; (8003c44 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003c28:	441a      	add	r2, r3
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4610      	mov	r0, r2
 8003c32:	f7fe fa12 	bl	800205a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c36:	bf00      	nop
 8003c38:	3720      	adds	r7, #32
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	200002e8 	.word	0x200002e8
 8003c44:	200002ec 	.word	0x200002ec
 8003c48:	200003f0 	.word	0x200003f0

08003c4c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003c50:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <pvTaskIncrementMutexHeldCount+0x24>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d004      	beq.n	8003c62 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <pvTaskIncrementMutexHeldCount+0x24>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c5e:	3201      	adds	r2, #1
 8003c60:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8003c62:	4b03      	ldr	r3, [pc, #12]	; (8003c70 <pvTaskIncrementMutexHeldCount+0x24>)
 8003c64:	681b      	ldr	r3, [r3, #0]
	}
 8003c66:	4618      	mov	r0, r3
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc80      	pop	{r7}
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	200002e8 	.word	0x200002e8

08003c74 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c7e:	4b29      	ldr	r3, [pc, #164]	; (8003d24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c84:	4b28      	ldr	r3, [pc, #160]	; (8003d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fe fa40 	bl	8002110 <uxListRemove>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10b      	bne.n	8003cae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003c96:	4b24      	ldr	r3, [pc, #144]	; (8003d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43da      	mvns	r2, r3
 8003ca4:	4b21      	ldr	r3, [pc, #132]	; (8003d2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	4a20      	ldr	r2, [pc, #128]	; (8003d2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003cac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb4:	d10a      	bne.n	8003ccc <prvAddCurrentTaskToDelayedList+0x58>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d007      	beq.n	8003ccc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cbc:	4b1a      	ldr	r3, [pc, #104]	; (8003d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	481a      	ldr	r0, [pc, #104]	; (8003d30 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003cc6:	f7fe f9c8 	bl	800205a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003cca:	e026      	b.n	8003d1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003cd4:	4b14      	ldr	r3, [pc, #80]	; (8003d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d209      	bcs.n	8003cf8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ce4:	4b13      	ldr	r3, [pc, #76]	; (8003d34 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	4b0f      	ldr	r3, [pc, #60]	; (8003d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3304      	adds	r3, #4
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	f7fe f9d5 	bl	80020a0 <vListInsert>
}
 8003cf6:	e010      	b.n	8003d1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cf8:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3304      	adds	r3, #4
 8003d02:	4619      	mov	r1, r3
 8003d04:	4610      	mov	r0, r2
 8003d06:	f7fe f9cb 	bl	80020a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	; (8003d3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d202      	bcs.n	8003d1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003d14:	4a09      	ldr	r2, [pc, #36]	; (8003d3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	6013      	str	r3, [r2, #0]
}
 8003d1a:	bf00      	nop
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	200003ec 	.word	0x200003ec
 8003d28:	200002e8 	.word	0x200002e8
 8003d2c:	200003f0 	.word	0x200003f0
 8003d30:	200003d4 	.word	0x200003d4
 8003d34:	200003a4 	.word	0x200003a4
 8003d38:	200003a0 	.word	0x200003a0
 8003d3c:	20000408 	.word	0x20000408

08003d40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	3b04      	subs	r3, #4
 8003d50:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	3b04      	subs	r3, #4
 8003d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f023 0201 	bic.w	r2, r3, #1
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	3b04      	subs	r3, #4
 8003d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d70:	4a08      	ldr	r2, [pc, #32]	; (8003d94 <pxPortInitialiseStack+0x54>)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	3b14      	subs	r3, #20
 8003d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	3b20      	subs	r3, #32
 8003d86:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003d88:	68fb      	ldr	r3, [r7, #12]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bc80      	pop	{r7}
 8003d92:	4770      	bx	lr
 8003d94:	08003d99 	.word	0x08003d99

08003d98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003da2:	4b12      	ldr	r3, [pc, #72]	; (8003dec <prvTaskExitError+0x54>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003daa:	d00a      	beq.n	8003dc2 <prvTaskExitError+0x2a>
	__asm volatile
 8003dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	60fb      	str	r3, [r7, #12]
}
 8003dbe:	bf00      	nop
 8003dc0:	e7fe      	b.n	8003dc0 <prvTaskExitError+0x28>
	__asm volatile
 8003dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc6:	f383 8811 	msr	BASEPRI, r3
 8003dca:	f3bf 8f6f 	isb	sy
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	60bb      	str	r3, [r7, #8]
}
 8003dd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003dd6:	bf00      	nop
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0fc      	beq.n	8003dd8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003dde:	bf00      	nop
 8003de0:	bf00      	nop
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc80      	pop	{r7}
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	2000000c 	.word	0x2000000c

08003df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003df0:	4b07      	ldr	r3, [pc, #28]	; (8003e10 <pxCurrentTCBConst2>)
 8003df2:	6819      	ldr	r1, [r3, #0]
 8003df4:	6808      	ldr	r0, [r1, #0]
 8003df6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003dfa:	f380 8809 	msr	PSP, r0
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f04f 0000 	mov.w	r0, #0
 8003e06:	f380 8811 	msr	BASEPRI, r0
 8003e0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003e0e:	4770      	bx	lr

08003e10 <pxCurrentTCBConst2>:
 8003e10:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003e14:	bf00      	nop
 8003e16:	bf00      	nop

08003e18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003e18:	4806      	ldr	r0, [pc, #24]	; (8003e34 <prvPortStartFirstTask+0x1c>)
 8003e1a:	6800      	ldr	r0, [r0, #0]
 8003e1c:	6800      	ldr	r0, [r0, #0]
 8003e1e:	f380 8808 	msr	MSP, r0
 8003e22:	b662      	cpsie	i
 8003e24:	b661      	cpsie	f
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	f3bf 8f6f 	isb	sy
 8003e2e:	df00      	svc	0
 8003e30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e32:	bf00      	nop
 8003e34:	e000ed08 	.word	0xe000ed08

08003e38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e3e:	4b32      	ldr	r3, [pc, #200]	; (8003f08 <xPortStartScheduler+0xd0>)
 8003e40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	22ff      	movs	r2, #255	; 0xff
 8003e4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e58:	78fb      	ldrb	r3, [r7, #3]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	4b2a      	ldr	r3, [pc, #168]	; (8003f0c <xPortStartScheduler+0xd4>)
 8003e64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e66:	4b2a      	ldr	r3, [pc, #168]	; (8003f10 <xPortStartScheduler+0xd8>)
 8003e68:	2207      	movs	r2, #7
 8003e6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e6c:	e009      	b.n	8003e82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003e6e:	4b28      	ldr	r3, [pc, #160]	; (8003f10 <xPortStartScheduler+0xd8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	4a26      	ldr	r2, [pc, #152]	; (8003f10 <xPortStartScheduler+0xd8>)
 8003e76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e82:	78fb      	ldrb	r3, [r7, #3]
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8a:	2b80      	cmp	r3, #128	; 0x80
 8003e8c:	d0ef      	beq.n	8003e6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e8e:	4b20      	ldr	r3, [pc, #128]	; (8003f10 <xPortStartScheduler+0xd8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f1c3 0307 	rsb	r3, r3, #7
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d00a      	beq.n	8003eb0 <xPortStartScheduler+0x78>
	__asm volatile
 8003e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9e:	f383 8811 	msr	BASEPRI, r3
 8003ea2:	f3bf 8f6f 	isb	sy
 8003ea6:	f3bf 8f4f 	dsb	sy
 8003eaa:	60bb      	str	r3, [r7, #8]
}
 8003eac:	bf00      	nop
 8003eae:	e7fe      	b.n	8003eae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003eb0:	4b17      	ldr	r3, [pc, #92]	; (8003f10 <xPortStartScheduler+0xd8>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	021b      	lsls	r3, r3, #8
 8003eb6:	4a16      	ldr	r2, [pc, #88]	; (8003f10 <xPortStartScheduler+0xd8>)
 8003eb8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003eba:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <xPortStartScheduler+0xd8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ec2:	4a13      	ldr	r2, [pc, #76]	; (8003f10 <xPortStartScheduler+0xd8>)
 8003ec4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003ece:	4b11      	ldr	r3, [pc, #68]	; (8003f14 <xPortStartScheduler+0xdc>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a10      	ldr	r2, [pc, #64]	; (8003f14 <xPortStartScheduler+0xdc>)
 8003ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ed8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003eda:	4b0e      	ldr	r3, [pc, #56]	; (8003f14 <xPortStartScheduler+0xdc>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a0d      	ldr	r2, [pc, #52]	; (8003f14 <xPortStartScheduler+0xdc>)
 8003ee0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ee4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ee6:	f000 f8b9 	bl	800405c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003eea:	4b0b      	ldr	r3, [pc, #44]	; (8003f18 <xPortStartScheduler+0xe0>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003ef0:	f7ff ff92 	bl	8003e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ef4:	f7ff faa2 	bl	800343c <vTaskSwitchContext>
	prvTaskExitError();
 8003ef8:	f7ff ff4e 	bl	8003d98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	e000e400 	.word	0xe000e400
 8003f0c:	20000414 	.word	0x20000414
 8003f10:	20000418 	.word	0x20000418
 8003f14:	e000ed20 	.word	0xe000ed20
 8003f18:	2000000c 	.word	0x2000000c

08003f1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
	__asm volatile
 8003f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f26:	f383 8811 	msr	BASEPRI, r3
 8003f2a:	f3bf 8f6f 	isb	sy
 8003f2e:	f3bf 8f4f 	dsb	sy
 8003f32:	607b      	str	r3, [r7, #4]
}
 8003f34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003f36:	4b0f      	ldr	r3, [pc, #60]	; (8003f74 <vPortEnterCritical+0x58>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	4a0d      	ldr	r2, [pc, #52]	; (8003f74 <vPortEnterCritical+0x58>)
 8003f3e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003f40:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <vPortEnterCritical+0x58>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d10f      	bne.n	8003f68 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f48:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <vPortEnterCritical+0x5c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <vPortEnterCritical+0x4c>
	__asm volatile
 8003f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	603b      	str	r3, [r7, #0]
}
 8003f64:	bf00      	nop
 8003f66:	e7fe      	b.n	8003f66 <vPortEnterCritical+0x4a>
	}
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	2000000c 	.word	0x2000000c
 8003f78:	e000ed04 	.word	0xe000ed04

08003f7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003f82:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <vPortExitCritical+0x4c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <vPortExitCritical+0x24>
	__asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	607b      	str	r3, [r7, #4]
}
 8003f9c:	bf00      	nop
 8003f9e:	e7fe      	b.n	8003f9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003fa0:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <vPortExitCritical+0x4c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	4a08      	ldr	r2, [pc, #32]	; (8003fc8 <vPortExitCritical+0x4c>)
 8003fa8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003faa:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <vPortExitCritical+0x4c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d105      	bne.n	8003fbe <vPortExitCritical+0x42>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	f383 8811 	msr	BASEPRI, r3
}
 8003fbc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr
 8003fc8:	2000000c 	.word	0x2000000c
 8003fcc:	00000000 	.word	0x00000000

08003fd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003fd0:	f3ef 8009 	mrs	r0, PSP
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	4b0d      	ldr	r3, [pc, #52]	; (8004010 <pxCurrentTCBConst>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003fe0:	6010      	str	r0, [r2, #0]
 8003fe2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003fe6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003fea:	f380 8811 	msr	BASEPRI, r0
 8003fee:	f7ff fa25 	bl	800343c <vTaskSwitchContext>
 8003ff2:	f04f 0000 	mov.w	r0, #0
 8003ff6:	f380 8811 	msr	BASEPRI, r0
 8003ffa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003ffe:	6819      	ldr	r1, [r3, #0]
 8004000:	6808      	ldr	r0, [r1, #0]
 8004002:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004006:	f380 8809 	msr	PSP, r0
 800400a:	f3bf 8f6f 	isb	sy
 800400e:	4770      	bx	lr

08004010 <pxCurrentTCBConst>:
 8004010:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004014:	bf00      	nop
 8004016:	bf00      	nop

08004018 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
	__asm volatile
 800401e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004022:	f383 8811 	msr	BASEPRI, r3
 8004026:	f3bf 8f6f 	isb	sy
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	607b      	str	r3, [r7, #4]
}
 8004030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004032:	f7ff f945 	bl	80032c0 <xTaskIncrementTick>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800403c:	4b06      	ldr	r3, [pc, #24]	; (8004058 <SysTick_Handler+0x40>)
 800403e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	2300      	movs	r3, #0
 8004046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	f383 8811 	msr	BASEPRI, r3
}
 800404e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004050:	bf00      	nop
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	e000ed04 	.word	0xe000ed04

0800405c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004060:	4b0a      	ldr	r3, [pc, #40]	; (800408c <vPortSetupTimerInterrupt+0x30>)
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004066:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <vPortSetupTimerInterrupt+0x34>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800406c:	4b09      	ldr	r3, [pc, #36]	; (8004094 <vPortSetupTimerInterrupt+0x38>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a09      	ldr	r2, [pc, #36]	; (8004098 <vPortSetupTimerInterrupt+0x3c>)
 8004072:	fba2 2303 	umull	r2, r3, r2, r3
 8004076:	099b      	lsrs	r3, r3, #6
 8004078:	4a08      	ldr	r2, [pc, #32]	; (800409c <vPortSetupTimerInterrupt+0x40>)
 800407a:	3b01      	subs	r3, #1
 800407c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800407e:	4b03      	ldr	r3, [pc, #12]	; (800408c <vPortSetupTimerInterrupt+0x30>)
 8004080:	2207      	movs	r2, #7
 8004082:	601a      	str	r2, [r3, #0]
}
 8004084:	bf00      	nop
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr
 800408c:	e000e010 	.word	0xe000e010
 8004090:	e000e018 	.word	0xe000e018
 8004094:	20000000 	.word	0x20000000
 8004098:	10624dd3 	.word	0x10624dd3
 800409c:	e000e014 	.word	0xe000e014

080040a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80040a6:	f3ef 8305 	mrs	r3, IPSR
 80040aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2b0f      	cmp	r3, #15
 80040b0:	d914      	bls.n	80040dc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80040b2:	4a16      	ldr	r2, [pc, #88]	; (800410c <vPortValidateInterruptPriority+0x6c>)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4413      	add	r3, r2
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80040bc:	4b14      	ldr	r3, [pc, #80]	; (8004110 <vPortValidateInterruptPriority+0x70>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	7afa      	ldrb	r2, [r7, #11]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d20a      	bcs.n	80040dc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80040c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	607b      	str	r3, [r7, #4]
}
 80040d8:	bf00      	nop
 80040da:	e7fe      	b.n	80040da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80040dc:	4b0d      	ldr	r3, [pc, #52]	; (8004114 <vPortValidateInterruptPriority+0x74>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80040e4:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <vPortValidateInterruptPriority+0x78>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d90a      	bls.n	8004102 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80040ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f0:	f383 8811 	msr	BASEPRI, r3
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	603b      	str	r3, [r7, #0]
}
 80040fe:	bf00      	nop
 8004100:	e7fe      	b.n	8004100 <vPortValidateInterruptPriority+0x60>
	}
 8004102:	bf00      	nop
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr
 800410c:	e000e3f0 	.word	0xe000e3f0
 8004110:	20000414 	.word	0x20000414
 8004114:	e000ed0c 	.word	0xe000ed0c
 8004118:	20000418 	.word	0x20000418

0800411c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b08a      	sub	sp, #40	; 0x28
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004124:	2300      	movs	r3, #0
 8004126:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004128:	f7ff f820 	bl	800316c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800412c:	4b58      	ldr	r3, [pc, #352]	; (8004290 <pvPortMalloc+0x174>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004134:	f000 f910 	bl	8004358 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004138:	4b56      	ldr	r3, [pc, #344]	; (8004294 <pvPortMalloc+0x178>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4013      	ands	r3, r2
 8004140:	2b00      	cmp	r3, #0
 8004142:	f040 808e 	bne.w	8004262 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d01d      	beq.n	8004188 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800414c:	2208      	movs	r2, #8
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4413      	add	r3, r2
 8004152:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	2b00      	cmp	r3, #0
 800415c:	d014      	beq.n	8004188 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f023 0307 	bic.w	r3, r3, #7
 8004164:	3308      	adds	r3, #8
 8004166:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <pvPortMalloc+0x6c>
	__asm volatile
 8004172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004176:	f383 8811 	msr	BASEPRI, r3
 800417a:	f3bf 8f6f 	isb	sy
 800417e:	f3bf 8f4f 	dsb	sy
 8004182:	617b      	str	r3, [r7, #20]
}
 8004184:	bf00      	nop
 8004186:	e7fe      	b.n	8004186 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d069      	beq.n	8004262 <pvPortMalloc+0x146>
 800418e:	4b42      	ldr	r3, [pc, #264]	; (8004298 <pvPortMalloc+0x17c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	429a      	cmp	r2, r3
 8004196:	d864      	bhi.n	8004262 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004198:	4b40      	ldr	r3, [pc, #256]	; (800429c <pvPortMalloc+0x180>)
 800419a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800419c:	4b3f      	ldr	r3, [pc, #252]	; (800429c <pvPortMalloc+0x180>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041a2:	e004      	b.n	80041ae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d903      	bls.n	80041c0 <pvPortMalloc+0xa4>
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1f1      	bne.n	80041a4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80041c0:	4b33      	ldr	r3, [pc, #204]	; (8004290 <pvPortMalloc+0x174>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d04b      	beq.n	8004262 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2208      	movs	r2, #8
 80041d0:	4413      	add	r3, r2
 80041d2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	1ad2      	subs	r2, r2, r3
 80041e4:	2308      	movs	r3, #8
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d91f      	bls.n	800422c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80041ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4413      	add	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <pvPortMalloc+0xf8>
	__asm volatile
 80041fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	613b      	str	r3, [r7, #16]
}
 8004210:	bf00      	nop
 8004212:	e7fe      	b.n	8004212 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	1ad2      	subs	r2, r2, r3
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004226:	69b8      	ldr	r0, [r7, #24]
 8004228:	f000 f8f8 	bl	800441c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800422c:	4b1a      	ldr	r3, [pc, #104]	; (8004298 <pvPortMalloc+0x17c>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	4a18      	ldr	r2, [pc, #96]	; (8004298 <pvPortMalloc+0x17c>)
 8004238:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800423a:	4b17      	ldr	r3, [pc, #92]	; (8004298 <pvPortMalloc+0x17c>)
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	4b18      	ldr	r3, [pc, #96]	; (80042a0 <pvPortMalloc+0x184>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d203      	bcs.n	800424e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004246:	4b14      	ldr	r3, [pc, #80]	; (8004298 <pvPortMalloc+0x17c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a15      	ldr	r2, [pc, #84]	; (80042a0 <pvPortMalloc+0x184>)
 800424c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	4b10      	ldr	r3, [pc, #64]	; (8004294 <pvPortMalloc+0x178>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	431a      	orrs	r2, r3
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004262:	f7fe ff91 	bl	8003188 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <pvPortMalloc+0x16a>
	__asm volatile
 8004270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004274:	f383 8811 	msr	BASEPRI, r3
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	60fb      	str	r3, [r7, #12]
}
 8004282:	bf00      	nop
 8004284:	e7fe      	b.n	8004284 <pvPortMalloc+0x168>
	return pvReturn;
 8004286:	69fb      	ldr	r3, [r7, #28]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3728      	adds	r7, #40	; 0x28
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	20001024 	.word	0x20001024
 8004294:	20001030 	.word	0x20001030
 8004298:	20001028 	.word	0x20001028
 800429c:	2000101c 	.word	0x2000101c
 80042a0:	2000102c 	.word	0x2000102c

080042a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d048      	beq.n	8004348 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80042b6:	2308      	movs	r3, #8
 80042b8:	425b      	negs	r3, r3
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	4413      	add	r3, r2
 80042be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	4b21      	ldr	r3, [pc, #132]	; (8004350 <vPortFree+0xac>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4013      	ands	r3, r2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10a      	bne.n	80042e8 <vPortFree+0x44>
	__asm volatile
 80042d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	60fb      	str	r3, [r7, #12]
}
 80042e4:	bf00      	nop
 80042e6:	e7fe      	b.n	80042e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00a      	beq.n	8004306 <vPortFree+0x62>
	__asm volatile
 80042f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f4:	f383 8811 	msr	BASEPRI, r3
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	60bb      	str	r3, [r7, #8]
}
 8004302:	bf00      	nop
 8004304:	e7fe      	b.n	8004304 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	4b11      	ldr	r3, [pc, #68]	; (8004350 <vPortFree+0xac>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4013      	ands	r3, r2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d019      	beq.n	8004348 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d115      	bne.n	8004348 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <vPortFree+0xac>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	43db      	mvns	r3, r3
 8004326:	401a      	ands	r2, r3
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800432c:	f7fe ff1e 	bl	800316c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	4b07      	ldr	r3, [pc, #28]	; (8004354 <vPortFree+0xb0>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4413      	add	r3, r2
 800433a:	4a06      	ldr	r2, [pc, #24]	; (8004354 <vPortFree+0xb0>)
 800433c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800433e:	6938      	ldr	r0, [r7, #16]
 8004340:	f000 f86c 	bl	800441c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004344:	f7fe ff20 	bl	8003188 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004348:	bf00      	nop
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	20001030 	.word	0x20001030
 8004354:	20001028 	.word	0x20001028

08004358 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800435e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004362:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004364:	4b27      	ldr	r3, [pc, #156]	; (8004404 <prvHeapInit+0xac>)
 8004366:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00c      	beq.n	800438c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3307      	adds	r3, #7
 8004376:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 0307 	bic.w	r3, r3, #7
 800437e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	4a1f      	ldr	r2, [pc, #124]	; (8004404 <prvHeapInit+0xac>)
 8004388:	4413      	add	r3, r2
 800438a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004390:	4a1d      	ldr	r2, [pc, #116]	; (8004408 <prvHeapInit+0xb0>)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004396:	4b1c      	ldr	r3, [pc, #112]	; (8004408 <prvHeapInit+0xb0>)
 8004398:	2200      	movs	r2, #0
 800439a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	4413      	add	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80043a4:	2208      	movs	r2, #8
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1a9b      	subs	r3, r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 0307 	bic.w	r3, r3, #7
 80043b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4a15      	ldr	r2, [pc, #84]	; (800440c <prvHeapInit+0xb4>)
 80043b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80043ba:	4b14      	ldr	r3, [pc, #80]	; (800440c <prvHeapInit+0xb4>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2200      	movs	r2, #0
 80043c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80043c2:	4b12      	ldr	r3, [pc, #72]	; (800440c <prvHeapInit+0xb4>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	1ad2      	subs	r2, r2, r3
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80043d8:	4b0c      	ldr	r3, [pc, #48]	; (800440c <prvHeapInit+0xb4>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	4a0a      	ldr	r2, [pc, #40]	; (8004410 <prvHeapInit+0xb8>)
 80043e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	4a09      	ldr	r2, [pc, #36]	; (8004414 <prvHeapInit+0xbc>)
 80043ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80043f0:	4b09      	ldr	r3, [pc, #36]	; (8004418 <prvHeapInit+0xc0>)
 80043f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80043f6:	601a      	str	r2, [r3, #0]
}
 80043f8:	bf00      	nop
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bc80      	pop	{r7}
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	2000041c 	.word	0x2000041c
 8004408:	2000101c 	.word	0x2000101c
 800440c:	20001024 	.word	0x20001024
 8004410:	2000102c 	.word	0x2000102c
 8004414:	20001028 	.word	0x20001028
 8004418:	20001030 	.word	0x20001030

0800441c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004424:	4b27      	ldr	r3, [pc, #156]	; (80044c4 <prvInsertBlockIntoFreeList+0xa8>)
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	e002      	b.n	8004430 <prvInsertBlockIntoFreeList+0x14>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	429a      	cmp	r2, r3
 8004438:	d8f7      	bhi.n	800442a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	4413      	add	r3, r2
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	429a      	cmp	r2, r3
 800444a:	d108      	bne.n	800445e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	441a      	add	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	441a      	add	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d118      	bne.n	80044a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	4b14      	ldr	r3, [pc, #80]	; (80044c8 <prvInsertBlockIntoFreeList+0xac>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d00d      	beq.n	800449a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	441a      	add	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	e008      	b.n	80044ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800449a:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <prvInsertBlockIntoFreeList+0xac>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	e003      	b.n	80044ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d002      	beq.n	80044ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044ba:	bf00      	nop
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr
 80044c4:	2000101c 	.word	0x2000101c
 80044c8:	20001024 	.word	0x20001024

080044cc <__errno>:
 80044cc:	4b01      	ldr	r3, [pc, #4]	; (80044d4 <__errno+0x8>)
 80044ce:	6818      	ldr	r0, [r3, #0]
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	20000010 	.word	0x20000010

080044d8 <__libc_init_array>:
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	2600      	movs	r6, #0
 80044dc:	4d0c      	ldr	r5, [pc, #48]	; (8004510 <__libc_init_array+0x38>)
 80044de:	4c0d      	ldr	r4, [pc, #52]	; (8004514 <__libc_init_array+0x3c>)
 80044e0:	1b64      	subs	r4, r4, r5
 80044e2:	10a4      	asrs	r4, r4, #2
 80044e4:	42a6      	cmp	r6, r4
 80044e6:	d109      	bne.n	80044fc <__libc_init_array+0x24>
 80044e8:	f000 ff90 	bl	800540c <_init>
 80044ec:	2600      	movs	r6, #0
 80044ee:	4d0a      	ldr	r5, [pc, #40]	; (8004518 <__libc_init_array+0x40>)
 80044f0:	4c0a      	ldr	r4, [pc, #40]	; (800451c <__libc_init_array+0x44>)
 80044f2:	1b64      	subs	r4, r4, r5
 80044f4:	10a4      	asrs	r4, r4, #2
 80044f6:	42a6      	cmp	r6, r4
 80044f8:	d105      	bne.n	8004506 <__libc_init_array+0x2e>
 80044fa:	bd70      	pop	{r4, r5, r6, pc}
 80044fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004500:	4798      	blx	r3
 8004502:	3601      	adds	r6, #1
 8004504:	e7ee      	b.n	80044e4 <__libc_init_array+0xc>
 8004506:	f855 3b04 	ldr.w	r3, [r5], #4
 800450a:	4798      	blx	r3
 800450c:	3601      	adds	r6, #1
 800450e:	e7f2      	b.n	80044f6 <__libc_init_array+0x1e>
 8004510:	080055cc 	.word	0x080055cc
 8004514:	080055cc 	.word	0x080055cc
 8004518:	080055cc 	.word	0x080055cc
 800451c:	080055d0 	.word	0x080055d0

08004520 <memcpy>:
 8004520:	440a      	add	r2, r1
 8004522:	4291      	cmp	r1, r2
 8004524:	f100 33ff 	add.w	r3, r0, #4294967295
 8004528:	d100      	bne.n	800452c <memcpy+0xc>
 800452a:	4770      	bx	lr
 800452c:	b510      	push	{r4, lr}
 800452e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004532:	4291      	cmp	r1, r2
 8004534:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004538:	d1f9      	bne.n	800452e <memcpy+0xe>
 800453a:	bd10      	pop	{r4, pc}

0800453c <memset>:
 800453c:	4603      	mov	r3, r0
 800453e:	4402      	add	r2, r0
 8004540:	4293      	cmp	r3, r2
 8004542:	d100      	bne.n	8004546 <memset+0xa>
 8004544:	4770      	bx	lr
 8004546:	f803 1b01 	strb.w	r1, [r3], #1
 800454a:	e7f9      	b.n	8004540 <memset+0x4>

0800454c <iprintf>:
 800454c:	b40f      	push	{r0, r1, r2, r3}
 800454e:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <iprintf+0x2c>)
 8004550:	b513      	push	{r0, r1, r4, lr}
 8004552:	681c      	ldr	r4, [r3, #0]
 8004554:	b124      	cbz	r4, 8004560 <iprintf+0x14>
 8004556:	69a3      	ldr	r3, [r4, #24]
 8004558:	b913      	cbnz	r3, 8004560 <iprintf+0x14>
 800455a:	4620      	mov	r0, r4
 800455c:	f000 f866 	bl	800462c <__sinit>
 8004560:	ab05      	add	r3, sp, #20
 8004562:	4620      	mov	r0, r4
 8004564:	9a04      	ldr	r2, [sp, #16]
 8004566:	68a1      	ldr	r1, [r4, #8]
 8004568:	9301      	str	r3, [sp, #4]
 800456a:	f000 f981 	bl	8004870 <_vfiprintf_r>
 800456e:	b002      	add	sp, #8
 8004570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004574:	b004      	add	sp, #16
 8004576:	4770      	bx	lr
 8004578:	20000010 	.word	0x20000010

0800457c <std>:
 800457c:	2300      	movs	r3, #0
 800457e:	b510      	push	{r4, lr}
 8004580:	4604      	mov	r4, r0
 8004582:	e9c0 3300 	strd	r3, r3, [r0]
 8004586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800458a:	6083      	str	r3, [r0, #8]
 800458c:	8181      	strh	r1, [r0, #12]
 800458e:	6643      	str	r3, [r0, #100]	; 0x64
 8004590:	81c2      	strh	r2, [r0, #14]
 8004592:	6183      	str	r3, [r0, #24]
 8004594:	4619      	mov	r1, r3
 8004596:	2208      	movs	r2, #8
 8004598:	305c      	adds	r0, #92	; 0x5c
 800459a:	f7ff ffcf 	bl	800453c <memset>
 800459e:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <std+0x38>)
 80045a0:	6224      	str	r4, [r4, #32]
 80045a2:	6263      	str	r3, [r4, #36]	; 0x24
 80045a4:	4b04      	ldr	r3, [pc, #16]	; (80045b8 <std+0x3c>)
 80045a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80045a8:	4b04      	ldr	r3, [pc, #16]	; (80045bc <std+0x40>)
 80045aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045ac:	4b04      	ldr	r3, [pc, #16]	; (80045c0 <std+0x44>)
 80045ae:	6323      	str	r3, [r4, #48]	; 0x30
 80045b0:	bd10      	pop	{r4, pc}
 80045b2:	bf00      	nop
 80045b4:	08004e1d 	.word	0x08004e1d
 80045b8:	08004e3f 	.word	0x08004e3f
 80045bc:	08004e77 	.word	0x08004e77
 80045c0:	08004e9b 	.word	0x08004e9b

080045c4 <_cleanup_r>:
 80045c4:	4901      	ldr	r1, [pc, #4]	; (80045cc <_cleanup_r+0x8>)
 80045c6:	f000 b8af 	b.w	8004728 <_fwalk_reent>
 80045ca:	bf00      	nop
 80045cc:	08005175 	.word	0x08005175

080045d0 <__sfmoreglue>:
 80045d0:	b570      	push	{r4, r5, r6, lr}
 80045d2:	2568      	movs	r5, #104	; 0x68
 80045d4:	1e4a      	subs	r2, r1, #1
 80045d6:	4355      	muls	r5, r2
 80045d8:	460e      	mov	r6, r1
 80045da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80045de:	f000 f8c5 	bl	800476c <_malloc_r>
 80045e2:	4604      	mov	r4, r0
 80045e4:	b140      	cbz	r0, 80045f8 <__sfmoreglue+0x28>
 80045e6:	2100      	movs	r1, #0
 80045e8:	e9c0 1600 	strd	r1, r6, [r0]
 80045ec:	300c      	adds	r0, #12
 80045ee:	60a0      	str	r0, [r4, #8]
 80045f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80045f4:	f7ff ffa2 	bl	800453c <memset>
 80045f8:	4620      	mov	r0, r4
 80045fa:	bd70      	pop	{r4, r5, r6, pc}

080045fc <__sfp_lock_acquire>:
 80045fc:	4801      	ldr	r0, [pc, #4]	; (8004604 <__sfp_lock_acquire+0x8>)
 80045fe:	f000 b8b3 	b.w	8004768 <__retarget_lock_acquire_recursive>
 8004602:	bf00      	nop
 8004604:	200010e0 	.word	0x200010e0

08004608 <__sfp_lock_release>:
 8004608:	4801      	ldr	r0, [pc, #4]	; (8004610 <__sfp_lock_release+0x8>)
 800460a:	f000 b8ae 	b.w	800476a <__retarget_lock_release_recursive>
 800460e:	bf00      	nop
 8004610:	200010e0 	.word	0x200010e0

08004614 <__sinit_lock_acquire>:
 8004614:	4801      	ldr	r0, [pc, #4]	; (800461c <__sinit_lock_acquire+0x8>)
 8004616:	f000 b8a7 	b.w	8004768 <__retarget_lock_acquire_recursive>
 800461a:	bf00      	nop
 800461c:	200010db 	.word	0x200010db

08004620 <__sinit_lock_release>:
 8004620:	4801      	ldr	r0, [pc, #4]	; (8004628 <__sinit_lock_release+0x8>)
 8004622:	f000 b8a2 	b.w	800476a <__retarget_lock_release_recursive>
 8004626:	bf00      	nop
 8004628:	200010db 	.word	0x200010db

0800462c <__sinit>:
 800462c:	b510      	push	{r4, lr}
 800462e:	4604      	mov	r4, r0
 8004630:	f7ff fff0 	bl	8004614 <__sinit_lock_acquire>
 8004634:	69a3      	ldr	r3, [r4, #24]
 8004636:	b11b      	cbz	r3, 8004640 <__sinit+0x14>
 8004638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800463c:	f7ff bff0 	b.w	8004620 <__sinit_lock_release>
 8004640:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004644:	6523      	str	r3, [r4, #80]	; 0x50
 8004646:	4b13      	ldr	r3, [pc, #76]	; (8004694 <__sinit+0x68>)
 8004648:	4a13      	ldr	r2, [pc, #76]	; (8004698 <__sinit+0x6c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	62a2      	str	r2, [r4, #40]	; 0x28
 800464e:	42a3      	cmp	r3, r4
 8004650:	bf08      	it	eq
 8004652:	2301      	moveq	r3, #1
 8004654:	4620      	mov	r0, r4
 8004656:	bf08      	it	eq
 8004658:	61a3      	streq	r3, [r4, #24]
 800465a:	f000 f81f 	bl	800469c <__sfp>
 800465e:	6060      	str	r0, [r4, #4]
 8004660:	4620      	mov	r0, r4
 8004662:	f000 f81b 	bl	800469c <__sfp>
 8004666:	60a0      	str	r0, [r4, #8]
 8004668:	4620      	mov	r0, r4
 800466a:	f000 f817 	bl	800469c <__sfp>
 800466e:	2200      	movs	r2, #0
 8004670:	2104      	movs	r1, #4
 8004672:	60e0      	str	r0, [r4, #12]
 8004674:	6860      	ldr	r0, [r4, #4]
 8004676:	f7ff ff81 	bl	800457c <std>
 800467a:	2201      	movs	r2, #1
 800467c:	2109      	movs	r1, #9
 800467e:	68a0      	ldr	r0, [r4, #8]
 8004680:	f7ff ff7c 	bl	800457c <std>
 8004684:	2202      	movs	r2, #2
 8004686:	2112      	movs	r1, #18
 8004688:	68e0      	ldr	r0, [r4, #12]
 800468a:	f7ff ff77 	bl	800457c <std>
 800468e:	2301      	movs	r3, #1
 8004690:	61a3      	str	r3, [r4, #24]
 8004692:	e7d1      	b.n	8004638 <__sinit+0xc>
 8004694:	08005534 	.word	0x08005534
 8004698:	080045c5 	.word	0x080045c5

0800469c <__sfp>:
 800469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469e:	4607      	mov	r7, r0
 80046a0:	f7ff ffac 	bl	80045fc <__sfp_lock_acquire>
 80046a4:	4b1e      	ldr	r3, [pc, #120]	; (8004720 <__sfp+0x84>)
 80046a6:	681e      	ldr	r6, [r3, #0]
 80046a8:	69b3      	ldr	r3, [r6, #24]
 80046aa:	b913      	cbnz	r3, 80046b2 <__sfp+0x16>
 80046ac:	4630      	mov	r0, r6
 80046ae:	f7ff ffbd 	bl	800462c <__sinit>
 80046b2:	3648      	adds	r6, #72	; 0x48
 80046b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80046b8:	3b01      	subs	r3, #1
 80046ba:	d503      	bpl.n	80046c4 <__sfp+0x28>
 80046bc:	6833      	ldr	r3, [r6, #0]
 80046be:	b30b      	cbz	r3, 8004704 <__sfp+0x68>
 80046c0:	6836      	ldr	r6, [r6, #0]
 80046c2:	e7f7      	b.n	80046b4 <__sfp+0x18>
 80046c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80046c8:	b9d5      	cbnz	r5, 8004700 <__sfp+0x64>
 80046ca:	4b16      	ldr	r3, [pc, #88]	; (8004724 <__sfp+0x88>)
 80046cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80046d0:	60e3      	str	r3, [r4, #12]
 80046d2:	6665      	str	r5, [r4, #100]	; 0x64
 80046d4:	f000 f847 	bl	8004766 <__retarget_lock_init_recursive>
 80046d8:	f7ff ff96 	bl	8004608 <__sfp_lock_release>
 80046dc:	2208      	movs	r2, #8
 80046de:	4629      	mov	r1, r5
 80046e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80046e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80046e8:	6025      	str	r5, [r4, #0]
 80046ea:	61a5      	str	r5, [r4, #24]
 80046ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80046f0:	f7ff ff24 	bl	800453c <memset>
 80046f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80046f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80046fc:	4620      	mov	r0, r4
 80046fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004700:	3468      	adds	r4, #104	; 0x68
 8004702:	e7d9      	b.n	80046b8 <__sfp+0x1c>
 8004704:	2104      	movs	r1, #4
 8004706:	4638      	mov	r0, r7
 8004708:	f7ff ff62 	bl	80045d0 <__sfmoreglue>
 800470c:	4604      	mov	r4, r0
 800470e:	6030      	str	r0, [r6, #0]
 8004710:	2800      	cmp	r0, #0
 8004712:	d1d5      	bne.n	80046c0 <__sfp+0x24>
 8004714:	f7ff ff78 	bl	8004608 <__sfp_lock_release>
 8004718:	230c      	movs	r3, #12
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	e7ee      	b.n	80046fc <__sfp+0x60>
 800471e:	bf00      	nop
 8004720:	08005534 	.word	0x08005534
 8004724:	ffff0001 	.word	0xffff0001

08004728 <_fwalk_reent>:
 8004728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800472c:	4606      	mov	r6, r0
 800472e:	4688      	mov	r8, r1
 8004730:	2700      	movs	r7, #0
 8004732:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004736:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800473a:	f1b9 0901 	subs.w	r9, r9, #1
 800473e:	d505      	bpl.n	800474c <_fwalk_reent+0x24>
 8004740:	6824      	ldr	r4, [r4, #0]
 8004742:	2c00      	cmp	r4, #0
 8004744:	d1f7      	bne.n	8004736 <_fwalk_reent+0xe>
 8004746:	4638      	mov	r0, r7
 8004748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800474c:	89ab      	ldrh	r3, [r5, #12]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d907      	bls.n	8004762 <_fwalk_reent+0x3a>
 8004752:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004756:	3301      	adds	r3, #1
 8004758:	d003      	beq.n	8004762 <_fwalk_reent+0x3a>
 800475a:	4629      	mov	r1, r5
 800475c:	4630      	mov	r0, r6
 800475e:	47c0      	blx	r8
 8004760:	4307      	orrs	r7, r0
 8004762:	3568      	adds	r5, #104	; 0x68
 8004764:	e7e9      	b.n	800473a <_fwalk_reent+0x12>

08004766 <__retarget_lock_init_recursive>:
 8004766:	4770      	bx	lr

08004768 <__retarget_lock_acquire_recursive>:
 8004768:	4770      	bx	lr

0800476a <__retarget_lock_release_recursive>:
 800476a:	4770      	bx	lr

0800476c <_malloc_r>:
 800476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476e:	1ccd      	adds	r5, r1, #3
 8004770:	f025 0503 	bic.w	r5, r5, #3
 8004774:	3508      	adds	r5, #8
 8004776:	2d0c      	cmp	r5, #12
 8004778:	bf38      	it	cc
 800477a:	250c      	movcc	r5, #12
 800477c:	2d00      	cmp	r5, #0
 800477e:	4606      	mov	r6, r0
 8004780:	db01      	blt.n	8004786 <_malloc_r+0x1a>
 8004782:	42a9      	cmp	r1, r5
 8004784:	d903      	bls.n	800478e <_malloc_r+0x22>
 8004786:	230c      	movs	r3, #12
 8004788:	6033      	str	r3, [r6, #0]
 800478a:	2000      	movs	r0, #0
 800478c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800478e:	f000 fdb1 	bl	80052f4 <__malloc_lock>
 8004792:	4921      	ldr	r1, [pc, #132]	; (8004818 <_malloc_r+0xac>)
 8004794:	680a      	ldr	r2, [r1, #0]
 8004796:	4614      	mov	r4, r2
 8004798:	b99c      	cbnz	r4, 80047c2 <_malloc_r+0x56>
 800479a:	4f20      	ldr	r7, [pc, #128]	; (800481c <_malloc_r+0xb0>)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	b923      	cbnz	r3, 80047aa <_malloc_r+0x3e>
 80047a0:	4621      	mov	r1, r4
 80047a2:	4630      	mov	r0, r6
 80047a4:	f000 fb2a 	bl	8004dfc <_sbrk_r>
 80047a8:	6038      	str	r0, [r7, #0]
 80047aa:	4629      	mov	r1, r5
 80047ac:	4630      	mov	r0, r6
 80047ae:	f000 fb25 	bl	8004dfc <_sbrk_r>
 80047b2:	1c43      	adds	r3, r0, #1
 80047b4:	d123      	bne.n	80047fe <_malloc_r+0x92>
 80047b6:	230c      	movs	r3, #12
 80047b8:	4630      	mov	r0, r6
 80047ba:	6033      	str	r3, [r6, #0]
 80047bc:	f000 fda0 	bl	8005300 <__malloc_unlock>
 80047c0:	e7e3      	b.n	800478a <_malloc_r+0x1e>
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	1b5b      	subs	r3, r3, r5
 80047c6:	d417      	bmi.n	80047f8 <_malloc_r+0x8c>
 80047c8:	2b0b      	cmp	r3, #11
 80047ca:	d903      	bls.n	80047d4 <_malloc_r+0x68>
 80047cc:	6023      	str	r3, [r4, #0]
 80047ce:	441c      	add	r4, r3
 80047d0:	6025      	str	r5, [r4, #0]
 80047d2:	e004      	b.n	80047de <_malloc_r+0x72>
 80047d4:	6863      	ldr	r3, [r4, #4]
 80047d6:	42a2      	cmp	r2, r4
 80047d8:	bf0c      	ite	eq
 80047da:	600b      	streq	r3, [r1, #0]
 80047dc:	6053      	strne	r3, [r2, #4]
 80047de:	4630      	mov	r0, r6
 80047e0:	f000 fd8e 	bl	8005300 <__malloc_unlock>
 80047e4:	f104 000b 	add.w	r0, r4, #11
 80047e8:	1d23      	adds	r3, r4, #4
 80047ea:	f020 0007 	bic.w	r0, r0, #7
 80047ee:	1ac2      	subs	r2, r0, r3
 80047f0:	d0cc      	beq.n	800478c <_malloc_r+0x20>
 80047f2:	1a1b      	subs	r3, r3, r0
 80047f4:	50a3      	str	r3, [r4, r2]
 80047f6:	e7c9      	b.n	800478c <_malloc_r+0x20>
 80047f8:	4622      	mov	r2, r4
 80047fa:	6864      	ldr	r4, [r4, #4]
 80047fc:	e7cc      	b.n	8004798 <_malloc_r+0x2c>
 80047fe:	1cc4      	adds	r4, r0, #3
 8004800:	f024 0403 	bic.w	r4, r4, #3
 8004804:	42a0      	cmp	r0, r4
 8004806:	d0e3      	beq.n	80047d0 <_malloc_r+0x64>
 8004808:	1a21      	subs	r1, r4, r0
 800480a:	4630      	mov	r0, r6
 800480c:	f000 faf6 	bl	8004dfc <_sbrk_r>
 8004810:	3001      	adds	r0, #1
 8004812:	d1dd      	bne.n	80047d0 <_malloc_r+0x64>
 8004814:	e7cf      	b.n	80047b6 <_malloc_r+0x4a>
 8004816:	bf00      	nop
 8004818:	20001034 	.word	0x20001034
 800481c:	20001038 	.word	0x20001038

08004820 <__sfputc_r>:
 8004820:	6893      	ldr	r3, [r2, #8]
 8004822:	b410      	push	{r4}
 8004824:	3b01      	subs	r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	6093      	str	r3, [r2, #8]
 800482a:	da07      	bge.n	800483c <__sfputc_r+0x1c>
 800482c:	6994      	ldr	r4, [r2, #24]
 800482e:	42a3      	cmp	r3, r4
 8004830:	db01      	blt.n	8004836 <__sfputc_r+0x16>
 8004832:	290a      	cmp	r1, #10
 8004834:	d102      	bne.n	800483c <__sfputc_r+0x1c>
 8004836:	bc10      	pop	{r4}
 8004838:	f000 bb34 	b.w	8004ea4 <__swbuf_r>
 800483c:	6813      	ldr	r3, [r2, #0]
 800483e:	1c58      	adds	r0, r3, #1
 8004840:	6010      	str	r0, [r2, #0]
 8004842:	7019      	strb	r1, [r3, #0]
 8004844:	4608      	mov	r0, r1
 8004846:	bc10      	pop	{r4}
 8004848:	4770      	bx	lr

0800484a <__sfputs_r>:
 800484a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484c:	4606      	mov	r6, r0
 800484e:	460f      	mov	r7, r1
 8004850:	4614      	mov	r4, r2
 8004852:	18d5      	adds	r5, r2, r3
 8004854:	42ac      	cmp	r4, r5
 8004856:	d101      	bne.n	800485c <__sfputs_r+0x12>
 8004858:	2000      	movs	r0, #0
 800485a:	e007      	b.n	800486c <__sfputs_r+0x22>
 800485c:	463a      	mov	r2, r7
 800485e:	4630      	mov	r0, r6
 8004860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004864:	f7ff ffdc 	bl	8004820 <__sfputc_r>
 8004868:	1c43      	adds	r3, r0, #1
 800486a:	d1f3      	bne.n	8004854 <__sfputs_r+0xa>
 800486c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004870 <_vfiprintf_r>:
 8004870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004874:	460d      	mov	r5, r1
 8004876:	4614      	mov	r4, r2
 8004878:	4698      	mov	r8, r3
 800487a:	4606      	mov	r6, r0
 800487c:	b09d      	sub	sp, #116	; 0x74
 800487e:	b118      	cbz	r0, 8004888 <_vfiprintf_r+0x18>
 8004880:	6983      	ldr	r3, [r0, #24]
 8004882:	b90b      	cbnz	r3, 8004888 <_vfiprintf_r+0x18>
 8004884:	f7ff fed2 	bl	800462c <__sinit>
 8004888:	4b89      	ldr	r3, [pc, #548]	; (8004ab0 <_vfiprintf_r+0x240>)
 800488a:	429d      	cmp	r5, r3
 800488c:	d11b      	bne.n	80048c6 <_vfiprintf_r+0x56>
 800488e:	6875      	ldr	r5, [r6, #4]
 8004890:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004892:	07d9      	lsls	r1, r3, #31
 8004894:	d405      	bmi.n	80048a2 <_vfiprintf_r+0x32>
 8004896:	89ab      	ldrh	r3, [r5, #12]
 8004898:	059a      	lsls	r2, r3, #22
 800489a:	d402      	bmi.n	80048a2 <_vfiprintf_r+0x32>
 800489c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800489e:	f7ff ff63 	bl	8004768 <__retarget_lock_acquire_recursive>
 80048a2:	89ab      	ldrh	r3, [r5, #12]
 80048a4:	071b      	lsls	r3, r3, #28
 80048a6:	d501      	bpl.n	80048ac <_vfiprintf_r+0x3c>
 80048a8:	692b      	ldr	r3, [r5, #16]
 80048aa:	b9eb      	cbnz	r3, 80048e8 <_vfiprintf_r+0x78>
 80048ac:	4629      	mov	r1, r5
 80048ae:	4630      	mov	r0, r6
 80048b0:	f000 fb5c 	bl	8004f6c <__swsetup_r>
 80048b4:	b1c0      	cbz	r0, 80048e8 <_vfiprintf_r+0x78>
 80048b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048b8:	07dc      	lsls	r4, r3, #31
 80048ba:	d50e      	bpl.n	80048da <_vfiprintf_r+0x6a>
 80048bc:	f04f 30ff 	mov.w	r0, #4294967295
 80048c0:	b01d      	add	sp, #116	; 0x74
 80048c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048c6:	4b7b      	ldr	r3, [pc, #492]	; (8004ab4 <_vfiprintf_r+0x244>)
 80048c8:	429d      	cmp	r5, r3
 80048ca:	d101      	bne.n	80048d0 <_vfiprintf_r+0x60>
 80048cc:	68b5      	ldr	r5, [r6, #8]
 80048ce:	e7df      	b.n	8004890 <_vfiprintf_r+0x20>
 80048d0:	4b79      	ldr	r3, [pc, #484]	; (8004ab8 <_vfiprintf_r+0x248>)
 80048d2:	429d      	cmp	r5, r3
 80048d4:	bf08      	it	eq
 80048d6:	68f5      	ldreq	r5, [r6, #12]
 80048d8:	e7da      	b.n	8004890 <_vfiprintf_r+0x20>
 80048da:	89ab      	ldrh	r3, [r5, #12]
 80048dc:	0598      	lsls	r0, r3, #22
 80048de:	d4ed      	bmi.n	80048bc <_vfiprintf_r+0x4c>
 80048e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048e2:	f7ff ff42 	bl	800476a <__retarget_lock_release_recursive>
 80048e6:	e7e9      	b.n	80048bc <_vfiprintf_r+0x4c>
 80048e8:	2300      	movs	r3, #0
 80048ea:	9309      	str	r3, [sp, #36]	; 0x24
 80048ec:	2320      	movs	r3, #32
 80048ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048f2:	2330      	movs	r3, #48	; 0x30
 80048f4:	f04f 0901 	mov.w	r9, #1
 80048f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80048fc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004abc <_vfiprintf_r+0x24c>
 8004900:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004904:	4623      	mov	r3, r4
 8004906:	469a      	mov	sl, r3
 8004908:	f813 2b01 	ldrb.w	r2, [r3], #1
 800490c:	b10a      	cbz	r2, 8004912 <_vfiprintf_r+0xa2>
 800490e:	2a25      	cmp	r2, #37	; 0x25
 8004910:	d1f9      	bne.n	8004906 <_vfiprintf_r+0x96>
 8004912:	ebba 0b04 	subs.w	fp, sl, r4
 8004916:	d00b      	beq.n	8004930 <_vfiprintf_r+0xc0>
 8004918:	465b      	mov	r3, fp
 800491a:	4622      	mov	r2, r4
 800491c:	4629      	mov	r1, r5
 800491e:	4630      	mov	r0, r6
 8004920:	f7ff ff93 	bl	800484a <__sfputs_r>
 8004924:	3001      	adds	r0, #1
 8004926:	f000 80aa 	beq.w	8004a7e <_vfiprintf_r+0x20e>
 800492a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800492c:	445a      	add	r2, fp
 800492e:	9209      	str	r2, [sp, #36]	; 0x24
 8004930:	f89a 3000 	ldrb.w	r3, [sl]
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 80a2 	beq.w	8004a7e <_vfiprintf_r+0x20e>
 800493a:	2300      	movs	r3, #0
 800493c:	f04f 32ff 	mov.w	r2, #4294967295
 8004940:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004944:	f10a 0a01 	add.w	sl, sl, #1
 8004948:	9304      	str	r3, [sp, #16]
 800494a:	9307      	str	r3, [sp, #28]
 800494c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004950:	931a      	str	r3, [sp, #104]	; 0x68
 8004952:	4654      	mov	r4, sl
 8004954:	2205      	movs	r2, #5
 8004956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800495a:	4858      	ldr	r0, [pc, #352]	; (8004abc <_vfiprintf_r+0x24c>)
 800495c:	f000 fcbc 	bl	80052d8 <memchr>
 8004960:	9a04      	ldr	r2, [sp, #16]
 8004962:	b9d8      	cbnz	r0, 800499c <_vfiprintf_r+0x12c>
 8004964:	06d1      	lsls	r1, r2, #27
 8004966:	bf44      	itt	mi
 8004968:	2320      	movmi	r3, #32
 800496a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800496e:	0713      	lsls	r3, r2, #28
 8004970:	bf44      	itt	mi
 8004972:	232b      	movmi	r3, #43	; 0x2b
 8004974:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004978:	f89a 3000 	ldrb.w	r3, [sl]
 800497c:	2b2a      	cmp	r3, #42	; 0x2a
 800497e:	d015      	beq.n	80049ac <_vfiprintf_r+0x13c>
 8004980:	4654      	mov	r4, sl
 8004982:	2000      	movs	r0, #0
 8004984:	f04f 0c0a 	mov.w	ip, #10
 8004988:	9a07      	ldr	r2, [sp, #28]
 800498a:	4621      	mov	r1, r4
 800498c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004990:	3b30      	subs	r3, #48	; 0x30
 8004992:	2b09      	cmp	r3, #9
 8004994:	d94e      	bls.n	8004a34 <_vfiprintf_r+0x1c4>
 8004996:	b1b0      	cbz	r0, 80049c6 <_vfiprintf_r+0x156>
 8004998:	9207      	str	r2, [sp, #28]
 800499a:	e014      	b.n	80049c6 <_vfiprintf_r+0x156>
 800499c:	eba0 0308 	sub.w	r3, r0, r8
 80049a0:	fa09 f303 	lsl.w	r3, r9, r3
 80049a4:	4313      	orrs	r3, r2
 80049a6:	46a2      	mov	sl, r4
 80049a8:	9304      	str	r3, [sp, #16]
 80049aa:	e7d2      	b.n	8004952 <_vfiprintf_r+0xe2>
 80049ac:	9b03      	ldr	r3, [sp, #12]
 80049ae:	1d19      	adds	r1, r3, #4
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	9103      	str	r1, [sp, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	bfbb      	ittet	lt
 80049b8:	425b      	neglt	r3, r3
 80049ba:	f042 0202 	orrlt.w	r2, r2, #2
 80049be:	9307      	strge	r3, [sp, #28]
 80049c0:	9307      	strlt	r3, [sp, #28]
 80049c2:	bfb8      	it	lt
 80049c4:	9204      	strlt	r2, [sp, #16]
 80049c6:	7823      	ldrb	r3, [r4, #0]
 80049c8:	2b2e      	cmp	r3, #46	; 0x2e
 80049ca:	d10c      	bne.n	80049e6 <_vfiprintf_r+0x176>
 80049cc:	7863      	ldrb	r3, [r4, #1]
 80049ce:	2b2a      	cmp	r3, #42	; 0x2a
 80049d0:	d135      	bne.n	8004a3e <_vfiprintf_r+0x1ce>
 80049d2:	9b03      	ldr	r3, [sp, #12]
 80049d4:	3402      	adds	r4, #2
 80049d6:	1d1a      	adds	r2, r3, #4
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	9203      	str	r2, [sp, #12]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	bfb8      	it	lt
 80049e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80049e4:	9305      	str	r3, [sp, #20]
 80049e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004acc <_vfiprintf_r+0x25c>
 80049ea:	2203      	movs	r2, #3
 80049ec:	4650      	mov	r0, sl
 80049ee:	7821      	ldrb	r1, [r4, #0]
 80049f0:	f000 fc72 	bl	80052d8 <memchr>
 80049f4:	b140      	cbz	r0, 8004a08 <_vfiprintf_r+0x198>
 80049f6:	2340      	movs	r3, #64	; 0x40
 80049f8:	eba0 000a 	sub.w	r0, r0, sl
 80049fc:	fa03 f000 	lsl.w	r0, r3, r0
 8004a00:	9b04      	ldr	r3, [sp, #16]
 8004a02:	3401      	adds	r4, #1
 8004a04:	4303      	orrs	r3, r0
 8004a06:	9304      	str	r3, [sp, #16]
 8004a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a0c:	2206      	movs	r2, #6
 8004a0e:	482c      	ldr	r0, [pc, #176]	; (8004ac0 <_vfiprintf_r+0x250>)
 8004a10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a14:	f000 fc60 	bl	80052d8 <memchr>
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	d03f      	beq.n	8004a9c <_vfiprintf_r+0x22c>
 8004a1c:	4b29      	ldr	r3, [pc, #164]	; (8004ac4 <_vfiprintf_r+0x254>)
 8004a1e:	bb1b      	cbnz	r3, 8004a68 <_vfiprintf_r+0x1f8>
 8004a20:	9b03      	ldr	r3, [sp, #12]
 8004a22:	3307      	adds	r3, #7
 8004a24:	f023 0307 	bic.w	r3, r3, #7
 8004a28:	3308      	adds	r3, #8
 8004a2a:	9303      	str	r3, [sp, #12]
 8004a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a2e:	443b      	add	r3, r7
 8004a30:	9309      	str	r3, [sp, #36]	; 0x24
 8004a32:	e767      	b.n	8004904 <_vfiprintf_r+0x94>
 8004a34:	460c      	mov	r4, r1
 8004a36:	2001      	movs	r0, #1
 8004a38:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a3c:	e7a5      	b.n	800498a <_vfiprintf_r+0x11a>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f04f 0c0a 	mov.w	ip, #10
 8004a44:	4619      	mov	r1, r3
 8004a46:	3401      	adds	r4, #1
 8004a48:	9305      	str	r3, [sp, #20]
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a50:	3a30      	subs	r2, #48	; 0x30
 8004a52:	2a09      	cmp	r2, #9
 8004a54:	d903      	bls.n	8004a5e <_vfiprintf_r+0x1ee>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0c5      	beq.n	80049e6 <_vfiprintf_r+0x176>
 8004a5a:	9105      	str	r1, [sp, #20]
 8004a5c:	e7c3      	b.n	80049e6 <_vfiprintf_r+0x176>
 8004a5e:	4604      	mov	r4, r0
 8004a60:	2301      	movs	r3, #1
 8004a62:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a66:	e7f0      	b.n	8004a4a <_vfiprintf_r+0x1da>
 8004a68:	ab03      	add	r3, sp, #12
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	462a      	mov	r2, r5
 8004a6e:	4630      	mov	r0, r6
 8004a70:	4b15      	ldr	r3, [pc, #84]	; (8004ac8 <_vfiprintf_r+0x258>)
 8004a72:	a904      	add	r1, sp, #16
 8004a74:	f3af 8000 	nop.w
 8004a78:	4607      	mov	r7, r0
 8004a7a:	1c78      	adds	r0, r7, #1
 8004a7c:	d1d6      	bne.n	8004a2c <_vfiprintf_r+0x1bc>
 8004a7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a80:	07d9      	lsls	r1, r3, #31
 8004a82:	d405      	bmi.n	8004a90 <_vfiprintf_r+0x220>
 8004a84:	89ab      	ldrh	r3, [r5, #12]
 8004a86:	059a      	lsls	r2, r3, #22
 8004a88:	d402      	bmi.n	8004a90 <_vfiprintf_r+0x220>
 8004a8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a8c:	f7ff fe6d 	bl	800476a <__retarget_lock_release_recursive>
 8004a90:	89ab      	ldrh	r3, [r5, #12]
 8004a92:	065b      	lsls	r3, r3, #25
 8004a94:	f53f af12 	bmi.w	80048bc <_vfiprintf_r+0x4c>
 8004a98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a9a:	e711      	b.n	80048c0 <_vfiprintf_r+0x50>
 8004a9c:	ab03      	add	r3, sp, #12
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	462a      	mov	r2, r5
 8004aa2:	4630      	mov	r0, r6
 8004aa4:	4b08      	ldr	r3, [pc, #32]	; (8004ac8 <_vfiprintf_r+0x258>)
 8004aa6:	a904      	add	r1, sp, #16
 8004aa8:	f000 f882 	bl	8004bb0 <_printf_i>
 8004aac:	e7e4      	b.n	8004a78 <_vfiprintf_r+0x208>
 8004aae:	bf00      	nop
 8004ab0:	08005558 	.word	0x08005558
 8004ab4:	08005578 	.word	0x08005578
 8004ab8:	08005538 	.word	0x08005538
 8004abc:	08005598 	.word	0x08005598
 8004ac0:	080055a2 	.word	0x080055a2
 8004ac4:	00000000 	.word	0x00000000
 8004ac8:	0800484b 	.word	0x0800484b
 8004acc:	0800559e 	.word	0x0800559e

08004ad0 <_printf_common>:
 8004ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ad4:	4616      	mov	r6, r2
 8004ad6:	4699      	mov	r9, r3
 8004ad8:	688a      	ldr	r2, [r1, #8]
 8004ada:	690b      	ldr	r3, [r1, #16]
 8004adc:	4607      	mov	r7, r0
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	bfb8      	it	lt
 8004ae2:	4613      	movlt	r3, r2
 8004ae4:	6033      	str	r3, [r6, #0]
 8004ae6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004aea:	460c      	mov	r4, r1
 8004aec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004af0:	b10a      	cbz	r2, 8004af6 <_printf_common+0x26>
 8004af2:	3301      	adds	r3, #1
 8004af4:	6033      	str	r3, [r6, #0]
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	0699      	lsls	r1, r3, #26
 8004afa:	bf42      	ittt	mi
 8004afc:	6833      	ldrmi	r3, [r6, #0]
 8004afe:	3302      	addmi	r3, #2
 8004b00:	6033      	strmi	r3, [r6, #0]
 8004b02:	6825      	ldr	r5, [r4, #0]
 8004b04:	f015 0506 	ands.w	r5, r5, #6
 8004b08:	d106      	bne.n	8004b18 <_printf_common+0x48>
 8004b0a:	f104 0a19 	add.w	sl, r4, #25
 8004b0e:	68e3      	ldr	r3, [r4, #12]
 8004b10:	6832      	ldr	r2, [r6, #0]
 8004b12:	1a9b      	subs	r3, r3, r2
 8004b14:	42ab      	cmp	r3, r5
 8004b16:	dc28      	bgt.n	8004b6a <_printf_common+0x9a>
 8004b18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b1c:	1e13      	subs	r3, r2, #0
 8004b1e:	6822      	ldr	r2, [r4, #0]
 8004b20:	bf18      	it	ne
 8004b22:	2301      	movne	r3, #1
 8004b24:	0692      	lsls	r2, r2, #26
 8004b26:	d42d      	bmi.n	8004b84 <_printf_common+0xb4>
 8004b28:	4649      	mov	r1, r9
 8004b2a:	4638      	mov	r0, r7
 8004b2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b30:	47c0      	blx	r8
 8004b32:	3001      	adds	r0, #1
 8004b34:	d020      	beq.n	8004b78 <_printf_common+0xa8>
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	68e5      	ldr	r5, [r4, #12]
 8004b3a:	f003 0306 	and.w	r3, r3, #6
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	bf18      	it	ne
 8004b42:	2500      	movne	r5, #0
 8004b44:	6832      	ldr	r2, [r6, #0]
 8004b46:	f04f 0600 	mov.w	r6, #0
 8004b4a:	68a3      	ldr	r3, [r4, #8]
 8004b4c:	bf08      	it	eq
 8004b4e:	1aad      	subeq	r5, r5, r2
 8004b50:	6922      	ldr	r2, [r4, #16]
 8004b52:	bf08      	it	eq
 8004b54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	bfc4      	itt	gt
 8004b5c:	1a9b      	subgt	r3, r3, r2
 8004b5e:	18ed      	addgt	r5, r5, r3
 8004b60:	341a      	adds	r4, #26
 8004b62:	42b5      	cmp	r5, r6
 8004b64:	d11a      	bne.n	8004b9c <_printf_common+0xcc>
 8004b66:	2000      	movs	r0, #0
 8004b68:	e008      	b.n	8004b7c <_printf_common+0xac>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	4652      	mov	r2, sl
 8004b6e:	4649      	mov	r1, r9
 8004b70:	4638      	mov	r0, r7
 8004b72:	47c0      	blx	r8
 8004b74:	3001      	adds	r0, #1
 8004b76:	d103      	bne.n	8004b80 <_printf_common+0xb0>
 8004b78:	f04f 30ff 	mov.w	r0, #4294967295
 8004b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b80:	3501      	adds	r5, #1
 8004b82:	e7c4      	b.n	8004b0e <_printf_common+0x3e>
 8004b84:	2030      	movs	r0, #48	; 0x30
 8004b86:	18e1      	adds	r1, r4, r3
 8004b88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b92:	4422      	add	r2, r4
 8004b94:	3302      	adds	r3, #2
 8004b96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b9a:	e7c5      	b.n	8004b28 <_printf_common+0x58>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	4622      	mov	r2, r4
 8004ba0:	4649      	mov	r1, r9
 8004ba2:	4638      	mov	r0, r7
 8004ba4:	47c0      	blx	r8
 8004ba6:	3001      	adds	r0, #1
 8004ba8:	d0e6      	beq.n	8004b78 <_printf_common+0xa8>
 8004baa:	3601      	adds	r6, #1
 8004bac:	e7d9      	b.n	8004b62 <_printf_common+0x92>
	...

08004bb0 <_printf_i>:
 8004bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bb4:	460c      	mov	r4, r1
 8004bb6:	7e27      	ldrb	r7, [r4, #24]
 8004bb8:	4691      	mov	r9, r2
 8004bba:	2f78      	cmp	r7, #120	; 0x78
 8004bbc:	4680      	mov	r8, r0
 8004bbe:	469a      	mov	sl, r3
 8004bc0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004bc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bc6:	d807      	bhi.n	8004bd8 <_printf_i+0x28>
 8004bc8:	2f62      	cmp	r7, #98	; 0x62
 8004bca:	d80a      	bhi.n	8004be2 <_printf_i+0x32>
 8004bcc:	2f00      	cmp	r7, #0
 8004bce:	f000 80d9 	beq.w	8004d84 <_printf_i+0x1d4>
 8004bd2:	2f58      	cmp	r7, #88	; 0x58
 8004bd4:	f000 80a4 	beq.w	8004d20 <_printf_i+0x170>
 8004bd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004bdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004be0:	e03a      	b.n	8004c58 <_printf_i+0xa8>
 8004be2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004be6:	2b15      	cmp	r3, #21
 8004be8:	d8f6      	bhi.n	8004bd8 <_printf_i+0x28>
 8004bea:	a001      	add	r0, pc, #4	; (adr r0, 8004bf0 <_printf_i+0x40>)
 8004bec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004bf0:	08004c49 	.word	0x08004c49
 8004bf4:	08004c5d 	.word	0x08004c5d
 8004bf8:	08004bd9 	.word	0x08004bd9
 8004bfc:	08004bd9 	.word	0x08004bd9
 8004c00:	08004bd9 	.word	0x08004bd9
 8004c04:	08004bd9 	.word	0x08004bd9
 8004c08:	08004c5d 	.word	0x08004c5d
 8004c0c:	08004bd9 	.word	0x08004bd9
 8004c10:	08004bd9 	.word	0x08004bd9
 8004c14:	08004bd9 	.word	0x08004bd9
 8004c18:	08004bd9 	.word	0x08004bd9
 8004c1c:	08004d6b 	.word	0x08004d6b
 8004c20:	08004c8d 	.word	0x08004c8d
 8004c24:	08004d4d 	.word	0x08004d4d
 8004c28:	08004bd9 	.word	0x08004bd9
 8004c2c:	08004bd9 	.word	0x08004bd9
 8004c30:	08004d8d 	.word	0x08004d8d
 8004c34:	08004bd9 	.word	0x08004bd9
 8004c38:	08004c8d 	.word	0x08004c8d
 8004c3c:	08004bd9 	.word	0x08004bd9
 8004c40:	08004bd9 	.word	0x08004bd9
 8004c44:	08004d55 	.word	0x08004d55
 8004c48:	680b      	ldr	r3, [r1, #0]
 8004c4a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c4e:	1d1a      	adds	r2, r3, #4
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	600a      	str	r2, [r1, #0]
 8004c54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e0a4      	b.n	8004da6 <_printf_i+0x1f6>
 8004c5c:	6825      	ldr	r5, [r4, #0]
 8004c5e:	6808      	ldr	r0, [r1, #0]
 8004c60:	062e      	lsls	r6, r5, #24
 8004c62:	f100 0304 	add.w	r3, r0, #4
 8004c66:	d50a      	bpl.n	8004c7e <_printf_i+0xce>
 8004c68:	6805      	ldr	r5, [r0, #0]
 8004c6a:	600b      	str	r3, [r1, #0]
 8004c6c:	2d00      	cmp	r5, #0
 8004c6e:	da03      	bge.n	8004c78 <_printf_i+0xc8>
 8004c70:	232d      	movs	r3, #45	; 0x2d
 8004c72:	426d      	negs	r5, r5
 8004c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c78:	230a      	movs	r3, #10
 8004c7a:	485e      	ldr	r0, [pc, #376]	; (8004df4 <_printf_i+0x244>)
 8004c7c:	e019      	b.n	8004cb2 <_printf_i+0x102>
 8004c7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004c82:	6805      	ldr	r5, [r0, #0]
 8004c84:	600b      	str	r3, [r1, #0]
 8004c86:	bf18      	it	ne
 8004c88:	b22d      	sxthne	r5, r5
 8004c8a:	e7ef      	b.n	8004c6c <_printf_i+0xbc>
 8004c8c:	680b      	ldr	r3, [r1, #0]
 8004c8e:	6825      	ldr	r5, [r4, #0]
 8004c90:	1d18      	adds	r0, r3, #4
 8004c92:	6008      	str	r0, [r1, #0]
 8004c94:	0628      	lsls	r0, r5, #24
 8004c96:	d501      	bpl.n	8004c9c <_printf_i+0xec>
 8004c98:	681d      	ldr	r5, [r3, #0]
 8004c9a:	e002      	b.n	8004ca2 <_printf_i+0xf2>
 8004c9c:	0669      	lsls	r1, r5, #25
 8004c9e:	d5fb      	bpl.n	8004c98 <_printf_i+0xe8>
 8004ca0:	881d      	ldrh	r5, [r3, #0]
 8004ca2:	2f6f      	cmp	r7, #111	; 0x6f
 8004ca4:	bf0c      	ite	eq
 8004ca6:	2308      	moveq	r3, #8
 8004ca8:	230a      	movne	r3, #10
 8004caa:	4852      	ldr	r0, [pc, #328]	; (8004df4 <_printf_i+0x244>)
 8004cac:	2100      	movs	r1, #0
 8004cae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cb2:	6866      	ldr	r6, [r4, #4]
 8004cb4:	2e00      	cmp	r6, #0
 8004cb6:	bfa8      	it	ge
 8004cb8:	6821      	ldrge	r1, [r4, #0]
 8004cba:	60a6      	str	r6, [r4, #8]
 8004cbc:	bfa4      	itt	ge
 8004cbe:	f021 0104 	bicge.w	r1, r1, #4
 8004cc2:	6021      	strge	r1, [r4, #0]
 8004cc4:	b90d      	cbnz	r5, 8004cca <_printf_i+0x11a>
 8004cc6:	2e00      	cmp	r6, #0
 8004cc8:	d04d      	beq.n	8004d66 <_printf_i+0x1b6>
 8004cca:	4616      	mov	r6, r2
 8004ccc:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cd0:	fb03 5711 	mls	r7, r3, r1, r5
 8004cd4:	5dc7      	ldrb	r7, [r0, r7]
 8004cd6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cda:	462f      	mov	r7, r5
 8004cdc:	42bb      	cmp	r3, r7
 8004cde:	460d      	mov	r5, r1
 8004ce0:	d9f4      	bls.n	8004ccc <_printf_i+0x11c>
 8004ce2:	2b08      	cmp	r3, #8
 8004ce4:	d10b      	bne.n	8004cfe <_printf_i+0x14e>
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	07df      	lsls	r7, r3, #31
 8004cea:	d508      	bpl.n	8004cfe <_printf_i+0x14e>
 8004cec:	6923      	ldr	r3, [r4, #16]
 8004cee:	6861      	ldr	r1, [r4, #4]
 8004cf0:	4299      	cmp	r1, r3
 8004cf2:	bfde      	ittt	le
 8004cf4:	2330      	movle	r3, #48	; 0x30
 8004cf6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cfa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cfe:	1b92      	subs	r2, r2, r6
 8004d00:	6122      	str	r2, [r4, #16]
 8004d02:	464b      	mov	r3, r9
 8004d04:	4621      	mov	r1, r4
 8004d06:	4640      	mov	r0, r8
 8004d08:	f8cd a000 	str.w	sl, [sp]
 8004d0c:	aa03      	add	r2, sp, #12
 8004d0e:	f7ff fedf 	bl	8004ad0 <_printf_common>
 8004d12:	3001      	adds	r0, #1
 8004d14:	d14c      	bne.n	8004db0 <_printf_i+0x200>
 8004d16:	f04f 30ff 	mov.w	r0, #4294967295
 8004d1a:	b004      	add	sp, #16
 8004d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d20:	4834      	ldr	r0, [pc, #208]	; (8004df4 <_printf_i+0x244>)
 8004d22:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d26:	680e      	ldr	r6, [r1, #0]
 8004d28:	6823      	ldr	r3, [r4, #0]
 8004d2a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004d2e:	061f      	lsls	r7, r3, #24
 8004d30:	600e      	str	r6, [r1, #0]
 8004d32:	d514      	bpl.n	8004d5e <_printf_i+0x1ae>
 8004d34:	07d9      	lsls	r1, r3, #31
 8004d36:	bf44      	itt	mi
 8004d38:	f043 0320 	orrmi.w	r3, r3, #32
 8004d3c:	6023      	strmi	r3, [r4, #0]
 8004d3e:	b91d      	cbnz	r5, 8004d48 <_printf_i+0x198>
 8004d40:	6823      	ldr	r3, [r4, #0]
 8004d42:	f023 0320 	bic.w	r3, r3, #32
 8004d46:	6023      	str	r3, [r4, #0]
 8004d48:	2310      	movs	r3, #16
 8004d4a:	e7af      	b.n	8004cac <_printf_i+0xfc>
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	f043 0320 	orr.w	r3, r3, #32
 8004d52:	6023      	str	r3, [r4, #0]
 8004d54:	2378      	movs	r3, #120	; 0x78
 8004d56:	4828      	ldr	r0, [pc, #160]	; (8004df8 <_printf_i+0x248>)
 8004d58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d5c:	e7e3      	b.n	8004d26 <_printf_i+0x176>
 8004d5e:	065e      	lsls	r6, r3, #25
 8004d60:	bf48      	it	mi
 8004d62:	b2ad      	uxthmi	r5, r5
 8004d64:	e7e6      	b.n	8004d34 <_printf_i+0x184>
 8004d66:	4616      	mov	r6, r2
 8004d68:	e7bb      	b.n	8004ce2 <_printf_i+0x132>
 8004d6a:	680b      	ldr	r3, [r1, #0]
 8004d6c:	6826      	ldr	r6, [r4, #0]
 8004d6e:	1d1d      	adds	r5, r3, #4
 8004d70:	6960      	ldr	r0, [r4, #20]
 8004d72:	600d      	str	r5, [r1, #0]
 8004d74:	0635      	lsls	r5, r6, #24
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	d501      	bpl.n	8004d7e <_printf_i+0x1ce>
 8004d7a:	6018      	str	r0, [r3, #0]
 8004d7c:	e002      	b.n	8004d84 <_printf_i+0x1d4>
 8004d7e:	0671      	lsls	r1, r6, #25
 8004d80:	d5fb      	bpl.n	8004d7a <_printf_i+0x1ca>
 8004d82:	8018      	strh	r0, [r3, #0]
 8004d84:	2300      	movs	r3, #0
 8004d86:	4616      	mov	r6, r2
 8004d88:	6123      	str	r3, [r4, #16]
 8004d8a:	e7ba      	b.n	8004d02 <_printf_i+0x152>
 8004d8c:	680b      	ldr	r3, [r1, #0]
 8004d8e:	1d1a      	adds	r2, r3, #4
 8004d90:	600a      	str	r2, [r1, #0]
 8004d92:	681e      	ldr	r6, [r3, #0]
 8004d94:	2100      	movs	r1, #0
 8004d96:	4630      	mov	r0, r6
 8004d98:	6862      	ldr	r2, [r4, #4]
 8004d9a:	f000 fa9d 	bl	80052d8 <memchr>
 8004d9e:	b108      	cbz	r0, 8004da4 <_printf_i+0x1f4>
 8004da0:	1b80      	subs	r0, r0, r6
 8004da2:	6060      	str	r0, [r4, #4]
 8004da4:	6863      	ldr	r3, [r4, #4]
 8004da6:	6123      	str	r3, [r4, #16]
 8004da8:	2300      	movs	r3, #0
 8004daa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dae:	e7a8      	b.n	8004d02 <_printf_i+0x152>
 8004db0:	4632      	mov	r2, r6
 8004db2:	4649      	mov	r1, r9
 8004db4:	4640      	mov	r0, r8
 8004db6:	6923      	ldr	r3, [r4, #16]
 8004db8:	47d0      	blx	sl
 8004dba:	3001      	adds	r0, #1
 8004dbc:	d0ab      	beq.n	8004d16 <_printf_i+0x166>
 8004dbe:	6823      	ldr	r3, [r4, #0]
 8004dc0:	079b      	lsls	r3, r3, #30
 8004dc2:	d413      	bmi.n	8004dec <_printf_i+0x23c>
 8004dc4:	68e0      	ldr	r0, [r4, #12]
 8004dc6:	9b03      	ldr	r3, [sp, #12]
 8004dc8:	4298      	cmp	r0, r3
 8004dca:	bfb8      	it	lt
 8004dcc:	4618      	movlt	r0, r3
 8004dce:	e7a4      	b.n	8004d1a <_printf_i+0x16a>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	4632      	mov	r2, r6
 8004dd4:	4649      	mov	r1, r9
 8004dd6:	4640      	mov	r0, r8
 8004dd8:	47d0      	blx	sl
 8004dda:	3001      	adds	r0, #1
 8004ddc:	d09b      	beq.n	8004d16 <_printf_i+0x166>
 8004dde:	3501      	adds	r5, #1
 8004de0:	68e3      	ldr	r3, [r4, #12]
 8004de2:	9903      	ldr	r1, [sp, #12]
 8004de4:	1a5b      	subs	r3, r3, r1
 8004de6:	42ab      	cmp	r3, r5
 8004de8:	dcf2      	bgt.n	8004dd0 <_printf_i+0x220>
 8004dea:	e7eb      	b.n	8004dc4 <_printf_i+0x214>
 8004dec:	2500      	movs	r5, #0
 8004dee:	f104 0619 	add.w	r6, r4, #25
 8004df2:	e7f5      	b.n	8004de0 <_printf_i+0x230>
 8004df4:	080055a9 	.word	0x080055a9
 8004df8:	080055ba 	.word	0x080055ba

08004dfc <_sbrk_r>:
 8004dfc:	b538      	push	{r3, r4, r5, lr}
 8004dfe:	2300      	movs	r3, #0
 8004e00:	4d05      	ldr	r5, [pc, #20]	; (8004e18 <_sbrk_r+0x1c>)
 8004e02:	4604      	mov	r4, r0
 8004e04:	4608      	mov	r0, r1
 8004e06:	602b      	str	r3, [r5, #0]
 8004e08:	f7fb fc66 	bl	80006d8 <_sbrk>
 8004e0c:	1c43      	adds	r3, r0, #1
 8004e0e:	d102      	bne.n	8004e16 <_sbrk_r+0x1a>
 8004e10:	682b      	ldr	r3, [r5, #0]
 8004e12:	b103      	cbz	r3, 8004e16 <_sbrk_r+0x1a>
 8004e14:	6023      	str	r3, [r4, #0]
 8004e16:	bd38      	pop	{r3, r4, r5, pc}
 8004e18:	200010e4 	.word	0x200010e4

08004e1c <__sread>:
 8004e1c:	b510      	push	{r4, lr}
 8004e1e:	460c      	mov	r4, r1
 8004e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e24:	f000 fabe 	bl	80053a4 <_read_r>
 8004e28:	2800      	cmp	r0, #0
 8004e2a:	bfab      	itete	ge
 8004e2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e2e:	89a3      	ldrhlt	r3, [r4, #12]
 8004e30:	181b      	addge	r3, r3, r0
 8004e32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e36:	bfac      	ite	ge
 8004e38:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e3a:	81a3      	strhlt	r3, [r4, #12]
 8004e3c:	bd10      	pop	{r4, pc}

08004e3e <__swrite>:
 8004e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e42:	461f      	mov	r7, r3
 8004e44:	898b      	ldrh	r3, [r1, #12]
 8004e46:	4605      	mov	r5, r0
 8004e48:	05db      	lsls	r3, r3, #23
 8004e4a:	460c      	mov	r4, r1
 8004e4c:	4616      	mov	r6, r2
 8004e4e:	d505      	bpl.n	8004e5c <__swrite+0x1e>
 8004e50:	2302      	movs	r3, #2
 8004e52:	2200      	movs	r2, #0
 8004e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e58:	f000 f9c8 	bl	80051ec <_lseek_r>
 8004e5c:	89a3      	ldrh	r3, [r4, #12]
 8004e5e:	4632      	mov	r2, r6
 8004e60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e64:	81a3      	strh	r3, [r4, #12]
 8004e66:	4628      	mov	r0, r5
 8004e68:	463b      	mov	r3, r7
 8004e6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e72:	f000 b869 	b.w	8004f48 <_write_r>

08004e76 <__sseek>:
 8004e76:	b510      	push	{r4, lr}
 8004e78:	460c      	mov	r4, r1
 8004e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e7e:	f000 f9b5 	bl	80051ec <_lseek_r>
 8004e82:	1c43      	adds	r3, r0, #1
 8004e84:	89a3      	ldrh	r3, [r4, #12]
 8004e86:	bf15      	itete	ne
 8004e88:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e92:	81a3      	strheq	r3, [r4, #12]
 8004e94:	bf18      	it	ne
 8004e96:	81a3      	strhne	r3, [r4, #12]
 8004e98:	bd10      	pop	{r4, pc}

08004e9a <__sclose>:
 8004e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e9e:	f000 b8d3 	b.w	8005048 <_close_r>
	...

08004ea4 <__swbuf_r>:
 8004ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea6:	460e      	mov	r6, r1
 8004ea8:	4614      	mov	r4, r2
 8004eaa:	4605      	mov	r5, r0
 8004eac:	b118      	cbz	r0, 8004eb6 <__swbuf_r+0x12>
 8004eae:	6983      	ldr	r3, [r0, #24]
 8004eb0:	b90b      	cbnz	r3, 8004eb6 <__swbuf_r+0x12>
 8004eb2:	f7ff fbbb 	bl	800462c <__sinit>
 8004eb6:	4b21      	ldr	r3, [pc, #132]	; (8004f3c <__swbuf_r+0x98>)
 8004eb8:	429c      	cmp	r4, r3
 8004eba:	d12b      	bne.n	8004f14 <__swbuf_r+0x70>
 8004ebc:	686c      	ldr	r4, [r5, #4]
 8004ebe:	69a3      	ldr	r3, [r4, #24]
 8004ec0:	60a3      	str	r3, [r4, #8]
 8004ec2:	89a3      	ldrh	r3, [r4, #12]
 8004ec4:	071a      	lsls	r2, r3, #28
 8004ec6:	d52f      	bpl.n	8004f28 <__swbuf_r+0x84>
 8004ec8:	6923      	ldr	r3, [r4, #16]
 8004eca:	b36b      	cbz	r3, 8004f28 <__swbuf_r+0x84>
 8004ecc:	6923      	ldr	r3, [r4, #16]
 8004ece:	6820      	ldr	r0, [r4, #0]
 8004ed0:	b2f6      	uxtb	r6, r6
 8004ed2:	1ac0      	subs	r0, r0, r3
 8004ed4:	6963      	ldr	r3, [r4, #20]
 8004ed6:	4637      	mov	r7, r6
 8004ed8:	4283      	cmp	r3, r0
 8004eda:	dc04      	bgt.n	8004ee6 <__swbuf_r+0x42>
 8004edc:	4621      	mov	r1, r4
 8004ede:	4628      	mov	r0, r5
 8004ee0:	f000 f948 	bl	8005174 <_fflush_r>
 8004ee4:	bb30      	cbnz	r0, 8004f34 <__swbuf_r+0x90>
 8004ee6:	68a3      	ldr	r3, [r4, #8]
 8004ee8:	3001      	adds	r0, #1
 8004eea:	3b01      	subs	r3, #1
 8004eec:	60a3      	str	r3, [r4, #8]
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	6022      	str	r2, [r4, #0]
 8004ef4:	701e      	strb	r6, [r3, #0]
 8004ef6:	6963      	ldr	r3, [r4, #20]
 8004ef8:	4283      	cmp	r3, r0
 8004efa:	d004      	beq.n	8004f06 <__swbuf_r+0x62>
 8004efc:	89a3      	ldrh	r3, [r4, #12]
 8004efe:	07db      	lsls	r3, r3, #31
 8004f00:	d506      	bpl.n	8004f10 <__swbuf_r+0x6c>
 8004f02:	2e0a      	cmp	r6, #10
 8004f04:	d104      	bne.n	8004f10 <__swbuf_r+0x6c>
 8004f06:	4621      	mov	r1, r4
 8004f08:	4628      	mov	r0, r5
 8004f0a:	f000 f933 	bl	8005174 <_fflush_r>
 8004f0e:	b988      	cbnz	r0, 8004f34 <__swbuf_r+0x90>
 8004f10:	4638      	mov	r0, r7
 8004f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f14:	4b0a      	ldr	r3, [pc, #40]	; (8004f40 <__swbuf_r+0x9c>)
 8004f16:	429c      	cmp	r4, r3
 8004f18:	d101      	bne.n	8004f1e <__swbuf_r+0x7a>
 8004f1a:	68ac      	ldr	r4, [r5, #8]
 8004f1c:	e7cf      	b.n	8004ebe <__swbuf_r+0x1a>
 8004f1e:	4b09      	ldr	r3, [pc, #36]	; (8004f44 <__swbuf_r+0xa0>)
 8004f20:	429c      	cmp	r4, r3
 8004f22:	bf08      	it	eq
 8004f24:	68ec      	ldreq	r4, [r5, #12]
 8004f26:	e7ca      	b.n	8004ebe <__swbuf_r+0x1a>
 8004f28:	4621      	mov	r1, r4
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	f000 f81e 	bl	8004f6c <__swsetup_r>
 8004f30:	2800      	cmp	r0, #0
 8004f32:	d0cb      	beq.n	8004ecc <__swbuf_r+0x28>
 8004f34:	f04f 37ff 	mov.w	r7, #4294967295
 8004f38:	e7ea      	b.n	8004f10 <__swbuf_r+0x6c>
 8004f3a:	bf00      	nop
 8004f3c:	08005558 	.word	0x08005558
 8004f40:	08005578 	.word	0x08005578
 8004f44:	08005538 	.word	0x08005538

08004f48 <_write_r>:
 8004f48:	b538      	push	{r3, r4, r5, lr}
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	4608      	mov	r0, r1
 8004f4e:	4611      	mov	r1, r2
 8004f50:	2200      	movs	r2, #0
 8004f52:	4d05      	ldr	r5, [pc, #20]	; (8004f68 <_write_r+0x20>)
 8004f54:	602a      	str	r2, [r5, #0]
 8004f56:	461a      	mov	r2, r3
 8004f58:	f7fb f912 	bl	8000180 <_write>
 8004f5c:	1c43      	adds	r3, r0, #1
 8004f5e:	d102      	bne.n	8004f66 <_write_r+0x1e>
 8004f60:	682b      	ldr	r3, [r5, #0]
 8004f62:	b103      	cbz	r3, 8004f66 <_write_r+0x1e>
 8004f64:	6023      	str	r3, [r4, #0]
 8004f66:	bd38      	pop	{r3, r4, r5, pc}
 8004f68:	200010e4 	.word	0x200010e4

08004f6c <__swsetup_r>:
 8004f6c:	4b32      	ldr	r3, [pc, #200]	; (8005038 <__swsetup_r+0xcc>)
 8004f6e:	b570      	push	{r4, r5, r6, lr}
 8004f70:	681d      	ldr	r5, [r3, #0]
 8004f72:	4606      	mov	r6, r0
 8004f74:	460c      	mov	r4, r1
 8004f76:	b125      	cbz	r5, 8004f82 <__swsetup_r+0x16>
 8004f78:	69ab      	ldr	r3, [r5, #24]
 8004f7a:	b913      	cbnz	r3, 8004f82 <__swsetup_r+0x16>
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	f7ff fb55 	bl	800462c <__sinit>
 8004f82:	4b2e      	ldr	r3, [pc, #184]	; (800503c <__swsetup_r+0xd0>)
 8004f84:	429c      	cmp	r4, r3
 8004f86:	d10f      	bne.n	8004fa8 <__swsetup_r+0x3c>
 8004f88:	686c      	ldr	r4, [r5, #4]
 8004f8a:	89a3      	ldrh	r3, [r4, #12]
 8004f8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f90:	0719      	lsls	r1, r3, #28
 8004f92:	d42c      	bmi.n	8004fee <__swsetup_r+0x82>
 8004f94:	06dd      	lsls	r5, r3, #27
 8004f96:	d411      	bmi.n	8004fbc <__swsetup_r+0x50>
 8004f98:	2309      	movs	r3, #9
 8004f9a:	6033      	str	r3, [r6, #0]
 8004f9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa4:	81a3      	strh	r3, [r4, #12]
 8004fa6:	e03e      	b.n	8005026 <__swsetup_r+0xba>
 8004fa8:	4b25      	ldr	r3, [pc, #148]	; (8005040 <__swsetup_r+0xd4>)
 8004faa:	429c      	cmp	r4, r3
 8004fac:	d101      	bne.n	8004fb2 <__swsetup_r+0x46>
 8004fae:	68ac      	ldr	r4, [r5, #8]
 8004fb0:	e7eb      	b.n	8004f8a <__swsetup_r+0x1e>
 8004fb2:	4b24      	ldr	r3, [pc, #144]	; (8005044 <__swsetup_r+0xd8>)
 8004fb4:	429c      	cmp	r4, r3
 8004fb6:	bf08      	it	eq
 8004fb8:	68ec      	ldreq	r4, [r5, #12]
 8004fba:	e7e6      	b.n	8004f8a <__swsetup_r+0x1e>
 8004fbc:	0758      	lsls	r0, r3, #29
 8004fbe:	d512      	bpl.n	8004fe6 <__swsetup_r+0x7a>
 8004fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fc2:	b141      	cbz	r1, 8004fd6 <__swsetup_r+0x6a>
 8004fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fc8:	4299      	cmp	r1, r3
 8004fca:	d002      	beq.n	8004fd2 <__swsetup_r+0x66>
 8004fcc:	4630      	mov	r0, r6
 8004fce:	f000 f99d 	bl	800530c <_free_r>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	6363      	str	r3, [r4, #52]	; 0x34
 8004fd6:	89a3      	ldrh	r3, [r4, #12]
 8004fd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004fdc:	81a3      	strh	r3, [r4, #12]
 8004fde:	2300      	movs	r3, #0
 8004fe0:	6063      	str	r3, [r4, #4]
 8004fe2:	6923      	ldr	r3, [r4, #16]
 8004fe4:	6023      	str	r3, [r4, #0]
 8004fe6:	89a3      	ldrh	r3, [r4, #12]
 8004fe8:	f043 0308 	orr.w	r3, r3, #8
 8004fec:	81a3      	strh	r3, [r4, #12]
 8004fee:	6923      	ldr	r3, [r4, #16]
 8004ff0:	b94b      	cbnz	r3, 8005006 <__swsetup_r+0x9a>
 8004ff2:	89a3      	ldrh	r3, [r4, #12]
 8004ff4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ffc:	d003      	beq.n	8005006 <__swsetup_r+0x9a>
 8004ffe:	4621      	mov	r1, r4
 8005000:	4630      	mov	r0, r6
 8005002:	f000 f929 	bl	8005258 <__smakebuf_r>
 8005006:	89a0      	ldrh	r0, [r4, #12]
 8005008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800500c:	f010 0301 	ands.w	r3, r0, #1
 8005010:	d00a      	beq.n	8005028 <__swsetup_r+0xbc>
 8005012:	2300      	movs	r3, #0
 8005014:	60a3      	str	r3, [r4, #8]
 8005016:	6963      	ldr	r3, [r4, #20]
 8005018:	425b      	negs	r3, r3
 800501a:	61a3      	str	r3, [r4, #24]
 800501c:	6923      	ldr	r3, [r4, #16]
 800501e:	b943      	cbnz	r3, 8005032 <__swsetup_r+0xc6>
 8005020:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005024:	d1ba      	bne.n	8004f9c <__swsetup_r+0x30>
 8005026:	bd70      	pop	{r4, r5, r6, pc}
 8005028:	0781      	lsls	r1, r0, #30
 800502a:	bf58      	it	pl
 800502c:	6963      	ldrpl	r3, [r4, #20]
 800502e:	60a3      	str	r3, [r4, #8]
 8005030:	e7f4      	b.n	800501c <__swsetup_r+0xb0>
 8005032:	2000      	movs	r0, #0
 8005034:	e7f7      	b.n	8005026 <__swsetup_r+0xba>
 8005036:	bf00      	nop
 8005038:	20000010 	.word	0x20000010
 800503c:	08005558 	.word	0x08005558
 8005040:	08005578 	.word	0x08005578
 8005044:	08005538 	.word	0x08005538

08005048 <_close_r>:
 8005048:	b538      	push	{r3, r4, r5, lr}
 800504a:	2300      	movs	r3, #0
 800504c:	4d05      	ldr	r5, [pc, #20]	; (8005064 <_close_r+0x1c>)
 800504e:	4604      	mov	r4, r0
 8005050:	4608      	mov	r0, r1
 8005052:	602b      	str	r3, [r5, #0]
 8005054:	f7fb fb0f 	bl	8000676 <_close>
 8005058:	1c43      	adds	r3, r0, #1
 800505a:	d102      	bne.n	8005062 <_close_r+0x1a>
 800505c:	682b      	ldr	r3, [r5, #0]
 800505e:	b103      	cbz	r3, 8005062 <_close_r+0x1a>
 8005060:	6023      	str	r3, [r4, #0]
 8005062:	bd38      	pop	{r3, r4, r5, pc}
 8005064:	200010e4 	.word	0x200010e4

08005068 <__sflush_r>:
 8005068:	898a      	ldrh	r2, [r1, #12]
 800506a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800506e:	4605      	mov	r5, r0
 8005070:	0710      	lsls	r0, r2, #28
 8005072:	460c      	mov	r4, r1
 8005074:	d458      	bmi.n	8005128 <__sflush_r+0xc0>
 8005076:	684b      	ldr	r3, [r1, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	dc05      	bgt.n	8005088 <__sflush_r+0x20>
 800507c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800507e:	2b00      	cmp	r3, #0
 8005080:	dc02      	bgt.n	8005088 <__sflush_r+0x20>
 8005082:	2000      	movs	r0, #0
 8005084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005088:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800508a:	2e00      	cmp	r6, #0
 800508c:	d0f9      	beq.n	8005082 <__sflush_r+0x1a>
 800508e:	2300      	movs	r3, #0
 8005090:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005094:	682f      	ldr	r7, [r5, #0]
 8005096:	602b      	str	r3, [r5, #0]
 8005098:	d032      	beq.n	8005100 <__sflush_r+0x98>
 800509a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800509c:	89a3      	ldrh	r3, [r4, #12]
 800509e:	075a      	lsls	r2, r3, #29
 80050a0:	d505      	bpl.n	80050ae <__sflush_r+0x46>
 80050a2:	6863      	ldr	r3, [r4, #4]
 80050a4:	1ac0      	subs	r0, r0, r3
 80050a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050a8:	b10b      	cbz	r3, 80050ae <__sflush_r+0x46>
 80050aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050ac:	1ac0      	subs	r0, r0, r3
 80050ae:	2300      	movs	r3, #0
 80050b0:	4602      	mov	r2, r0
 80050b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050b4:	4628      	mov	r0, r5
 80050b6:	6a21      	ldr	r1, [r4, #32]
 80050b8:	47b0      	blx	r6
 80050ba:	1c43      	adds	r3, r0, #1
 80050bc:	89a3      	ldrh	r3, [r4, #12]
 80050be:	d106      	bne.n	80050ce <__sflush_r+0x66>
 80050c0:	6829      	ldr	r1, [r5, #0]
 80050c2:	291d      	cmp	r1, #29
 80050c4:	d82c      	bhi.n	8005120 <__sflush_r+0xb8>
 80050c6:	4a2a      	ldr	r2, [pc, #168]	; (8005170 <__sflush_r+0x108>)
 80050c8:	40ca      	lsrs	r2, r1
 80050ca:	07d6      	lsls	r6, r2, #31
 80050cc:	d528      	bpl.n	8005120 <__sflush_r+0xb8>
 80050ce:	2200      	movs	r2, #0
 80050d0:	6062      	str	r2, [r4, #4]
 80050d2:	6922      	ldr	r2, [r4, #16]
 80050d4:	04d9      	lsls	r1, r3, #19
 80050d6:	6022      	str	r2, [r4, #0]
 80050d8:	d504      	bpl.n	80050e4 <__sflush_r+0x7c>
 80050da:	1c42      	adds	r2, r0, #1
 80050dc:	d101      	bne.n	80050e2 <__sflush_r+0x7a>
 80050de:	682b      	ldr	r3, [r5, #0]
 80050e0:	b903      	cbnz	r3, 80050e4 <__sflush_r+0x7c>
 80050e2:	6560      	str	r0, [r4, #84]	; 0x54
 80050e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050e6:	602f      	str	r7, [r5, #0]
 80050e8:	2900      	cmp	r1, #0
 80050ea:	d0ca      	beq.n	8005082 <__sflush_r+0x1a>
 80050ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050f0:	4299      	cmp	r1, r3
 80050f2:	d002      	beq.n	80050fa <__sflush_r+0x92>
 80050f4:	4628      	mov	r0, r5
 80050f6:	f000 f909 	bl	800530c <_free_r>
 80050fa:	2000      	movs	r0, #0
 80050fc:	6360      	str	r0, [r4, #52]	; 0x34
 80050fe:	e7c1      	b.n	8005084 <__sflush_r+0x1c>
 8005100:	6a21      	ldr	r1, [r4, #32]
 8005102:	2301      	movs	r3, #1
 8005104:	4628      	mov	r0, r5
 8005106:	47b0      	blx	r6
 8005108:	1c41      	adds	r1, r0, #1
 800510a:	d1c7      	bne.n	800509c <__sflush_r+0x34>
 800510c:	682b      	ldr	r3, [r5, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0c4      	beq.n	800509c <__sflush_r+0x34>
 8005112:	2b1d      	cmp	r3, #29
 8005114:	d001      	beq.n	800511a <__sflush_r+0xb2>
 8005116:	2b16      	cmp	r3, #22
 8005118:	d101      	bne.n	800511e <__sflush_r+0xb6>
 800511a:	602f      	str	r7, [r5, #0]
 800511c:	e7b1      	b.n	8005082 <__sflush_r+0x1a>
 800511e:	89a3      	ldrh	r3, [r4, #12]
 8005120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005124:	81a3      	strh	r3, [r4, #12]
 8005126:	e7ad      	b.n	8005084 <__sflush_r+0x1c>
 8005128:	690f      	ldr	r7, [r1, #16]
 800512a:	2f00      	cmp	r7, #0
 800512c:	d0a9      	beq.n	8005082 <__sflush_r+0x1a>
 800512e:	0793      	lsls	r3, r2, #30
 8005130:	bf18      	it	ne
 8005132:	2300      	movne	r3, #0
 8005134:	680e      	ldr	r6, [r1, #0]
 8005136:	bf08      	it	eq
 8005138:	694b      	ldreq	r3, [r1, #20]
 800513a:	eba6 0807 	sub.w	r8, r6, r7
 800513e:	600f      	str	r7, [r1, #0]
 8005140:	608b      	str	r3, [r1, #8]
 8005142:	f1b8 0f00 	cmp.w	r8, #0
 8005146:	dd9c      	ble.n	8005082 <__sflush_r+0x1a>
 8005148:	4643      	mov	r3, r8
 800514a:	463a      	mov	r2, r7
 800514c:	4628      	mov	r0, r5
 800514e:	6a21      	ldr	r1, [r4, #32]
 8005150:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005152:	47b0      	blx	r6
 8005154:	2800      	cmp	r0, #0
 8005156:	dc06      	bgt.n	8005166 <__sflush_r+0xfe>
 8005158:	89a3      	ldrh	r3, [r4, #12]
 800515a:	f04f 30ff 	mov.w	r0, #4294967295
 800515e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005162:	81a3      	strh	r3, [r4, #12]
 8005164:	e78e      	b.n	8005084 <__sflush_r+0x1c>
 8005166:	4407      	add	r7, r0
 8005168:	eba8 0800 	sub.w	r8, r8, r0
 800516c:	e7e9      	b.n	8005142 <__sflush_r+0xda>
 800516e:	bf00      	nop
 8005170:	20400001 	.word	0x20400001

08005174 <_fflush_r>:
 8005174:	b538      	push	{r3, r4, r5, lr}
 8005176:	690b      	ldr	r3, [r1, #16]
 8005178:	4605      	mov	r5, r0
 800517a:	460c      	mov	r4, r1
 800517c:	b913      	cbnz	r3, 8005184 <_fflush_r+0x10>
 800517e:	2500      	movs	r5, #0
 8005180:	4628      	mov	r0, r5
 8005182:	bd38      	pop	{r3, r4, r5, pc}
 8005184:	b118      	cbz	r0, 800518e <_fflush_r+0x1a>
 8005186:	6983      	ldr	r3, [r0, #24]
 8005188:	b90b      	cbnz	r3, 800518e <_fflush_r+0x1a>
 800518a:	f7ff fa4f 	bl	800462c <__sinit>
 800518e:	4b14      	ldr	r3, [pc, #80]	; (80051e0 <_fflush_r+0x6c>)
 8005190:	429c      	cmp	r4, r3
 8005192:	d11b      	bne.n	80051cc <_fflush_r+0x58>
 8005194:	686c      	ldr	r4, [r5, #4]
 8005196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0ef      	beq.n	800517e <_fflush_r+0xa>
 800519e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80051a0:	07d0      	lsls	r0, r2, #31
 80051a2:	d404      	bmi.n	80051ae <_fflush_r+0x3a>
 80051a4:	0599      	lsls	r1, r3, #22
 80051a6:	d402      	bmi.n	80051ae <_fflush_r+0x3a>
 80051a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051aa:	f7ff fadd 	bl	8004768 <__retarget_lock_acquire_recursive>
 80051ae:	4628      	mov	r0, r5
 80051b0:	4621      	mov	r1, r4
 80051b2:	f7ff ff59 	bl	8005068 <__sflush_r>
 80051b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051b8:	4605      	mov	r5, r0
 80051ba:	07da      	lsls	r2, r3, #31
 80051bc:	d4e0      	bmi.n	8005180 <_fflush_r+0xc>
 80051be:	89a3      	ldrh	r3, [r4, #12]
 80051c0:	059b      	lsls	r3, r3, #22
 80051c2:	d4dd      	bmi.n	8005180 <_fflush_r+0xc>
 80051c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051c6:	f7ff fad0 	bl	800476a <__retarget_lock_release_recursive>
 80051ca:	e7d9      	b.n	8005180 <_fflush_r+0xc>
 80051cc:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <_fflush_r+0x70>)
 80051ce:	429c      	cmp	r4, r3
 80051d0:	d101      	bne.n	80051d6 <_fflush_r+0x62>
 80051d2:	68ac      	ldr	r4, [r5, #8]
 80051d4:	e7df      	b.n	8005196 <_fflush_r+0x22>
 80051d6:	4b04      	ldr	r3, [pc, #16]	; (80051e8 <_fflush_r+0x74>)
 80051d8:	429c      	cmp	r4, r3
 80051da:	bf08      	it	eq
 80051dc:	68ec      	ldreq	r4, [r5, #12]
 80051de:	e7da      	b.n	8005196 <_fflush_r+0x22>
 80051e0:	08005558 	.word	0x08005558
 80051e4:	08005578 	.word	0x08005578
 80051e8:	08005538 	.word	0x08005538

080051ec <_lseek_r>:
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	4604      	mov	r4, r0
 80051f0:	4608      	mov	r0, r1
 80051f2:	4611      	mov	r1, r2
 80051f4:	2200      	movs	r2, #0
 80051f6:	4d05      	ldr	r5, [pc, #20]	; (800520c <_lseek_r+0x20>)
 80051f8:	602a      	str	r2, [r5, #0]
 80051fa:	461a      	mov	r2, r3
 80051fc:	f7fb fa5f 	bl	80006be <_lseek>
 8005200:	1c43      	adds	r3, r0, #1
 8005202:	d102      	bne.n	800520a <_lseek_r+0x1e>
 8005204:	682b      	ldr	r3, [r5, #0]
 8005206:	b103      	cbz	r3, 800520a <_lseek_r+0x1e>
 8005208:	6023      	str	r3, [r4, #0]
 800520a:	bd38      	pop	{r3, r4, r5, pc}
 800520c:	200010e4 	.word	0x200010e4

08005210 <__swhatbuf_r>:
 8005210:	b570      	push	{r4, r5, r6, lr}
 8005212:	460e      	mov	r6, r1
 8005214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005218:	4614      	mov	r4, r2
 800521a:	2900      	cmp	r1, #0
 800521c:	461d      	mov	r5, r3
 800521e:	b096      	sub	sp, #88	; 0x58
 8005220:	da07      	bge.n	8005232 <__swhatbuf_r+0x22>
 8005222:	2300      	movs	r3, #0
 8005224:	602b      	str	r3, [r5, #0]
 8005226:	89b3      	ldrh	r3, [r6, #12]
 8005228:	061a      	lsls	r2, r3, #24
 800522a:	d410      	bmi.n	800524e <__swhatbuf_r+0x3e>
 800522c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005230:	e00e      	b.n	8005250 <__swhatbuf_r+0x40>
 8005232:	466a      	mov	r2, sp
 8005234:	f000 f8c8 	bl	80053c8 <_fstat_r>
 8005238:	2800      	cmp	r0, #0
 800523a:	dbf2      	blt.n	8005222 <__swhatbuf_r+0x12>
 800523c:	9a01      	ldr	r2, [sp, #4]
 800523e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005242:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005246:	425a      	negs	r2, r3
 8005248:	415a      	adcs	r2, r3
 800524a:	602a      	str	r2, [r5, #0]
 800524c:	e7ee      	b.n	800522c <__swhatbuf_r+0x1c>
 800524e:	2340      	movs	r3, #64	; 0x40
 8005250:	2000      	movs	r0, #0
 8005252:	6023      	str	r3, [r4, #0]
 8005254:	b016      	add	sp, #88	; 0x58
 8005256:	bd70      	pop	{r4, r5, r6, pc}

08005258 <__smakebuf_r>:
 8005258:	898b      	ldrh	r3, [r1, #12]
 800525a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800525c:	079d      	lsls	r5, r3, #30
 800525e:	4606      	mov	r6, r0
 8005260:	460c      	mov	r4, r1
 8005262:	d507      	bpl.n	8005274 <__smakebuf_r+0x1c>
 8005264:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005268:	6023      	str	r3, [r4, #0]
 800526a:	6123      	str	r3, [r4, #16]
 800526c:	2301      	movs	r3, #1
 800526e:	6163      	str	r3, [r4, #20]
 8005270:	b002      	add	sp, #8
 8005272:	bd70      	pop	{r4, r5, r6, pc}
 8005274:	466a      	mov	r2, sp
 8005276:	ab01      	add	r3, sp, #4
 8005278:	f7ff ffca 	bl	8005210 <__swhatbuf_r>
 800527c:	9900      	ldr	r1, [sp, #0]
 800527e:	4605      	mov	r5, r0
 8005280:	4630      	mov	r0, r6
 8005282:	f7ff fa73 	bl	800476c <_malloc_r>
 8005286:	b948      	cbnz	r0, 800529c <__smakebuf_r+0x44>
 8005288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800528c:	059a      	lsls	r2, r3, #22
 800528e:	d4ef      	bmi.n	8005270 <__smakebuf_r+0x18>
 8005290:	f023 0303 	bic.w	r3, r3, #3
 8005294:	f043 0302 	orr.w	r3, r3, #2
 8005298:	81a3      	strh	r3, [r4, #12]
 800529a:	e7e3      	b.n	8005264 <__smakebuf_r+0xc>
 800529c:	4b0d      	ldr	r3, [pc, #52]	; (80052d4 <__smakebuf_r+0x7c>)
 800529e:	62b3      	str	r3, [r6, #40]	; 0x28
 80052a0:	89a3      	ldrh	r3, [r4, #12]
 80052a2:	6020      	str	r0, [r4, #0]
 80052a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052a8:	81a3      	strh	r3, [r4, #12]
 80052aa:	9b00      	ldr	r3, [sp, #0]
 80052ac:	6120      	str	r0, [r4, #16]
 80052ae:	6163      	str	r3, [r4, #20]
 80052b0:	9b01      	ldr	r3, [sp, #4]
 80052b2:	b15b      	cbz	r3, 80052cc <__smakebuf_r+0x74>
 80052b4:	4630      	mov	r0, r6
 80052b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052ba:	f000 f897 	bl	80053ec <_isatty_r>
 80052be:	b128      	cbz	r0, 80052cc <__smakebuf_r+0x74>
 80052c0:	89a3      	ldrh	r3, [r4, #12]
 80052c2:	f023 0303 	bic.w	r3, r3, #3
 80052c6:	f043 0301 	orr.w	r3, r3, #1
 80052ca:	81a3      	strh	r3, [r4, #12]
 80052cc:	89a0      	ldrh	r0, [r4, #12]
 80052ce:	4305      	orrs	r5, r0
 80052d0:	81a5      	strh	r5, [r4, #12]
 80052d2:	e7cd      	b.n	8005270 <__smakebuf_r+0x18>
 80052d4:	080045c5 	.word	0x080045c5

080052d8 <memchr>:
 80052d8:	4603      	mov	r3, r0
 80052da:	b510      	push	{r4, lr}
 80052dc:	b2c9      	uxtb	r1, r1
 80052de:	4402      	add	r2, r0
 80052e0:	4293      	cmp	r3, r2
 80052e2:	4618      	mov	r0, r3
 80052e4:	d101      	bne.n	80052ea <memchr+0x12>
 80052e6:	2000      	movs	r0, #0
 80052e8:	e003      	b.n	80052f2 <memchr+0x1a>
 80052ea:	7804      	ldrb	r4, [r0, #0]
 80052ec:	3301      	adds	r3, #1
 80052ee:	428c      	cmp	r4, r1
 80052f0:	d1f6      	bne.n	80052e0 <memchr+0x8>
 80052f2:	bd10      	pop	{r4, pc}

080052f4 <__malloc_lock>:
 80052f4:	4801      	ldr	r0, [pc, #4]	; (80052fc <__malloc_lock+0x8>)
 80052f6:	f7ff ba37 	b.w	8004768 <__retarget_lock_acquire_recursive>
 80052fa:	bf00      	nop
 80052fc:	200010dc 	.word	0x200010dc

08005300 <__malloc_unlock>:
 8005300:	4801      	ldr	r0, [pc, #4]	; (8005308 <__malloc_unlock+0x8>)
 8005302:	f7ff ba32 	b.w	800476a <__retarget_lock_release_recursive>
 8005306:	bf00      	nop
 8005308:	200010dc 	.word	0x200010dc

0800530c <_free_r>:
 800530c:	b538      	push	{r3, r4, r5, lr}
 800530e:	4605      	mov	r5, r0
 8005310:	2900      	cmp	r1, #0
 8005312:	d043      	beq.n	800539c <_free_r+0x90>
 8005314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005318:	1f0c      	subs	r4, r1, #4
 800531a:	2b00      	cmp	r3, #0
 800531c:	bfb8      	it	lt
 800531e:	18e4      	addlt	r4, r4, r3
 8005320:	f7ff ffe8 	bl	80052f4 <__malloc_lock>
 8005324:	4a1e      	ldr	r2, [pc, #120]	; (80053a0 <_free_r+0x94>)
 8005326:	6813      	ldr	r3, [r2, #0]
 8005328:	4610      	mov	r0, r2
 800532a:	b933      	cbnz	r3, 800533a <_free_r+0x2e>
 800532c:	6063      	str	r3, [r4, #4]
 800532e:	6014      	str	r4, [r2, #0]
 8005330:	4628      	mov	r0, r5
 8005332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005336:	f7ff bfe3 	b.w	8005300 <__malloc_unlock>
 800533a:	42a3      	cmp	r3, r4
 800533c:	d90a      	bls.n	8005354 <_free_r+0x48>
 800533e:	6821      	ldr	r1, [r4, #0]
 8005340:	1862      	adds	r2, r4, r1
 8005342:	4293      	cmp	r3, r2
 8005344:	bf01      	itttt	eq
 8005346:	681a      	ldreq	r2, [r3, #0]
 8005348:	685b      	ldreq	r3, [r3, #4]
 800534a:	1852      	addeq	r2, r2, r1
 800534c:	6022      	streq	r2, [r4, #0]
 800534e:	6063      	str	r3, [r4, #4]
 8005350:	6004      	str	r4, [r0, #0]
 8005352:	e7ed      	b.n	8005330 <_free_r+0x24>
 8005354:	461a      	mov	r2, r3
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	b10b      	cbz	r3, 800535e <_free_r+0x52>
 800535a:	42a3      	cmp	r3, r4
 800535c:	d9fa      	bls.n	8005354 <_free_r+0x48>
 800535e:	6811      	ldr	r1, [r2, #0]
 8005360:	1850      	adds	r0, r2, r1
 8005362:	42a0      	cmp	r0, r4
 8005364:	d10b      	bne.n	800537e <_free_r+0x72>
 8005366:	6820      	ldr	r0, [r4, #0]
 8005368:	4401      	add	r1, r0
 800536a:	1850      	adds	r0, r2, r1
 800536c:	4283      	cmp	r3, r0
 800536e:	6011      	str	r1, [r2, #0]
 8005370:	d1de      	bne.n	8005330 <_free_r+0x24>
 8005372:	6818      	ldr	r0, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	4401      	add	r1, r0
 8005378:	6011      	str	r1, [r2, #0]
 800537a:	6053      	str	r3, [r2, #4]
 800537c:	e7d8      	b.n	8005330 <_free_r+0x24>
 800537e:	d902      	bls.n	8005386 <_free_r+0x7a>
 8005380:	230c      	movs	r3, #12
 8005382:	602b      	str	r3, [r5, #0]
 8005384:	e7d4      	b.n	8005330 <_free_r+0x24>
 8005386:	6820      	ldr	r0, [r4, #0]
 8005388:	1821      	adds	r1, r4, r0
 800538a:	428b      	cmp	r3, r1
 800538c:	bf01      	itttt	eq
 800538e:	6819      	ldreq	r1, [r3, #0]
 8005390:	685b      	ldreq	r3, [r3, #4]
 8005392:	1809      	addeq	r1, r1, r0
 8005394:	6021      	streq	r1, [r4, #0]
 8005396:	6063      	str	r3, [r4, #4]
 8005398:	6054      	str	r4, [r2, #4]
 800539a:	e7c9      	b.n	8005330 <_free_r+0x24>
 800539c:	bd38      	pop	{r3, r4, r5, pc}
 800539e:	bf00      	nop
 80053a0:	20001034 	.word	0x20001034

080053a4 <_read_r>:
 80053a4:	b538      	push	{r3, r4, r5, lr}
 80053a6:	4604      	mov	r4, r0
 80053a8:	4608      	mov	r0, r1
 80053aa:	4611      	mov	r1, r2
 80053ac:	2200      	movs	r2, #0
 80053ae:	4d05      	ldr	r5, [pc, #20]	; (80053c4 <_read_r+0x20>)
 80053b0:	602a      	str	r2, [r5, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	f7fb f942 	bl	800063c <_read>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d102      	bne.n	80053c2 <_read_r+0x1e>
 80053bc:	682b      	ldr	r3, [r5, #0]
 80053be:	b103      	cbz	r3, 80053c2 <_read_r+0x1e>
 80053c0:	6023      	str	r3, [r4, #0]
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	200010e4 	.word	0x200010e4

080053c8 <_fstat_r>:
 80053c8:	b538      	push	{r3, r4, r5, lr}
 80053ca:	2300      	movs	r3, #0
 80053cc:	4d06      	ldr	r5, [pc, #24]	; (80053e8 <_fstat_r+0x20>)
 80053ce:	4604      	mov	r4, r0
 80053d0:	4608      	mov	r0, r1
 80053d2:	4611      	mov	r1, r2
 80053d4:	602b      	str	r3, [r5, #0]
 80053d6:	f7fb f959 	bl	800068c <_fstat>
 80053da:	1c43      	adds	r3, r0, #1
 80053dc:	d102      	bne.n	80053e4 <_fstat_r+0x1c>
 80053de:	682b      	ldr	r3, [r5, #0]
 80053e0:	b103      	cbz	r3, 80053e4 <_fstat_r+0x1c>
 80053e2:	6023      	str	r3, [r4, #0]
 80053e4:	bd38      	pop	{r3, r4, r5, pc}
 80053e6:	bf00      	nop
 80053e8:	200010e4 	.word	0x200010e4

080053ec <_isatty_r>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	2300      	movs	r3, #0
 80053f0:	4d05      	ldr	r5, [pc, #20]	; (8005408 <_isatty_r+0x1c>)
 80053f2:	4604      	mov	r4, r0
 80053f4:	4608      	mov	r0, r1
 80053f6:	602b      	str	r3, [r5, #0]
 80053f8:	f7fb f957 	bl	80006aa <_isatty>
 80053fc:	1c43      	adds	r3, r0, #1
 80053fe:	d102      	bne.n	8005406 <_isatty_r+0x1a>
 8005400:	682b      	ldr	r3, [r5, #0]
 8005402:	b103      	cbz	r3, 8005406 <_isatty_r+0x1a>
 8005404:	6023      	str	r3, [r4, #0]
 8005406:	bd38      	pop	{r3, r4, r5, pc}
 8005408:	200010e4 	.word	0x200010e4

0800540c <_init>:
 800540c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540e:	bf00      	nop
 8005410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005412:	bc08      	pop	{r3}
 8005414:	469e      	mov	lr, r3
 8005416:	4770      	bx	lr

08005418 <_fini>:
 8005418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541a:	bf00      	nop
 800541c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541e:	bc08      	pop	{r3}
 8005420:	469e      	mov	lr, r3
 8005422:	4770      	bx	lr
