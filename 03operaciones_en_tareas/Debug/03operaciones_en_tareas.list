
03operaciones_en_tareas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046e8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080047f8  080047f8  000147f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048c0  080048c0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080048c0  080048c0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048c0  080048c0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048c0  080048c0  000148c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048c4  080048c4  000148c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080048c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019fc  20000010  080048d8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a0c  080048d8  00021a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016356  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e95  00000000  00000000  0003638f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00039228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  0003a4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000027d6  00000000  00000000  0003b600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001305a  00000000  00000000  0003ddd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092bea  00000000  00000000  00050e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e3a1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dc0  00000000  00000000  000e3a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080047e0 	.word	0x080047e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080047e0 	.word	0x080047e0

08000150 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000154:	f000 fa44 	bl	80005e0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000158:	f000 f826 	bl	80001a8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800015c:	f000 f894 	bl	8000288 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000160:	f000 f868 	bl	8000234 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000164:	f001 fd1e 	bl	8001ba4 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000168:	4a09      	ldr	r2, [pc, #36]	; (8000190 <main+0x40>)
 800016a:	2100      	movs	r1, #0
 800016c:	4809      	ldr	r0, [pc, #36]	; (8000194 <main+0x44>)
 800016e:	f001 fd7f 	bl	8001c70 <osThreadNew>
 8000172:	4603      	mov	r3, r0
 8000174:	4a08      	ldr	r2, [pc, #32]	; (8000198 <main+0x48>)
 8000176:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of myTask02 */
	myTask02Handle = osThreadNew(Task02, NULL, &myTask02_attributes);
 8000178:	4a08      	ldr	r2, [pc, #32]	; (800019c <main+0x4c>)
 800017a:	2100      	movs	r1, #0
 800017c:	4808      	ldr	r0, [pc, #32]	; (80001a0 <main+0x50>)
 800017e:	f001 fd77 	bl	8001c70 <osThreadNew>
 8000182:	4603      	mov	r3, r0
 8000184:	4a07      	ldr	r2, [pc, #28]	; (80001a4 <main+0x54>)
 8000186:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000188:	f001 fd3e 	bl	8001c08 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800018c:	e7fe      	b.n	800018c <main+0x3c>
 800018e:	bf00      	nop
 8000190:	08004860 	.word	0x08004860
 8000194:	080002cd 	.word	0x080002cd
 8000198:	20001938 	.word	0x20001938
 800019c:	08004884 	.word	0x08004884
 80001a0:	08000305 	.word	0x08000305
 80001a4:	2000197c 	.word	0x2000197c

080001a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b090      	sub	sp, #64	; 0x40
 80001ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80001ae:	f107 0318 	add.w	r3, r7, #24
 80001b2:	2228      	movs	r2, #40	; 0x28
 80001b4:	2100      	movs	r1, #0
 80001b6:	4618      	mov	r0, r3
 80001b8:	f004 fb0a 	bl	80047d0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	2200      	movs	r2, #0
 80001c0:	601a      	str	r2, [r3, #0]
 80001c2:	605a      	str	r2, [r3, #4]
 80001c4:	609a      	str	r2, [r3, #8]
 80001c6:	60da      	str	r2, [r3, #12]
 80001c8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ca:	2301      	movs	r3, #1
 80001cc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d8:	2301      	movs	r3, #1
 80001da:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001dc:	2302      	movs	r3, #2
 80001de:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001e4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80001ec:	f107 0318 	add.w	r3, r7, #24
 80001f0:	4618      	mov	r0, r3
 80001f2:	f000 fc8b 	bl	8000b0c <HAL_RCC_OscConfig>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <SystemClock_Config+0x58>
		Error_Handler();
 80001fc:	f000 f8c4 	bl	8000388 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000200:	230f      	movs	r3, #15
 8000202:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000204:	2302      	movs	r3, #2
 8000206:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000208:	2300      	movs	r3, #0
 800020a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800020c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000210:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	2102      	movs	r1, #2
 800021a:	4618      	mov	r0, r3
 800021c:	f000 fef6 	bl	800100c <HAL_RCC_ClockConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x82>
		Error_Handler();
 8000226:	f000 f8af 	bl	8000388 <Error_Handler>
	}
}
 800022a:	bf00      	nop
 800022c:	3740      	adds	r7, #64	; 0x40
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000238:	4b11      	ldr	r3, [pc, #68]	; (8000280 <MX_USART1_UART_Init+0x4c>)
 800023a:	4a12      	ldr	r2, [pc, #72]	; (8000284 <MX_USART1_UART_Init+0x50>)
 800023c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800023e:	4b10      	ldr	r3, [pc, #64]	; (8000280 <MX_USART1_UART_Init+0x4c>)
 8000240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000244:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000246:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <MX_USART1_UART_Init+0x4c>)
 8000248:	2200      	movs	r2, #0
 800024a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800024c:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <MX_USART1_UART_Init+0x4c>)
 800024e:	2200      	movs	r2, #0
 8000250:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000252:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <MX_USART1_UART_Init+0x4c>)
 8000254:	2200      	movs	r2, #0
 8000256:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000258:	4b09      	ldr	r3, [pc, #36]	; (8000280 <MX_USART1_UART_Init+0x4c>)
 800025a:	220c      	movs	r2, #12
 800025c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800025e:	4b08      	ldr	r3, [pc, #32]	; (8000280 <MX_USART1_UART_Init+0x4c>)
 8000260:	2200      	movs	r2, #0
 8000262:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000264:	4b06      	ldr	r3, [pc, #24]	; (8000280 <MX_USART1_UART_Init+0x4c>)
 8000266:	2200      	movs	r2, #0
 8000268:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800026a:	4805      	ldr	r0, [pc, #20]	; (8000280 <MX_USART1_UART_Init+0x4c>)
 800026c:	f001 fae2 	bl	8001834 <HAL_UART_Init>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000276:	f000 f887 	bl	8000388 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	2000193c 	.word	0x2000193c
 8000284:	40013800 	.word	0x40013800

08000288 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800028e:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <MX_GPIO_Init+0x40>)
 8000290:	699b      	ldr	r3, [r3, #24]
 8000292:	4a0d      	ldr	r2, [pc, #52]	; (80002c8 <MX_GPIO_Init+0x40>)
 8000294:	f043 0320 	orr.w	r3, r3, #32
 8000298:	6193      	str	r3, [r2, #24]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <MX_GPIO_Init+0x40>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	f003 0320 	and.w	r3, r3, #32
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80002a6:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <MX_GPIO_Init+0x40>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	4a07      	ldr	r2, [pc, #28]	; (80002c8 <MX_GPIO_Init+0x40>)
 80002ac:	f043 0304 	orr.w	r3, r3, #4
 80002b0:	6193      	str	r3, [r2, #24]
 80002b2:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <MX_GPIO_Init+0x40>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	f003 0304 	and.w	r3, r3, #4
 80002ba:	603b      	str	r3, [r7, #0]
 80002bc:	683b      	ldr	r3, [r7, #0]

}
 80002be:	bf00      	nop
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr
 80002c8:	40021000 	.word	0x40021000

080002cc <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 80002cc:	b5b0      	push	{r4, r5, r7, lr}
 80002ce:	b088      	sub	sp, #32
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		uint8_t texto[] = "tarea numero 1\n\r";
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <StartDefaultTask+0x30>)
 80002d6:	f107 040c 	add.w	r4, r7, #12
 80002da:	461d      	mov	r5, r3
 80002dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002e0:	682b      	ldr	r3, [r5, #0]
 80002e2:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, texto, sizeof(texto), 50);
 80002e4:	f107 010c 	add.w	r1, r7, #12
 80002e8:	2332      	movs	r3, #50	; 0x32
 80002ea:	2211      	movs	r2, #17
 80002ec:	4804      	ldr	r0, [pc, #16]	; (8000300 <StartDefaultTask+0x34>)
 80002ee:	f001 faee 	bl	80018ce <HAL_UART_Transmit>
		osDelay(1000);
 80002f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002f6:	f001 fda5 	bl	8001e44 <osDelay>
	for (;;) {
 80002fa:	e7eb      	b.n	80002d4 <StartDefaultTask+0x8>
 80002fc:	08004810 	.word	0x08004810
 8000300:	2000193c 	.word	0x2000193c

08000304 <Task02>:
 * @brief Function implementing the myTask02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Task02 */
void Task02(void *argument) {
 8000304:	b5b0      	push	{r4, r5, r7, lr}
 8000306:	b088      	sub	sp, #32
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Task02 */
	/* Infinite loop */
	for (;;) {
		uint8_t texto[] = "tarea numero 2\n\r";
 800030c:	4b11      	ldr	r3, [pc, #68]	; (8000354 <Task02+0x50>)
 800030e:	f107 040c 	add.w	r4, r7, #12
 8000312:	461d      	mov	r5, r3
 8000314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000318:	682b      	ldr	r3, [r5, #0]
 800031a:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, texto, sizeof(texto), 50);
 800031c:	f107 010c 	add.w	r1, r7, #12
 8000320:	2332      	movs	r3, #50	; 0x32
 8000322:	2211      	movs	r2, #17
 8000324:	480c      	ldr	r0, [pc, #48]	; (8000358 <Task02+0x54>)
 8000326:	f001 fad2 	bl	80018ce <HAL_UART_Transmit>
		contador++;
 800032a:	4b0c      	ldr	r3, [pc, #48]	; (800035c <Task02+0x58>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	3301      	adds	r3, #1
 8000330:	b2da      	uxtb	r2, r3
 8000332:	4b0a      	ldr	r3, [pc, #40]	; (800035c <Task02+0x58>)
 8000334:	701a      	strb	r2, [r3, #0]
		 osThreadSuspend(defaultTaskHandle);

		 if (contador == 5)
		 osThreadResume(defaultTaskHandle);*/

		if (contador == 5)
 8000336:	4b09      	ldr	r3, [pc, #36]	; (800035c <Task02+0x58>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b05      	cmp	r3, #5
 800033c:	d104      	bne.n	8000348 <Task02+0x44>
			osThreadTerminate(defaultTaskHandle);
 800033e:	4b08      	ldr	r3, [pc, #32]	; (8000360 <Task02+0x5c>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4618      	mov	r0, r3
 8000344:	f001 fd3e 	bl	8001dc4 <osThreadTerminate>

		osDelay(1000);
 8000348:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800034c:	f001 fd7a 	bl	8001e44 <osDelay>
	for (;;) {
 8000350:	e7dc      	b.n	800030c <Task02+0x8>
 8000352:	bf00      	nop
 8000354:	08004824 	.word	0x08004824
 8000358:	2000193c 	.word	0x2000193c
 800035c:	2000002c 	.word	0x2000002c
 8000360:	20001938 	.word	0x20001938

08000364 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a04      	ldr	r2, [pc, #16]	; (8000384 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d101      	bne.n	800037a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000376:	f000 f949 	bl	800060c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800037a:	bf00      	nop
 800037c:	3708      	adds	r7, #8
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40012c00 	.word	0x40012c00

08000388 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800038c:	b672      	cpsid	i
}
 800038e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000390:	e7fe      	b.n	8000390 <Error_Handler+0x8>
	...

08000394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800039a:	4b18      	ldr	r3, [pc, #96]	; (80003fc <HAL_MspInit+0x68>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	4a17      	ldr	r2, [pc, #92]	; (80003fc <HAL_MspInit+0x68>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6193      	str	r3, [r2, #24]
 80003a6:	4b15      	ldr	r3, [pc, #84]	; (80003fc <HAL_MspInit+0x68>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	f003 0301 	and.w	r3, r3, #1
 80003ae:	60bb      	str	r3, [r7, #8]
 80003b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003b2:	4b12      	ldr	r3, [pc, #72]	; (80003fc <HAL_MspInit+0x68>)
 80003b4:	69db      	ldr	r3, [r3, #28]
 80003b6:	4a11      	ldr	r2, [pc, #68]	; (80003fc <HAL_MspInit+0x68>)
 80003b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003bc:	61d3      	str	r3, [r2, #28]
 80003be:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <HAL_MspInit+0x68>)
 80003c0:	69db      	ldr	r3, [r3, #28]
 80003c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003ca:	2200      	movs	r2, #0
 80003cc:	210f      	movs	r1, #15
 80003ce:	f06f 0001 	mvn.w	r0, #1
 80003d2:	f000 f9ec 	bl	80007ae <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003d6:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <HAL_MspInit+0x6c>)
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <HAL_MspInit+0x6c>)
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003f2:	bf00      	nop
 80003f4:	3710      	adds	r7, #16
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40021000 	.word	0x40021000
 8000400:	40010000 	.word	0x40010000

08000404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040c:	f107 0310 	add.w	r3, r7, #16
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a1c      	ldr	r2, [pc, #112]	; (8000490 <HAL_UART_MspInit+0x8c>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d131      	bne.n	8000488 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000424:	4b1b      	ldr	r3, [pc, #108]	; (8000494 <HAL_UART_MspInit+0x90>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a1a      	ldr	r2, [pc, #104]	; (8000494 <HAL_UART_MspInit+0x90>)
 800042a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b18      	ldr	r3, [pc, #96]	; (8000494 <HAL_UART_MspInit+0x90>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800043c:	4b15      	ldr	r3, [pc, #84]	; (8000494 <HAL_UART_MspInit+0x90>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a14      	ldr	r2, [pc, #80]	; (8000494 <HAL_UART_MspInit+0x90>)
 8000442:	f043 0304 	orr.w	r3, r3, #4
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <HAL_UART_MspInit+0x90>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0304 	and.w	r3, r3, #4
 8000450:	60bb      	str	r3, [r7, #8]
 8000452:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000458:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800045a:	2302      	movs	r3, #2
 800045c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800045e:	2303      	movs	r3, #3
 8000460:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000462:	f107 0310 	add.w	r3, r7, #16
 8000466:	4619      	mov	r1, r3
 8000468:	480b      	ldr	r0, [pc, #44]	; (8000498 <HAL_UART_MspInit+0x94>)
 800046a:	f000 f9cb 	bl	8000804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800046e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000472:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000478:	2300      	movs	r3, #0
 800047a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047c:	f107 0310 	add.w	r3, r7, #16
 8000480:	4619      	mov	r1, r3
 8000482:	4805      	ldr	r0, [pc, #20]	; (8000498 <HAL_UART_MspInit+0x94>)
 8000484:	f000 f9be 	bl	8000804 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000488:	bf00      	nop
 800048a:	3720      	adds	r7, #32
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40013800 	.word	0x40013800
 8000494:	40021000 	.word	0x40021000
 8000498:	40010800 	.word	0x40010800

0800049c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b08c      	sub	sp, #48	; 0x30
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80004ac:	2200      	movs	r2, #0
 80004ae:	6879      	ldr	r1, [r7, #4]
 80004b0:	2019      	movs	r0, #25
 80004b2:	f000 f97c 	bl	80007ae <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80004b6:	2019      	movs	r0, #25
 80004b8:	f000 f995 	bl	80007e6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80004bc:	4b1e      	ldr	r3, [pc, #120]	; (8000538 <HAL_InitTick+0x9c>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a1d      	ldr	r2, [pc, #116]	; (8000538 <HAL_InitTick+0x9c>)
 80004c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <HAL_InitTick+0x9c>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004d0:	60fb      	str	r3, [r7, #12]
 80004d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004d4:	f107 0210 	add.w	r2, r7, #16
 80004d8:	f107 0314 	add.w	r3, r7, #20
 80004dc:	4611      	mov	r1, r2
 80004de:	4618      	mov	r0, r3
 80004e0:	f000 ff10 	bl	8001304 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80004e4:	f000 fefa 	bl	80012dc <HAL_RCC_GetPCLK2Freq>
 80004e8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004ec:	4a13      	ldr	r2, [pc, #76]	; (800053c <HAL_InitTick+0xa0>)
 80004ee:	fba2 2303 	umull	r2, r3, r2, r3
 80004f2:	0c9b      	lsrs	r3, r3, #18
 80004f4:	3b01      	subs	r3, #1
 80004f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80004f8:	4b11      	ldr	r3, [pc, #68]	; (8000540 <HAL_InitTick+0xa4>)
 80004fa:	4a12      	ldr	r2, [pc, #72]	; (8000544 <HAL_InitTick+0xa8>)
 80004fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <HAL_InitTick+0xa4>)
 8000500:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000504:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000506:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <HAL_InitTick+0xa4>)
 8000508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800050a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <HAL_InitTick+0xa4>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <HAL_InitTick+0xa4>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000518:	4809      	ldr	r0, [pc, #36]	; (8000540 <HAL_InitTick+0xa4>)
 800051a:	f000 ff41 	bl	80013a0 <HAL_TIM_Base_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d104      	bne.n	800052e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000524:	4806      	ldr	r0, [pc, #24]	; (8000540 <HAL_InitTick+0xa4>)
 8000526:	f000 ff93 	bl	8001450 <HAL_TIM_Base_Start_IT>
 800052a:	4603      	mov	r3, r0
 800052c:	e000      	b.n	8000530 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800052e:	2301      	movs	r3, #1
}
 8000530:	4618      	mov	r0, r3
 8000532:	3730      	adds	r7, #48	; 0x30
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40021000 	.word	0x40021000
 800053c:	431bde83 	.word	0x431bde83
 8000540:	20001980 	.word	0x20001980
 8000544:	40012c00 	.word	0x40012c00

08000548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800054c:	e7fe      	b.n	800054c <NMI_Handler+0x4>

0800054e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000552:	e7fe      	b.n	8000552 <HardFault_Handler+0x4>

08000554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <MemManage_Handler+0x4>

0800055a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800055e:	e7fe      	b.n	800055e <BusFault_Handler+0x4>

08000560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <UsageFault_Handler+0x4>

08000566 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr
	...

08000574 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000578:	4802      	ldr	r0, [pc, #8]	; (8000584 <TIM1_UP_IRQHandler+0x10>)
 800057a:	f000 ffbb 	bl	80014f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20001980 	.word	0x20001980

08000588 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000594:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000596:	e003      	b.n	80005a0 <LoopCopyDataInit>

08000598 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800059a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800059c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800059e:	3104      	adds	r1, #4

080005a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005a0:	480a      	ldr	r0, [pc, #40]	; (80005cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005a8:	d3f6      	bcc.n	8000598 <CopyDataInit>
  ldr r2, =_sbss
 80005aa:	4a0a      	ldr	r2, [pc, #40]	; (80005d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005ac:	e002      	b.n	80005b4 <LoopFillZerobss>

080005ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005b0:	f842 3b04 	str.w	r3, [r2], #4

080005b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005b8:	d3f9      	bcc.n	80005ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005ba:	f7ff ffe5 	bl	8000588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005be:	f004 f8d5 	bl	800476c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005c2:	f7ff fdc5 	bl	8000150 <main>
  bx lr
 80005c6:	4770      	bx	lr
  ldr r3, =_sidata
 80005c8:	080048c8 	.word	0x080048c8
  ldr r0, =_sdata
 80005cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005d0:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80005d4:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80005d8:	20001a0c 	.word	0x20001a0c

080005dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005dc:	e7fe      	b.n	80005dc <ADC1_2_IRQHandler>
	...

080005e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <HAL_Init+0x28>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a07      	ldr	r2, [pc, #28]	; (8000608 <HAL_Init+0x28>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f0:	2003      	movs	r0, #3
 80005f2:	f000 f8d1 	bl	8000798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005f6:	2000      	movs	r0, #0
 80005f8:	f7ff ff50 	bl	800049c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005fc:	f7ff feca 	bl	8000394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000600:	2300      	movs	r3, #0
}
 8000602:	4618      	mov	r0, r3
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40022000 	.word	0x40022000

0800060c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <HAL_IncTick+0x1c>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	461a      	mov	r2, r3
 8000616:	4b05      	ldr	r3, [pc, #20]	; (800062c <HAL_IncTick+0x20>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4413      	add	r3, r2
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <HAL_IncTick+0x20>)
 800061e:	6013      	str	r3, [r2, #0]
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	20000008 	.word	0x20000008
 800062c:	200019c8 	.word	0x200019c8

08000630 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return uwTick;
 8000634:	4b02      	ldr	r3, [pc, #8]	; (8000640 <HAL_GetTick+0x10>)
 8000636:	681b      	ldr	r3, [r3, #0]
}
 8000638:	4618      	mov	r0, r3
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr
 8000640:	200019c8 	.word	0x200019c8

08000644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f003 0307 	and.w	r3, r3, #7
 8000652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <__NVIC_SetPriorityGrouping+0x44>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065a:	68ba      	ldr	r2, [r7, #8]
 800065c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000660:	4013      	ands	r3, r2
 8000662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800066c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000676:	4a04      	ldr	r2, [pc, #16]	; (8000688 <__NVIC_SetPriorityGrouping+0x44>)
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	60d3      	str	r3, [r2, #12]
}
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000690:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	0a1b      	lsrs	r3, r3, #8
 8000696:	f003 0307 	and.w	r3, r3, #7
}
 800069a:	4618      	mov	r0, r3
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	db0b      	blt.n	80006d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	f003 021f 	and.w	r2, r3, #31
 80006c0:	4906      	ldr	r1, [pc, #24]	; (80006dc <__NVIC_EnableIRQ+0x34>)
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	095b      	lsrs	r3, r3, #5
 80006c8:	2001      	movs	r0, #1
 80006ca:	fa00 f202 	lsl.w	r2, r0, r2
 80006ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100

080006e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	6039      	str	r1, [r7, #0]
 80006ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	db0a      	blt.n	800070a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	490c      	ldr	r1, [pc, #48]	; (800072c <__NVIC_SetPriority+0x4c>)
 80006fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fe:	0112      	lsls	r2, r2, #4
 8000700:	b2d2      	uxtb	r2, r2
 8000702:	440b      	add	r3, r1
 8000704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000708:	e00a      	b.n	8000720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4908      	ldr	r1, [pc, #32]	; (8000730 <__NVIC_SetPriority+0x50>)
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	f003 030f 	and.w	r3, r3, #15
 8000716:	3b04      	subs	r3, #4
 8000718:	0112      	lsls	r2, r2, #4
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	440b      	add	r3, r1
 800071e:	761a      	strb	r2, [r3, #24]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000e100 	.word	0xe000e100
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000734:	b480      	push	{r7}
 8000736:	b089      	sub	sp, #36	; 0x24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	f1c3 0307 	rsb	r3, r3, #7
 800074e:	2b04      	cmp	r3, #4
 8000750:	bf28      	it	cs
 8000752:	2304      	movcs	r3, #4
 8000754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3304      	adds	r3, #4
 800075a:	2b06      	cmp	r3, #6
 800075c:	d902      	bls.n	8000764 <NVIC_EncodePriority+0x30>
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3b03      	subs	r3, #3
 8000762:	e000      	b.n	8000766 <NVIC_EncodePriority+0x32>
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000768:	f04f 32ff 	mov.w	r2, #4294967295
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	fa02 f303 	lsl.w	r3, r2, r3
 8000772:	43da      	mvns	r2, r3
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	401a      	ands	r2, r3
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800077c:	f04f 31ff 	mov.w	r1, #4294967295
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	fa01 f303 	lsl.w	r3, r1, r3
 8000786:	43d9      	mvns	r1, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078c:	4313      	orrs	r3, r2
         );
}
 800078e:	4618      	mov	r0, r3
 8000790:	3724      	adds	r7, #36	; 0x24
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr

08000798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff ff4f 	bl	8000644 <__NVIC_SetPriorityGrouping>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b086      	sub	sp, #24
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4603      	mov	r3, r0
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
 80007ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c0:	f7ff ff64 	bl	800068c <__NVIC_GetPriorityGrouping>
 80007c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	68b9      	ldr	r1, [r7, #8]
 80007ca:	6978      	ldr	r0, [r7, #20]
 80007cc:	f7ff ffb2 	bl	8000734 <NVIC_EncodePriority>
 80007d0:	4602      	mov	r2, r0
 80007d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d6:	4611      	mov	r1, r2
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff81 	bl	80006e0 <__NVIC_SetPriority>
}
 80007de:	bf00      	nop
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4603      	mov	r3, r0
 80007ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff57 	bl	80006a8 <__NVIC_EnableIRQ>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000804:	b480      	push	{r7}
 8000806:	b08b      	sub	sp, #44	; 0x2c
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000812:	2300      	movs	r3, #0
 8000814:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000816:	e169      	b.n	8000aec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000818:	2201      	movs	r2, #1
 800081a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081c:	fa02 f303 	lsl.w	r3, r2, r3
 8000820:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	69fa      	ldr	r2, [r7, #28]
 8000828:	4013      	ands	r3, r2
 800082a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800082c:	69ba      	ldr	r2, [r7, #24]
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	429a      	cmp	r2, r3
 8000832:	f040 8158 	bne.w	8000ae6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	4a9a      	ldr	r2, [pc, #616]	; (8000aa4 <HAL_GPIO_Init+0x2a0>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d05e      	beq.n	80008fe <HAL_GPIO_Init+0xfa>
 8000840:	4a98      	ldr	r2, [pc, #608]	; (8000aa4 <HAL_GPIO_Init+0x2a0>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d875      	bhi.n	8000932 <HAL_GPIO_Init+0x12e>
 8000846:	4a98      	ldr	r2, [pc, #608]	; (8000aa8 <HAL_GPIO_Init+0x2a4>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d058      	beq.n	80008fe <HAL_GPIO_Init+0xfa>
 800084c:	4a96      	ldr	r2, [pc, #600]	; (8000aa8 <HAL_GPIO_Init+0x2a4>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d86f      	bhi.n	8000932 <HAL_GPIO_Init+0x12e>
 8000852:	4a96      	ldr	r2, [pc, #600]	; (8000aac <HAL_GPIO_Init+0x2a8>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d052      	beq.n	80008fe <HAL_GPIO_Init+0xfa>
 8000858:	4a94      	ldr	r2, [pc, #592]	; (8000aac <HAL_GPIO_Init+0x2a8>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d869      	bhi.n	8000932 <HAL_GPIO_Init+0x12e>
 800085e:	4a94      	ldr	r2, [pc, #592]	; (8000ab0 <HAL_GPIO_Init+0x2ac>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d04c      	beq.n	80008fe <HAL_GPIO_Init+0xfa>
 8000864:	4a92      	ldr	r2, [pc, #584]	; (8000ab0 <HAL_GPIO_Init+0x2ac>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d863      	bhi.n	8000932 <HAL_GPIO_Init+0x12e>
 800086a:	4a92      	ldr	r2, [pc, #584]	; (8000ab4 <HAL_GPIO_Init+0x2b0>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d046      	beq.n	80008fe <HAL_GPIO_Init+0xfa>
 8000870:	4a90      	ldr	r2, [pc, #576]	; (8000ab4 <HAL_GPIO_Init+0x2b0>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d85d      	bhi.n	8000932 <HAL_GPIO_Init+0x12e>
 8000876:	2b12      	cmp	r3, #18
 8000878:	d82a      	bhi.n	80008d0 <HAL_GPIO_Init+0xcc>
 800087a:	2b12      	cmp	r3, #18
 800087c:	d859      	bhi.n	8000932 <HAL_GPIO_Init+0x12e>
 800087e:	a201      	add	r2, pc, #4	; (adr r2, 8000884 <HAL_GPIO_Init+0x80>)
 8000880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000884:	080008ff 	.word	0x080008ff
 8000888:	080008d9 	.word	0x080008d9
 800088c:	080008eb 	.word	0x080008eb
 8000890:	0800092d 	.word	0x0800092d
 8000894:	08000933 	.word	0x08000933
 8000898:	08000933 	.word	0x08000933
 800089c:	08000933 	.word	0x08000933
 80008a0:	08000933 	.word	0x08000933
 80008a4:	08000933 	.word	0x08000933
 80008a8:	08000933 	.word	0x08000933
 80008ac:	08000933 	.word	0x08000933
 80008b0:	08000933 	.word	0x08000933
 80008b4:	08000933 	.word	0x08000933
 80008b8:	08000933 	.word	0x08000933
 80008bc:	08000933 	.word	0x08000933
 80008c0:	08000933 	.word	0x08000933
 80008c4:	08000933 	.word	0x08000933
 80008c8:	080008e1 	.word	0x080008e1
 80008cc:	080008f5 	.word	0x080008f5
 80008d0:	4a79      	ldr	r2, [pc, #484]	; (8000ab8 <HAL_GPIO_Init+0x2b4>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d013      	beq.n	80008fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008d6:	e02c      	b.n	8000932 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	623b      	str	r3, [r7, #32]
          break;
 80008de:	e029      	b.n	8000934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	3304      	adds	r3, #4
 80008e6:	623b      	str	r3, [r7, #32]
          break;
 80008e8:	e024      	b.n	8000934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	3308      	adds	r3, #8
 80008f0:	623b      	str	r3, [r7, #32]
          break;
 80008f2:	e01f      	b.n	8000934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	330c      	adds	r3, #12
 80008fa:	623b      	str	r3, [r7, #32]
          break;
 80008fc:	e01a      	b.n	8000934 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d102      	bne.n	800090c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000906:	2304      	movs	r3, #4
 8000908:	623b      	str	r3, [r7, #32]
          break;
 800090a:	e013      	b.n	8000934 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d105      	bne.n	8000920 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000914:	2308      	movs	r3, #8
 8000916:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	69fa      	ldr	r2, [r7, #28]
 800091c:	611a      	str	r2, [r3, #16]
          break;
 800091e:	e009      	b.n	8000934 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000920:	2308      	movs	r3, #8
 8000922:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	69fa      	ldr	r2, [r7, #28]
 8000928:	615a      	str	r2, [r3, #20]
          break;
 800092a:	e003      	b.n	8000934 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
          break;
 8000930:	e000      	b.n	8000934 <HAL_GPIO_Init+0x130>
          break;
 8000932:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	2bff      	cmp	r3, #255	; 0xff
 8000938:	d801      	bhi.n	800093e <HAL_GPIO_Init+0x13a>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	e001      	b.n	8000942 <HAL_GPIO_Init+0x13e>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	3304      	adds	r3, #4
 8000942:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	2bff      	cmp	r3, #255	; 0xff
 8000948:	d802      	bhi.n	8000950 <HAL_GPIO_Init+0x14c>
 800094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	e002      	b.n	8000956 <HAL_GPIO_Init+0x152>
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	3b08      	subs	r3, #8
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	210f      	movs	r1, #15
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	fa01 f303 	lsl.w	r3, r1, r3
 8000964:	43db      	mvns	r3, r3
 8000966:	401a      	ands	r2, r3
 8000968:	6a39      	ldr	r1, [r7, #32]
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	fa01 f303 	lsl.w	r3, r1, r3
 8000970:	431a      	orrs	r2, r3
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	2b00      	cmp	r3, #0
 8000980:	f000 80b1 	beq.w	8000ae6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000984:	4b4d      	ldr	r3, [pc, #308]	; (8000abc <HAL_GPIO_Init+0x2b8>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a4c      	ldr	r2, [pc, #304]	; (8000abc <HAL_GPIO_Init+0x2b8>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b4a      	ldr	r3, [pc, #296]	; (8000abc <HAL_GPIO_Init+0x2b8>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800099c:	4a48      	ldr	r2, [pc, #288]	; (8000ac0 <HAL_GPIO_Init+0x2bc>)
 800099e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a0:	089b      	lsrs	r3, r3, #2
 80009a2:	3302      	adds	r3, #2
 80009a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ac:	f003 0303 	and.w	r3, r3, #3
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	220f      	movs	r2, #15
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	43db      	mvns	r3, r3
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	4013      	ands	r3, r2
 80009be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a40      	ldr	r2, [pc, #256]	; (8000ac4 <HAL_GPIO_Init+0x2c0>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d013      	beq.n	80009f0 <HAL_GPIO_Init+0x1ec>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a3f      	ldr	r2, [pc, #252]	; (8000ac8 <HAL_GPIO_Init+0x2c4>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d00d      	beq.n	80009ec <HAL_GPIO_Init+0x1e8>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a3e      	ldr	r2, [pc, #248]	; (8000acc <HAL_GPIO_Init+0x2c8>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d007      	beq.n	80009e8 <HAL_GPIO_Init+0x1e4>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a3d      	ldr	r2, [pc, #244]	; (8000ad0 <HAL_GPIO_Init+0x2cc>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d101      	bne.n	80009e4 <HAL_GPIO_Init+0x1e0>
 80009e0:	2303      	movs	r3, #3
 80009e2:	e006      	b.n	80009f2 <HAL_GPIO_Init+0x1ee>
 80009e4:	2304      	movs	r3, #4
 80009e6:	e004      	b.n	80009f2 <HAL_GPIO_Init+0x1ee>
 80009e8:	2302      	movs	r3, #2
 80009ea:	e002      	b.n	80009f2 <HAL_GPIO_Init+0x1ee>
 80009ec:	2301      	movs	r3, #1
 80009ee:	e000      	b.n	80009f2 <HAL_GPIO_Init+0x1ee>
 80009f0:	2300      	movs	r3, #0
 80009f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009f4:	f002 0203 	and.w	r2, r2, #3
 80009f8:	0092      	lsls	r2, r2, #2
 80009fa:	4093      	lsls	r3, r2
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a02:	492f      	ldr	r1, [pc, #188]	; (8000ac0 <HAL_GPIO_Init+0x2bc>)
 8000a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a06:	089b      	lsrs	r3, r3, #2
 8000a08:	3302      	adds	r3, #2
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d006      	beq.n	8000a2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a1c:	4b2d      	ldr	r3, [pc, #180]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	492c      	ldr	r1, [pc, #176]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	600b      	str	r3, [r1, #0]
 8000a28:	e006      	b.n	8000a38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	43db      	mvns	r3, r3
 8000a32:	4928      	ldr	r1, [pc, #160]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a34:	4013      	ands	r3, r2
 8000a36:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d006      	beq.n	8000a52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a44:	4b23      	ldr	r3, [pc, #140]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a46:	685a      	ldr	r2, [r3, #4]
 8000a48:	4922      	ldr	r1, [pc, #136]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	604b      	str	r3, [r1, #4]
 8000a50:	e006      	b.n	8000a60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a52:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a54:	685a      	ldr	r2, [r3, #4]
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	491e      	ldr	r1, [pc, #120]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d006      	beq.n	8000a7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a6c:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	4918      	ldr	r1, [pc, #96]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	608b      	str	r3, [r1, #8]
 8000a78:	e006      	b.n	8000a88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a7a:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a7c:	689a      	ldr	r2, [r3, #8]
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	43db      	mvns	r3, r3
 8000a82:	4914      	ldr	r1, [pc, #80]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a84:	4013      	ands	r3, r2
 8000a86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d021      	beq.n	8000ad8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a96:	68da      	ldr	r2, [r3, #12]
 8000a98:	490e      	ldr	r1, [pc, #56]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	60cb      	str	r3, [r1, #12]
 8000aa0:	e021      	b.n	8000ae6 <HAL_GPIO_Init+0x2e2>
 8000aa2:	bf00      	nop
 8000aa4:	10320000 	.word	0x10320000
 8000aa8:	10310000 	.word	0x10310000
 8000aac:	10220000 	.word	0x10220000
 8000ab0:	10210000 	.word	0x10210000
 8000ab4:	10120000 	.word	0x10120000
 8000ab8:	10110000 	.word	0x10110000
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	40010000 	.word	0x40010000
 8000ac4:	40010800 	.word	0x40010800
 8000ac8:	40010c00 	.word	0x40010c00
 8000acc:	40011000 	.word	0x40011000
 8000ad0:	40011400 	.word	0x40011400
 8000ad4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <HAL_GPIO_Init+0x304>)
 8000ada:	68da      	ldr	r2, [r3, #12]
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	4909      	ldr	r1, [pc, #36]	; (8000b08 <HAL_GPIO_Init+0x304>)
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae8:	3301      	adds	r3, #1
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af2:	fa22 f303 	lsr.w	r3, r2, r3
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f47f ae8e 	bne.w	8000818 <HAL_GPIO_Init+0x14>
  }
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	372c      	adds	r7, #44	; 0x2c
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	40010400 	.word	0x40010400

08000b0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d101      	bne.n	8000b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e26c      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f000 8087 	beq.w	8000c3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b2c:	4b92      	ldr	r3, [pc, #584]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f003 030c 	and.w	r3, r3, #12
 8000b34:	2b04      	cmp	r3, #4
 8000b36:	d00c      	beq.n	8000b52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b38:	4b8f      	ldr	r3, [pc, #572]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f003 030c 	and.w	r3, r3, #12
 8000b40:	2b08      	cmp	r3, #8
 8000b42:	d112      	bne.n	8000b6a <HAL_RCC_OscConfig+0x5e>
 8000b44:	4b8c      	ldr	r3, [pc, #560]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b50:	d10b      	bne.n	8000b6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b52:	4b89      	ldr	r3, [pc, #548]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d06c      	beq.n	8000c38 <HAL_RCC_OscConfig+0x12c>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d168      	bne.n	8000c38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e246      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b72:	d106      	bne.n	8000b82 <HAL_RCC_OscConfig+0x76>
 8000b74:	4b80      	ldr	r3, [pc, #512]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a7f      	ldr	r2, [pc, #508]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b7e:	6013      	str	r3, [r2, #0]
 8000b80:	e02e      	b.n	8000be0 <HAL_RCC_OscConfig+0xd4>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d10c      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x98>
 8000b8a:	4b7b      	ldr	r3, [pc, #492]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a7a      	ldr	r2, [pc, #488]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b94:	6013      	str	r3, [r2, #0]
 8000b96:	4b78      	ldr	r3, [pc, #480]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a77      	ldr	r2, [pc, #476]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000b9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	e01d      	b.n	8000be0 <HAL_RCC_OscConfig+0xd4>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bac:	d10c      	bne.n	8000bc8 <HAL_RCC_OscConfig+0xbc>
 8000bae:	4b72      	ldr	r3, [pc, #456]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a71      	ldr	r2, [pc, #452]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bb8:	6013      	str	r3, [r2, #0]
 8000bba:	4b6f      	ldr	r3, [pc, #444]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a6e      	ldr	r2, [pc, #440]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bc4:	6013      	str	r3, [r2, #0]
 8000bc6:	e00b      	b.n	8000be0 <HAL_RCC_OscConfig+0xd4>
 8000bc8:	4b6b      	ldr	r3, [pc, #428]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a6a      	ldr	r2, [pc, #424]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	4b68      	ldr	r3, [pc, #416]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a67      	ldr	r2, [pc, #412]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d013      	beq.n	8000c10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be8:	f7ff fd22 	bl	8000630 <HAL_GetTick>
 8000bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bee:	e008      	b.n	8000c02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bf0:	f7ff fd1e 	bl	8000630 <HAL_GetTick>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	2b64      	cmp	r3, #100	; 0x64
 8000bfc:	d901      	bls.n	8000c02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	e1fa      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c02:	4b5d      	ldr	r3, [pc, #372]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d0f0      	beq.n	8000bf0 <HAL_RCC_OscConfig+0xe4>
 8000c0e:	e014      	b.n	8000c3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c10:	f7ff fd0e 	bl	8000630 <HAL_GetTick>
 8000c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c16:	e008      	b.n	8000c2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c18:	f7ff fd0a 	bl	8000630 <HAL_GetTick>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	2b64      	cmp	r3, #100	; 0x64
 8000c24:	d901      	bls.n	8000c2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c26:	2303      	movs	r3, #3
 8000c28:	e1e6      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c2a:	4b53      	ldr	r3, [pc, #332]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d1f0      	bne.n	8000c18 <HAL_RCC_OscConfig+0x10c>
 8000c36:	e000      	b.n	8000c3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d063      	beq.n	8000d0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c46:	4b4c      	ldr	r3, [pc, #304]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 030c 	and.w	r3, r3, #12
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d00b      	beq.n	8000c6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c52:	4b49      	ldr	r3, [pc, #292]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 030c 	and.w	r3, r3, #12
 8000c5a:	2b08      	cmp	r3, #8
 8000c5c:	d11c      	bne.n	8000c98 <HAL_RCC_OscConfig+0x18c>
 8000c5e:	4b46      	ldr	r3, [pc, #280]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d116      	bne.n	8000c98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c6a:	4b43      	ldr	r3, [pc, #268]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d005      	beq.n	8000c82 <HAL_RCC_OscConfig+0x176>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	691b      	ldr	r3, [r3, #16]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d001      	beq.n	8000c82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e1ba      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c82:	4b3d      	ldr	r3, [pc, #244]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	4939      	ldr	r1, [pc, #228]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000c92:	4313      	orrs	r3, r2
 8000c94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c96:	e03a      	b.n	8000d0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	691b      	ldr	r3, [r3, #16]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d020      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ca0:	4b36      	ldr	r3, [pc, #216]	; (8000d7c <HAL_RCC_OscConfig+0x270>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca6:	f7ff fcc3 	bl	8000630 <HAL_GetTick>
 8000caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cac:	e008      	b.n	8000cc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cae:	f7ff fcbf 	bl	8000630 <HAL_GetTick>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d901      	bls.n	8000cc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	e19b      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cc0:	4b2d      	ldr	r3, [pc, #180]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d0f0      	beq.n	8000cae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ccc:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	695b      	ldr	r3, [r3, #20]
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	4927      	ldr	r1, [pc, #156]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	600b      	str	r3, [r1, #0]
 8000ce0:	e015      	b.n	8000d0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ce2:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <HAL_RCC_OscConfig+0x270>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce8:	f7ff fca2 	bl	8000630 <HAL_GetTick>
 8000cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cee:	e008      	b.n	8000d02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cf0:	f7ff fc9e 	bl	8000630 <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d901      	bls.n	8000d02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e17a      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d02:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1f0      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 0308 	and.w	r3, r3, #8
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d03a      	beq.n	8000d90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d019      	beq.n	8000d56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d22:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <HAL_RCC_OscConfig+0x274>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d28:	f7ff fc82 	bl	8000630 <HAL_GetTick>
 8000d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d2e:	e008      	b.n	8000d42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d30:	f7ff fc7e 	bl	8000630 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d901      	bls.n	8000d42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	e15a      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d0f0      	beq.n	8000d30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d4e:	2001      	movs	r0, #1
 8000d50:	f000 fb08 	bl	8001364 <RCC_Delay>
 8000d54:	e01c      	b.n	8000d90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <HAL_RCC_OscConfig+0x274>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d5c:	f7ff fc68 	bl	8000630 <HAL_GetTick>
 8000d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d62:	e00f      	b.n	8000d84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d64:	f7ff fc64 	bl	8000630 <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d908      	bls.n	8000d84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d72:	2303      	movs	r3, #3
 8000d74:	e140      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4ec>
 8000d76:	bf00      	nop
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	42420000 	.word	0x42420000
 8000d80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d84:	4b9e      	ldr	r3, [pc, #632]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d1e9      	bne.n	8000d64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f000 80a6 	beq.w	8000eea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000da2:	4b97      	ldr	r3, [pc, #604]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10d      	bne.n	8000dca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	4b94      	ldr	r3, [pc, #592]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	4a93      	ldr	r2, [pc, #588]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db8:	61d3      	str	r3, [r2, #28]
 8000dba:	4b91      	ldr	r3, [pc, #580]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dca:	4b8e      	ldr	r3, [pc, #568]	; (8001004 <HAL_RCC_OscConfig+0x4f8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d118      	bne.n	8000e08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dd6:	4b8b      	ldr	r3, [pc, #556]	; (8001004 <HAL_RCC_OscConfig+0x4f8>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a8a      	ldr	r2, [pc, #552]	; (8001004 <HAL_RCC_OscConfig+0x4f8>)
 8000ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000de2:	f7ff fc25 	bl	8000630 <HAL_GetTick>
 8000de6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000de8:	e008      	b.n	8000dfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dea:	f7ff fc21 	bl	8000630 <HAL_GetTick>
 8000dee:	4602      	mov	r2, r0
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	2b64      	cmp	r3, #100	; 0x64
 8000df6:	d901      	bls.n	8000dfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	e0fd      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dfc:	4b81      	ldr	r3, [pc, #516]	; (8001004 <HAL_RCC_OscConfig+0x4f8>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d0f0      	beq.n	8000dea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d106      	bne.n	8000e1e <HAL_RCC_OscConfig+0x312>
 8000e10:	4b7b      	ldr	r3, [pc, #492]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000e12:	6a1b      	ldr	r3, [r3, #32]
 8000e14:	4a7a      	ldr	r2, [pc, #488]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	6213      	str	r3, [r2, #32]
 8000e1c:	e02d      	b.n	8000e7a <HAL_RCC_OscConfig+0x36e>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d10c      	bne.n	8000e40 <HAL_RCC_OscConfig+0x334>
 8000e26:	4b76      	ldr	r3, [pc, #472]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000e28:	6a1b      	ldr	r3, [r3, #32]
 8000e2a:	4a75      	ldr	r2, [pc, #468]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000e2c:	f023 0301 	bic.w	r3, r3, #1
 8000e30:	6213      	str	r3, [r2, #32]
 8000e32:	4b73      	ldr	r3, [pc, #460]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000e34:	6a1b      	ldr	r3, [r3, #32]
 8000e36:	4a72      	ldr	r2, [pc, #456]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000e38:	f023 0304 	bic.w	r3, r3, #4
 8000e3c:	6213      	str	r3, [r2, #32]
 8000e3e:	e01c      	b.n	8000e7a <HAL_RCC_OscConfig+0x36e>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	2b05      	cmp	r3, #5
 8000e46:	d10c      	bne.n	8000e62 <HAL_RCC_OscConfig+0x356>
 8000e48:	4b6d      	ldr	r3, [pc, #436]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000e4a:	6a1b      	ldr	r3, [r3, #32]
 8000e4c:	4a6c      	ldr	r2, [pc, #432]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000e4e:	f043 0304 	orr.w	r3, r3, #4
 8000e52:	6213      	str	r3, [r2, #32]
 8000e54:	4b6a      	ldr	r3, [pc, #424]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000e56:	6a1b      	ldr	r3, [r3, #32]
 8000e58:	4a69      	ldr	r2, [pc, #420]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	6213      	str	r3, [r2, #32]
 8000e60:	e00b      	b.n	8000e7a <HAL_RCC_OscConfig+0x36e>
 8000e62:	4b67      	ldr	r3, [pc, #412]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000e64:	6a1b      	ldr	r3, [r3, #32]
 8000e66:	4a66      	ldr	r2, [pc, #408]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000e68:	f023 0301 	bic.w	r3, r3, #1
 8000e6c:	6213      	str	r3, [r2, #32]
 8000e6e:	4b64      	ldr	r3, [pc, #400]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000e70:	6a1b      	ldr	r3, [r3, #32]
 8000e72:	4a63      	ldr	r2, [pc, #396]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000e74:	f023 0304 	bic.w	r3, r3, #4
 8000e78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d015      	beq.n	8000eae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e82:	f7ff fbd5 	bl	8000630 <HAL_GetTick>
 8000e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e88:	e00a      	b.n	8000ea0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e8a:	f7ff fbd1 	bl	8000630 <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d901      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e0ab      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ea0:	4b57      	ldr	r3, [pc, #348]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000ea2:	6a1b      	ldr	r3, [r3, #32]
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d0ee      	beq.n	8000e8a <HAL_RCC_OscConfig+0x37e>
 8000eac:	e014      	b.n	8000ed8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eae:	f7ff fbbf 	bl	8000630 <HAL_GetTick>
 8000eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eb4:	e00a      	b.n	8000ecc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eb6:	f7ff fbbb 	bl	8000630 <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d901      	bls.n	8000ecc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e095      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ecc:	4b4c      	ldr	r3, [pc, #304]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000ece:	6a1b      	ldr	r3, [r3, #32]
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d1ee      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000ed8:	7dfb      	ldrb	r3, [r7, #23]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d105      	bne.n	8000eea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ede:	4b48      	ldr	r3, [pc, #288]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	4a47      	ldr	r2, [pc, #284]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ee8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f000 8081 	beq.w	8000ff6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ef4:	4b42      	ldr	r3, [pc, #264]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 030c 	and.w	r3, r3, #12
 8000efc:	2b08      	cmp	r3, #8
 8000efe:	d061      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	69db      	ldr	r3, [r3, #28]
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d146      	bne.n	8000f96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f08:	4b3f      	ldr	r3, [pc, #252]	; (8001008 <HAL_RCC_OscConfig+0x4fc>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0e:	f7ff fb8f 	bl	8000630 <HAL_GetTick>
 8000f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f14:	e008      	b.n	8000f28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f16:	f7ff fb8b 	bl	8000630 <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e067      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f28:	4b35      	ldr	r3, [pc, #212]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1f0      	bne.n	8000f16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a1b      	ldr	r3, [r3, #32]
 8000f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f3c:	d108      	bne.n	8000f50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f3e:	4b30      	ldr	r3, [pc, #192]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	492d      	ldr	r1, [pc, #180]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f50:	4b2b      	ldr	r3, [pc, #172]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a19      	ldr	r1, [r3, #32]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f60:	430b      	orrs	r3, r1
 8000f62:	4927      	ldr	r1, [pc, #156]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000f64:	4313      	orrs	r3, r2
 8000f66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f68:	4b27      	ldr	r3, [pc, #156]	; (8001008 <HAL_RCC_OscConfig+0x4fc>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6e:	f7ff fb5f 	bl	8000630 <HAL_GetTick>
 8000f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f74:	e008      	b.n	8000f88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f76:	f7ff fb5b 	bl	8000630 <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d901      	bls.n	8000f88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f84:	2303      	movs	r3, #3
 8000f86:	e037      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d0f0      	beq.n	8000f76 <HAL_RCC_OscConfig+0x46a>
 8000f94:	e02f      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <HAL_RCC_OscConfig+0x4fc>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fb48 	bl	8000630 <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fa4:	f7ff fb44 	bl	8000630 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e020      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fb6:	4b12      	ldr	r3, [pc, #72]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f0      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x498>
 8000fc2:	e018      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	69db      	ldr	r3, [r3, #28]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d101      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e013      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <HAL_RCC_OscConfig+0x4f4>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a1b      	ldr	r3, [r3, #32]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d106      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d001      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40021000 	.word	0x40021000
 8001004:	40007000 	.word	0x40007000
 8001008:	42420060 	.word	0x42420060

0800100c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e0d0      	b.n	80011c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001020:	4b6a      	ldr	r3, [pc, #424]	; (80011cc <HAL_RCC_ClockConfig+0x1c0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 0307 	and.w	r3, r3, #7
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	429a      	cmp	r2, r3
 800102c:	d910      	bls.n	8001050 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800102e:	4b67      	ldr	r3, [pc, #412]	; (80011cc <HAL_RCC_ClockConfig+0x1c0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f023 0207 	bic.w	r2, r3, #7
 8001036:	4965      	ldr	r1, [pc, #404]	; (80011cc <HAL_RCC_ClockConfig+0x1c0>)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	4313      	orrs	r3, r2
 800103c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800103e:	4b63      	ldr	r3, [pc, #396]	; (80011cc <HAL_RCC_ClockConfig+0x1c0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	429a      	cmp	r2, r3
 800104a:	d001      	beq.n	8001050 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e0b8      	b.n	80011c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d020      	beq.n	800109e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	2b00      	cmp	r3, #0
 8001066:	d005      	beq.n	8001074 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001068:	4b59      	ldr	r3, [pc, #356]	; (80011d0 <HAL_RCC_ClockConfig+0x1c4>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	4a58      	ldr	r2, [pc, #352]	; (80011d0 <HAL_RCC_ClockConfig+0x1c4>)
 800106e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001072:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	2b00      	cmp	r3, #0
 800107e:	d005      	beq.n	800108c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001080:	4b53      	ldr	r3, [pc, #332]	; (80011d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	4a52      	ldr	r2, [pc, #328]	; (80011d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001086:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800108a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800108c:	4b50      	ldr	r3, [pc, #320]	; (80011d0 <HAL_RCC_ClockConfig+0x1c4>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	494d      	ldr	r1, [pc, #308]	; (80011d0 <HAL_RCC_ClockConfig+0x1c4>)
 800109a:	4313      	orrs	r3, r2
 800109c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d040      	beq.n	800112c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d107      	bne.n	80010c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b2:	4b47      	ldr	r3, [pc, #284]	; (80011d0 <HAL_RCC_ClockConfig+0x1c4>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d115      	bne.n	80010ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e07f      	b.n	80011c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d107      	bne.n	80010da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ca:	4b41      	ldr	r3, [pc, #260]	; (80011d0 <HAL_RCC_ClockConfig+0x1c4>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d109      	bne.n	80010ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e073      	b.n	80011c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010da:	4b3d      	ldr	r3, [pc, #244]	; (80011d0 <HAL_RCC_ClockConfig+0x1c4>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e06b      	b.n	80011c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010ea:	4b39      	ldr	r3, [pc, #228]	; (80011d0 <HAL_RCC_ClockConfig+0x1c4>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f023 0203 	bic.w	r2, r3, #3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	4936      	ldr	r1, [pc, #216]	; (80011d0 <HAL_RCC_ClockConfig+0x1c4>)
 80010f8:	4313      	orrs	r3, r2
 80010fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010fc:	f7ff fa98 	bl	8000630 <HAL_GetTick>
 8001100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001102:	e00a      	b.n	800111a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001104:	f7ff fa94 	bl	8000630 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001112:	4293      	cmp	r3, r2
 8001114:	d901      	bls.n	800111a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e053      	b.n	80011c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800111a:	4b2d      	ldr	r3, [pc, #180]	; (80011d0 <HAL_RCC_ClockConfig+0x1c4>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 020c 	and.w	r2, r3, #12
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	429a      	cmp	r2, r3
 800112a:	d1eb      	bne.n	8001104 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800112c:	4b27      	ldr	r3, [pc, #156]	; (80011cc <HAL_RCC_ClockConfig+0x1c0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0307 	and.w	r3, r3, #7
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	429a      	cmp	r2, r3
 8001138:	d210      	bcs.n	800115c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800113a:	4b24      	ldr	r3, [pc, #144]	; (80011cc <HAL_RCC_ClockConfig+0x1c0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f023 0207 	bic.w	r2, r3, #7
 8001142:	4922      	ldr	r1, [pc, #136]	; (80011cc <HAL_RCC_ClockConfig+0x1c0>)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	4313      	orrs	r3, r2
 8001148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <HAL_RCC_ClockConfig+0x1c0>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	d001      	beq.n	800115c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e032      	b.n	80011c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	2b00      	cmp	r3, #0
 8001166:	d008      	beq.n	800117a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <HAL_RCC_ClockConfig+0x1c4>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	4916      	ldr	r1, [pc, #88]	; (80011d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001176:	4313      	orrs	r3, r2
 8001178:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	2b00      	cmp	r3, #0
 8001184:	d009      	beq.n	800119a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	490e      	ldr	r1, [pc, #56]	; (80011d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001196:	4313      	orrs	r3, r2
 8001198:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800119a:	f000 f821 	bl	80011e0 <HAL_RCC_GetSysClockFreq>
 800119e:	4602      	mov	r2, r0
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <HAL_RCC_ClockConfig+0x1c4>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	091b      	lsrs	r3, r3, #4
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	490a      	ldr	r1, [pc, #40]	; (80011d4 <HAL_RCC_ClockConfig+0x1c8>)
 80011ac:	5ccb      	ldrb	r3, [r1, r3]
 80011ae:	fa22 f303 	lsr.w	r3, r2, r3
 80011b2:	4a09      	ldr	r2, [pc, #36]	; (80011d8 <HAL_RCC_ClockConfig+0x1cc>)
 80011b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <HAL_RCC_ClockConfig+0x1d0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f96e 	bl	800049c <HAL_InitTick>

  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40022000 	.word	0x40022000
 80011d0:	40021000 	.word	0x40021000
 80011d4:	080048a8 	.word	0x080048a8
 80011d8:	20000000 	.word	0x20000000
 80011dc:	20000004 	.word	0x20000004

080011e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011e0:	b490      	push	{r4, r7}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011e6:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <HAL_RCC_GetSysClockFreq+0xb0>)
 80011e8:	1d3c      	adds	r4, r7, #4
 80011ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011f0:	f240 2301 	movw	r3, #513	; 0x201
 80011f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
 80011fa:	2300      	movs	r3, #0
 80011fc:	61bb      	str	r3, [r7, #24]
 80011fe:	2300      	movs	r3, #0
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001206:	2300      	movs	r3, #0
 8001208:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800120a:	4b22      	ldr	r3, [pc, #136]	; (8001294 <HAL_RCC_GetSysClockFreq+0xb4>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f003 030c 	and.w	r3, r3, #12
 8001216:	2b04      	cmp	r3, #4
 8001218:	d002      	beq.n	8001220 <HAL_RCC_GetSysClockFreq+0x40>
 800121a:	2b08      	cmp	r3, #8
 800121c:	d003      	beq.n	8001226 <HAL_RCC_GetSysClockFreq+0x46>
 800121e:	e02d      	b.n	800127c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001222:	623b      	str	r3, [r7, #32]
      break;
 8001224:	e02d      	b.n	8001282 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	0c9b      	lsrs	r3, r3, #18
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001232:	4413      	add	r3, r2
 8001234:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001238:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d013      	beq.n	800126c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001244:	4b13      	ldr	r3, [pc, #76]	; (8001294 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	0c5b      	lsrs	r3, r3, #17
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001252:	4413      	add	r3, r2
 8001254:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001258:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <HAL_RCC_GetSysClockFreq+0xb8>)
 800125e:	fb02 f203 	mul.w	r2, r2, r3
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	fbb2 f3f3 	udiv	r3, r2, r3
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
 800126a:	e004      	b.n	8001276 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	4a0b      	ldr	r2, [pc, #44]	; (800129c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001270:	fb02 f303 	mul.w	r3, r2, r3
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001278:	623b      	str	r3, [r7, #32]
      break;
 800127a:	e002      	b.n	8001282 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_RCC_GetSysClockFreq+0xb8>)
 800127e:	623b      	str	r3, [r7, #32]
      break;
 8001280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001282:	6a3b      	ldr	r3, [r7, #32]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3728      	adds	r7, #40	; 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	bc90      	pop	{r4, r7}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	08004838 	.word	0x08004838
 8001294:	40021000 	.word	0x40021000
 8001298:	007a1200 	.word	0x007a1200
 800129c:	003d0900 	.word	0x003d0900

080012a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012a4:	4b02      	ldr	r3, [pc, #8]	; (80012b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	20000000 	.word	0x20000000

080012b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012b8:	f7ff fff2 	bl	80012a0 <HAL_RCC_GetHCLKFreq>
 80012bc:	4602      	mov	r2, r0
 80012be:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	0a1b      	lsrs	r3, r3, #8
 80012c4:	f003 0307 	and.w	r3, r3, #7
 80012c8:	4903      	ldr	r1, [pc, #12]	; (80012d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012ca:	5ccb      	ldrb	r3, [r1, r3]
 80012cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40021000 	.word	0x40021000
 80012d8:	080048b8 	.word	0x080048b8

080012dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80012e0:	f7ff ffde 	bl	80012a0 <HAL_RCC_GetHCLKFreq>
 80012e4:	4602      	mov	r2, r0
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	0adb      	lsrs	r3, r3, #11
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	4903      	ldr	r1, [pc, #12]	; (8001300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012f2:	5ccb      	ldrb	r3, [r1, r3]
 80012f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40021000 	.word	0x40021000
 8001300:	080048b8 	.word	0x080048b8

08001304 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	220f      	movs	r2, #15
 8001312:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <HAL_RCC_GetClockConfig+0x58>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 0203 	and.w	r2, r3, #3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001320:	4b0e      	ldr	r3, [pc, #56]	; (800135c <HAL_RCC_GetClockConfig+0x58>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <HAL_RCC_GetClockConfig+0x58>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_RCC_GetClockConfig+0x58>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	08db      	lsrs	r3, r3, #3
 800133e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_RCC_GetClockConfig+0x5c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0207 	and.w	r2, r3, #7
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	40021000 	.word	0x40021000
 8001360:	40022000 	.word	0x40022000

08001364 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <RCC_Delay+0x34>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0a      	ldr	r2, [pc, #40]	; (800139c <RCC_Delay+0x38>)
 8001372:	fba2 2303 	umull	r2, r3, r2, r3
 8001376:	0a5b      	lsrs	r3, r3, #9
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	fb02 f303 	mul.w	r3, r2, r3
 800137e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001380:	bf00      	nop
  }
  while (Delay --);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	1e5a      	subs	r2, r3, #1
 8001386:	60fa      	str	r2, [r7, #12]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f9      	bne.n	8001380 <RCC_Delay+0x1c>
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	20000000 	.word	0x20000000
 800139c:	10624dd3 	.word	0x10624dd3

080013a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e041      	b.n	8001436 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d106      	bne.n	80013cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f839 	bl	800143e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2202      	movs	r2, #2
 80013d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3304      	adds	r3, #4
 80013dc:	4619      	mov	r1, r3
 80013de:	4610      	mov	r0, r2
 80013e0:	f000 f9b4 	bl	800174c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b01      	cmp	r3, #1
 8001462:	d001      	beq.n	8001468 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e03a      	b.n	80014de <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2202      	movs	r2, #2
 800146c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 0201 	orr.w	r2, r2, #1
 800147e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a18      	ldr	r2, [pc, #96]	; (80014e8 <HAL_TIM_Base_Start_IT+0x98>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d00e      	beq.n	80014a8 <HAL_TIM_Base_Start_IT+0x58>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001492:	d009      	beq.n	80014a8 <HAL_TIM_Base_Start_IT+0x58>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a14      	ldr	r2, [pc, #80]	; (80014ec <HAL_TIM_Base_Start_IT+0x9c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d004      	beq.n	80014a8 <HAL_TIM_Base_Start_IT+0x58>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a13      	ldr	r2, [pc, #76]	; (80014f0 <HAL_TIM_Base_Start_IT+0xa0>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d111      	bne.n	80014cc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d010      	beq.n	80014dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f042 0201 	orr.w	r2, r2, #1
 80014c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014ca:	e007      	b.n	80014dc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0201 	orr.w	r2, r2, #1
 80014da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	40012c00 	.word	0x40012c00
 80014ec:	40000400 	.word	0x40000400
 80014f0:	40000800 	.word	0x40000800

080014f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b02      	cmp	r3, #2
 8001508:	d122      	bne.n	8001550 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b02      	cmp	r3, #2
 8001516:	d11b      	bne.n	8001550 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f06f 0202 	mvn.w	r2, #2
 8001520:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2201      	movs	r2, #1
 8001526:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f8ed 	bl	8001716 <HAL_TIM_IC_CaptureCallback>
 800153c:	e005      	b.n	800154a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 f8e0 	bl	8001704 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 f8ef 	bl	8001728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	2b04      	cmp	r3, #4
 800155c:	d122      	bne.n	80015a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	2b04      	cmp	r3, #4
 800156a:	d11b      	bne.n	80015a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f06f 0204 	mvn.w	r2, #4
 8001574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2202      	movs	r2, #2
 800157a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 f8c3 	bl	8001716 <HAL_TIM_IC_CaptureCallback>
 8001590:	e005      	b.n	800159e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 f8b6 	bl	8001704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 f8c5 	bl	8001728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d122      	bne.n	80015f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d11b      	bne.n	80015f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f06f 0208 	mvn.w	r2, #8
 80015c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2204      	movs	r2, #4
 80015ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 f899 	bl	8001716 <HAL_TIM_IC_CaptureCallback>
 80015e4:	e005      	b.n	80015f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f88c 	bl	8001704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 f89b 	bl	8001728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	f003 0310 	and.w	r3, r3, #16
 8001602:	2b10      	cmp	r3, #16
 8001604:	d122      	bne.n	800164c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	f003 0310 	and.w	r3, r3, #16
 8001610:	2b10      	cmp	r3, #16
 8001612:	d11b      	bne.n	800164c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f06f 0210 	mvn.w	r2, #16
 800161c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2208      	movs	r2, #8
 8001622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f86f 	bl	8001716 <HAL_TIM_IC_CaptureCallback>
 8001638:	e005      	b.n	8001646 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f862 	bl	8001704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 f871 	bl	8001728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b01      	cmp	r3, #1
 8001658:	d10e      	bne.n	8001678 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b01      	cmp	r3, #1
 8001666:	d107      	bne.n	8001678 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f06f 0201 	mvn.w	r2, #1
 8001670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7fe fe76 	bl	8000364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001682:	2b80      	cmp	r3, #128	; 0x80
 8001684:	d10e      	bne.n	80016a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001690:	2b80      	cmp	r3, #128	; 0x80
 8001692:	d107      	bne.n	80016a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800169c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 f8bf 	bl	8001822 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ae:	2b40      	cmp	r3, #64	; 0x40
 80016b0:	d10e      	bne.n	80016d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016bc:	2b40      	cmp	r3, #64	; 0x40
 80016be:	d107      	bne.n	80016d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f835 	bl	800173a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	f003 0320 	and.w	r3, r3, #32
 80016da:	2b20      	cmp	r3, #32
 80016dc:	d10e      	bne.n	80016fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f003 0320 	and.w	r3, r3, #32
 80016e8:	2b20      	cmp	r3, #32
 80016ea:	d107      	bne.n	80016fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f06f 0220 	mvn.w	r2, #32
 80016f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 f88a 	bl	8001810 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr

08001716 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr

0800173a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a29      	ldr	r2, [pc, #164]	; (8001804 <TIM_Base_SetConfig+0xb8>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d00b      	beq.n	800177c <TIM_Base_SetConfig+0x30>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800176a:	d007      	beq.n	800177c <TIM_Base_SetConfig+0x30>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a26      	ldr	r2, [pc, #152]	; (8001808 <TIM_Base_SetConfig+0xbc>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d003      	beq.n	800177c <TIM_Base_SetConfig+0x30>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a25      	ldr	r2, [pc, #148]	; (800180c <TIM_Base_SetConfig+0xc0>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d108      	bne.n	800178e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	4313      	orrs	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a1c      	ldr	r2, [pc, #112]	; (8001804 <TIM_Base_SetConfig+0xb8>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d00b      	beq.n	80017ae <TIM_Base_SetConfig+0x62>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800179c:	d007      	beq.n	80017ae <TIM_Base_SetConfig+0x62>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a19      	ldr	r2, [pc, #100]	; (8001808 <TIM_Base_SetConfig+0xbc>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d003      	beq.n	80017ae <TIM_Base_SetConfig+0x62>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a18      	ldr	r2, [pc, #96]	; (800180c <TIM_Base_SetConfig+0xc0>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d108      	bne.n	80017c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	4313      	orrs	r3, r2
 80017be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a07      	ldr	r2, [pc, #28]	; (8001804 <TIM_Base_SetConfig+0xb8>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d103      	bne.n	80017f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	691a      	ldr	r2, [r3, #16]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	615a      	str	r2, [r3, #20]
}
 80017fa:	bf00      	nop
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	40012c00 	.word	0x40012c00
 8001808:	40000400 	.word	0x40000400
 800180c:	40000800 	.word	0x40000800

08001810 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr

08001822 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e03f      	b.n	80018c6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d106      	bne.n	8001860 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7fe fdd2 	bl	8000404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2224      	movs	r2, #36	; 0x24
 8001864:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001876:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f905 	bl	8001a88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	691a      	ldr	r2, [r3, #16]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800188c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695a      	ldr	r2, [r3, #20]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800189c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2220      	movs	r2, #32
 80018b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2220      	movs	r2, #32
 80018c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b08a      	sub	sp, #40	; 0x28
 80018d2:	af02      	add	r7, sp, #8
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	4613      	mov	r3, r2
 80018dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b20      	cmp	r3, #32
 80018ec:	d17c      	bne.n	80019e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <HAL_UART_Transmit+0x2c>
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e075      	b.n	80019ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_UART_Transmit+0x3e>
 8001908:	2302      	movs	r3, #2
 800190a:	e06e      	b.n	80019ea <HAL_UART_Transmit+0x11c>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2221      	movs	r2, #33	; 0x21
 800191e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001922:	f7fe fe85 	bl	8000630 <HAL_GetTick>
 8001926:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	88fa      	ldrh	r2, [r7, #6]
 800192c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	88fa      	ldrh	r2, [r7, #6]
 8001932:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800193c:	d108      	bne.n	8001950 <HAL_UART_Transmit+0x82>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d104      	bne.n	8001950 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	61bb      	str	r3, [r7, #24]
 800194e:	e003      	b.n	8001958 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001960:	e02a      	b.n	80019b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	2200      	movs	r2, #0
 800196a:	2180      	movs	r1, #128	; 0x80
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f000 f840 	bl	80019f2 <UART_WaitOnFlagUntilTimeout>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e036      	b.n	80019ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10b      	bne.n	800199a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001990:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	3302      	adds	r3, #2
 8001996:	61bb      	str	r3, [r7, #24]
 8001998:	e007      	b.n	80019aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	781a      	ldrb	r2, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	3301      	adds	r3, #1
 80019a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019bc:	b29b      	uxth	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1cf      	bne.n	8001962 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	2200      	movs	r2, #0
 80019ca:	2140      	movs	r1, #64	; 0x40
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f000 f810 	bl	80019f2 <UART_WaitOnFlagUntilTimeout>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e006      	b.n	80019ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2220      	movs	r2, #32
 80019e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	e000      	b.n	80019ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80019e8:	2302      	movs	r3, #2
  }
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3720      	adds	r7, #32
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b084      	sub	sp, #16
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	603b      	str	r3, [r7, #0]
 80019fe:	4613      	mov	r3, r2
 8001a00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a02:	e02c      	b.n	8001a5e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a0a:	d028      	beq.n	8001a5e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d007      	beq.n	8001a22 <UART_WaitOnFlagUntilTimeout+0x30>
 8001a12:	f7fe fe0d 	bl	8000630 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d21d      	bcs.n	8001a5e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001a30:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	695a      	ldr	r2, [r3, #20]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0201 	bic.w	r2, r2, #1
 8001a40:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2220      	movs	r2, #32
 8001a46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e00f      	b.n	8001a7e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	4013      	ands	r3, r2
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	bf0c      	ite	eq
 8001a6e:	2301      	moveq	r3, #1
 8001a70:	2300      	movne	r3, #0
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	461a      	mov	r2, r3
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d0c3      	beq.n	8001a04 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001ac2:	f023 030c 	bic.w	r3, r3, #12
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	68b9      	ldr	r1, [r7, #8]
 8001acc:	430b      	orrs	r3, r1
 8001ace:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	699a      	ldr	r2, [r3, #24]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a2c      	ldr	r2, [pc, #176]	; (8001b9c <UART_SetConfig+0x114>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d103      	bne.n	8001af8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001af0:	f7ff fbf4 	bl	80012dc <HAL_RCC_GetPCLK2Freq>
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	e002      	b.n	8001afe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001af8:	f7ff fbdc 	bl	80012b4 <HAL_RCC_GetPCLK1Freq>
 8001afc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	009a      	lsls	r2, r3, #2
 8001b08:	441a      	add	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b14:	4a22      	ldr	r2, [pc, #136]	; (8001ba0 <UART_SetConfig+0x118>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	095b      	lsrs	r3, r3, #5
 8001b1c:	0119      	lsls	r1, r3, #4
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	009a      	lsls	r2, r3, #2
 8001b28:	441a      	add	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b34:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <UART_SetConfig+0x118>)
 8001b36:	fba3 0302 	umull	r0, r3, r3, r2
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	2064      	movs	r0, #100	; 0x64
 8001b3e:	fb00 f303 	mul.w	r3, r0, r3
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	3332      	adds	r3, #50	; 0x32
 8001b48:	4a15      	ldr	r2, [pc, #84]	; (8001ba0 <UART_SetConfig+0x118>)
 8001b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b54:	4419      	add	r1, r3
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	009a      	lsls	r2, r3, #2
 8001b60:	441a      	add	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <UART_SetConfig+0x118>)
 8001b6e:	fba3 0302 	umull	r0, r3, r3, r2
 8001b72:	095b      	lsrs	r3, r3, #5
 8001b74:	2064      	movs	r0, #100	; 0x64
 8001b76:	fb00 f303 	mul.w	r3, r0, r3
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	3332      	adds	r3, #50	; 0x32
 8001b80:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <UART_SetConfig+0x118>)
 8001b82:	fba2 2303 	umull	r2, r3, r2, r3
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	f003 020f 	and.w	r2, r3, #15
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	440a      	add	r2, r1
 8001b92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40013800 	.word	0x40013800
 8001ba0:	51eb851f 	.word	0x51eb851f

08001ba4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001baa:	f3ef 8305 	mrs	r3, IPSR
 8001bae:	60bb      	str	r3, [r7, #8]
  return(result);
 8001bb0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10f      	bne.n	8001bd6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8001bba:	607b      	str	r3, [r7, #4]
  return(result);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d109      	bne.n	8001bd6 <osKernelInitialize+0x32>
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <osKernelInitialize+0x60>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d109      	bne.n	8001bde <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001bca:	f3ef 8311 	mrs	r3, BASEPRI
 8001bce:	603b      	str	r3, [r7, #0]
  return(result);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001bd6:	f06f 0305 	mvn.w	r3, #5
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	e00c      	b.n	8001bf8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <osKernelInitialize+0x60>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d105      	bne.n	8001bf2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001be6:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <osKernelInitialize+0x60>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	e002      	b.n	8001bf8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	20000030 	.word	0x20000030

08001c08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c0e:	f3ef 8305 	mrs	r3, IPSR
 8001c12:	60bb      	str	r3, [r7, #8]
  return(result);
 8001c14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10f      	bne.n	8001c3a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8001c1e:	607b      	str	r3, [r7, #4]
  return(result);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d109      	bne.n	8001c3a <osKernelStart+0x32>
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <osKernelStart+0x64>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d109      	bne.n	8001c42 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c2e:	f3ef 8311 	mrs	r3, BASEPRI
 8001c32:	603b      	str	r3, [r7, #0]
  return(result);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001c3a:	f06f 0305 	mvn.w	r3, #5
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	e00e      	b.n	8001c60 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <osKernelStart+0x64>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d107      	bne.n	8001c5a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <osKernelStart+0x64>)
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001c50:	f001 f984 	bl	8002f5c <vTaskStartScheduler>
      stat = osOK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	e002      	b.n	8001c60 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001c60:	68fb      	ldr	r3, [r7, #12]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000030 	.word	0x20000030

08001c70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b092      	sub	sp, #72	; 0x48
 8001c74:	af04      	add	r7, sp, #16
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c80:	f3ef 8305 	mrs	r3, IPSR
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f040 8094 	bne.w	8001db6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8001c92:	623b      	str	r3, [r7, #32]
  return(result);
 8001c94:	6a3b      	ldr	r3, [r7, #32]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f040 808d 	bne.w	8001db6 <osThreadNew+0x146>
 8001c9c:	4b48      	ldr	r3, [pc, #288]	; (8001dc0 <osThreadNew+0x150>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d106      	bne.n	8001cb2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ca4:	f3ef 8311 	mrs	r3, BASEPRI
 8001ca8:	61fb      	str	r3, [r7, #28]
  return(result);
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f040 8082 	bne.w	8001db6 <osThreadNew+0x146>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d07e      	beq.n	8001db6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001cbc:	2318      	movs	r3, #24
 8001cbe:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001cc4:	f107 031b 	add.w	r3, r7, #27
 8001cc8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d045      	beq.n	8001d62 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d002      	beq.n	8001ce4 <osThreadNew+0x74>
        name = attr->name;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d002      	beq.n	8001cf2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d008      	beq.n	8001d0a <osThreadNew+0x9a>
 8001cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfa:	2b38      	cmp	r3, #56	; 0x38
 8001cfc:	d805      	bhi.n	8001d0a <osThreadNew+0x9a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <osThreadNew+0x9e>
        return (NULL);
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e054      	b.n	8001db8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	089b      	lsrs	r3, r3, #2
 8001d1c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00e      	beq.n	8001d44 <osThreadNew+0xd4>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	2b5b      	cmp	r3, #91	; 0x5b
 8001d2c:	d90a      	bls.n	8001d44 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d006      	beq.n	8001d44 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d002      	beq.n	8001d44 <osThreadNew+0xd4>
        mem = 1;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d42:	e010      	b.n	8001d66 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10c      	bne.n	8001d66 <osThreadNew+0xf6>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d108      	bne.n	8001d66 <osThreadNew+0xf6>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d104      	bne.n	8001d66 <osThreadNew+0xf6>
          mem = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d60:	e001      	b.n	8001d66 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d110      	bne.n	8001d8e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d74:	9202      	str	r2, [sp, #8]
 8001d76:	9301      	str	r3, [sp, #4]
 8001d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 fe52 	bl	8002a2c <xTaskCreateStatic>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	e013      	b.n	8001db6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d110      	bne.n	8001db6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	9301      	str	r3, [sp, #4]
 8001d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 fe9c 	bl	8002ae4 <xTaskCreate>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d001      	beq.n	8001db6 <osThreadNew+0x146>
          hTask = NULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001db6:	697b      	ldr	r3, [r7, #20]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3738      	adds	r7, #56	; 0x38
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000030 	.word	0x20000030

08001dc4 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001dd0:	f3ef 8305 	mrs	r3, IPSR
 8001dd4:	613b      	str	r3, [r7, #16]
  return(result);
 8001dd6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10f      	bne.n	8001dfc <osThreadTerminate+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8001de0:	60fb      	str	r3, [r7, #12]
  return(result);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d109      	bne.n	8001dfc <osThreadTerminate+0x38>
 8001de8:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <osThreadTerminate+0x7c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d109      	bne.n	8001e04 <osThreadTerminate+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001df0:	f3ef 8311 	mrs	r3, BASEPRI
 8001df4:	60bb      	str	r3, [r7, #8]
  return(result);
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <osThreadTerminate+0x40>
    stat = osErrorISR;
 8001dfc:	f06f 0305 	mvn.w	r3, #5
 8001e00:	61fb      	str	r3, [r7, #28]
 8001e02:	e017      	b.n	8001e34 <osThreadTerminate+0x70>
  }
  else if (hTask == NULL) {
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d103      	bne.n	8001e12 <osThreadTerminate+0x4e>
    stat = osErrorParameter;
 8001e0a:	f06f 0303 	mvn.w	r3, #3
 8001e0e:	61fb      	str	r3, [r7, #28]
 8001e10:	e010      	b.n	8001e34 <osThreadTerminate+0x70>
  }
  else {
    tstate = eTaskGetState (hTask);
 8001e12:	69b8      	ldr	r0, [r7, #24]
 8001e14:	f001 f848 	bl	8002ea8 <eTaskGetState>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	75fb      	strb	r3, [r7, #23]

    if (tstate != eDeleted) {
 8001e1c:	7dfb      	ldrb	r3, [r7, #23]
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d005      	beq.n	8001e2e <osThreadTerminate+0x6a>
      stat = osOK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
      vTaskDelete (hTask);
 8001e26:	69b8      	ldr	r0, [r7, #24]
 8001e28:	f000 ff98 	bl	8002d5c <vTaskDelete>
 8001e2c:	e002      	b.n	8001e34 <osThreadTerminate+0x70>
    } else {
      stat = osErrorResource;
 8001e2e:	f06f 0302 	mvn.w	r3, #2
 8001e32:	61fb      	str	r3, [r7, #28]
  }
#else
  stat = osError;
#endif

  return (stat);
 8001e34:	69fb      	ldr	r3, [r7, #28]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3720      	adds	r7, #32
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000030 	.word	0x20000030

08001e44 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e4c:	f3ef 8305 	mrs	r3, IPSR
 8001e50:	613b      	str	r3, [r7, #16]
  return(result);
 8001e52:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10f      	bne.n	8001e78 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e58:	f3ef 8310 	mrs	r3, PRIMASK
 8001e5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d109      	bne.n	8001e78 <osDelay+0x34>
 8001e64:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <osDelay+0x58>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d109      	bne.n	8001e80 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e6c:	f3ef 8311 	mrs	r3, BASEPRI
 8001e70:	60bb      	str	r3, [r7, #8]
  return(result);
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <osDelay+0x3c>
    stat = osErrorISR;
 8001e78:	f06f 0305 	mvn.w	r3, #5
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	e007      	b.n	8001e90 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 ffd8 	bl	8002e40 <vTaskDelay>
    }
  }

  return (stat);
 8001e90:	697b      	ldr	r3, [r7, #20]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000030 	.word	0x20000030

08001ea0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4a06      	ldr	r2, [pc, #24]	; (8001ec8 <vApplicationGetIdleTaskMemory+0x28>)
 8001eb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	4a05      	ldr	r2, [pc, #20]	; (8001ecc <vApplicationGetIdleTaskMemory+0x2c>)
 8001eb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2280      	movs	r2, #128	; 0x80
 8001ebc:	601a      	str	r2, [r3, #0]
}
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	20000034 	.word	0x20000034
 8001ecc:	20000090 	.word	0x20000090

08001ed0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4a07      	ldr	r2, [pc, #28]	; (8001efc <vApplicationGetTimerTaskMemory+0x2c>)
 8001ee0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	4a06      	ldr	r2, [pc, #24]	; (8001f00 <vApplicationGetTimerTaskMemory+0x30>)
 8001ee6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eee:	601a      	str	r2, [r3, #0]
}
 8001ef0:	bf00      	nop
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000290 	.word	0x20000290
 8001f00:	200002ec 	.word	0x200002ec

08001f04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f103 0208 	add.w	r2, r3, #8
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f103 0208 	add.w	r2, r3, #8
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f103 0208 	add.w	r2, r3, #8
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr

08001f42 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr

08001f5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b085      	sub	sp, #20
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	1c5a      	adds	r2, r3, #1
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	601a      	str	r2, [r3, #0]
}
 8001f96:	bf00      	nop
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb6:	d103      	bne.n	8001fc0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	e00c      	b.n	8001fda <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3308      	adds	r3, #8
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	e002      	b.n	8001fce <vListInsert+0x2e>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d2f6      	bcs.n	8001fc8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	601a      	str	r2, [r3, #0]
}
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6892      	ldr	r2, [r2, #8]
 8002026:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6852      	ldr	r2, [r2, #4]
 8002030:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	429a      	cmp	r2, r3
 800203a:	d103      	bne.n	8002044 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	1e5a      	subs	r2, r3, #1
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
	...

08002064 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10a      	bne.n	800208e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800207c:	f383 8811 	msr	BASEPRI, r3
 8002080:	f3bf 8f6f 	isb	sy
 8002084:	f3bf 8f4f 	dsb	sy
 8002088:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800208a:	bf00      	nop
 800208c:	e7fe      	b.n	800208c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800208e:	f002 f895 	bl	80041bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209a:	68f9      	ldr	r1, [r7, #12]
 800209c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800209e:	fb01 f303 	mul.w	r3, r1, r3
 80020a2:	441a      	add	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020be:	3b01      	subs	r3, #1
 80020c0:	68f9      	ldr	r1, [r7, #12]
 80020c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80020c4:	fb01 f303 	mul.w	r3, r1, r3
 80020c8:	441a      	add	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	22ff      	movs	r2, #255	; 0xff
 80020d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	22ff      	movs	r2, #255	; 0xff
 80020da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d114      	bne.n	800210e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d01a      	beq.n	8002122 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	3310      	adds	r3, #16
 80020f0:	4618      	mov	r0, r3
 80020f2:	f001 f9bd 	bl	8003470 <xTaskRemoveFromEventList>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d012      	beq.n	8002122 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <xQueueGenericReset+0xcc>)
 80020fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	f3bf 8f4f 	dsb	sy
 8002108:	f3bf 8f6f 	isb	sy
 800210c:	e009      	b.n	8002122 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3310      	adds	r3, #16
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fef6 	bl	8001f04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	3324      	adds	r3, #36	; 0x24
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fef1 	bl	8001f04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002122:	f002 f87b 	bl	800421c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002126:	2301      	movs	r3, #1
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	e000ed04 	.word	0xe000ed04

08002134 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08e      	sub	sp, #56	; 0x38
 8002138:	af02      	add	r7, sp, #8
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10a      	bne.n	800215e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800214c:	f383 8811 	msr	BASEPRI, r3
 8002150:	f3bf 8f6f 	isb	sy
 8002154:	f3bf 8f4f 	dsb	sy
 8002158:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800215a:	bf00      	nop
 800215c:	e7fe      	b.n	800215c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10a      	bne.n	800217a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002168:	f383 8811 	msr	BASEPRI, r3
 800216c:	f3bf 8f6f 	isb	sy
 8002170:	f3bf 8f4f 	dsb	sy
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002176:	bf00      	nop
 8002178:	e7fe      	b.n	8002178 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <xQueueGenericCreateStatic+0x52>
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <xQueueGenericCreateStatic+0x56>
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <xQueueGenericCreateStatic+0x58>
 800218a:	2300      	movs	r3, #0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10a      	bne.n	80021a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002194:	f383 8811 	msr	BASEPRI, r3
 8002198:	f3bf 8f6f 	isb	sy
 800219c:	f3bf 8f4f 	dsb	sy
 80021a0:	623b      	str	r3, [r7, #32]
}
 80021a2:	bf00      	nop
 80021a4:	e7fe      	b.n	80021a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d102      	bne.n	80021b2 <xQueueGenericCreateStatic+0x7e>
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <xQueueGenericCreateStatic+0x82>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <xQueueGenericCreateStatic+0x84>
 80021b6:	2300      	movs	r3, #0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10a      	bne.n	80021d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80021bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c0:	f383 8811 	msr	BASEPRI, r3
 80021c4:	f3bf 8f6f 	isb	sy
 80021c8:	f3bf 8f4f 	dsb	sy
 80021cc:	61fb      	str	r3, [r7, #28]
}
 80021ce:	bf00      	nop
 80021d0:	e7fe      	b.n	80021d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80021d2:	2350      	movs	r3, #80	; 0x50
 80021d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2b50      	cmp	r3, #80	; 0x50
 80021da:	d00a      	beq.n	80021f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80021dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e0:	f383 8811 	msr	BASEPRI, r3
 80021e4:	f3bf 8f6f 	isb	sy
 80021e8:	f3bf 8f4f 	dsb	sy
 80021ec:	61bb      	str	r3, [r7, #24]
}
 80021ee:	bf00      	nop
 80021f0:	e7fe      	b.n	80021f0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80021f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00d      	beq.n	8002218 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80021fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002204:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	4613      	mov	r3, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 f805 	bl	8002222 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800221a:	4618      	mov	r0, r3
 800221c:	3730      	adds	r7, #48	; 0x30
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b084      	sub	sp, #16
 8002226:	af00      	add	r7, sp, #0
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d103      	bne.n	800223e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	e002      	b.n	8002244 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002250:	2101      	movs	r1, #1
 8002252:	69b8      	ldr	r0, [r7, #24]
 8002254:	f7ff ff06 	bl	8002064 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	78fa      	ldrb	r2, [r7, #3]
 800225c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002260:	bf00      	nop
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08e      	sub	sp, #56	; 0x38
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002276:	2300      	movs	r3, #0
 8002278:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800227e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10a      	bne.n	800229a <xQueueGenericSend+0x32>
	__asm volatile
 8002284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002288:	f383 8811 	msr	BASEPRI, r3
 800228c:	f3bf 8f6f 	isb	sy
 8002290:	f3bf 8f4f 	dsb	sy
 8002294:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002296:	bf00      	nop
 8002298:	e7fe      	b.n	8002298 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d103      	bne.n	80022a8 <xQueueGenericSend+0x40>
 80022a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <xQueueGenericSend+0x44>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <xQueueGenericSend+0x46>
 80022ac:	2300      	movs	r3, #0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10a      	bne.n	80022c8 <xQueueGenericSend+0x60>
	__asm volatile
 80022b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b6:	f383 8811 	msr	BASEPRI, r3
 80022ba:	f3bf 8f6f 	isb	sy
 80022be:	f3bf 8f4f 	dsb	sy
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80022c4:	bf00      	nop
 80022c6:	e7fe      	b.n	80022c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d103      	bne.n	80022d6 <xQueueGenericSend+0x6e>
 80022ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <xQueueGenericSend+0x72>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <xQueueGenericSend+0x74>
 80022da:	2300      	movs	r3, #0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10a      	bne.n	80022f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80022e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e4:	f383 8811 	msr	BASEPRI, r3
 80022e8:	f3bf 8f6f 	isb	sy
 80022ec:	f3bf 8f4f 	dsb	sy
 80022f0:	623b      	str	r3, [r7, #32]
}
 80022f2:	bf00      	nop
 80022f4:	e7fe      	b.n	80022f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022f6:	f001 fa7d 	bl	80037f4 <xTaskGetSchedulerState>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d102      	bne.n	8002306 <xQueueGenericSend+0x9e>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <xQueueGenericSend+0xa2>
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <xQueueGenericSend+0xa4>
 800230a:	2300      	movs	r3, #0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10a      	bne.n	8002326 <xQueueGenericSend+0xbe>
	__asm volatile
 8002310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002314:	f383 8811 	msr	BASEPRI, r3
 8002318:	f3bf 8f6f 	isb	sy
 800231c:	f3bf 8f4f 	dsb	sy
 8002320:	61fb      	str	r3, [r7, #28]
}
 8002322:	bf00      	nop
 8002324:	e7fe      	b.n	8002324 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002326:	f001 ff49 	bl	80041bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800232a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002332:	429a      	cmp	r2, r3
 8002334:	d302      	bcc.n	800233c <xQueueGenericSend+0xd4>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d129      	bne.n	8002390 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	68b9      	ldr	r1, [r7, #8]
 8002340:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002342:	f000 fa07 	bl	8002754 <prvCopyDataToQueue>
 8002346:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	2b00      	cmp	r3, #0
 800234e:	d010      	beq.n	8002372 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002352:	3324      	adds	r3, #36	; 0x24
 8002354:	4618      	mov	r0, r3
 8002356:	f001 f88b 	bl	8003470 <xTaskRemoveFromEventList>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d013      	beq.n	8002388 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002360:	4b3f      	ldr	r3, [pc, #252]	; (8002460 <xQueueGenericSend+0x1f8>)
 8002362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	f3bf 8f4f 	dsb	sy
 800236c:	f3bf 8f6f 	isb	sy
 8002370:	e00a      	b.n	8002388 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002374:	2b00      	cmp	r3, #0
 8002376:	d007      	beq.n	8002388 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002378:	4b39      	ldr	r3, [pc, #228]	; (8002460 <xQueueGenericSend+0x1f8>)
 800237a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	f3bf 8f4f 	dsb	sy
 8002384:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002388:	f001 ff48 	bl	800421c <vPortExitCritical>
				return pdPASS;
 800238c:	2301      	movs	r3, #1
 800238e:	e063      	b.n	8002458 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d103      	bne.n	800239e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002396:	f001 ff41 	bl	800421c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800239a:	2300      	movs	r3, #0
 800239c:	e05c      	b.n	8002458 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800239e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d106      	bne.n	80023b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80023a4:	f107 0314 	add.w	r3, r7, #20
 80023a8:	4618      	mov	r0, r3
 80023aa:	f001 f8c5 	bl	8003538 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80023ae:	2301      	movs	r3, #1
 80023b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80023b2:	f001 ff33 	bl	800421c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80023b6:	f000 fe37 	bl	8003028 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80023ba:	f001 feff 	bl	80041bc <vPortEnterCritical>
 80023be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023c4:	b25b      	sxtb	r3, r3
 80023c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ca:	d103      	bne.n	80023d4 <xQueueGenericSend+0x16c>
 80023cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023da:	b25b      	sxtb	r3, r3
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e0:	d103      	bne.n	80023ea <xQueueGenericSend+0x182>
 80023e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023ea:	f001 ff17 	bl	800421c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023ee:	1d3a      	adds	r2, r7, #4
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	4611      	mov	r1, r2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f001 f8b4 	bl	8003564 <xTaskCheckForTimeOut>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d124      	bne.n	800244c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002402:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002404:	f000 fa9e 	bl	8002944 <prvIsQueueFull>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d018      	beq.n	8002440 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800240e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002410:	3310      	adds	r3, #16
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	4611      	mov	r1, r2
 8002416:	4618      	mov	r0, r3
 8002418:	f000 ffda 	bl	80033d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800241c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800241e:	f000 fa29 	bl	8002874 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002422:	f000 fe0f 	bl	8003044 <xTaskResumeAll>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	f47f af7c 	bne.w	8002326 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800242e:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <xQueueGenericSend+0x1f8>)
 8002430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	f3bf 8f4f 	dsb	sy
 800243a:	f3bf 8f6f 	isb	sy
 800243e:	e772      	b.n	8002326 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002442:	f000 fa17 	bl	8002874 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002446:	f000 fdfd 	bl	8003044 <xTaskResumeAll>
 800244a:	e76c      	b.n	8002326 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800244c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800244e:	f000 fa11 	bl	8002874 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002452:	f000 fdf7 	bl	8003044 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002456:	2300      	movs	r3, #0
		}
	}
}
 8002458:	4618      	mov	r0, r3
 800245a:	3738      	adds	r7, #56	; 0x38
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	e000ed04 	.word	0xe000ed04

08002464 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08e      	sub	sp, #56	; 0x38
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
 8002470:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10a      	bne.n	8002492 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800247c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002480:	f383 8811 	msr	BASEPRI, r3
 8002484:	f3bf 8f6f 	isb	sy
 8002488:	f3bf 8f4f 	dsb	sy
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800248e:	bf00      	nop
 8002490:	e7fe      	b.n	8002490 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d103      	bne.n	80024a0 <xQueueGenericSendFromISR+0x3c>
 8002498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <xQueueGenericSendFromISR+0x40>
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <xQueueGenericSendFromISR+0x42>
 80024a4:	2300      	movs	r3, #0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10a      	bne.n	80024c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80024aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ae:	f383 8811 	msr	BASEPRI, r3
 80024b2:	f3bf 8f6f 	isb	sy
 80024b6:	f3bf 8f4f 	dsb	sy
 80024ba:	623b      	str	r3, [r7, #32]
}
 80024bc:	bf00      	nop
 80024be:	e7fe      	b.n	80024be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d103      	bne.n	80024ce <xQueueGenericSendFromISR+0x6a>
 80024c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <xQueueGenericSendFromISR+0x6e>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <xQueueGenericSendFromISR+0x70>
 80024d2:	2300      	movs	r3, #0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10a      	bne.n	80024ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80024d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024dc:	f383 8811 	msr	BASEPRI, r3
 80024e0:	f3bf 8f6f 	isb	sy
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	61fb      	str	r3, [r7, #28]
}
 80024ea:	bf00      	nop
 80024ec:	e7fe      	b.n	80024ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80024ee:	f001 ff27 	bl	8004340 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80024f2:	f3ef 8211 	mrs	r2, BASEPRI
 80024f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024fa:	f383 8811 	msr	BASEPRI, r3
 80024fe:	f3bf 8f6f 	isb	sy
 8002502:	f3bf 8f4f 	dsb	sy
 8002506:	61ba      	str	r2, [r7, #24]
 8002508:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800250a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800250c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002516:	429a      	cmp	r2, r3
 8002518:	d302      	bcc.n	8002520 <xQueueGenericSendFromISR+0xbc>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d12c      	bne.n	800257a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002522:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002530:	f000 f910 	bl	8002754 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002534:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d112      	bne.n	8002564 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	2b00      	cmp	r3, #0
 8002544:	d016      	beq.n	8002574 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002548:	3324      	adds	r3, #36	; 0x24
 800254a:	4618      	mov	r0, r3
 800254c:	f000 ff90 	bl	8003470 <xTaskRemoveFromEventList>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00e      	beq.n	8002574 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00b      	beq.n	8002574 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	e007      	b.n	8002574 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002564:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002568:	3301      	adds	r3, #1
 800256a:	b2db      	uxtb	r3, r3
 800256c:	b25a      	sxtb	r2, r3
 800256e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002574:	2301      	movs	r3, #1
 8002576:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002578:	e001      	b.n	800257e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800257a:	2300      	movs	r3, #0
 800257c:	637b      	str	r3, [r7, #52]	; 0x34
 800257e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002580:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002588:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800258a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800258c:	4618      	mov	r0, r3
 800258e:	3738      	adds	r7, #56	; 0x38
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08c      	sub	sp, #48	; 0x30
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80025a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10a      	bne.n	80025c4 <xQueueReceive+0x30>
	__asm volatile
 80025ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b2:	f383 8811 	msr	BASEPRI, r3
 80025b6:	f3bf 8f6f 	isb	sy
 80025ba:	f3bf 8f4f 	dsb	sy
 80025be:	623b      	str	r3, [r7, #32]
}
 80025c0:	bf00      	nop
 80025c2:	e7fe      	b.n	80025c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d103      	bne.n	80025d2 <xQueueReceive+0x3e>
 80025ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <xQueueReceive+0x42>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <xQueueReceive+0x44>
 80025d6:	2300      	movs	r3, #0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10a      	bne.n	80025f2 <xQueueReceive+0x5e>
	__asm volatile
 80025dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e0:	f383 8811 	msr	BASEPRI, r3
 80025e4:	f3bf 8f6f 	isb	sy
 80025e8:	f3bf 8f4f 	dsb	sy
 80025ec:	61fb      	str	r3, [r7, #28]
}
 80025ee:	bf00      	nop
 80025f0:	e7fe      	b.n	80025f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025f2:	f001 f8ff 	bl	80037f4 <xTaskGetSchedulerState>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d102      	bne.n	8002602 <xQueueReceive+0x6e>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <xQueueReceive+0x72>
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <xQueueReceive+0x74>
 8002606:	2300      	movs	r3, #0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10a      	bne.n	8002622 <xQueueReceive+0x8e>
	__asm volatile
 800260c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002610:	f383 8811 	msr	BASEPRI, r3
 8002614:	f3bf 8f6f 	isb	sy
 8002618:	f3bf 8f4f 	dsb	sy
 800261c:	61bb      	str	r3, [r7, #24]
}
 800261e:	bf00      	nop
 8002620:	e7fe      	b.n	8002620 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002622:	f001 fdcb 	bl	80041bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	2b00      	cmp	r3, #0
 8002630:	d01f      	beq.n	8002672 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002632:	68b9      	ldr	r1, [r7, #8]
 8002634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002636:	f000 f8f7 	bl	8002828 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	1e5a      	subs	r2, r3, #1
 800263e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002640:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00f      	beq.n	800266a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800264a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264c:	3310      	adds	r3, #16
 800264e:	4618      	mov	r0, r3
 8002650:	f000 ff0e 	bl	8003470 <xTaskRemoveFromEventList>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800265a:	4b3d      	ldr	r3, [pc, #244]	; (8002750 <xQueueReceive+0x1bc>)
 800265c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	f3bf 8f4f 	dsb	sy
 8002666:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800266a:	f001 fdd7 	bl	800421c <vPortExitCritical>
				return pdPASS;
 800266e:	2301      	movs	r3, #1
 8002670:	e069      	b.n	8002746 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d103      	bne.n	8002680 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002678:	f001 fdd0 	bl	800421c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800267c:	2300      	movs	r3, #0
 800267e:	e062      	b.n	8002746 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002686:	f107 0310 	add.w	r3, r7, #16
 800268a:	4618      	mov	r0, r3
 800268c:	f000 ff54 	bl	8003538 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002690:	2301      	movs	r3, #1
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002694:	f001 fdc2 	bl	800421c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002698:	f000 fcc6 	bl	8003028 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800269c:	f001 fd8e 	bl	80041bc <vPortEnterCritical>
 80026a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026a6:	b25b      	sxtb	r3, r3
 80026a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ac:	d103      	bne.n	80026b6 <xQueueReceive+0x122>
 80026ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026bc:	b25b      	sxtb	r3, r3
 80026be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c2:	d103      	bne.n	80026cc <xQueueReceive+0x138>
 80026c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026cc:	f001 fda6 	bl	800421c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026d0:	1d3a      	adds	r2, r7, #4
 80026d2:	f107 0310 	add.w	r3, r7, #16
 80026d6:	4611      	mov	r1, r2
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 ff43 	bl	8003564 <xTaskCheckForTimeOut>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d123      	bne.n	800272c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026e6:	f000 f917 	bl	8002918 <prvIsQueueEmpty>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d017      	beq.n	8002720 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80026f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f2:	3324      	adds	r3, #36	; 0x24
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	4611      	mov	r1, r2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 fe69 	bl	80033d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80026fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002700:	f000 f8b8 	bl	8002874 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002704:	f000 fc9e 	bl	8003044 <xTaskResumeAll>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d189      	bne.n	8002622 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800270e:	4b10      	ldr	r3, [pc, #64]	; (8002750 <xQueueReceive+0x1bc>)
 8002710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	f3bf 8f4f 	dsb	sy
 800271a:	f3bf 8f6f 	isb	sy
 800271e:	e780      	b.n	8002622 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002722:	f000 f8a7 	bl	8002874 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002726:	f000 fc8d 	bl	8003044 <xTaskResumeAll>
 800272a:	e77a      	b.n	8002622 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800272c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800272e:	f000 f8a1 	bl	8002874 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002732:	f000 fc87 	bl	8003044 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002736:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002738:	f000 f8ee 	bl	8002918 <prvIsQueueEmpty>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	f43f af6f 	beq.w	8002622 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002744:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002746:	4618      	mov	r0, r3
 8002748:	3730      	adds	r7, #48	; 0x30
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	e000ed04 	.word	0xe000ed04

08002754 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002768:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10d      	bne.n	800278e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d14d      	bne.n	8002816 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	4618      	mov	r0, r3
 8002780:	f001 f856 	bl	8003830 <xTaskPriorityDisinherit>
 8002784:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	605a      	str	r2, [r3, #4]
 800278c:	e043      	b.n	8002816 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d119      	bne.n	80027c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6898      	ldr	r0, [r3, #8]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	461a      	mov	r2, r3
 800279e:	68b9      	ldr	r1, [r7, #8]
 80027a0:	f002 f808 	bl	80047b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	441a      	add	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d32b      	bcc.n	8002816 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	609a      	str	r2, [r3, #8]
 80027c6:	e026      	b.n	8002816 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	68d8      	ldr	r0, [r3, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	461a      	mov	r2, r3
 80027d2:	68b9      	ldr	r1, [r7, #8]
 80027d4:	f001 ffee 	bl	80047b4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	425b      	negs	r3, r3
 80027e2:	441a      	add	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d207      	bcs.n	8002804 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	425b      	negs	r3, r3
 80027fe:	441a      	add	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d105      	bne.n	8002816 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	3b01      	subs	r3, #1
 8002814:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800281e:	697b      	ldr	r3, [r7, #20]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	2b00      	cmp	r3, #0
 8002838:	d018      	beq.n	800286c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	441a      	add	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	429a      	cmp	r2, r3
 8002852:	d303      	bcc.n	800285c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68d9      	ldr	r1, [r3, #12]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	461a      	mov	r2, r3
 8002866:	6838      	ldr	r0, [r7, #0]
 8002868:	f001 ffa4 	bl	80047b4 <memcpy>
	}
}
 800286c:	bf00      	nop
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800287c:	f001 fc9e 	bl	80041bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002886:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002888:	e011      	b.n	80028ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	2b00      	cmp	r3, #0
 8002890:	d012      	beq.n	80028b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3324      	adds	r3, #36	; 0x24
 8002896:	4618      	mov	r0, r3
 8002898:	f000 fdea 	bl	8003470 <xTaskRemoveFromEventList>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80028a2:	f000 fec1 	bl	8003628 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80028ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	dce9      	bgt.n	800288a <prvUnlockQueue+0x16>
 80028b6:	e000      	b.n	80028ba <prvUnlockQueue+0x46>
					break;
 80028b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	22ff      	movs	r2, #255	; 0xff
 80028be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80028c2:	f001 fcab 	bl	800421c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80028c6:	f001 fc79 	bl	80041bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80028d2:	e011      	b.n	80028f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d012      	beq.n	8002902 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3310      	adds	r3, #16
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 fdc5 	bl	8003470 <xTaskRemoveFromEventList>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80028ec:	f000 fe9c 	bl	8003628 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80028f0:	7bbb      	ldrb	r3, [r7, #14]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80028f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	dce9      	bgt.n	80028d4 <prvUnlockQueue+0x60>
 8002900:	e000      	b.n	8002904 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002902:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	22ff      	movs	r2, #255	; 0xff
 8002908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800290c:	f001 fc86 	bl	800421c <vPortExitCritical>
}
 8002910:	bf00      	nop
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002920:	f001 fc4c 	bl	80041bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002928:	2b00      	cmp	r3, #0
 800292a:	d102      	bne.n	8002932 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800292c:	2301      	movs	r3, #1
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	e001      	b.n	8002936 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002936:	f001 fc71 	bl	800421c <vPortExitCritical>

	return xReturn;
 800293a:	68fb      	ldr	r3, [r7, #12]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800294c:	f001 fc36 	bl	80041bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002958:	429a      	cmp	r2, r3
 800295a:	d102      	bne.n	8002962 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800295c:	2301      	movs	r3, #1
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	e001      	b.n	8002966 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002966:	f001 fc59 	bl	800421c <vPortExitCritical>

	return xReturn;
 800296a:	68fb      	ldr	r3, [r7, #12]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	e014      	b.n	80029ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002984:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <vQueueAddToRegistry+0x4c>)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10b      	bne.n	80029a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002990:	490b      	ldr	r1, [pc, #44]	; (80029c0 <vQueueAddToRegistry+0x4c>)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800299a:	4a09      	ldr	r2, [pc, #36]	; (80029c0 <vQueueAddToRegistry+0x4c>)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4413      	add	r3, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80029a6:	e006      	b.n	80029b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	3301      	adds	r3, #1
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2b07      	cmp	r3, #7
 80029b2:	d9e7      	bls.n	8002984 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80029b4:	bf00      	nop
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr
 80029c0:	200019cc 	.word	0x200019cc

080029c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80029d4:	f001 fbf2 	bl	80041bc <vPortEnterCritical>
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029de:	b25b      	sxtb	r3, r3
 80029e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e4:	d103      	bne.n	80029ee <vQueueWaitForMessageRestricted+0x2a>
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029f4:	b25b      	sxtb	r3, r3
 80029f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fa:	d103      	bne.n	8002a04 <vQueueWaitForMessageRestricted+0x40>
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a04:	f001 fc0a 	bl	800421c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d106      	bne.n	8002a1e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	3324      	adds	r3, #36	; 0x24
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	68b9      	ldr	r1, [r7, #8]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 fcfd 	bl	8003418 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002a1e:	6978      	ldr	r0, [r7, #20]
 8002a20:	f7ff ff28 	bl	8002874 <prvUnlockQueue>
	}
 8002a24:	bf00      	nop
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08e      	sub	sp, #56	; 0x38
 8002a30:	af04      	add	r7, sp, #16
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
 8002a38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a44:	f383 8811 	msr	BASEPRI, r3
 8002a48:	f3bf 8f6f 	isb	sy
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	623b      	str	r3, [r7, #32]
}
 8002a52:	bf00      	nop
 8002a54:	e7fe      	b.n	8002a54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10a      	bne.n	8002a72 <xTaskCreateStatic+0x46>
	__asm volatile
 8002a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a60:	f383 8811 	msr	BASEPRI, r3
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	61fb      	str	r3, [r7, #28]
}
 8002a6e:	bf00      	nop
 8002a70:	e7fe      	b.n	8002a70 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002a72:	235c      	movs	r3, #92	; 0x5c
 8002a74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	2b5c      	cmp	r3, #92	; 0x5c
 8002a7a:	d00a      	beq.n	8002a92 <xTaskCreateStatic+0x66>
	__asm volatile
 8002a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a80:	f383 8811 	msr	BASEPRI, r3
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	61bb      	str	r3, [r7, #24]
}
 8002a8e:	bf00      	nop
 8002a90:	e7fe      	b.n	8002a90 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d01e      	beq.n	8002ad6 <xTaskCreateStatic+0xaa>
 8002a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d01b      	beq.n	8002ad6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aa6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	9303      	str	r3, [sp, #12]
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	9302      	str	r3, [sp, #8]
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	9301      	str	r3, [sp, #4]
 8002abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f850 	bl	8002b6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ace:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ad0:	f000 f8d4 	bl	8002c7c <prvAddNewTaskToReadyList>
 8002ad4:	e001      	b.n	8002ada <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002ada:	697b      	ldr	r3, [r7, #20]
	}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3728      	adds	r7, #40	; 0x28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08c      	sub	sp, #48	; 0x30
 8002ae8:	af04      	add	r7, sp, #16
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	4613      	mov	r3, r2
 8002af2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f001 fc5f 	bl	80043bc <pvPortMalloc>
 8002afe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00e      	beq.n	8002b24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002b06:	205c      	movs	r0, #92	; 0x5c
 8002b08:	f001 fc58 	bl	80043bc <pvPortMalloc>
 8002b0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	631a      	str	r2, [r3, #48]	; 0x30
 8002b1a:	e005      	b.n	8002b28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002b1c:	6978      	ldr	r0, [r7, #20]
 8002b1e:	f001 fd11 	bl	8004544 <vPortFree>
 8002b22:	e001      	b.n	8002b28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d017      	beq.n	8002b5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b36:	88fa      	ldrh	r2, [r7, #6]
 8002b38:	2300      	movs	r3, #0
 8002b3a:	9303      	str	r3, [sp, #12]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	9302      	str	r3, [sp, #8]
 8002b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b42:	9301      	str	r3, [sp, #4]
 8002b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 f80e 	bl	8002b6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b52:	69f8      	ldr	r0, [r7, #28]
 8002b54:	f000 f892 	bl	8002c7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	61bb      	str	r3, [r7, #24]
 8002b5c:	e002      	b.n	8002b64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002b64:	69bb      	ldr	r3, [r7, #24]
	}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3720      	adds	r7, #32
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b088      	sub	sp, #32
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	461a      	mov	r2, r3
 8002b86:	21a5      	movs	r1, #165	; 0xa5
 8002b88:	f001 fe22 	bl	80047d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b96:	3b01      	subs	r3, #1
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	f023 0307 	bic.w	r3, r3, #7
 8002ba4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00a      	beq.n	8002bc6 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	617b      	str	r3, [r7, #20]
}
 8002bc2:	bf00      	nop
 8002bc4:	e7fe      	b.n	8002bc4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]
 8002bca:	e012      	b.n	8002bf2 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	7819      	ldrb	r1, [r3, #0]
 8002bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	4413      	add	r3, r2
 8002bda:	3334      	adds	r3, #52	; 0x34
 8002bdc:	460a      	mov	r2, r1
 8002bde:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	4413      	add	r3, r2
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d006      	beq.n	8002bfa <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	2b0f      	cmp	r3, #15
 8002bf6:	d9e9      	bls.n	8002bcc <prvInitialiseNewTask+0x5e>
 8002bf8:	e000      	b.n	8002bfc <prvInitialiseNewTask+0x8e>
		{
			break;
 8002bfa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c06:	2b37      	cmp	r3, #55	; 0x37
 8002c08:	d901      	bls.n	8002c0e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c0a:	2337      	movs	r3, #55	; 0x37
 8002c0c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c12:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c18:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c22:	3304      	adds	r3, #4
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff f98c 	bl	8001f42 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2c:	3318      	adds	r3, #24
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff f987 	bl	8001f42 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	68f9      	ldr	r1, [r7, #12]
 8002c5c:	69b8      	ldr	r0, [r7, #24]
 8002c5e:	f001 f9bb 	bl	8003fd8 <pxPortInitialiseStack>
 8002c62:	4602      	mov	r2, r0
 8002c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c66:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d002      	beq.n	8002c74 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c72:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c74:	bf00      	nop
 8002c76:	3720      	adds	r7, #32
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002c84:	f001 fa9a 	bl	80041bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002c88:	4b2d      	ldr	r3, [pc, #180]	; (8002d40 <prvAddNewTaskToReadyList+0xc4>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	4a2c      	ldr	r2, [pc, #176]	; (8002d40 <prvAddNewTaskToReadyList+0xc4>)
 8002c90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002c92:	4b2c      	ldr	r3, [pc, #176]	; (8002d44 <prvAddNewTaskToReadyList+0xc8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d109      	bne.n	8002cae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002c9a:	4a2a      	ldr	r2, [pc, #168]	; (8002d44 <prvAddNewTaskToReadyList+0xc8>)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ca0:	4b27      	ldr	r3, [pc, #156]	; (8002d40 <prvAddNewTaskToReadyList+0xc4>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d110      	bne.n	8002cca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002ca8:	f000 fce2 	bl	8003670 <prvInitialiseTaskLists>
 8002cac:	e00d      	b.n	8002cca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002cae:	4b26      	ldr	r3, [pc, #152]	; (8002d48 <prvAddNewTaskToReadyList+0xcc>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d109      	bne.n	8002cca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002cb6:	4b23      	ldr	r3, [pc, #140]	; (8002d44 <prvAddNewTaskToReadyList+0xc8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d802      	bhi.n	8002cca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002cc4:	4a1f      	ldr	r2, [pc, #124]	; (8002d44 <prvAddNewTaskToReadyList+0xc8>)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002cca:	4b20      	ldr	r3, [pc, #128]	; (8002d4c <prvAddNewTaskToReadyList+0xd0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	4a1e      	ldr	r2, [pc, #120]	; (8002d4c <prvAddNewTaskToReadyList+0xd0>)
 8002cd2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002cd4:	4b1d      	ldr	r3, [pc, #116]	; (8002d4c <prvAddNewTaskToReadyList+0xd0>)
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce0:	4b1b      	ldr	r3, [pc, #108]	; (8002d50 <prvAddNewTaskToReadyList+0xd4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d903      	bls.n	8002cf0 <prvAddNewTaskToReadyList+0x74>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	4a18      	ldr	r2, [pc, #96]	; (8002d50 <prvAddNewTaskToReadyList+0xd4>)
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4a15      	ldr	r2, [pc, #84]	; (8002d54 <prvAddNewTaskToReadyList+0xd8>)
 8002cfe:	441a      	add	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3304      	adds	r3, #4
 8002d04:	4619      	mov	r1, r3
 8002d06:	4610      	mov	r0, r2
 8002d08:	f7ff f927 	bl	8001f5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002d0c:	f001 fa86 	bl	800421c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002d10:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <prvAddNewTaskToReadyList+0xcc>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00e      	beq.n	8002d36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d18:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <prvAddNewTaskToReadyList+0xc8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d207      	bcs.n	8002d36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002d26:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <prvAddNewTaskToReadyList+0xdc>)
 8002d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	f3bf 8f4f 	dsb	sy
 8002d32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000bc0 	.word	0x20000bc0
 8002d44:	200006ec 	.word	0x200006ec
 8002d48:	20000bcc 	.word	0x20000bcc
 8002d4c:	20000bdc 	.word	0x20000bdc
 8002d50:	20000bc8 	.word	0x20000bc8
 8002d54:	200006f0 	.word	0x200006f0
 8002d58:	e000ed04 	.word	0xe000ed04

08002d5c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002d64:	f001 fa2a 	bl	80041bc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d102      	bne.n	8002d74 <vTaskDelete+0x18>
 8002d6e:	4b2c      	ldr	r3, [pc, #176]	; (8002e20 <vTaskDelete+0xc4>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	e000      	b.n	8002d76 <vTaskDelete+0x1a>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff f947 	bl	8002010 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d004      	beq.n	8002d94 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	3318      	adds	r3, #24
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff f93e 	bl	8002010 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8002d94:	4b23      	ldr	r3, [pc, #140]	; (8002e24 <vTaskDelete+0xc8>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	4a22      	ldr	r2, [pc, #136]	; (8002e24 <vTaskDelete+0xc8>)
 8002d9c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002d9e:	4b20      	ldr	r3, [pc, #128]	; (8002e20 <vTaskDelete+0xc4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d10b      	bne.n	8002dc0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	3304      	adds	r3, #4
 8002dac:	4619      	mov	r1, r3
 8002dae:	481e      	ldr	r0, [pc, #120]	; (8002e28 <vTaskDelete+0xcc>)
 8002db0:	f7ff f8d3 	bl	8001f5a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8002db4:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <vTaskDelete+0xd0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3301      	adds	r3, #1
 8002dba:	4a1c      	ldr	r2, [pc, #112]	; (8002e2c <vTaskDelete+0xd0>)
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	e009      	b.n	8002dd4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <vTaskDelete+0xd4>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	4a1a      	ldr	r2, [pc, #104]	; (8002e30 <vTaskDelete+0xd4>)
 8002dc8:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 fcbe 	bl	800374c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8002dd0:	f000 fcec 	bl	80037ac <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8002dd4:	f001 fa22 	bl	800421c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8002dd8:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <vTaskDelete+0xd8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d01b      	beq.n	8002e18 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8002de0:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <vTaskDelete+0xc4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d116      	bne.n	8002e18 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8002dea:	4b13      	ldr	r3, [pc, #76]	; (8002e38 <vTaskDelete+0xdc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00a      	beq.n	8002e08 <vTaskDelete+0xac>
	__asm volatile
 8002df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df6:	f383 8811 	msr	BASEPRI, r3
 8002dfa:	f3bf 8f6f 	isb	sy
 8002dfe:	f3bf 8f4f 	dsb	sy
 8002e02:	60bb      	str	r3, [r7, #8]
}
 8002e04:	bf00      	nop
 8002e06:	e7fe      	b.n	8002e06 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8002e08:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <vTaskDelete+0xe0>)
 8002e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002e18:	bf00      	nop
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	200006ec 	.word	0x200006ec
 8002e24:	20000bdc 	.word	0x20000bdc
 8002e28:	20000b94 	.word	0x20000b94
 8002e2c:	20000ba8 	.word	0x20000ba8
 8002e30:	20000bc0 	.word	0x20000bc0
 8002e34:	20000bcc 	.word	0x20000bcc
 8002e38:	20000be8 	.word	0x20000be8
 8002e3c:	e000ed04 	.word	0xe000ed04

08002e40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d017      	beq.n	8002e82 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002e52:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <vTaskDelay+0x60>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <vTaskDelay+0x30>
	__asm volatile
 8002e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5e:	f383 8811 	msr	BASEPRI, r3
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	60bb      	str	r3, [r7, #8]
}
 8002e6c:	bf00      	nop
 8002e6e:	e7fe      	b.n	8002e6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002e70:	f000 f8da 	bl	8003028 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e74:	2100      	movs	r1, #0
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 fd48 	bl	800390c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002e7c:	f000 f8e2 	bl	8003044 <xTaskResumeAll>
 8002e80:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d107      	bne.n	8002e98 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002e88:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <vTaskDelay+0x64>)
 8002e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002e98:	bf00      	nop
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	20000be8 	.word	0x20000be8
 8002ea4:	e000ed04 	.word	0xe000ed04

08002ea8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	613b      	str	r3, [r7, #16]

		configASSERT( pxTCB );
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10a      	bne.n	8002ed0 <eTaskGetState+0x28>
	__asm volatile
 8002eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebe:	f383 8811 	msr	BASEPRI, r3
 8002ec2:	f3bf 8f6f 	isb	sy
 8002ec6:	f3bf 8f4f 	dsb	sy
 8002eca:	60bb      	str	r3, [r7, #8]
}
 8002ecc:	bf00      	nop
 8002ece:	e7fe      	b.n	8002ece <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8002ed0:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <eTaskGetState+0xa0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d102      	bne.n	8002ee0 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8002eda:	2300      	movs	r3, #0
 8002edc:	75fb      	strb	r3, [r7, #23]
 8002ede:	e02d      	b.n	8002f3c <eTaskGetState+0x94>
		}
		else
		{
			taskENTER_CRITICAL();
 8002ee0:	f001 f96c 	bl	80041bc <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8002eea:	f001 f997 	bl	800421c <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 8002eee:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <eTaskGetState+0xa4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d004      	beq.n	8002f02 <eTaskGetState+0x5a>
 8002ef8:	4b15      	ldr	r3, [pc, #84]	; (8002f50 <eTaskGetState+0xa8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d102      	bne.n	8002f08 <eTaskGetState+0x60>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8002f02:	2302      	movs	r3, #2
 8002f04:	75fb      	strb	r3, [r7, #23]
 8002f06:	e019      	b.n	8002f3c <eTaskGetState+0x94>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4a12      	ldr	r2, [pc, #72]	; (8002f54 <eTaskGetState+0xac>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d109      	bne.n	8002f24 <eTaskGetState+0x7c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d102      	bne.n	8002f1e <eTaskGetState+0x76>
					{
						eReturn = eSuspended;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	75fb      	strb	r3, [r7, #23]
 8002f1c:	e00e      	b.n	8002f3c <eTaskGetState+0x94>
					}
					else
					{
						eReturn = eBlocked;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	75fb      	strb	r3, [r7, #23]
 8002f22:	e00b      	b.n	8002f3c <eTaskGetState+0x94>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4a0c      	ldr	r2, [pc, #48]	; (8002f58 <eTaskGetState+0xb0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d002      	beq.n	8002f32 <eTaskGetState+0x8a>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d102      	bne.n	8002f38 <eTaskGetState+0x90>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8002f32:	2304      	movs	r3, #4
 8002f34:	75fb      	strb	r3, [r7, #23]
 8002f36:	e001      	b.n	8002f3c <eTaskGetState+0x94>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	75fb      	strb	r3, [r7, #23]
			}
		}

		return eReturn;
 8002f3c:	7dfb      	ldrb	r3, [r7, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	200006ec 	.word	0x200006ec
 8002f4c:	20000b78 	.word	0x20000b78
 8002f50:	20000b7c 	.word	0x20000b7c
 8002f54:	20000bac 	.word	0x20000bac
 8002f58:	20000b94 	.word	0x20000b94

08002f5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08a      	sub	sp, #40	; 0x28
 8002f60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f6a:	463a      	mov	r2, r7
 8002f6c:	1d39      	adds	r1, r7, #4
 8002f6e:	f107 0308 	add.w	r3, r7, #8
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe ff94 	bl	8001ea0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f78:	6839      	ldr	r1, [r7, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	9202      	str	r2, [sp, #8]
 8002f80:	9301      	str	r3, [sp, #4]
 8002f82:	2300      	movs	r3, #0
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	2300      	movs	r3, #0
 8002f88:	460a      	mov	r2, r1
 8002f8a:	4921      	ldr	r1, [pc, #132]	; (8003010 <vTaskStartScheduler+0xb4>)
 8002f8c:	4821      	ldr	r0, [pc, #132]	; (8003014 <vTaskStartScheduler+0xb8>)
 8002f8e:	f7ff fd4d 	bl	8002a2c <xTaskCreateStatic>
 8002f92:	4603      	mov	r3, r0
 8002f94:	4a20      	ldr	r2, [pc, #128]	; (8003018 <vTaskStartScheduler+0xbc>)
 8002f96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002f98:	4b1f      	ldr	r3, [pc, #124]	; (8003018 <vTaskStartScheduler+0xbc>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	e001      	b.n	8002faa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d102      	bne.n	8002fb6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002fb0:	f000 fd00 	bl	80039b4 <xTimerCreateTimerTask>
 8002fb4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d116      	bne.n	8002fea <vTaskStartScheduler+0x8e>
	__asm volatile
 8002fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc0:	f383 8811 	msr	BASEPRI, r3
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	613b      	str	r3, [r7, #16]
}
 8002fce:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002fd0:	4b12      	ldr	r3, [pc, #72]	; (800301c <vTaskStartScheduler+0xc0>)
 8002fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002fd8:	4b11      	ldr	r3, [pc, #68]	; (8003020 <vTaskStartScheduler+0xc4>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002fde:	4b11      	ldr	r3, [pc, #68]	; (8003024 <vTaskStartScheduler+0xc8>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002fe4:	f001 f878 	bl	80040d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002fe8:	e00e      	b.n	8003008 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff0:	d10a      	bne.n	8003008 <vTaskStartScheduler+0xac>
	__asm volatile
 8002ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	60fb      	str	r3, [r7, #12]
}
 8003004:	bf00      	nop
 8003006:	e7fe      	b.n	8003006 <vTaskStartScheduler+0xaa>
}
 8003008:	bf00      	nop
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	08004848 	.word	0x08004848
 8003014:	08003641 	.word	0x08003641
 8003018:	20000be4 	.word	0x20000be4
 800301c:	20000be0 	.word	0x20000be0
 8003020:	20000bcc 	.word	0x20000bcc
 8003024:	20000bc4 	.word	0x20000bc4

08003028 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800302c:	4b04      	ldr	r3, [pc, #16]	; (8003040 <vTaskSuspendAll+0x18>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	3301      	adds	r3, #1
 8003032:	4a03      	ldr	r2, [pc, #12]	; (8003040 <vTaskSuspendAll+0x18>)
 8003034:	6013      	str	r3, [r2, #0]
}
 8003036:	bf00      	nop
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	20000be8 	.word	0x20000be8

08003044 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800304e:	2300      	movs	r3, #0
 8003050:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003052:	4b42      	ldr	r3, [pc, #264]	; (800315c <xTaskResumeAll+0x118>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10a      	bne.n	8003070 <xTaskResumeAll+0x2c>
	__asm volatile
 800305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	603b      	str	r3, [r7, #0]
}
 800306c:	bf00      	nop
 800306e:	e7fe      	b.n	800306e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003070:	f001 f8a4 	bl	80041bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003074:	4b39      	ldr	r3, [pc, #228]	; (800315c <xTaskResumeAll+0x118>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	3b01      	subs	r3, #1
 800307a:	4a38      	ldr	r2, [pc, #224]	; (800315c <xTaskResumeAll+0x118>)
 800307c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800307e:	4b37      	ldr	r3, [pc, #220]	; (800315c <xTaskResumeAll+0x118>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d162      	bne.n	800314c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003086:	4b36      	ldr	r3, [pc, #216]	; (8003160 <xTaskResumeAll+0x11c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d05e      	beq.n	800314c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800308e:	e02f      	b.n	80030f0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003090:	4b34      	ldr	r3, [pc, #208]	; (8003164 <xTaskResumeAll+0x120>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	3318      	adds	r3, #24
 800309c:	4618      	mov	r0, r3
 800309e:	f7fe ffb7 	bl	8002010 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	3304      	adds	r3, #4
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fe ffb2 	bl	8002010 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b0:	4b2d      	ldr	r3, [pc, #180]	; (8003168 <xTaskResumeAll+0x124>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d903      	bls.n	80030c0 <xTaskResumeAll+0x7c>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030bc:	4a2a      	ldr	r2, [pc, #168]	; (8003168 <xTaskResumeAll+0x124>)
 80030be:	6013      	str	r3, [r2, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4a27      	ldr	r2, [pc, #156]	; (800316c <xTaskResumeAll+0x128>)
 80030ce:	441a      	add	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	3304      	adds	r3, #4
 80030d4:	4619      	mov	r1, r3
 80030d6:	4610      	mov	r0, r2
 80030d8:	f7fe ff3f 	bl	8001f5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e0:	4b23      	ldr	r3, [pc, #140]	; (8003170 <xTaskResumeAll+0x12c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d302      	bcc.n	80030f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80030ea:	4b22      	ldr	r3, [pc, #136]	; (8003174 <xTaskResumeAll+0x130>)
 80030ec:	2201      	movs	r2, #1
 80030ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030f0:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <xTaskResumeAll+0x120>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1cb      	bne.n	8003090 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80030fe:	f000 fb55 	bl	80037ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003102:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <xTaskResumeAll+0x134>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d010      	beq.n	8003130 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800310e:	f000 f845 	bl	800319c <xTaskIncrementTick>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d002      	beq.n	800311e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003118:	4b16      	ldr	r3, [pc, #88]	; (8003174 <xTaskResumeAll+0x130>)
 800311a:	2201      	movs	r2, #1
 800311c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3b01      	subs	r3, #1
 8003122:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f1      	bne.n	800310e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800312a:	4b13      	ldr	r3, [pc, #76]	; (8003178 <xTaskResumeAll+0x134>)
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003130:	4b10      	ldr	r3, [pc, #64]	; (8003174 <xTaskResumeAll+0x130>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d009      	beq.n	800314c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003138:	2301      	movs	r3, #1
 800313a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800313c:	4b0f      	ldr	r3, [pc, #60]	; (800317c <xTaskResumeAll+0x138>)
 800313e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800314c:	f001 f866 	bl	800421c <vPortExitCritical>

	return xAlreadyYielded;
 8003150:	68bb      	ldr	r3, [r7, #8]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20000be8 	.word	0x20000be8
 8003160:	20000bc0 	.word	0x20000bc0
 8003164:	20000b80 	.word	0x20000b80
 8003168:	20000bc8 	.word	0x20000bc8
 800316c:	200006f0 	.word	0x200006f0
 8003170:	200006ec 	.word	0x200006ec
 8003174:	20000bd4 	.word	0x20000bd4
 8003178:	20000bd0 	.word	0x20000bd0
 800317c:	e000ed04 	.word	0xe000ed04

08003180 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003186:	4b04      	ldr	r3, [pc, #16]	; (8003198 <xTaskGetTickCount+0x18>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800318c:	687b      	ldr	r3, [r7, #4]
}
 800318e:	4618      	mov	r0, r3
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr
 8003198:	20000bc4 	.word	0x20000bc4

0800319c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031a6:	4b51      	ldr	r3, [pc, #324]	; (80032ec <xTaskIncrementTick+0x150>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f040 808e 	bne.w	80032cc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031b0:	4b4f      	ldr	r3, [pc, #316]	; (80032f0 <xTaskIncrementTick+0x154>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	3301      	adds	r3, #1
 80031b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80031b8:	4a4d      	ldr	r2, [pc, #308]	; (80032f0 <xTaskIncrementTick+0x154>)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d120      	bne.n	8003206 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80031c4:	4b4b      	ldr	r3, [pc, #300]	; (80032f4 <xTaskIncrementTick+0x158>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80031ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	603b      	str	r3, [r7, #0]
}
 80031e0:	bf00      	nop
 80031e2:	e7fe      	b.n	80031e2 <xTaskIncrementTick+0x46>
 80031e4:	4b43      	ldr	r3, [pc, #268]	; (80032f4 <xTaskIncrementTick+0x158>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	4b43      	ldr	r3, [pc, #268]	; (80032f8 <xTaskIncrementTick+0x15c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a41      	ldr	r2, [pc, #260]	; (80032f4 <xTaskIncrementTick+0x158>)
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	4a41      	ldr	r2, [pc, #260]	; (80032f8 <xTaskIncrementTick+0x15c>)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	4b40      	ldr	r3, [pc, #256]	; (80032fc <xTaskIncrementTick+0x160>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3301      	adds	r3, #1
 80031fe:	4a3f      	ldr	r2, [pc, #252]	; (80032fc <xTaskIncrementTick+0x160>)
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	f000 fad3 	bl	80037ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003206:	4b3e      	ldr	r3, [pc, #248]	; (8003300 <xTaskIncrementTick+0x164>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	429a      	cmp	r2, r3
 800320e:	d34e      	bcc.n	80032ae <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003210:	4b38      	ldr	r3, [pc, #224]	; (80032f4 <xTaskIncrementTick+0x158>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <xTaskIncrementTick+0x82>
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <xTaskIncrementTick+0x84>
 800321e:	2300      	movs	r3, #0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d004      	beq.n	800322e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003224:	4b36      	ldr	r3, [pc, #216]	; (8003300 <xTaskIncrementTick+0x164>)
 8003226:	f04f 32ff 	mov.w	r2, #4294967295
 800322a:	601a      	str	r2, [r3, #0]
					break;
 800322c:	e03f      	b.n	80032ae <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800322e:	4b31      	ldr	r3, [pc, #196]	; (80032f4 <xTaskIncrementTick+0x158>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	429a      	cmp	r2, r3
 8003244:	d203      	bcs.n	800324e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003246:	4a2e      	ldr	r2, [pc, #184]	; (8003300 <xTaskIncrementTick+0x164>)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6013      	str	r3, [r2, #0]
						break;
 800324c:	e02f      	b.n	80032ae <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	3304      	adds	r3, #4
 8003252:	4618      	mov	r0, r3
 8003254:	f7fe fedc 	bl	8002010 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325c:	2b00      	cmp	r3, #0
 800325e:	d004      	beq.n	800326a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	3318      	adds	r3, #24
 8003264:	4618      	mov	r0, r3
 8003266:	f7fe fed3 	bl	8002010 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326e:	4b25      	ldr	r3, [pc, #148]	; (8003304 <xTaskIncrementTick+0x168>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d903      	bls.n	800327e <xTaskIncrementTick+0xe2>
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327a:	4a22      	ldr	r2, [pc, #136]	; (8003304 <xTaskIncrementTick+0x168>)
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4a1f      	ldr	r2, [pc, #124]	; (8003308 <xTaskIncrementTick+0x16c>)
 800328c:	441a      	add	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	3304      	adds	r3, #4
 8003292:	4619      	mov	r1, r3
 8003294:	4610      	mov	r0, r2
 8003296:	f7fe fe60 	bl	8001f5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329e:	4b1b      	ldr	r3, [pc, #108]	; (800330c <xTaskIncrementTick+0x170>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d3b3      	bcc.n	8003210 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80032a8:	2301      	movs	r3, #1
 80032aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032ac:	e7b0      	b.n	8003210 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80032ae:	4b17      	ldr	r3, [pc, #92]	; (800330c <xTaskIncrementTick+0x170>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b4:	4914      	ldr	r1, [pc, #80]	; (8003308 <xTaskIncrementTick+0x16c>)
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d907      	bls.n	80032d6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80032c6:	2301      	movs	r3, #1
 80032c8:	617b      	str	r3, [r7, #20]
 80032ca:	e004      	b.n	80032d6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80032cc:	4b10      	ldr	r3, [pc, #64]	; (8003310 <xTaskIncrementTick+0x174>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	3301      	adds	r3, #1
 80032d2:	4a0f      	ldr	r2, [pc, #60]	; (8003310 <xTaskIncrementTick+0x174>)
 80032d4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80032d6:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <xTaskIncrementTick+0x178>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80032de:	2301      	movs	r3, #1
 80032e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80032e2:	697b      	ldr	r3, [r7, #20]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	20000be8 	.word	0x20000be8
 80032f0:	20000bc4 	.word	0x20000bc4
 80032f4:	20000b78 	.word	0x20000b78
 80032f8:	20000b7c 	.word	0x20000b7c
 80032fc:	20000bd8 	.word	0x20000bd8
 8003300:	20000be0 	.word	0x20000be0
 8003304:	20000bc8 	.word	0x20000bc8
 8003308:	200006f0 	.word	0x200006f0
 800330c:	200006ec 	.word	0x200006ec
 8003310:	20000bd0 	.word	0x20000bd0
 8003314:	20000bd4 	.word	0x20000bd4

08003318 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800331e:	4b27      	ldr	r3, [pc, #156]	; (80033bc <vTaskSwitchContext+0xa4>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003326:	4b26      	ldr	r3, [pc, #152]	; (80033c0 <vTaskSwitchContext+0xa8>)
 8003328:	2201      	movs	r2, #1
 800332a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800332c:	e041      	b.n	80033b2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800332e:	4b24      	ldr	r3, [pc, #144]	; (80033c0 <vTaskSwitchContext+0xa8>)
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003334:	4b23      	ldr	r3, [pc, #140]	; (80033c4 <vTaskSwitchContext+0xac>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	e010      	b.n	800335e <vTaskSwitchContext+0x46>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10a      	bne.n	8003358 <vTaskSwitchContext+0x40>
	__asm volatile
 8003342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003346:	f383 8811 	msr	BASEPRI, r3
 800334a:	f3bf 8f6f 	isb	sy
 800334e:	f3bf 8f4f 	dsb	sy
 8003352:	607b      	str	r3, [r7, #4]
}
 8003354:	bf00      	nop
 8003356:	e7fe      	b.n	8003356 <vTaskSwitchContext+0x3e>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	3b01      	subs	r3, #1
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	491a      	ldr	r1, [pc, #104]	; (80033c8 <vTaskSwitchContext+0xb0>)
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0e4      	beq.n	800333c <vTaskSwitchContext+0x24>
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4a12      	ldr	r2, [pc, #72]	; (80033c8 <vTaskSwitchContext+0xb0>)
 800337e:	4413      	add	r3, r2
 8003380:	60bb      	str	r3, [r7, #8]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	605a      	str	r2, [r3, #4]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	3308      	adds	r3, #8
 8003394:	429a      	cmp	r2, r3
 8003396:	d104      	bne.n	80033a2 <vTaskSwitchContext+0x8a>
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4a08      	ldr	r2, [pc, #32]	; (80033cc <vTaskSwitchContext+0xb4>)
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4a05      	ldr	r2, [pc, #20]	; (80033c4 <vTaskSwitchContext+0xac>)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6013      	str	r3, [r2, #0]
}
 80033b2:	bf00      	nop
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr
 80033bc:	20000be8 	.word	0x20000be8
 80033c0:	20000bd4 	.word	0x20000bd4
 80033c4:	20000bc8 	.word	0x20000bc8
 80033c8:	200006f0 	.word	0x200006f0
 80033cc:	200006ec 	.word	0x200006ec

080033d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10a      	bne.n	80033f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80033e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e4:	f383 8811 	msr	BASEPRI, r3
 80033e8:	f3bf 8f6f 	isb	sy
 80033ec:	f3bf 8f4f 	dsb	sy
 80033f0:	60fb      	str	r3, [r7, #12]
}
 80033f2:	bf00      	nop
 80033f4:	e7fe      	b.n	80033f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033f6:	4b07      	ldr	r3, [pc, #28]	; (8003414 <vTaskPlaceOnEventList+0x44>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	3318      	adds	r3, #24
 80033fc:	4619      	mov	r1, r3
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7fe fdce 	bl	8001fa0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003404:	2101      	movs	r1, #1
 8003406:	6838      	ldr	r0, [r7, #0]
 8003408:	f000 fa80 	bl	800390c <prvAddCurrentTaskToDelayedList>
}
 800340c:	bf00      	nop
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	200006ec 	.word	0x200006ec

08003418 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10a      	bne.n	8003440 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800342a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342e:	f383 8811 	msr	BASEPRI, r3
 8003432:	f3bf 8f6f 	isb	sy
 8003436:	f3bf 8f4f 	dsb	sy
 800343a:	617b      	str	r3, [r7, #20]
}
 800343c:	bf00      	nop
 800343e:	e7fe      	b.n	800343e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003440:	4b0a      	ldr	r3, [pc, #40]	; (800346c <vTaskPlaceOnEventListRestricted+0x54>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3318      	adds	r3, #24
 8003446:	4619      	mov	r1, r3
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f7fe fd86 	bl	8001f5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003454:	f04f 33ff 	mov.w	r3, #4294967295
 8003458:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	68b8      	ldr	r0, [r7, #8]
 800345e:	f000 fa55 	bl	800390c <prvAddCurrentTaskToDelayedList>
	}
 8003462:	bf00      	nop
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	200006ec 	.word	0x200006ec

08003470 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10a      	bne.n	800349c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348a:	f383 8811 	msr	BASEPRI, r3
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	60fb      	str	r3, [r7, #12]
}
 8003498:	bf00      	nop
 800349a:	e7fe      	b.n	800349a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	3318      	adds	r3, #24
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fe fdb5 	bl	8002010 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034a6:	4b1e      	ldr	r3, [pc, #120]	; (8003520 <xTaskRemoveFromEventList+0xb0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d11d      	bne.n	80034ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	3304      	adds	r3, #4
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe fdac 	bl	8002010 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034bc:	4b19      	ldr	r3, [pc, #100]	; (8003524 <xTaskRemoveFromEventList+0xb4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d903      	bls.n	80034cc <xTaskRemoveFromEventList+0x5c>
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	4a16      	ldr	r2, [pc, #88]	; (8003524 <xTaskRemoveFromEventList+0xb4>)
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4a13      	ldr	r2, [pc, #76]	; (8003528 <xTaskRemoveFromEventList+0xb8>)
 80034da:	441a      	add	r2, r3
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	3304      	adds	r3, #4
 80034e0:	4619      	mov	r1, r3
 80034e2:	4610      	mov	r0, r2
 80034e4:	f7fe fd39 	bl	8001f5a <vListInsertEnd>
 80034e8:	e005      	b.n	80034f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	3318      	adds	r3, #24
 80034ee:	4619      	mov	r1, r3
 80034f0:	480e      	ldr	r0, [pc, #56]	; (800352c <xTaskRemoveFromEventList+0xbc>)
 80034f2:	f7fe fd32 	bl	8001f5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fa:	4b0d      	ldr	r3, [pc, #52]	; (8003530 <xTaskRemoveFromEventList+0xc0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	429a      	cmp	r2, r3
 8003502:	d905      	bls.n	8003510 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003504:	2301      	movs	r3, #1
 8003506:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003508:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <xTaskRemoveFromEventList+0xc4>)
 800350a:	2201      	movs	r2, #1
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	e001      	b.n	8003514 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003514:	697b      	ldr	r3, [r7, #20]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	20000be8 	.word	0x20000be8
 8003524:	20000bc8 	.word	0x20000bc8
 8003528:	200006f0 	.word	0x200006f0
 800352c:	20000b80 	.word	0x20000b80
 8003530:	200006ec 	.word	0x200006ec
 8003534:	20000bd4 	.word	0x20000bd4

08003538 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003540:	4b06      	ldr	r3, [pc, #24]	; (800355c <vTaskInternalSetTimeOutState+0x24>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <vTaskInternalSetTimeOutState+0x28>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	605a      	str	r2, [r3, #4]
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	bc80      	pop	{r7}
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	20000bd8 	.word	0x20000bd8
 8003560:	20000bc4 	.word	0x20000bc4

08003564 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10a      	bne.n	800358a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003578:	f383 8811 	msr	BASEPRI, r3
 800357c:	f3bf 8f6f 	isb	sy
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	613b      	str	r3, [r7, #16]
}
 8003586:	bf00      	nop
 8003588:	e7fe      	b.n	8003588 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10a      	bne.n	80035a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	60fb      	str	r3, [r7, #12]
}
 80035a2:	bf00      	nop
 80035a4:	e7fe      	b.n	80035a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80035a6:	f000 fe09 	bl	80041bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80035aa:	4b1d      	ldr	r3, [pc, #116]	; (8003620 <xTaskCheckForTimeOut+0xbc>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c2:	d102      	bne.n	80035ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61fb      	str	r3, [r7, #28]
 80035c8:	e023      	b.n	8003612 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	4b15      	ldr	r3, [pc, #84]	; (8003624 <xTaskCheckForTimeOut+0xc0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d007      	beq.n	80035e6 <xTaskCheckForTimeOut+0x82>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d302      	bcc.n	80035e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80035e0:	2301      	movs	r3, #1
 80035e2:	61fb      	str	r3, [r7, #28]
 80035e4:	e015      	b.n	8003612 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d20b      	bcs.n	8003608 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	1ad2      	subs	r2, r2, r3
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7ff ff9b 	bl	8003538 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
 8003606:	e004      	b.n	8003612 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800360e:	2301      	movs	r3, #1
 8003610:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003612:	f000 fe03 	bl	800421c <vPortExitCritical>

	return xReturn;
 8003616:	69fb      	ldr	r3, [r7, #28]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3720      	adds	r7, #32
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	20000bc4 	.word	0x20000bc4
 8003624:	20000bd8 	.word	0x20000bd8

08003628 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800362c:	4b03      	ldr	r3, [pc, #12]	; (800363c <vTaskMissedYield+0x14>)
 800362e:	2201      	movs	r2, #1
 8003630:	601a      	str	r2, [r3, #0]
}
 8003632:	bf00      	nop
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20000bd4 	.word	0x20000bd4

08003640 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003648:	f000 f852 	bl	80036f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800364c:	4b06      	ldr	r3, [pc, #24]	; (8003668 <prvIdleTask+0x28>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d9f9      	bls.n	8003648 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003654:	4b05      	ldr	r3, [pc, #20]	; (800366c <prvIdleTask+0x2c>)
 8003656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003664:	e7f0      	b.n	8003648 <prvIdleTask+0x8>
 8003666:	bf00      	nop
 8003668:	200006f0 	.word	0x200006f0
 800366c:	e000ed04 	.word	0xe000ed04

08003670 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003676:	2300      	movs	r3, #0
 8003678:	607b      	str	r3, [r7, #4]
 800367a:	e00c      	b.n	8003696 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4a12      	ldr	r2, [pc, #72]	; (80036d0 <prvInitialiseTaskLists+0x60>)
 8003688:	4413      	add	r3, r2
 800368a:	4618      	mov	r0, r3
 800368c:	f7fe fc3a 	bl	8001f04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3301      	adds	r3, #1
 8003694:	607b      	str	r3, [r7, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b37      	cmp	r3, #55	; 0x37
 800369a:	d9ef      	bls.n	800367c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800369c:	480d      	ldr	r0, [pc, #52]	; (80036d4 <prvInitialiseTaskLists+0x64>)
 800369e:	f7fe fc31 	bl	8001f04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80036a2:	480d      	ldr	r0, [pc, #52]	; (80036d8 <prvInitialiseTaskLists+0x68>)
 80036a4:	f7fe fc2e 	bl	8001f04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80036a8:	480c      	ldr	r0, [pc, #48]	; (80036dc <prvInitialiseTaskLists+0x6c>)
 80036aa:	f7fe fc2b 	bl	8001f04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80036ae:	480c      	ldr	r0, [pc, #48]	; (80036e0 <prvInitialiseTaskLists+0x70>)
 80036b0:	f7fe fc28 	bl	8001f04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80036b4:	480b      	ldr	r0, [pc, #44]	; (80036e4 <prvInitialiseTaskLists+0x74>)
 80036b6:	f7fe fc25 	bl	8001f04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80036ba:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <prvInitialiseTaskLists+0x78>)
 80036bc:	4a05      	ldr	r2, [pc, #20]	; (80036d4 <prvInitialiseTaskLists+0x64>)
 80036be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036c0:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <prvInitialiseTaskLists+0x7c>)
 80036c2:	4a05      	ldr	r2, [pc, #20]	; (80036d8 <prvInitialiseTaskLists+0x68>)
 80036c4:	601a      	str	r2, [r3, #0]
}
 80036c6:	bf00      	nop
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	200006f0 	.word	0x200006f0
 80036d4:	20000b50 	.word	0x20000b50
 80036d8:	20000b64 	.word	0x20000b64
 80036dc:	20000b80 	.word	0x20000b80
 80036e0:	20000b94 	.word	0x20000b94
 80036e4:	20000bac 	.word	0x20000bac
 80036e8:	20000b78 	.word	0x20000b78
 80036ec:	20000b7c 	.word	0x20000b7c

080036f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036f6:	e019      	b.n	800372c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80036f8:	f000 fd60 	bl	80041bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80036fc:	4b10      	ldr	r3, [pc, #64]	; (8003740 <prvCheckTasksWaitingTermination+0x50>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3304      	adds	r3, #4
 8003708:	4618      	mov	r0, r3
 800370a:	f7fe fc81 	bl	8002010 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800370e:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <prvCheckTasksWaitingTermination+0x54>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3b01      	subs	r3, #1
 8003714:	4a0b      	ldr	r2, [pc, #44]	; (8003744 <prvCheckTasksWaitingTermination+0x54>)
 8003716:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003718:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <prvCheckTasksWaitingTermination+0x58>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3b01      	subs	r3, #1
 800371e:	4a0a      	ldr	r2, [pc, #40]	; (8003748 <prvCheckTasksWaitingTermination+0x58>)
 8003720:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003722:	f000 fd7b 	bl	800421c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f810 	bl	800374c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800372c:	4b06      	ldr	r3, [pc, #24]	; (8003748 <prvCheckTasksWaitingTermination+0x58>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e1      	bne.n	80036f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003734:	bf00      	nop
 8003736:	bf00      	nop
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20000b94 	.word	0x20000b94
 8003744:	20000bc0 	.word	0x20000bc0
 8003748:	20000ba8 	.word	0x20000ba8

0800374c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800375a:	2b00      	cmp	r3, #0
 800375c:	d108      	bne.n	8003770 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	4618      	mov	r0, r3
 8003764:	f000 feee 	bl	8004544 <vPortFree>
				vPortFree( pxTCB );
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 feeb 	bl	8004544 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800376e:	e018      	b.n	80037a2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003776:	2b01      	cmp	r3, #1
 8003778:	d103      	bne.n	8003782 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 fee2 	bl	8004544 <vPortFree>
	}
 8003780:	e00f      	b.n	80037a2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003788:	2b02      	cmp	r3, #2
 800378a:	d00a      	beq.n	80037a2 <prvDeleteTCB+0x56>
	__asm volatile
 800378c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003790:	f383 8811 	msr	BASEPRI, r3
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	60fb      	str	r3, [r7, #12]
}
 800379e:	bf00      	nop
 80037a0:	e7fe      	b.n	80037a0 <prvDeleteTCB+0x54>
	}
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037b2:	4b0e      	ldr	r3, [pc, #56]	; (80037ec <prvResetNextTaskUnblockTime+0x40>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <prvResetNextTaskUnblockTime+0x14>
 80037bc:	2301      	movs	r3, #1
 80037be:	e000      	b.n	80037c2 <prvResetNextTaskUnblockTime+0x16>
 80037c0:	2300      	movs	r3, #0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d004      	beq.n	80037d0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80037c6:	4b0a      	ldr	r3, [pc, #40]	; (80037f0 <prvResetNextTaskUnblockTime+0x44>)
 80037c8:	f04f 32ff 	mov.w	r2, #4294967295
 80037cc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80037ce:	e008      	b.n	80037e2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037d0:	4b06      	ldr	r3, [pc, #24]	; (80037ec <prvResetNextTaskUnblockTime+0x40>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	4a04      	ldr	r2, [pc, #16]	; (80037f0 <prvResetNextTaskUnblockTime+0x44>)
 80037e0:	6013      	str	r3, [r2, #0]
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr
 80037ec:	20000b78 	.word	0x20000b78
 80037f0:	20000be0 	.word	0x20000be0

080037f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80037fa:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <xTaskGetSchedulerState+0x34>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d102      	bne.n	8003808 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003802:	2301      	movs	r3, #1
 8003804:	607b      	str	r3, [r7, #4]
 8003806:	e008      	b.n	800381a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003808:	4b08      	ldr	r3, [pc, #32]	; (800382c <xTaskGetSchedulerState+0x38>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d102      	bne.n	8003816 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003810:	2302      	movs	r3, #2
 8003812:	607b      	str	r3, [r7, #4]
 8003814:	e001      	b.n	800381a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003816:	2300      	movs	r3, #0
 8003818:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800381a:	687b      	ldr	r3, [r7, #4]
	}
 800381c:	4618      	mov	r0, r3
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	20000bcc 	.word	0x20000bcc
 800382c:	20000be8 	.word	0x20000be8

08003830 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d056      	beq.n	80038f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003846:	4b2e      	ldr	r3, [pc, #184]	; (8003900 <xTaskPriorityDisinherit+0xd0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	429a      	cmp	r2, r3
 800384e:	d00a      	beq.n	8003866 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003854:	f383 8811 	msr	BASEPRI, r3
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	60fb      	str	r3, [r7, #12]
}
 8003862:	bf00      	nop
 8003864:	e7fe      	b.n	8003864 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10a      	bne.n	8003884 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800386e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003872:	f383 8811 	msr	BASEPRI, r3
 8003876:	f3bf 8f6f 	isb	sy
 800387a:	f3bf 8f4f 	dsb	sy
 800387e:	60bb      	str	r3, [r7, #8]
}
 8003880:	bf00      	nop
 8003882:	e7fe      	b.n	8003882 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003888:	1e5a      	subs	r2, r3, #1
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003896:	429a      	cmp	r2, r3
 8003898:	d02c      	beq.n	80038f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d128      	bne.n	80038f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	3304      	adds	r3, #4
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fe fbb2 	bl	8002010 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c4:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <xTaskPriorityDisinherit+0xd4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d903      	bls.n	80038d4 <xTaskPriorityDisinherit+0xa4>
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	4a0c      	ldr	r2, [pc, #48]	; (8003904 <xTaskPriorityDisinherit+0xd4>)
 80038d2:	6013      	str	r3, [r2, #0]
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4a09      	ldr	r2, [pc, #36]	; (8003908 <xTaskPriorityDisinherit+0xd8>)
 80038e2:	441a      	add	r2, r3
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	3304      	adds	r3, #4
 80038e8:	4619      	mov	r1, r3
 80038ea:	4610      	mov	r0, r2
 80038ec:	f7fe fb35 	bl	8001f5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80038f0:	2301      	movs	r3, #1
 80038f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80038f4:	697b      	ldr	r3, [r7, #20]
	}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	200006ec 	.word	0x200006ec
 8003904:	20000bc8 	.word	0x20000bc8
 8003908:	200006f0 	.word	0x200006f0

0800390c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003916:	4b21      	ldr	r3, [pc, #132]	; (800399c <prvAddCurrentTaskToDelayedList+0x90>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800391c:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3304      	adds	r3, #4
 8003922:	4618      	mov	r0, r3
 8003924:	f7fe fb74 	bl	8002010 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392e:	d10a      	bne.n	8003946 <prvAddCurrentTaskToDelayedList+0x3a>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003936:	4b1a      	ldr	r3, [pc, #104]	; (80039a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3304      	adds	r3, #4
 800393c:	4619      	mov	r1, r3
 800393e:	4819      	ldr	r0, [pc, #100]	; (80039a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8003940:	f7fe fb0b 	bl	8001f5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003944:	e026      	b.n	8003994 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4413      	add	r3, r2
 800394c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800394e:	4b14      	ldr	r3, [pc, #80]	; (80039a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	429a      	cmp	r2, r3
 800395c:	d209      	bcs.n	8003972 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800395e:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	4b0f      	ldr	r3, [pc, #60]	; (80039a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3304      	adds	r3, #4
 8003968:	4619      	mov	r1, r3
 800396a:	4610      	mov	r0, r2
 800396c:	f7fe fb18 	bl	8001fa0 <vListInsert>
}
 8003970:	e010      	b.n	8003994 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003972:	4b0e      	ldr	r3, [pc, #56]	; (80039ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	3304      	adds	r3, #4
 800397c:	4619      	mov	r1, r3
 800397e:	4610      	mov	r0, r2
 8003980:	f7fe fb0e 	bl	8001fa0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003984:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	429a      	cmp	r2, r3
 800398c:	d202      	bcs.n	8003994 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800398e:	4a08      	ldr	r2, [pc, #32]	; (80039b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	6013      	str	r3, [r2, #0]
}
 8003994:	bf00      	nop
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	20000bc4 	.word	0x20000bc4
 80039a0:	200006ec 	.word	0x200006ec
 80039a4:	20000bac 	.word	0x20000bac
 80039a8:	20000b7c 	.word	0x20000b7c
 80039ac:	20000b78 	.word	0x20000b78
 80039b0:	20000be0 	.word	0x20000be0

080039b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08a      	sub	sp, #40	; 0x28
 80039b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80039ba:	2300      	movs	r3, #0
 80039bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80039be:	f000 facb 	bl	8003f58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80039c2:	4b1c      	ldr	r3, [pc, #112]	; (8003a34 <xTimerCreateTimerTask+0x80>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d021      	beq.n	8003a0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80039d2:	1d3a      	adds	r2, r7, #4
 80039d4:	f107 0108 	add.w	r1, r7, #8
 80039d8:	f107 030c 	add.w	r3, r7, #12
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fe fa77 	bl	8001ed0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	9202      	str	r2, [sp, #8]
 80039ea:	9301      	str	r3, [sp, #4]
 80039ec:	2302      	movs	r3, #2
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	2300      	movs	r3, #0
 80039f2:	460a      	mov	r2, r1
 80039f4:	4910      	ldr	r1, [pc, #64]	; (8003a38 <xTimerCreateTimerTask+0x84>)
 80039f6:	4811      	ldr	r0, [pc, #68]	; (8003a3c <xTimerCreateTimerTask+0x88>)
 80039f8:	f7ff f818 	bl	8002a2c <xTaskCreateStatic>
 80039fc:	4603      	mov	r3, r0
 80039fe:	4a10      	ldr	r2, [pc, #64]	; (8003a40 <xTimerCreateTimerTask+0x8c>)
 8003a00:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003a02:	4b0f      	ldr	r3, [pc, #60]	; (8003a40 <xTimerCreateTimerTask+0x8c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10a      	bne.n	8003a2a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	613b      	str	r3, [r7, #16]
}
 8003a26:	bf00      	nop
 8003a28:	e7fe      	b.n	8003a28 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003a2a:	697b      	ldr	r3, [r7, #20]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20000c1c 	.word	0x20000c1c
 8003a38:	08004850 	.word	0x08004850
 8003a3c:	08003b61 	.word	0x08003b61
 8003a40:	20000c20 	.word	0x20000c20

08003a44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08a      	sub	sp, #40	; 0x28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10a      	bne.n	8003a72 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a60:	f383 8811 	msr	BASEPRI, r3
 8003a64:	f3bf 8f6f 	isb	sy
 8003a68:	f3bf 8f4f 	dsb	sy
 8003a6c:	623b      	str	r3, [r7, #32]
}
 8003a6e:	bf00      	nop
 8003a70:	e7fe      	b.n	8003a70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003a72:	4b1a      	ldr	r3, [pc, #104]	; (8003adc <xTimerGenericCommand+0x98>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d02a      	beq.n	8003ad0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b05      	cmp	r3, #5
 8003a8a:	dc18      	bgt.n	8003abe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a8c:	f7ff feb2 	bl	80037f4 <xTaskGetSchedulerState>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d109      	bne.n	8003aaa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a96:	4b11      	ldr	r3, [pc, #68]	; (8003adc <xTimerGenericCommand+0x98>)
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	f107 0110 	add.w	r1, r7, #16
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aa2:	f7fe fbe1 	bl	8002268 <xQueueGenericSend>
 8003aa6:	6278      	str	r0, [r7, #36]	; 0x24
 8003aa8:	e012      	b.n	8003ad0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003aaa:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <xTimerGenericCommand+0x98>)
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	f107 0110 	add.w	r1, r7, #16
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f7fe fbd7 	bl	8002268 <xQueueGenericSend>
 8003aba:	6278      	str	r0, [r7, #36]	; 0x24
 8003abc:	e008      	b.n	8003ad0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003abe:	4b07      	ldr	r3, [pc, #28]	; (8003adc <xTimerGenericCommand+0x98>)
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	f107 0110 	add.w	r1, r7, #16
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	f7fe fccb 	bl	8002464 <xQueueGenericSendFromISR>
 8003ace:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3728      	adds	r7, #40	; 0x28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20000c1c 	.word	0x20000c1c

08003ae0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003aea:	4b1c      	ldr	r3, [pc, #112]	; (8003b5c <prvProcessExpiredTimer+0x7c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	3304      	adds	r3, #4
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fe fa89 	bl	8002010 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d122      	bne.n	8003b4c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	699a      	ldr	r2, [r3, #24]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	18d1      	adds	r1, r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	6978      	ldr	r0, [r7, #20]
 8003b14:	f000 f8c8 	bl	8003ca8 <prvInsertTimerInActiveList>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d016      	beq.n	8003b4c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b1e:	2300      	movs	r3, #0
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	2300      	movs	r3, #0
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	2100      	movs	r1, #0
 8003b28:	6978      	ldr	r0, [r7, #20]
 8003b2a:	f7ff ff8b 	bl	8003a44 <xTimerGenericCommand>
 8003b2e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10a      	bne.n	8003b4c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3a:	f383 8811 	msr	BASEPRI, r3
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	60fb      	str	r3, [r7, #12]
}
 8003b48:	bf00      	nop
 8003b4a:	e7fe      	b.n	8003b4a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	6978      	ldr	r0, [r7, #20]
 8003b52:	4798      	blx	r3
}
 8003b54:	bf00      	nop
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	20000c14 	.word	0x20000c14

08003b60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b68:	f107 0308 	add.w	r3, r7, #8
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 f857 	bl	8003c20 <prvGetNextExpireTime>
 8003b72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4619      	mov	r1, r3
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 f803 	bl	8003b84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003b7e:	f000 f8d5 	bl	8003d2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b82:	e7f1      	b.n	8003b68 <prvTimerTask+0x8>

08003b84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003b8e:	f7ff fa4b 	bl	8003028 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b92:	f107 0308 	add.w	r3, r7, #8
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 f866 	bl	8003c68 <prvSampleTimeNow>
 8003b9c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d130      	bne.n	8003c06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10a      	bne.n	8003bc0 <prvProcessTimerOrBlockTask+0x3c>
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d806      	bhi.n	8003bc0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003bb2:	f7ff fa47 	bl	8003044 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003bb6:	68f9      	ldr	r1, [r7, #12]
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7ff ff91 	bl	8003ae0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003bbe:	e024      	b.n	8003c0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d008      	beq.n	8003bd8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003bc6:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <prvProcessTimerOrBlockTask+0x90>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	bf0c      	ite	eq
 8003bd0:	2301      	moveq	r3, #1
 8003bd2:	2300      	movne	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003bd8:	4b0f      	ldr	r3, [pc, #60]	; (8003c18 <prvProcessTimerOrBlockTask+0x94>)
 8003bda:	6818      	ldr	r0, [r3, #0]
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	4619      	mov	r1, r3
 8003be6:	f7fe feed 	bl	80029c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003bea:	f7ff fa2b 	bl	8003044 <xTaskResumeAll>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10a      	bne.n	8003c0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003bf4:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <prvProcessTimerOrBlockTask+0x98>)
 8003bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	f3bf 8f6f 	isb	sy
}
 8003c04:	e001      	b.n	8003c0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003c06:	f7ff fa1d 	bl	8003044 <xTaskResumeAll>
}
 8003c0a:	bf00      	nop
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000c18 	.word	0x20000c18
 8003c18:	20000c1c 	.word	0x20000c1c
 8003c1c:	e000ed04 	.word	0xe000ed04

08003c20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c28:	4b0e      	ldr	r3, [pc, #56]	; (8003c64 <prvGetNextExpireTime+0x44>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	bf0c      	ite	eq
 8003c32:	2301      	moveq	r3, #1
 8003c34:	2300      	movne	r3, #0
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	461a      	mov	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d105      	bne.n	8003c52 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c46:	4b07      	ldr	r3, [pc, #28]	; (8003c64 <prvGetNextExpireTime+0x44>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	e001      	b.n	8003c56 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003c56:	68fb      	ldr	r3, [r7, #12]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	20000c14 	.word	0x20000c14

08003c68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003c70:	f7ff fa86 	bl	8003180 <xTaskGetTickCount>
 8003c74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003c76:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <prvSampleTimeNow+0x3c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d205      	bcs.n	8003c8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003c80:	f000 f908 	bl	8003e94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	e002      	b.n	8003c92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003c92:	4a04      	ldr	r2, [pc, #16]	; (8003ca4 <prvSampleTimeNow+0x3c>)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003c98:	68fb      	ldr	r3, [r7, #12]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	20000c24 	.word	0x20000c24

08003ca8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
 8003cb4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d812      	bhi.n	8003cf4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	1ad2      	subs	r2, r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d302      	bcc.n	8003ce2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	e01b      	b.n	8003d1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003ce2:	4b10      	ldr	r3, [pc, #64]	; (8003d24 <prvInsertTimerInActiveList+0x7c>)
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	3304      	adds	r3, #4
 8003cea:	4619      	mov	r1, r3
 8003cec:	4610      	mov	r0, r2
 8003cee:	f7fe f957 	bl	8001fa0 <vListInsert>
 8003cf2:	e012      	b.n	8003d1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d206      	bcs.n	8003d0a <prvInsertTimerInActiveList+0x62>
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d302      	bcc.n	8003d0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003d04:	2301      	movs	r3, #1
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	e007      	b.n	8003d1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d0a:	4b07      	ldr	r3, [pc, #28]	; (8003d28 <prvInsertTimerInActiveList+0x80>)
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	3304      	adds	r3, #4
 8003d12:	4619      	mov	r1, r3
 8003d14:	4610      	mov	r0, r2
 8003d16:	f7fe f943 	bl	8001fa0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003d1a:	697b      	ldr	r3, [r7, #20]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	20000c18 	.word	0x20000c18
 8003d28:	20000c14 	.word	0x20000c14

08003d2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08e      	sub	sp, #56	; 0x38
 8003d30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d32:	e09d      	b.n	8003e70 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	da18      	bge.n	8003d6c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003d3a:	1d3b      	adds	r3, r7, #4
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10a      	bne.n	8003d5c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4a:	f383 8811 	msr	BASEPRI, r3
 8003d4e:	f3bf 8f6f 	isb	sy
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	61fb      	str	r3, [r7, #28]
}
 8003d58:	bf00      	nop
 8003d5a:	e7fe      	b.n	8003d5a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d62:	6850      	ldr	r0, [r2, #4]
 8003d64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d66:	6892      	ldr	r2, [r2, #8]
 8003d68:	4611      	mov	r1, r2
 8003d6a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	db7d      	blt.n	8003e6e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d004      	beq.n	8003d88 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d80:	3304      	adds	r3, #4
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe f944 	bl	8002010 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d88:	463b      	mov	r3, r7
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff ff6c 	bl	8003c68 <prvSampleTimeNow>
 8003d90:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b09      	cmp	r3, #9
 8003d96:	d86b      	bhi.n	8003e70 <prvProcessReceivedCommands+0x144>
 8003d98:	a201      	add	r2, pc, #4	; (adr r2, 8003da0 <prvProcessReceivedCommands+0x74>)
 8003d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9e:	bf00      	nop
 8003da0:	08003dc9 	.word	0x08003dc9
 8003da4:	08003dc9 	.word	0x08003dc9
 8003da8:	08003dc9 	.word	0x08003dc9
 8003dac:	08003e71 	.word	0x08003e71
 8003db0:	08003e25 	.word	0x08003e25
 8003db4:	08003e5d 	.word	0x08003e5d
 8003db8:	08003dc9 	.word	0x08003dc9
 8003dbc:	08003dc9 	.word	0x08003dc9
 8003dc0:	08003e71 	.word	0x08003e71
 8003dc4:	08003e25 	.word	0x08003e25
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	18d1      	adds	r1, r2, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dd6:	f7ff ff67 	bl	8003ca8 <prvInsertTimerInActiveList>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d047      	beq.n	8003e70 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003de6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d13f      	bne.n	8003e70 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	441a      	add	r2, r3
 8003df8:	2300      	movs	r3, #0
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	2100      	movs	r1, #0
 8003e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e02:	f7ff fe1f 	bl	8003a44 <xTimerGenericCommand>
 8003e06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d130      	bne.n	8003e70 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8003e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	61bb      	str	r3, [r7, #24]
}
 8003e20:	bf00      	nop
 8003e22:	e7fe      	b.n	8003e22 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e28:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10a      	bne.n	8003e48 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8003e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e36:	f383 8811 	msr	BASEPRI, r3
 8003e3a:	f3bf 8f6f 	isb	sy
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	617b      	str	r3, [r7, #20]
}
 8003e44:	bf00      	nop
 8003e46:	e7fe      	b.n	8003e46 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4a:	699a      	ldr	r2, [r3, #24]
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	18d1      	adds	r1, r2, r3
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e56:	f7ff ff27 	bl	8003ca8 <prvInsertTimerInActiveList>
					break;
 8003e5a:	e009      	b.n	8003e70 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d104      	bne.n	8003e70 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8003e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e68:	f000 fb6c 	bl	8004544 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003e6c:	e000      	b.n	8003e70 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003e6e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e70:	4b07      	ldr	r3, [pc, #28]	; (8003e90 <prvProcessReceivedCommands+0x164>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	1d39      	adds	r1, r7, #4
 8003e76:	2200      	movs	r2, #0
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fe fb8b 	bl	8002594 <xQueueReceive>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f47f af57 	bne.w	8003d34 <prvProcessReceivedCommands+0x8>
	}
}
 8003e86:	bf00      	nop
 8003e88:	bf00      	nop
 8003e8a:	3730      	adds	r7, #48	; 0x30
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	20000c1c 	.word	0x20000c1c

08003e94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e9a:	e045      	b.n	8003f28 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e9c:	4b2c      	ldr	r3, [pc, #176]	; (8003f50 <prvSwitchTimerLists+0xbc>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ea6:	4b2a      	ldr	r3, [pc, #168]	; (8003f50 <prvSwitchTimerLists+0xbc>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fe f8ab 	bl	8002010 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d12e      	bne.n	8003f28 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d90e      	bls.n	8003efa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ee8:	4b19      	ldr	r3, [pc, #100]	; (8003f50 <prvSwitchTimerLists+0xbc>)
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	f7fe f854 	bl	8001fa0 <vListInsert>
 8003ef8:	e016      	b.n	8003f28 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003efa:	2300      	movs	r3, #0
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	2300      	movs	r3, #0
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	2100      	movs	r1, #0
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f7ff fd9d 	bl	8003a44 <xTimerGenericCommand>
 8003f0a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10a      	bne.n	8003f28 <prvSwitchTimerLists+0x94>
	__asm volatile
 8003f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	603b      	str	r3, [r7, #0]
}
 8003f24:	bf00      	nop
 8003f26:	e7fe      	b.n	8003f26 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f28:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <prvSwitchTimerLists+0xbc>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1b4      	bne.n	8003e9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003f32:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <prvSwitchTimerLists+0xbc>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003f38:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <prvSwitchTimerLists+0xc0>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a04      	ldr	r2, [pc, #16]	; (8003f50 <prvSwitchTimerLists+0xbc>)
 8003f3e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003f40:	4a04      	ldr	r2, [pc, #16]	; (8003f54 <prvSwitchTimerLists+0xc0>)
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	6013      	str	r3, [r2, #0]
}
 8003f46:	bf00      	nop
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20000c14 	.word	0x20000c14
 8003f54:	20000c18 	.word	0x20000c18

08003f58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003f5e:	f000 f92d 	bl	80041bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003f62:	4b15      	ldr	r3, [pc, #84]	; (8003fb8 <prvCheckForValidListAndQueue+0x60>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d120      	bne.n	8003fac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003f6a:	4814      	ldr	r0, [pc, #80]	; (8003fbc <prvCheckForValidListAndQueue+0x64>)
 8003f6c:	f7fd ffca 	bl	8001f04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003f70:	4813      	ldr	r0, [pc, #76]	; (8003fc0 <prvCheckForValidListAndQueue+0x68>)
 8003f72:	f7fd ffc7 	bl	8001f04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003f76:	4b13      	ldr	r3, [pc, #76]	; (8003fc4 <prvCheckForValidListAndQueue+0x6c>)
 8003f78:	4a10      	ldr	r2, [pc, #64]	; (8003fbc <prvCheckForValidListAndQueue+0x64>)
 8003f7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003f7c:	4b12      	ldr	r3, [pc, #72]	; (8003fc8 <prvCheckForValidListAndQueue+0x70>)
 8003f7e:	4a10      	ldr	r2, [pc, #64]	; (8003fc0 <prvCheckForValidListAndQueue+0x68>)
 8003f80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003f82:	2300      	movs	r3, #0
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	4b11      	ldr	r3, [pc, #68]	; (8003fcc <prvCheckForValidListAndQueue+0x74>)
 8003f88:	4a11      	ldr	r2, [pc, #68]	; (8003fd0 <prvCheckForValidListAndQueue+0x78>)
 8003f8a:	2110      	movs	r1, #16
 8003f8c:	200a      	movs	r0, #10
 8003f8e:	f7fe f8d1 	bl	8002134 <xQueueGenericCreateStatic>
 8003f92:	4603      	mov	r3, r0
 8003f94:	4a08      	ldr	r2, [pc, #32]	; (8003fb8 <prvCheckForValidListAndQueue+0x60>)
 8003f96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003f98:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <prvCheckForValidListAndQueue+0x60>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003fa0:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <prvCheckForValidListAndQueue+0x60>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	490b      	ldr	r1, [pc, #44]	; (8003fd4 <prvCheckForValidListAndQueue+0x7c>)
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fe fce4 	bl	8002974 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fac:	f000 f936 	bl	800421c <vPortExitCritical>
}
 8003fb0:	bf00      	nop
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000c1c 	.word	0x20000c1c
 8003fbc:	20000bec 	.word	0x20000bec
 8003fc0:	20000c00 	.word	0x20000c00
 8003fc4:	20000c14 	.word	0x20000c14
 8003fc8:	20000c18 	.word	0x20000c18
 8003fcc:	20000cc8 	.word	0x20000cc8
 8003fd0:	20000c28 	.word	0x20000c28
 8003fd4:	08004858 	.word	0x08004858

08003fd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	3b04      	subs	r3, #4
 8003fe8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	3b04      	subs	r3, #4
 8003ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f023 0201 	bic.w	r2, r3, #1
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	3b04      	subs	r3, #4
 8004006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004008:	4a08      	ldr	r2, [pc, #32]	; (800402c <pxPortInitialiseStack+0x54>)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	3b14      	subs	r3, #20
 8004012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	3b20      	subs	r3, #32
 800401e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004020:	68fb      	ldr	r3, [r7, #12]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	bc80      	pop	{r7}
 800402a:	4770      	bx	lr
 800402c:	08004031 	.word	0x08004031

08004030 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004036:	2300      	movs	r3, #0
 8004038:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800403a:	4b12      	ldr	r3, [pc, #72]	; (8004084 <prvTaskExitError+0x54>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004042:	d00a      	beq.n	800405a <prvTaskExitError+0x2a>
	__asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	60fb      	str	r3, [r7, #12]
}
 8004056:	bf00      	nop
 8004058:	e7fe      	b.n	8004058 <prvTaskExitError+0x28>
	__asm volatile
 800405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	60bb      	str	r3, [r7, #8]
}
 800406c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800406e:	bf00      	nop
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0fc      	beq.n	8004070 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004076:	bf00      	nop
 8004078:	bf00      	nop
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	bc80      	pop	{r7}
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	2000000c 	.word	0x2000000c
	...

08004090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004090:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <pxCurrentTCBConst2>)
 8004092:	6819      	ldr	r1, [r3, #0]
 8004094:	6808      	ldr	r0, [r1, #0]
 8004096:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800409a:	f380 8809 	msr	PSP, r0
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f04f 0000 	mov.w	r0, #0
 80040a6:	f380 8811 	msr	BASEPRI, r0
 80040aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80040ae:	4770      	bx	lr

080040b0 <pxCurrentTCBConst2>:
 80040b0:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop

080040b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80040b8:	4806      	ldr	r0, [pc, #24]	; (80040d4 <prvPortStartFirstTask+0x1c>)
 80040ba:	6800      	ldr	r0, [r0, #0]
 80040bc:	6800      	ldr	r0, [r0, #0]
 80040be:	f380 8808 	msr	MSP, r0
 80040c2:	b662      	cpsie	i
 80040c4:	b661      	cpsie	f
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	df00      	svc	0
 80040d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80040d2:	bf00      	nop
 80040d4:	e000ed08 	.word	0xe000ed08

080040d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80040de:	4b32      	ldr	r3, [pc, #200]	; (80041a8 <xPortStartScheduler+0xd0>)
 80040e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	22ff      	movs	r2, #255	; 0xff
 80040ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004100:	b2da      	uxtb	r2, r3
 8004102:	4b2a      	ldr	r3, [pc, #168]	; (80041ac <xPortStartScheduler+0xd4>)
 8004104:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004106:	4b2a      	ldr	r3, [pc, #168]	; (80041b0 <xPortStartScheduler+0xd8>)
 8004108:	2207      	movs	r2, #7
 800410a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800410c:	e009      	b.n	8004122 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800410e:	4b28      	ldr	r3, [pc, #160]	; (80041b0 <xPortStartScheduler+0xd8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3b01      	subs	r3, #1
 8004114:	4a26      	ldr	r2, [pc, #152]	; (80041b0 <xPortStartScheduler+0xd8>)
 8004116:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	b2db      	uxtb	r3, r3
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	b2db      	uxtb	r3, r3
 8004120:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004122:	78fb      	ldrb	r3, [r7, #3]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412a:	2b80      	cmp	r3, #128	; 0x80
 800412c:	d0ef      	beq.n	800410e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800412e:	4b20      	ldr	r3, [pc, #128]	; (80041b0 <xPortStartScheduler+0xd8>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f1c3 0307 	rsb	r3, r3, #7
 8004136:	2b04      	cmp	r3, #4
 8004138:	d00a      	beq.n	8004150 <xPortStartScheduler+0x78>
	__asm volatile
 800413a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413e:	f383 8811 	msr	BASEPRI, r3
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	f3bf 8f4f 	dsb	sy
 800414a:	60bb      	str	r3, [r7, #8]
}
 800414c:	bf00      	nop
 800414e:	e7fe      	b.n	800414e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004150:	4b17      	ldr	r3, [pc, #92]	; (80041b0 <xPortStartScheduler+0xd8>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	021b      	lsls	r3, r3, #8
 8004156:	4a16      	ldr	r2, [pc, #88]	; (80041b0 <xPortStartScheduler+0xd8>)
 8004158:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800415a:	4b15      	ldr	r3, [pc, #84]	; (80041b0 <xPortStartScheduler+0xd8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004162:	4a13      	ldr	r2, [pc, #76]	; (80041b0 <xPortStartScheduler+0xd8>)
 8004164:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	b2da      	uxtb	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800416e:	4b11      	ldr	r3, [pc, #68]	; (80041b4 <xPortStartScheduler+0xdc>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a10      	ldr	r2, [pc, #64]	; (80041b4 <xPortStartScheduler+0xdc>)
 8004174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004178:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800417a:	4b0e      	ldr	r3, [pc, #56]	; (80041b4 <xPortStartScheduler+0xdc>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a0d      	ldr	r2, [pc, #52]	; (80041b4 <xPortStartScheduler+0xdc>)
 8004180:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004184:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004186:	f000 f8b9 	bl	80042fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800418a:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <xPortStartScheduler+0xe0>)
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004190:	f7ff ff92 	bl	80040b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004194:	f7ff f8c0 	bl	8003318 <vTaskSwitchContext>
	prvTaskExitError();
 8004198:	f7ff ff4a 	bl	8004030 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	e000e400 	.word	0xe000e400
 80041ac:	20000d18 	.word	0x20000d18
 80041b0:	20000d1c 	.word	0x20000d1c
 80041b4:	e000ed20 	.word	0xe000ed20
 80041b8:	2000000c 	.word	0x2000000c

080041bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
	__asm volatile
 80041c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	607b      	str	r3, [r7, #4]
}
 80041d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80041d6:	4b0f      	ldr	r3, [pc, #60]	; (8004214 <vPortEnterCritical+0x58>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3301      	adds	r3, #1
 80041dc:	4a0d      	ldr	r2, [pc, #52]	; (8004214 <vPortEnterCritical+0x58>)
 80041de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80041e0:	4b0c      	ldr	r3, [pc, #48]	; (8004214 <vPortEnterCritical+0x58>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d10f      	bne.n	8004208 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80041e8:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <vPortEnterCritical+0x5c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00a      	beq.n	8004208 <vPortEnterCritical+0x4c>
	__asm volatile
 80041f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	603b      	str	r3, [r7, #0]
}
 8004204:	bf00      	nop
 8004206:	e7fe      	b.n	8004206 <vPortEnterCritical+0x4a>
	}
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	bc80      	pop	{r7}
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	2000000c 	.word	0x2000000c
 8004218:	e000ed04 	.word	0xe000ed04

0800421c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004222:	4b11      	ldr	r3, [pc, #68]	; (8004268 <vPortExitCritical+0x4c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10a      	bne.n	8004240 <vPortExitCritical+0x24>
	__asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	607b      	str	r3, [r7, #4]
}
 800423c:	bf00      	nop
 800423e:	e7fe      	b.n	800423e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004240:	4b09      	ldr	r3, [pc, #36]	; (8004268 <vPortExitCritical+0x4c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3b01      	subs	r3, #1
 8004246:	4a08      	ldr	r2, [pc, #32]	; (8004268 <vPortExitCritical+0x4c>)
 8004248:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800424a:	4b07      	ldr	r3, [pc, #28]	; (8004268 <vPortExitCritical+0x4c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d105      	bne.n	800425e <vPortExitCritical+0x42>
 8004252:	2300      	movs	r3, #0
 8004254:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	f383 8811 	msr	BASEPRI, r3
}
 800425c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr
 8004268:	2000000c 	.word	0x2000000c
 800426c:	00000000 	.word	0x00000000

08004270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004270:	f3ef 8009 	mrs	r0, PSP
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	4b0d      	ldr	r3, [pc, #52]	; (80042b0 <pxCurrentTCBConst>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004280:	6010      	str	r0, [r2, #0]
 8004282:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004286:	f04f 0050 	mov.w	r0, #80	; 0x50
 800428a:	f380 8811 	msr	BASEPRI, r0
 800428e:	f7ff f843 	bl	8003318 <vTaskSwitchContext>
 8004292:	f04f 0000 	mov.w	r0, #0
 8004296:	f380 8811 	msr	BASEPRI, r0
 800429a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800429e:	6819      	ldr	r1, [r3, #0]
 80042a0:	6808      	ldr	r0, [r1, #0]
 80042a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80042a6:	f380 8809 	msr	PSP, r0
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	4770      	bx	lr

080042b0 <pxCurrentTCBConst>:
 80042b0:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop

080042b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
	__asm volatile
 80042be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	607b      	str	r3, [r7, #4]
}
 80042d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80042d2:	f7fe ff63 	bl	800319c <xTaskIncrementTick>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80042dc:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <SysTick_Handler+0x40>)
 80042de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	2300      	movs	r3, #0
 80042e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	f383 8811 	msr	BASEPRI, r3
}
 80042ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80042f0:	bf00      	nop
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	e000ed04 	.word	0xe000ed04

080042fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004300:	4b0a      	ldr	r3, [pc, #40]	; (800432c <vPortSetupTimerInterrupt+0x30>)
 8004302:	2200      	movs	r2, #0
 8004304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004306:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <vPortSetupTimerInterrupt+0x34>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <vPortSetupTimerInterrupt+0x38>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a09      	ldr	r2, [pc, #36]	; (8004338 <vPortSetupTimerInterrupt+0x3c>)
 8004312:	fba2 2303 	umull	r2, r3, r2, r3
 8004316:	099b      	lsrs	r3, r3, #6
 8004318:	4a08      	ldr	r2, [pc, #32]	; (800433c <vPortSetupTimerInterrupt+0x40>)
 800431a:	3b01      	subs	r3, #1
 800431c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800431e:	4b03      	ldr	r3, [pc, #12]	; (800432c <vPortSetupTimerInterrupt+0x30>)
 8004320:	2207      	movs	r2, #7
 8004322:	601a      	str	r2, [r3, #0]
}
 8004324:	bf00      	nop
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr
 800432c:	e000e010 	.word	0xe000e010
 8004330:	e000e018 	.word	0xe000e018
 8004334:	20000000 	.word	0x20000000
 8004338:	10624dd3 	.word	0x10624dd3
 800433c:	e000e014 	.word	0xe000e014

08004340 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004346:	f3ef 8305 	mrs	r3, IPSR
 800434a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2b0f      	cmp	r3, #15
 8004350:	d914      	bls.n	800437c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004352:	4a16      	ldr	r2, [pc, #88]	; (80043ac <vPortValidateInterruptPriority+0x6c>)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4413      	add	r3, r2
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800435c:	4b14      	ldr	r3, [pc, #80]	; (80043b0 <vPortValidateInterruptPriority+0x70>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	7afa      	ldrb	r2, [r7, #11]
 8004362:	429a      	cmp	r2, r3
 8004364:	d20a      	bcs.n	800437c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	607b      	str	r3, [r7, #4]
}
 8004378:	bf00      	nop
 800437a:	e7fe      	b.n	800437a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800437c:	4b0d      	ldr	r3, [pc, #52]	; (80043b4 <vPortValidateInterruptPriority+0x74>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004384:	4b0c      	ldr	r3, [pc, #48]	; (80043b8 <vPortValidateInterruptPriority+0x78>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d90a      	bls.n	80043a2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	603b      	str	r3, [r7, #0]
}
 800439e:	bf00      	nop
 80043a0:	e7fe      	b.n	80043a0 <vPortValidateInterruptPriority+0x60>
	}
 80043a2:	bf00      	nop
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr
 80043ac:	e000e3f0 	.word	0xe000e3f0
 80043b0:	20000d18 	.word	0x20000d18
 80043b4:	e000ed0c 	.word	0xe000ed0c
 80043b8:	20000d1c 	.word	0x20000d1c

080043bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08a      	sub	sp, #40	; 0x28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80043c8:	f7fe fe2e 	bl	8003028 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80043cc:	4b58      	ldr	r3, [pc, #352]	; (8004530 <pvPortMalloc+0x174>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80043d4:	f000 f910 	bl	80045f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80043d8:	4b56      	ldr	r3, [pc, #344]	; (8004534 <pvPortMalloc+0x178>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4013      	ands	r3, r2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f040 808e 	bne.w	8004502 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d01d      	beq.n	8004428 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80043ec:	2208      	movs	r2, #8
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4413      	add	r3, r2
 80043f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d014      	beq.n	8004428 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f023 0307 	bic.w	r3, r3, #7
 8004404:	3308      	adds	r3, #8
 8004406:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <pvPortMalloc+0x6c>
	__asm volatile
 8004412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	617b      	str	r3, [r7, #20]
}
 8004424:	bf00      	nop
 8004426:	e7fe      	b.n	8004426 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d069      	beq.n	8004502 <pvPortMalloc+0x146>
 800442e:	4b42      	ldr	r3, [pc, #264]	; (8004538 <pvPortMalloc+0x17c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	429a      	cmp	r2, r3
 8004436:	d864      	bhi.n	8004502 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004438:	4b40      	ldr	r3, [pc, #256]	; (800453c <pvPortMalloc+0x180>)
 800443a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800443c:	4b3f      	ldr	r3, [pc, #252]	; (800453c <pvPortMalloc+0x180>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004442:	e004      	b.n	800444e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	429a      	cmp	r2, r3
 8004456:	d903      	bls.n	8004460 <pvPortMalloc+0xa4>
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f1      	bne.n	8004444 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004460:	4b33      	ldr	r3, [pc, #204]	; (8004530 <pvPortMalloc+0x174>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004466:	429a      	cmp	r2, r3
 8004468:	d04b      	beq.n	8004502 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2208      	movs	r2, #8
 8004470:	4413      	add	r3, r2
 8004472:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	1ad2      	subs	r2, r2, r3
 8004484:	2308      	movs	r3, #8
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	429a      	cmp	r2, r3
 800448a:	d91f      	bls.n	80044cc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800448c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4413      	add	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <pvPortMalloc+0xf8>
	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	613b      	str	r3, [r7, #16]
}
 80044b0:	bf00      	nop
 80044b2:	e7fe      	b.n	80044b2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	1ad2      	subs	r2, r2, r3
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80044c6:	69b8      	ldr	r0, [r7, #24]
 80044c8:	f000 f8f8 	bl	80046bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80044cc:	4b1a      	ldr	r3, [pc, #104]	; (8004538 <pvPortMalloc+0x17c>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	4a18      	ldr	r2, [pc, #96]	; (8004538 <pvPortMalloc+0x17c>)
 80044d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80044da:	4b17      	ldr	r3, [pc, #92]	; (8004538 <pvPortMalloc+0x17c>)
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	4b18      	ldr	r3, [pc, #96]	; (8004540 <pvPortMalloc+0x184>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d203      	bcs.n	80044ee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80044e6:	4b14      	ldr	r3, [pc, #80]	; (8004538 <pvPortMalloc+0x17c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a15      	ldr	r2, [pc, #84]	; (8004540 <pvPortMalloc+0x184>)
 80044ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	4b10      	ldr	r3, [pc, #64]	; (8004534 <pvPortMalloc+0x178>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	431a      	orrs	r2, r3
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004502:	f7fe fd9f 	bl	8003044 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <pvPortMalloc+0x16a>
	__asm volatile
 8004510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	60fb      	str	r3, [r7, #12]
}
 8004522:	bf00      	nop
 8004524:	e7fe      	b.n	8004524 <pvPortMalloc+0x168>
	return pvReturn;
 8004526:	69fb      	ldr	r3, [r7, #28]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3728      	adds	r7, #40	; 0x28
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	20001928 	.word	0x20001928
 8004534:	20001934 	.word	0x20001934
 8004538:	2000192c 	.word	0x2000192c
 800453c:	20001920 	.word	0x20001920
 8004540:	20001930 	.word	0x20001930

08004544 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d048      	beq.n	80045e8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004556:	2308      	movs	r3, #8
 8004558:	425b      	negs	r3, r3
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4413      	add	r3, r2
 800455e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	4b21      	ldr	r3, [pc, #132]	; (80045f0 <vPortFree+0xac>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4013      	ands	r3, r2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10a      	bne.n	8004588 <vPortFree+0x44>
	__asm volatile
 8004572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	60fb      	str	r3, [r7, #12]
}
 8004584:	bf00      	nop
 8004586:	e7fe      	b.n	8004586 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <vPortFree+0x62>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	60bb      	str	r3, [r7, #8]
}
 80045a2:	bf00      	nop
 80045a4:	e7fe      	b.n	80045a4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	4b11      	ldr	r3, [pc, #68]	; (80045f0 <vPortFree+0xac>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4013      	ands	r3, r2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d019      	beq.n	80045e8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d115      	bne.n	80045e8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	4b0b      	ldr	r3, [pc, #44]	; (80045f0 <vPortFree+0xac>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	43db      	mvns	r3, r3
 80045c6:	401a      	ands	r2, r3
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80045cc:	f7fe fd2c 	bl	8003028 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	4b07      	ldr	r3, [pc, #28]	; (80045f4 <vPortFree+0xb0>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4413      	add	r3, r2
 80045da:	4a06      	ldr	r2, [pc, #24]	; (80045f4 <vPortFree+0xb0>)
 80045dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80045de:	6938      	ldr	r0, [r7, #16]
 80045e0:	f000 f86c 	bl	80046bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80045e4:	f7fe fd2e 	bl	8003044 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80045e8:	bf00      	nop
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	20001934 	.word	0x20001934
 80045f4:	2000192c 	.word	0x2000192c

080045f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80045fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004602:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004604:	4b27      	ldr	r3, [pc, #156]	; (80046a4 <prvHeapInit+0xac>)
 8004606:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00c      	beq.n	800462c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	3307      	adds	r3, #7
 8004616:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 0307 	bic.w	r3, r3, #7
 800461e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	4a1f      	ldr	r2, [pc, #124]	; (80046a4 <prvHeapInit+0xac>)
 8004628:	4413      	add	r3, r2
 800462a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004630:	4a1d      	ldr	r2, [pc, #116]	; (80046a8 <prvHeapInit+0xb0>)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004636:	4b1c      	ldr	r3, [pc, #112]	; (80046a8 <prvHeapInit+0xb0>)
 8004638:	2200      	movs	r2, #0
 800463a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	4413      	add	r3, r2
 8004642:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004644:	2208      	movs	r2, #8
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	1a9b      	subs	r3, r3, r2
 800464a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0307 	bic.w	r3, r3, #7
 8004652:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4a15      	ldr	r2, [pc, #84]	; (80046ac <prvHeapInit+0xb4>)
 8004658:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800465a:	4b14      	ldr	r3, [pc, #80]	; (80046ac <prvHeapInit+0xb4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2200      	movs	r2, #0
 8004660:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004662:	4b12      	ldr	r3, [pc, #72]	; (80046ac <prvHeapInit+0xb4>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2200      	movs	r2, #0
 8004668:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	1ad2      	subs	r2, r2, r3
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004678:	4b0c      	ldr	r3, [pc, #48]	; (80046ac <prvHeapInit+0xb4>)
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	4a0a      	ldr	r2, [pc, #40]	; (80046b0 <prvHeapInit+0xb8>)
 8004686:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	4a09      	ldr	r2, [pc, #36]	; (80046b4 <prvHeapInit+0xbc>)
 800468e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004690:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <prvHeapInit+0xc0>)
 8004692:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004696:	601a      	str	r2, [r3, #0]
}
 8004698:	bf00      	nop
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	bc80      	pop	{r7}
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	20000d20 	.word	0x20000d20
 80046a8:	20001920 	.word	0x20001920
 80046ac:	20001928 	.word	0x20001928
 80046b0:	20001930 	.word	0x20001930
 80046b4:	2000192c 	.word	0x2000192c
 80046b8:	20001934 	.word	0x20001934

080046bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80046c4:	4b27      	ldr	r3, [pc, #156]	; (8004764 <prvInsertBlockIntoFreeList+0xa8>)
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	e002      	b.n	80046d0 <prvInsertBlockIntoFreeList+0x14>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d8f7      	bhi.n	80046ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	4413      	add	r3, r2
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d108      	bne.n	80046fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	441a      	add	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	441a      	add	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	429a      	cmp	r2, r3
 8004710:	d118      	bne.n	8004744 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	4b14      	ldr	r3, [pc, #80]	; (8004768 <prvInsertBlockIntoFreeList+0xac>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d00d      	beq.n	800473a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	441a      	add	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	e008      	b.n	800474c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800473a:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <prvInsertBlockIntoFreeList+0xac>)
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	e003      	b.n	800474c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	429a      	cmp	r2, r3
 8004752:	d002      	beq.n	800475a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800475a:	bf00      	nop
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr
 8004764:	20001920 	.word	0x20001920
 8004768:	20001928 	.word	0x20001928

0800476c <__libc_init_array>:
 800476c:	b570      	push	{r4, r5, r6, lr}
 800476e:	2600      	movs	r6, #0
 8004770:	4d0c      	ldr	r5, [pc, #48]	; (80047a4 <__libc_init_array+0x38>)
 8004772:	4c0d      	ldr	r4, [pc, #52]	; (80047a8 <__libc_init_array+0x3c>)
 8004774:	1b64      	subs	r4, r4, r5
 8004776:	10a4      	asrs	r4, r4, #2
 8004778:	42a6      	cmp	r6, r4
 800477a:	d109      	bne.n	8004790 <__libc_init_array+0x24>
 800477c:	f000 f830 	bl	80047e0 <_init>
 8004780:	2600      	movs	r6, #0
 8004782:	4d0a      	ldr	r5, [pc, #40]	; (80047ac <__libc_init_array+0x40>)
 8004784:	4c0a      	ldr	r4, [pc, #40]	; (80047b0 <__libc_init_array+0x44>)
 8004786:	1b64      	subs	r4, r4, r5
 8004788:	10a4      	asrs	r4, r4, #2
 800478a:	42a6      	cmp	r6, r4
 800478c:	d105      	bne.n	800479a <__libc_init_array+0x2e>
 800478e:	bd70      	pop	{r4, r5, r6, pc}
 8004790:	f855 3b04 	ldr.w	r3, [r5], #4
 8004794:	4798      	blx	r3
 8004796:	3601      	adds	r6, #1
 8004798:	e7ee      	b.n	8004778 <__libc_init_array+0xc>
 800479a:	f855 3b04 	ldr.w	r3, [r5], #4
 800479e:	4798      	blx	r3
 80047a0:	3601      	adds	r6, #1
 80047a2:	e7f2      	b.n	800478a <__libc_init_array+0x1e>
 80047a4:	080048c0 	.word	0x080048c0
 80047a8:	080048c0 	.word	0x080048c0
 80047ac:	080048c0 	.word	0x080048c0
 80047b0:	080048c4 	.word	0x080048c4

080047b4 <memcpy>:
 80047b4:	440a      	add	r2, r1
 80047b6:	4291      	cmp	r1, r2
 80047b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80047bc:	d100      	bne.n	80047c0 <memcpy+0xc>
 80047be:	4770      	bx	lr
 80047c0:	b510      	push	{r4, lr}
 80047c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047c6:	4291      	cmp	r1, r2
 80047c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047cc:	d1f9      	bne.n	80047c2 <memcpy+0xe>
 80047ce:	bd10      	pop	{r4, pc}

080047d0 <memset>:
 80047d0:	4603      	mov	r3, r0
 80047d2:	4402      	add	r2, r0
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d100      	bne.n	80047da <memset+0xa>
 80047d8:	4770      	bx	lr
 80047da:	f803 1b01 	strb.w	r1, [r3], #1
 80047de:	e7f9      	b.n	80047d4 <memset+0x4>

080047e0 <_init>:
 80047e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e2:	bf00      	nop
 80047e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047e6:	bc08      	pop	{r3}
 80047e8:	469e      	mov	lr, r3
 80047ea:	4770      	bx	lr

080047ec <_fini>:
 80047ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ee:	bf00      	nop
 80047f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047f2:	bc08      	pop	{r3}
 80047f4:	469e      	mov	lr, r3
 80047f6:	4770      	bx	lr
