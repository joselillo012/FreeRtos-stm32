
06queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f44  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08005054  08005054  00015054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005198  08005198  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005198  08005198  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005198  08005198  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005198  08005198  00015198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800519c  0800519c  0001519c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080051a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001070  20000074  08005214  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010e4  08005214  000210e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c0c  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000315d  00000000  00000000  00034ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00037e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  00038fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a3d7  00000000  00000000  0003a000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001213a  00000000  00000000  000543d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093e65  00000000  00000000  00066511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fa376  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050c8  00000000  00000000  000fa3cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	0800503c 	.word	0x0800503c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	0800503c 	.word	0x0800503c

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000090 	.word	0x20000090
 800017c:	200000e4 	.word	0x200000e4

08000180 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af00      	add	r7, sp, #0
 8000186:	60f8      	str	r0, [r7, #12]
 8000188:	60b9      	str	r1, [r7, #8]
 800018a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 50);
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	b29a      	uxth	r2, r3
 8000190:	2332      	movs	r3, #50	; 0x32
 8000192:	68b9      	ldr	r1, [r7, #8]
 8000194:	4803      	ldr	r0, [pc, #12]	; (80001a4 <_write+0x24>)
 8000196:	f001 fc52 	bl	8001a3e <HAL_UART_Transmit>
	return len;
 800019a:	687b      	ldr	r3, [r7, #4]
}
 800019c:	4618      	mov	r0, r3
 800019e:	3710      	adds	r7, #16
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	20001040 	.word	0x20001040

080001a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001a8:	b5b0      	push	{r4, r5, r7, lr}
 80001aa:	b092      	sub	sp, #72	; 0x48
 80001ac:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001ae:	f000 facf 	bl	8000750 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001b2:	f000 f847 	bl	8000244 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001b6:	f000 f8b5 	bl	8000324 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80001ba:	f000 f889 	bl	80002d0 <MX_USART1_UART_Init>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of myQueue01 */
	osMessageQDef(myQueue01, 256, uint8_t);
 80001be:	4b1b      	ldr	r3, [pc, #108]	; (800022c <main+0x84>)
 80001c0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80001c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80001ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80001ce:	2100      	movs	r1, #0
 80001d0:	4618      	mov	r0, r3
 80001d2:	f001 fe2e 	bl	8001e32 <osMessageCreate>
 80001d6:	4603      	mov	r3, r0
 80001d8:	4a15      	ldr	r2, [pc, #84]	; (8000230 <main+0x88>)
 80001da:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, transmit, osPriorityNormal, 0, 128);
 80001dc:	4b15      	ldr	r3, [pc, #84]	; (8000234 <main+0x8c>)
 80001de:	f107 041c 	add.w	r4, r7, #28
 80001e2:	461d      	mov	r5, r3
 80001e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001f0:	f107 031c 	add.w	r3, r7, #28
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f001 fdbb 	bl	8001d72 <osThreadCreate>
 80001fc:	4603      	mov	r3, r0
 80001fe:	4a0e      	ldr	r2, [pc, #56]	; (8000238 <main+0x90>)
 8000200:	6013      	str	r3, [r2, #0]

	/* definition and creation of myTask02 */
	osThreadDef(myTask02, receive, osPriorityNormal, 0, 128);
 8000202:	4b0e      	ldr	r3, [pc, #56]	; (800023c <main+0x94>)
 8000204:	463c      	mov	r4, r7
 8000206:	461d      	mov	r5, r3
 8000208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800020a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800020c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000210:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000214:	463b      	mov	r3, r7
 8000216:	2100      	movs	r1, #0
 8000218:	4618      	mov	r0, r3
 800021a:	f001 fdaa 	bl	8001d72 <osThreadCreate>
 800021e:	4603      	mov	r3, r0
 8000220:	4a07      	ldr	r2, [pc, #28]	; (8000240 <main+0x98>)
 8000222:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000224:	f001 fd9e 	bl	8001d64 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000228:	e7fe      	b.n	8000228 <main+0x80>
 800022a:	bf00      	nop
 800022c:	0800506c 	.word	0x0800506c
 8000230:	20001084 	.word	0x20001084
 8000234:	0800507c 	.word	0x0800507c
 8000238:	2000103c 	.word	0x2000103c
 800023c:	08005098 	.word	0x08005098
 8000240:	20001080 	.word	0x20001080

08000244 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000244:	b580      	push	{r7, lr}
 8000246:	b090      	sub	sp, #64	; 0x40
 8000248:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800024a:	f107 0318 	add.w	r3, r7, #24
 800024e:	2228      	movs	r2, #40	; 0x28
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f003 ff8a 	bl	800416c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]
 8000264:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000266:	2301      	movs	r3, #1
 8000268:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800026a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000274:	2301      	movs	r3, #1
 8000276:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000278:	2302      	movs	r3, #2
 800027a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000280:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000282:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000286:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000288:	f107 0318 	add.w	r3, r7, #24
 800028c:	4618      	mov	r0, r3
 800028e:	f000 fcf5 	bl	8000c7c <HAL_RCC_OscConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x58>
		Error_Handler();
 8000298:	f000 f8aa 	bl	80003f0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800029c:	230f      	movs	r3, #15
 800029e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a0:	2302      	movs	r3, #2
 80002a2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ac:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2102      	movs	r1, #2
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 ff60 	bl	800117c <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x82>
		Error_Handler();
 80002c2:	f000 f895 	bl	80003f0 <Error_Handler>
	}
}
 80002c6:	bf00      	nop
 80002c8:	3740      	adds	r7, #64	; 0x40
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002d6:	4a12      	ldr	r2, [pc, #72]	; (8000320 <MX_USART1_UART_Init+0x50>)
 80002d8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80002da:	4b10      	ldr	r3, [pc, #64]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002e0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80002ee:	4b0b      	ldr	r3, [pc, #44]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002f6:	220c      	movs	r2, #12
 80002f8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002fa:	4b08      	ldr	r3, [pc, #32]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <MX_USART1_UART_Init+0x4c>)
 8000302:	2200      	movs	r2, #0
 8000304:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000306:	4805      	ldr	r0, [pc, #20]	; (800031c <MX_USART1_UART_Init+0x4c>)
 8000308:	f001 fb4c 	bl	80019a4 <HAL_UART_Init>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000312:	f000 f86d 	bl	80003f0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20001040 	.word	0x20001040
 8000320:	40013800 	.word	0x40013800

08000324 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800032a:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <MX_GPIO_Init+0x40>)
 800032c:	699b      	ldr	r3, [r3, #24]
 800032e:	4a0d      	ldr	r2, [pc, #52]	; (8000364 <MX_GPIO_Init+0x40>)
 8000330:	f043 0320 	orr.w	r3, r3, #32
 8000334:	6193      	str	r3, [r2, #24]
 8000336:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <MX_GPIO_Init+0x40>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	f003 0320 	and.w	r3, r3, #32
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000342:	4b08      	ldr	r3, [pc, #32]	; (8000364 <MX_GPIO_Init+0x40>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4a07      	ldr	r2, [pc, #28]	; (8000364 <MX_GPIO_Init+0x40>)
 8000348:	f043 0304 	orr.w	r3, r3, #4
 800034c:	6193      	str	r3, [r2, #24]
 800034e:	4b05      	ldr	r3, [pc, #20]	; (8000364 <MX_GPIO_Init+0x40>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	f003 0304 	and.w	r3, r3, #4
 8000356:	603b      	str	r3, [r7, #0]
 8000358:	683b      	ldr	r3, [r7, #0]

}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr
 8000364:	40021000 	.word	0x40021000

08000368 <transmit>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_transmit */
void transmit(void const *argument) {
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		printf("task1\n\r");
 8000370:	4807      	ldr	r0, [pc, #28]	; (8000390 <transmit+0x28>)
 8000372:	f003 ff03 	bl	800417c <iprintf>
		osMessagePut(myQueue01Handle, 0x2, 200);
 8000376:	4b07      	ldr	r3, [pc, #28]	; (8000394 <transmit+0x2c>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	22c8      	movs	r2, #200	; 0xc8
 800037c:	2102      	movs	r1, #2
 800037e:	4618      	mov	r0, r3
 8000380:	f001 fd80 	bl	8001e84 <osMessagePut>
		osDelay(1000);
 8000384:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000388:	f001 fd3f 	bl	8001e0a <osDelay>
		printf("task1\n\r");
 800038c:	e7f0      	b.n	8000370 <transmit+0x8>
 800038e:	bf00      	nop
 8000390:	080050b4 	.word	0x080050b4
 8000394:	20001084 	.word	0x20001084

08000398 <receive>:
 * @brief Function implementing the myTask02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_receive */
void receive(void const *argument) {
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN receive */
	osEvent retvalue;
	/* Infinite loop */
	for (;;) {

		retvalue = osMessageGet(myQueue01Handle, 200);
 80003a0:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <receive+0x2c>)
 80003a2:	6819      	ldr	r1, [r3, #0]
 80003a4:	f107 030c 	add.w	r3, r7, #12
 80003a8:	22c8      	movs	r2, #200	; 0xc8
 80003aa:	4618      	mov	r0, r3
 80003ac:	f001 fdaa 	bl	8001f04 <osMessageGet>
		printf("dato recibido: %d\n\r", retvalue.value.p);
 80003b0:	693b      	ldr	r3, [r7, #16]
 80003b2:	4619      	mov	r1, r3
 80003b4:	4804      	ldr	r0, [pc, #16]	; (80003c8 <receive+0x30>)
 80003b6:	f003 fee1 	bl	800417c <iprintf>
		osDelay(1000);
 80003ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003be:	f001 fd24 	bl	8001e0a <osDelay>
		retvalue = osMessageGet(myQueue01Handle, 200);
 80003c2:	e7ed      	b.n	80003a0 <receive+0x8>
 80003c4:	20001084 	.word	0x20001084
 80003c8:	080050bc 	.word	0x080050bc

080003cc <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a04      	ldr	r2, [pc, #16]	; (80003ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d101      	bne.n	80003e2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80003de:	f000 f9cd 	bl	800077c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80003e2:	bf00      	nop
 80003e4:	3708      	adds	r7, #8
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40012c00 	.word	0x40012c00

080003f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f4:	b672      	cpsid	i
}
 80003f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80003f8:	e7fe      	b.n	80003f8 <Error_Handler+0x8>
	...

080003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000402:	4b18      	ldr	r3, [pc, #96]	; (8000464 <HAL_MspInit+0x68>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a17      	ldr	r2, [pc, #92]	; (8000464 <HAL_MspInit+0x68>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b15      	ldr	r3, [pc, #84]	; (8000464 <HAL_MspInit+0x68>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	4b12      	ldr	r3, [pc, #72]	; (8000464 <HAL_MspInit+0x68>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	4a11      	ldr	r2, [pc, #68]	; (8000464 <HAL_MspInit+0x68>)
 8000420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000424:	61d3      	str	r3, [r2, #28]
 8000426:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <HAL_MspInit+0x68>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000432:	2200      	movs	r2, #0
 8000434:	210f      	movs	r1, #15
 8000436:	f06f 0001 	mvn.w	r0, #1
 800043a:	f000 fa70 	bl	800091e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800043e:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <HAL_MspInit+0x6c>)
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	4a04      	ldr	r2, [pc, #16]	; (8000468 <HAL_MspInit+0x6c>)
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045a:	bf00      	nop
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40021000 	.word	0x40021000
 8000468:	40010000 	.word	0x40010000

0800046c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b088      	sub	sp, #32
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000474:	f107 0310 	add.w	r3, r7, #16
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
 8000480:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a1c      	ldr	r2, [pc, #112]	; (80004f8 <HAL_UART_MspInit+0x8c>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d131      	bne.n	80004f0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800048c:	4b1b      	ldr	r3, [pc, #108]	; (80004fc <HAL_UART_MspInit+0x90>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a1a      	ldr	r2, [pc, #104]	; (80004fc <HAL_UART_MspInit+0x90>)
 8000492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b18      	ldr	r3, [pc, #96]	; (80004fc <HAL_UART_MspInit+0x90>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004a0:	60fb      	str	r3, [r7, #12]
 80004a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a4:	4b15      	ldr	r3, [pc, #84]	; (80004fc <HAL_UART_MspInit+0x90>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a14      	ldr	r2, [pc, #80]	; (80004fc <HAL_UART_MspInit+0x90>)
 80004aa:	f043 0304 	orr.w	r3, r3, #4
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b12      	ldr	r3, [pc, #72]	; (80004fc <HAL_UART_MspInit+0x90>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0304 	and.w	r3, r3, #4
 80004b8:	60bb      	str	r3, [r7, #8]
 80004ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c2:	2302      	movs	r3, #2
 80004c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004c6:	2303      	movs	r3, #3
 80004c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ca:	f107 0310 	add.w	r3, r7, #16
 80004ce:	4619      	mov	r1, r3
 80004d0:	480b      	ldr	r0, [pc, #44]	; (8000500 <HAL_UART_MspInit+0x94>)
 80004d2:	f000 fa4f 	bl	8000974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004dc:	2300      	movs	r3, #0
 80004de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	2300      	movs	r3, #0
 80004e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e4:	f107 0310 	add.w	r3, r7, #16
 80004e8:	4619      	mov	r1, r3
 80004ea:	4805      	ldr	r0, [pc, #20]	; (8000500 <HAL_UART_MspInit+0x94>)
 80004ec:	f000 fa42 	bl	8000974 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004f0:	bf00      	nop
 80004f2:	3720      	adds	r7, #32
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40013800 	.word	0x40013800
 80004fc:	40021000 	.word	0x40021000
 8000500:	40010800 	.word	0x40010800

08000504 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08c      	sub	sp, #48	; 0x30
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000510:	2300      	movs	r3, #0
 8000512:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000514:	2200      	movs	r2, #0
 8000516:	6879      	ldr	r1, [r7, #4]
 8000518:	2019      	movs	r0, #25
 800051a:	f000 fa00 	bl	800091e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800051e:	2019      	movs	r0, #25
 8000520:	f000 fa19 	bl	8000956 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000524:	4b1e      	ldr	r3, [pc, #120]	; (80005a0 <HAL_InitTick+0x9c>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a1d      	ldr	r2, [pc, #116]	; (80005a0 <HAL_InitTick+0x9c>)
 800052a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <HAL_InitTick+0x9c>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800053c:	f107 0210 	add.w	r2, r7, #16
 8000540:	f107 0314 	add.w	r3, r7, #20
 8000544:	4611      	mov	r1, r2
 8000546:	4618      	mov	r0, r3
 8000548:	f000 ff94 	bl	8001474 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800054c:	f000 ff7e 	bl	800144c <HAL_RCC_GetPCLK2Freq>
 8000550:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000554:	4a13      	ldr	r2, [pc, #76]	; (80005a4 <HAL_InitTick+0xa0>)
 8000556:	fba2 2303 	umull	r2, r3, r2, r3
 800055a:	0c9b      	lsrs	r3, r3, #18
 800055c:	3b01      	subs	r3, #1
 800055e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <HAL_InitTick+0xa4>)
 8000562:	4a12      	ldr	r2, [pc, #72]	; (80005ac <HAL_InitTick+0xa8>)
 8000564:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <HAL_InitTick+0xa4>)
 8000568:	f240 32e7 	movw	r2, #999	; 0x3e7
 800056c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800056e:	4a0e      	ldr	r2, [pc, #56]	; (80005a8 <HAL_InitTick+0xa4>)
 8000570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000572:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <HAL_InitTick+0xa4>)
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <HAL_InitTick+0xa4>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000580:	4809      	ldr	r0, [pc, #36]	; (80005a8 <HAL_InitTick+0xa4>)
 8000582:	f000 ffc5 	bl	8001510 <HAL_TIM_Base_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d104      	bne.n	8000596 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800058c:	4806      	ldr	r0, [pc, #24]	; (80005a8 <HAL_InitTick+0xa4>)
 800058e:	f001 f817 	bl	80015c0 <HAL_TIM_Base_Start_IT>
 8000592:	4603      	mov	r3, r0
 8000594:	e000      	b.n	8000598 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000596:	2301      	movs	r3, #1
}
 8000598:	4618      	mov	r0, r3
 800059a:	3730      	adds	r7, #48	; 0x30
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40021000 	.word	0x40021000
 80005a4:	431bde83 	.word	0x431bde83
 80005a8:	20001088 	.word	0x20001088
 80005ac:	40012c00 	.word	0x40012c00

080005b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <NMI_Handler+0x4>

080005b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <HardFault_Handler+0x4>

080005bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <MemManage_Handler+0x4>

080005c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <BusFault_Handler+0x4>

080005c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <UsageFault_Handler+0x4>

080005ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr
	...

080005dc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80005e0:	4802      	ldr	r0, [pc, #8]	; (80005ec <TIM1_UP_IRQHandler+0x10>)
 80005e2:	f001 f83f 	bl	8001664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20001088 	.word	0x20001088

080005f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	e00a      	b.n	8000618 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000602:	f3af 8000 	nop.w
 8000606:	4601      	mov	r1, r0
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	1c5a      	adds	r2, r3, #1
 800060c:	60ba      	str	r2, [r7, #8]
 800060e:	b2ca      	uxtb	r2, r1
 8000610:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	3301      	adds	r3, #1
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	697a      	ldr	r2, [r7, #20]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	429a      	cmp	r2, r3
 800061e:	dbf0      	blt.n	8000602 <_read+0x12>
	}

return len;
 8000620:	687b      	ldr	r3, [r7, #4]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3718      	adds	r7, #24
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <_close>:
	}
	return len;
}

int _close(int file)
{
 800062a:	b480      	push	{r7}
 800062c:	b083      	sub	sp, #12
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
	return -1;
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000636:	4618      	mov	r0, r3
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr

08000640 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000650:	605a      	str	r2, [r3, #4]
	return 0;
 8000652:	2300      	movs	r3, #0
}
 8000654:	4618      	mov	r0, r3
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr

0800065e <_isatty>:

int _isatty(int file)
{
 800065e:	b480      	push	{r7}
 8000660:	b083      	sub	sp, #12
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
	return 1;
 8000666:	2301      	movs	r3, #1
}
 8000668:	4618      	mov	r0, r3
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr

08000672 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000672:	b480      	push	{r7}
 8000674:	b085      	sub	sp, #20
 8000676:	af00      	add	r7, sp, #0
 8000678:	60f8      	str	r0, [r7, #12]
 800067a:	60b9      	str	r1, [r7, #8]
 800067c:	607a      	str	r2, [r7, #4]
	return 0;
 800067e:	2300      	movs	r3, #0
}
 8000680:	4618      	mov	r0, r3
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
	...

0800068c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000694:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <_sbrk+0x5c>)
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <_sbrk+0x60>)
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <_sbrk+0x64>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d102      	bne.n	80006ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <_sbrk+0x64>)
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <_sbrk+0x68>)
 80006ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <_sbrk+0x64>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4413      	add	r3, r2
 80006b6:	693a      	ldr	r2, [r7, #16]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d207      	bcs.n	80006cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006bc:	f003 fd1e 	bl	80040fc <__errno>
 80006c0:	4603      	mov	r3, r0
 80006c2:	220c      	movs	r2, #12
 80006c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ca:	e009      	b.n	80006e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <_sbrk+0x64>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <_sbrk+0x64>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4413      	add	r3, r2
 80006da:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <_sbrk+0x64>)
 80006dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006de:	68fb      	ldr	r3, [r7, #12]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20005000 	.word	0x20005000
 80006ec:	00000400 	.word	0x00000400
 80006f0:	200002e4 	.word	0x200002e4
 80006f4:	200010e8 	.word	0x200010e8

080006f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr

08000704 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000704:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000706:	e003      	b.n	8000710 <LoopCopyDataInit>

08000708 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000708:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800070a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800070c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800070e:	3104      	adds	r1, #4

08000710 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000710:	480a      	ldr	r0, [pc, #40]	; (800073c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000714:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000716:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000718:	d3f6      	bcc.n	8000708 <CopyDataInit>
  ldr r2, =_sbss
 800071a:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800071c:	e002      	b.n	8000724 <LoopFillZerobss>

0800071e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000720:	f842 3b04 	str.w	r3, [r2], #4

08000724 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000726:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000728:	d3f9      	bcc.n	800071e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800072a:	f7ff ffe5 	bl	80006f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800072e:	f003 fceb 	bl	8004108 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000732:	f7ff fd39 	bl	80001a8 <main>
  bx lr
 8000736:	4770      	bx	lr
  ldr r3, =_sidata
 8000738:	080051a0 	.word	0x080051a0
  ldr r0, =_sdata
 800073c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000740:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000744:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000748:	200010e4 	.word	0x200010e4

0800074c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800074c:	e7fe      	b.n	800074c <ADC1_2_IRQHandler>
	...

08000750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <HAL_Init+0x28>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a07      	ldr	r2, [pc, #28]	; (8000778 <HAL_Init+0x28>)
 800075a:	f043 0310 	orr.w	r3, r3, #16
 800075e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000760:	2003      	movs	r0, #3
 8000762:	f000 f8d1 	bl	8000908 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000766:	2000      	movs	r0, #0
 8000768:	f7ff fecc 	bl	8000504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800076c:	f7ff fe46 	bl	80003fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40022000 	.word	0x40022000

0800077c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <HAL_IncTick+0x1c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	461a      	mov	r2, r3
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <HAL_IncTick+0x20>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4413      	add	r3, r2
 800078c:	4a03      	ldr	r2, [pc, #12]	; (800079c <HAL_IncTick+0x20>)
 800078e:	6013      	str	r3, [r2, #0]
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	20000008 	.word	0x20000008
 800079c:	200010d0 	.word	0x200010d0

080007a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  return uwTick;
 80007a4:	4b02      	ldr	r3, [pc, #8]	; (80007b0 <HAL_GetTick+0x10>)
 80007a6:	681b      	ldr	r3, [r3, #0]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	200010d0 	.word	0x200010d0

080007b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f003 0307 	and.w	r3, r3, #7
 80007c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <__NVIC_SetPriorityGrouping+0x44>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007d0:	4013      	ands	r3, r2
 80007d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007e6:	4a04      	ldr	r2, [pc, #16]	; (80007f8 <__NVIC_SetPriorityGrouping+0x44>)
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	60d3      	str	r3, [r2, #12]
}
 80007ec:	bf00      	nop
 80007ee:	3714      	adds	r7, #20
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000800:	4b04      	ldr	r3, [pc, #16]	; (8000814 <__NVIC_GetPriorityGrouping+0x18>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	0a1b      	lsrs	r3, r3, #8
 8000806:	f003 0307 	and.w	r3, r3, #7
}
 800080a:	4618      	mov	r0, r3
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000826:	2b00      	cmp	r3, #0
 8000828:	db0b      	blt.n	8000842 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	f003 021f 	and.w	r2, r3, #31
 8000830:	4906      	ldr	r1, [pc, #24]	; (800084c <__NVIC_EnableIRQ+0x34>)
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	095b      	lsrs	r3, r3, #5
 8000838:	2001      	movs	r0, #1
 800083a:	fa00 f202 	lsl.w	r2, r0, r2
 800083e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	e000e100 	.word	0xe000e100

08000850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	6039      	str	r1, [r7, #0]
 800085a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800085c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000860:	2b00      	cmp	r3, #0
 8000862:	db0a      	blt.n	800087a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	b2da      	uxtb	r2, r3
 8000868:	490c      	ldr	r1, [pc, #48]	; (800089c <__NVIC_SetPriority+0x4c>)
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	0112      	lsls	r2, r2, #4
 8000870:	b2d2      	uxtb	r2, r2
 8000872:	440b      	add	r3, r1
 8000874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000878:	e00a      	b.n	8000890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4908      	ldr	r1, [pc, #32]	; (80008a0 <__NVIC_SetPriority+0x50>)
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	f003 030f 	and.w	r3, r3, #15
 8000886:	3b04      	subs	r3, #4
 8000888:	0112      	lsls	r2, r2, #4
 800088a:	b2d2      	uxtb	r2, r2
 800088c:	440b      	add	r3, r1
 800088e:	761a      	strb	r2, [r3, #24]
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000e100 	.word	0xe000e100
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b089      	sub	sp, #36	; 0x24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	f1c3 0307 	rsb	r3, r3, #7
 80008be:	2b04      	cmp	r3, #4
 80008c0:	bf28      	it	cs
 80008c2:	2304      	movcs	r3, #4
 80008c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3304      	adds	r3, #4
 80008ca:	2b06      	cmp	r3, #6
 80008cc:	d902      	bls.n	80008d4 <NVIC_EncodePriority+0x30>
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	3b03      	subs	r3, #3
 80008d2:	e000      	b.n	80008d6 <NVIC_EncodePriority+0x32>
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d8:	f04f 32ff 	mov.w	r2, #4294967295
 80008dc:	69bb      	ldr	r3, [r7, #24]
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	43da      	mvns	r2, r3
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	401a      	ands	r2, r3
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ec:	f04f 31ff 	mov.w	r1, #4294967295
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	fa01 f303 	lsl.w	r3, r1, r3
 80008f6:	43d9      	mvns	r1, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008fc:	4313      	orrs	r3, r2
         );
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3724      	adds	r7, #36	; 0x24
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr

08000908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f7ff ff4f 	bl	80007b4 <__NVIC_SetPriorityGrouping>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800091e:	b580      	push	{r7, lr}
 8000920:	b086      	sub	sp, #24
 8000922:	af00      	add	r7, sp, #0
 8000924:	4603      	mov	r3, r0
 8000926:	60b9      	str	r1, [r7, #8]
 8000928:	607a      	str	r2, [r7, #4]
 800092a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000930:	f7ff ff64 	bl	80007fc <__NVIC_GetPriorityGrouping>
 8000934:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	68b9      	ldr	r1, [r7, #8]
 800093a:	6978      	ldr	r0, [r7, #20]
 800093c:	f7ff ffb2 	bl	80008a4 <NVIC_EncodePriority>
 8000940:	4602      	mov	r2, r0
 8000942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000946:	4611      	mov	r1, r2
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff81 	bl	8000850 <__NVIC_SetPriority>
}
 800094e:	bf00      	nop
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	4603      	mov	r3, r0
 800095e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ff57 	bl	8000818 <__NVIC_EnableIRQ>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000974:	b480      	push	{r7}
 8000976:	b08b      	sub	sp, #44	; 0x2c
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000986:	e169      	b.n	8000c5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000988:	2201      	movs	r2, #1
 800098a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	69fa      	ldr	r2, [r7, #28]
 8000998:	4013      	ands	r3, r2
 800099a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	f040 8158 	bne.w	8000c56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	4a9a      	ldr	r2, [pc, #616]	; (8000c14 <HAL_GPIO_Init+0x2a0>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d05e      	beq.n	8000a6e <HAL_GPIO_Init+0xfa>
 80009b0:	4a98      	ldr	r2, [pc, #608]	; (8000c14 <HAL_GPIO_Init+0x2a0>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d875      	bhi.n	8000aa2 <HAL_GPIO_Init+0x12e>
 80009b6:	4a98      	ldr	r2, [pc, #608]	; (8000c18 <HAL_GPIO_Init+0x2a4>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d058      	beq.n	8000a6e <HAL_GPIO_Init+0xfa>
 80009bc:	4a96      	ldr	r2, [pc, #600]	; (8000c18 <HAL_GPIO_Init+0x2a4>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d86f      	bhi.n	8000aa2 <HAL_GPIO_Init+0x12e>
 80009c2:	4a96      	ldr	r2, [pc, #600]	; (8000c1c <HAL_GPIO_Init+0x2a8>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d052      	beq.n	8000a6e <HAL_GPIO_Init+0xfa>
 80009c8:	4a94      	ldr	r2, [pc, #592]	; (8000c1c <HAL_GPIO_Init+0x2a8>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d869      	bhi.n	8000aa2 <HAL_GPIO_Init+0x12e>
 80009ce:	4a94      	ldr	r2, [pc, #592]	; (8000c20 <HAL_GPIO_Init+0x2ac>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d04c      	beq.n	8000a6e <HAL_GPIO_Init+0xfa>
 80009d4:	4a92      	ldr	r2, [pc, #584]	; (8000c20 <HAL_GPIO_Init+0x2ac>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d863      	bhi.n	8000aa2 <HAL_GPIO_Init+0x12e>
 80009da:	4a92      	ldr	r2, [pc, #584]	; (8000c24 <HAL_GPIO_Init+0x2b0>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d046      	beq.n	8000a6e <HAL_GPIO_Init+0xfa>
 80009e0:	4a90      	ldr	r2, [pc, #576]	; (8000c24 <HAL_GPIO_Init+0x2b0>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d85d      	bhi.n	8000aa2 <HAL_GPIO_Init+0x12e>
 80009e6:	2b12      	cmp	r3, #18
 80009e8:	d82a      	bhi.n	8000a40 <HAL_GPIO_Init+0xcc>
 80009ea:	2b12      	cmp	r3, #18
 80009ec:	d859      	bhi.n	8000aa2 <HAL_GPIO_Init+0x12e>
 80009ee:	a201      	add	r2, pc, #4	; (adr r2, 80009f4 <HAL_GPIO_Init+0x80>)
 80009f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f4:	08000a6f 	.word	0x08000a6f
 80009f8:	08000a49 	.word	0x08000a49
 80009fc:	08000a5b 	.word	0x08000a5b
 8000a00:	08000a9d 	.word	0x08000a9d
 8000a04:	08000aa3 	.word	0x08000aa3
 8000a08:	08000aa3 	.word	0x08000aa3
 8000a0c:	08000aa3 	.word	0x08000aa3
 8000a10:	08000aa3 	.word	0x08000aa3
 8000a14:	08000aa3 	.word	0x08000aa3
 8000a18:	08000aa3 	.word	0x08000aa3
 8000a1c:	08000aa3 	.word	0x08000aa3
 8000a20:	08000aa3 	.word	0x08000aa3
 8000a24:	08000aa3 	.word	0x08000aa3
 8000a28:	08000aa3 	.word	0x08000aa3
 8000a2c:	08000aa3 	.word	0x08000aa3
 8000a30:	08000aa3 	.word	0x08000aa3
 8000a34:	08000aa3 	.word	0x08000aa3
 8000a38:	08000a51 	.word	0x08000a51
 8000a3c:	08000a65 	.word	0x08000a65
 8000a40:	4a79      	ldr	r2, [pc, #484]	; (8000c28 <HAL_GPIO_Init+0x2b4>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d013      	beq.n	8000a6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a46:	e02c      	b.n	8000aa2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	623b      	str	r3, [r7, #32]
          break;
 8000a4e:	e029      	b.n	8000aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	3304      	adds	r3, #4
 8000a56:	623b      	str	r3, [r7, #32]
          break;
 8000a58:	e024      	b.n	8000aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	3308      	adds	r3, #8
 8000a60:	623b      	str	r3, [r7, #32]
          break;
 8000a62:	e01f      	b.n	8000aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	330c      	adds	r3, #12
 8000a6a:	623b      	str	r3, [r7, #32]
          break;
 8000a6c:	e01a      	b.n	8000aa4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d102      	bne.n	8000a7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a76:	2304      	movs	r3, #4
 8000a78:	623b      	str	r3, [r7, #32]
          break;
 8000a7a:	e013      	b.n	8000aa4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d105      	bne.n	8000a90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a84:	2308      	movs	r3, #8
 8000a86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	69fa      	ldr	r2, [r7, #28]
 8000a8c:	611a      	str	r2, [r3, #16]
          break;
 8000a8e:	e009      	b.n	8000aa4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a90:	2308      	movs	r3, #8
 8000a92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	69fa      	ldr	r2, [r7, #28]
 8000a98:	615a      	str	r2, [r3, #20]
          break;
 8000a9a:	e003      	b.n	8000aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
          break;
 8000aa0:	e000      	b.n	8000aa4 <HAL_GPIO_Init+0x130>
          break;
 8000aa2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	2bff      	cmp	r3, #255	; 0xff
 8000aa8:	d801      	bhi.n	8000aae <HAL_GPIO_Init+0x13a>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	e001      	b.n	8000ab2 <HAL_GPIO_Init+0x13e>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	2bff      	cmp	r3, #255	; 0xff
 8000ab8:	d802      	bhi.n	8000ac0 <HAL_GPIO_Init+0x14c>
 8000aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	e002      	b.n	8000ac6 <HAL_GPIO_Init+0x152>
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac2:	3b08      	subs	r3, #8
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	210f      	movs	r1, #15
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	6a39      	ldr	r1, [r7, #32]
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f000 80b1 	beq.w	8000c56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000af4:	4b4d      	ldr	r3, [pc, #308]	; (8000c2c <HAL_GPIO_Init+0x2b8>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a4c      	ldr	r2, [pc, #304]	; (8000c2c <HAL_GPIO_Init+0x2b8>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b4a      	ldr	r3, [pc, #296]	; (8000c2c <HAL_GPIO_Init+0x2b8>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b0c:	4a48      	ldr	r2, [pc, #288]	; (8000c30 <HAL_GPIO_Init+0x2bc>)
 8000b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b10:	089b      	lsrs	r3, r3, #2
 8000b12:	3302      	adds	r3, #2
 8000b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1c:	f003 0303 	and.w	r3, r3, #3
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	220f      	movs	r2, #15
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a40      	ldr	r2, [pc, #256]	; (8000c34 <HAL_GPIO_Init+0x2c0>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d013      	beq.n	8000b60 <HAL_GPIO_Init+0x1ec>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a3f      	ldr	r2, [pc, #252]	; (8000c38 <HAL_GPIO_Init+0x2c4>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d00d      	beq.n	8000b5c <HAL_GPIO_Init+0x1e8>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a3e      	ldr	r2, [pc, #248]	; (8000c3c <HAL_GPIO_Init+0x2c8>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d007      	beq.n	8000b58 <HAL_GPIO_Init+0x1e4>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a3d      	ldr	r2, [pc, #244]	; (8000c40 <HAL_GPIO_Init+0x2cc>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d101      	bne.n	8000b54 <HAL_GPIO_Init+0x1e0>
 8000b50:	2303      	movs	r3, #3
 8000b52:	e006      	b.n	8000b62 <HAL_GPIO_Init+0x1ee>
 8000b54:	2304      	movs	r3, #4
 8000b56:	e004      	b.n	8000b62 <HAL_GPIO_Init+0x1ee>
 8000b58:	2302      	movs	r3, #2
 8000b5a:	e002      	b.n	8000b62 <HAL_GPIO_Init+0x1ee>
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e000      	b.n	8000b62 <HAL_GPIO_Init+0x1ee>
 8000b60:	2300      	movs	r3, #0
 8000b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b64:	f002 0203 	and.w	r2, r2, #3
 8000b68:	0092      	lsls	r2, r2, #2
 8000b6a:	4093      	lsls	r3, r2
 8000b6c:	68fa      	ldr	r2, [r7, #12]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b72:	492f      	ldr	r1, [pc, #188]	; (8000c30 <HAL_GPIO_Init+0x2bc>)
 8000b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b76:	089b      	lsrs	r3, r3, #2
 8000b78:	3302      	adds	r3, #2
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d006      	beq.n	8000b9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b8c:	4b2d      	ldr	r3, [pc, #180]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	492c      	ldr	r1, [pc, #176]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	600b      	str	r3, [r1, #0]
 8000b98:	e006      	b.n	8000ba8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b9a:	4b2a      	ldr	r3, [pc, #168]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	4928      	ldr	r1, [pc, #160]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d006      	beq.n	8000bc2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bb4:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	4922      	ldr	r1, [pc, #136]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	604b      	str	r3, [r1, #4]
 8000bc0:	e006      	b.n	8000bd0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bc2:	4b20      	ldr	r3, [pc, #128]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	491e      	ldr	r1, [pc, #120]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000bcc:	4013      	ands	r3, r2
 8000bce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d006      	beq.n	8000bea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bdc:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000bde:	689a      	ldr	r2, [r3, #8]
 8000be0:	4918      	ldr	r1, [pc, #96]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	608b      	str	r3, [r1, #8]
 8000be8:	e006      	b.n	8000bf8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000bec:	689a      	ldr	r2, [r3, #8]
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	4914      	ldr	r1, [pc, #80]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d021      	beq.n	8000c48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000c06:	68da      	ldr	r2, [r3, #12]
 8000c08:	490e      	ldr	r1, [pc, #56]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	60cb      	str	r3, [r1, #12]
 8000c10:	e021      	b.n	8000c56 <HAL_GPIO_Init+0x2e2>
 8000c12:	bf00      	nop
 8000c14:	10320000 	.word	0x10320000
 8000c18:	10310000 	.word	0x10310000
 8000c1c:	10220000 	.word	0x10220000
 8000c20:	10210000 	.word	0x10210000
 8000c24:	10120000 	.word	0x10120000
 8000c28:	10110000 	.word	0x10110000
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40010000 	.word	0x40010000
 8000c34:	40010800 	.word	0x40010800
 8000c38:	40010c00 	.word	0x40010c00
 8000c3c:	40011000 	.word	0x40011000
 8000c40:	40011400 	.word	0x40011400
 8000c44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <HAL_GPIO_Init+0x304>)
 8000c4a:	68da      	ldr	r2, [r3, #12]
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	4909      	ldr	r1, [pc, #36]	; (8000c78 <HAL_GPIO_Init+0x304>)
 8000c52:	4013      	ands	r3, r2
 8000c54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	3301      	adds	r3, #1
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	fa22 f303 	lsr.w	r3, r2, r3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f47f ae8e 	bne.w	8000988 <HAL_GPIO_Init+0x14>
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	372c      	adds	r7, #44	; 0x2c
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	40010400 	.word	0x40010400

08000c7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e26c      	b.n	8001168 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f000 8087 	beq.w	8000daa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c9c:	4b92      	ldr	r3, [pc, #584]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 030c 	and.w	r3, r3, #12
 8000ca4:	2b04      	cmp	r3, #4
 8000ca6:	d00c      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ca8:	4b8f      	ldr	r3, [pc, #572]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f003 030c 	and.w	r3, r3, #12
 8000cb0:	2b08      	cmp	r3, #8
 8000cb2:	d112      	bne.n	8000cda <HAL_RCC_OscConfig+0x5e>
 8000cb4:	4b8c      	ldr	r3, [pc, #560]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cc0:	d10b      	bne.n	8000cda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc2:	4b89      	ldr	r3, [pc, #548]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d06c      	beq.n	8000da8 <HAL_RCC_OscConfig+0x12c>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d168      	bne.n	8000da8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e246      	b.n	8001168 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ce2:	d106      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x76>
 8000ce4:	4b80      	ldr	r3, [pc, #512]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a7f      	ldr	r2, [pc, #508]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cee:	6013      	str	r3, [r2, #0]
 8000cf0:	e02e      	b.n	8000d50 <HAL_RCC_OscConfig+0xd4>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d10c      	bne.n	8000d14 <HAL_RCC_OscConfig+0x98>
 8000cfa:	4b7b      	ldr	r3, [pc, #492]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a7a      	ldr	r2, [pc, #488]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d04:	6013      	str	r3, [r2, #0]
 8000d06:	4b78      	ldr	r3, [pc, #480]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a77      	ldr	r2, [pc, #476]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	e01d      	b.n	8000d50 <HAL_RCC_OscConfig+0xd4>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d1c:	d10c      	bne.n	8000d38 <HAL_RCC_OscConfig+0xbc>
 8000d1e:	4b72      	ldr	r3, [pc, #456]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a71      	ldr	r2, [pc, #452]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	4b6f      	ldr	r3, [pc, #444]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a6e      	ldr	r2, [pc, #440]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	e00b      	b.n	8000d50 <HAL_RCC_OscConfig+0xd4>
 8000d38:	4b6b      	ldr	r3, [pc, #428]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a6a      	ldr	r2, [pc, #424]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	4b68      	ldr	r3, [pc, #416]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a67      	ldr	r2, [pc, #412]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d013      	beq.n	8000d80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d58:	f7ff fd22 	bl	80007a0 <HAL_GetTick>
 8000d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d5e:	e008      	b.n	8000d72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d60:	f7ff fd1e 	bl	80007a0 <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	2b64      	cmp	r3, #100	; 0x64
 8000d6c:	d901      	bls.n	8000d72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	e1fa      	b.n	8001168 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d72:	4b5d      	ldr	r3, [pc, #372]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d0f0      	beq.n	8000d60 <HAL_RCC_OscConfig+0xe4>
 8000d7e:	e014      	b.n	8000daa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d80:	f7ff fd0e 	bl	80007a0 <HAL_GetTick>
 8000d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d86:	e008      	b.n	8000d9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d88:	f7ff fd0a 	bl	80007a0 <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	2b64      	cmp	r3, #100	; 0x64
 8000d94:	d901      	bls.n	8000d9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d96:	2303      	movs	r3, #3
 8000d98:	e1e6      	b.n	8001168 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d9a:	4b53      	ldr	r3, [pc, #332]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d1f0      	bne.n	8000d88 <HAL_RCC_OscConfig+0x10c>
 8000da6:	e000      	b.n	8000daa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d063      	beq.n	8000e7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000db6:	4b4c      	ldr	r3, [pc, #304]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 030c 	and.w	r3, r3, #12
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d00b      	beq.n	8000dda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dc2:	4b49      	ldr	r3, [pc, #292]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 030c 	and.w	r3, r3, #12
 8000dca:	2b08      	cmp	r3, #8
 8000dcc:	d11c      	bne.n	8000e08 <HAL_RCC_OscConfig+0x18c>
 8000dce:	4b46      	ldr	r3, [pc, #280]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d116      	bne.n	8000e08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dda:	4b43      	ldr	r3, [pc, #268]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d005      	beq.n	8000df2 <HAL_RCC_OscConfig+0x176>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	691b      	ldr	r3, [r3, #16]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d001      	beq.n	8000df2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e1ba      	b.n	8001168 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df2:	4b3d      	ldr	r3, [pc, #244]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	4939      	ldr	r1, [pc, #228]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000e02:	4313      	orrs	r3, r2
 8000e04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e06:	e03a      	b.n	8000e7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	691b      	ldr	r3, [r3, #16]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d020      	beq.n	8000e52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e10:	4b36      	ldr	r3, [pc, #216]	; (8000eec <HAL_RCC_OscConfig+0x270>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e16:	f7ff fcc3 	bl	80007a0 <HAL_GetTick>
 8000e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e1c:	e008      	b.n	8000e30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e1e:	f7ff fcbf 	bl	80007a0 <HAL_GetTick>
 8000e22:	4602      	mov	r2, r0
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d901      	bls.n	8000e30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	e19b      	b.n	8001168 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e30:	4b2d      	ldr	r3, [pc, #180]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d0f0      	beq.n	8000e1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	695b      	ldr	r3, [r3, #20]
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	4927      	ldr	r1, [pc, #156]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	600b      	str	r3, [r1, #0]
 8000e50:	e015      	b.n	8000e7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e52:	4b26      	ldr	r3, [pc, #152]	; (8000eec <HAL_RCC_OscConfig+0x270>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e58:	f7ff fca2 	bl	80007a0 <HAL_GetTick>
 8000e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e5e:	e008      	b.n	8000e72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e60:	f7ff fc9e 	bl	80007a0 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e17a      	b.n	8001168 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e72:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1f0      	bne.n	8000e60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0308 	and.w	r3, r3, #8
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d03a      	beq.n	8000f00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d019      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e98:	f7ff fc82 	bl	80007a0 <HAL_GetTick>
 8000e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e9e:	e008      	b.n	8000eb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ea0:	f7ff fc7e 	bl	80007a0 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e15a      	b.n	8001168 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0f0      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f000 fb08 	bl	80014d4 <RCC_Delay>
 8000ec4:	e01c      	b.n	8000f00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_RCC_OscConfig+0x274>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ecc:	f7ff fc68 	bl	80007a0 <HAL_GetTick>
 8000ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ed2:	e00f      	b.n	8000ef4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ed4:	f7ff fc64 	bl	80007a0 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d908      	bls.n	8000ef4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e140      	b.n	8001168 <HAL_RCC_OscConfig+0x4ec>
 8000ee6:	bf00      	nop
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	42420000 	.word	0x42420000
 8000ef0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ef4:	4b9e      	ldr	r3, [pc, #632]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 8000ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1e9      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 80a6 	beq.w	800105a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f12:	4b97      	ldr	r3, [pc, #604]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10d      	bne.n	8000f3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f1e:	4b94      	ldr	r3, [pc, #592]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	4a93      	ldr	r2, [pc, #588]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 8000f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f28:	61d3      	str	r3, [r2, #28]
 8000f2a:	4b91      	ldr	r3, [pc, #580]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f36:	2301      	movs	r3, #1
 8000f38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f3a:	4b8e      	ldr	r3, [pc, #568]	; (8001174 <HAL_RCC_OscConfig+0x4f8>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d118      	bne.n	8000f78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f46:	4b8b      	ldr	r3, [pc, #556]	; (8001174 <HAL_RCC_OscConfig+0x4f8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a8a      	ldr	r2, [pc, #552]	; (8001174 <HAL_RCC_OscConfig+0x4f8>)
 8000f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f52:	f7ff fc25 	bl	80007a0 <HAL_GetTick>
 8000f56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f58:	e008      	b.n	8000f6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f5a:	f7ff fc21 	bl	80007a0 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b64      	cmp	r3, #100	; 0x64
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e0fd      	b.n	8001168 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f6c:	4b81      	ldr	r3, [pc, #516]	; (8001174 <HAL_RCC_OscConfig+0x4f8>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0f0      	beq.n	8000f5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d106      	bne.n	8000f8e <HAL_RCC_OscConfig+0x312>
 8000f80:	4b7b      	ldr	r3, [pc, #492]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	4a7a      	ldr	r2, [pc, #488]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6213      	str	r3, [r2, #32]
 8000f8c:	e02d      	b.n	8000fea <HAL_RCC_OscConfig+0x36e>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d10c      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x334>
 8000f96:	4b76      	ldr	r3, [pc, #472]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 8000f98:	6a1b      	ldr	r3, [r3, #32]
 8000f9a:	4a75      	ldr	r2, [pc, #468]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 8000f9c:	f023 0301 	bic.w	r3, r3, #1
 8000fa0:	6213      	str	r3, [r2, #32]
 8000fa2:	4b73      	ldr	r3, [pc, #460]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 8000fa4:	6a1b      	ldr	r3, [r3, #32]
 8000fa6:	4a72      	ldr	r2, [pc, #456]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 8000fa8:	f023 0304 	bic.w	r3, r3, #4
 8000fac:	6213      	str	r3, [r2, #32]
 8000fae:	e01c      	b.n	8000fea <HAL_RCC_OscConfig+0x36e>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	2b05      	cmp	r3, #5
 8000fb6:	d10c      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x356>
 8000fb8:	4b6d      	ldr	r3, [pc, #436]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	4a6c      	ldr	r2, [pc, #432]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 8000fbe:	f043 0304 	orr.w	r3, r3, #4
 8000fc2:	6213      	str	r3, [r2, #32]
 8000fc4:	4b6a      	ldr	r3, [pc, #424]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	4a69      	ldr	r2, [pc, #420]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	6213      	str	r3, [r2, #32]
 8000fd0:	e00b      	b.n	8000fea <HAL_RCC_OscConfig+0x36e>
 8000fd2:	4b67      	ldr	r3, [pc, #412]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 8000fd4:	6a1b      	ldr	r3, [r3, #32]
 8000fd6:	4a66      	ldr	r2, [pc, #408]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 8000fd8:	f023 0301 	bic.w	r3, r3, #1
 8000fdc:	6213      	str	r3, [r2, #32]
 8000fde:	4b64      	ldr	r3, [pc, #400]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 8000fe0:	6a1b      	ldr	r3, [r3, #32]
 8000fe2:	4a63      	ldr	r2, [pc, #396]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 8000fe4:	f023 0304 	bic.w	r3, r3, #4
 8000fe8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d015      	beq.n	800101e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff2:	f7ff fbd5 	bl	80007a0 <HAL_GetTick>
 8000ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ff8:	e00a      	b.n	8001010 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ffa:	f7ff fbd1 	bl	80007a0 <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	f241 3288 	movw	r2, #5000	; 0x1388
 8001008:	4293      	cmp	r3, r2
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e0ab      	b.n	8001168 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001010:	4b57      	ldr	r3, [pc, #348]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0ee      	beq.n	8000ffa <HAL_RCC_OscConfig+0x37e>
 800101c:	e014      	b.n	8001048 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800101e:	f7ff fbbf 	bl	80007a0 <HAL_GetTick>
 8001022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001024:	e00a      	b.n	800103c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001026:	f7ff fbbb 	bl	80007a0 <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	f241 3288 	movw	r2, #5000	; 0x1388
 8001034:	4293      	cmp	r3, r2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e095      	b.n	8001168 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800103c:	4b4c      	ldr	r3, [pc, #304]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1ee      	bne.n	8001026 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001048:	7dfb      	ldrb	r3, [r7, #23]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d105      	bne.n	800105a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800104e:	4b48      	ldr	r3, [pc, #288]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	4a47      	ldr	r2, [pc, #284]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 8001054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001058:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 8081 	beq.w	8001166 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001064:	4b42      	ldr	r3, [pc, #264]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 030c 	and.w	r3, r3, #12
 800106c:	2b08      	cmp	r3, #8
 800106e:	d061      	beq.n	8001134 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d146      	bne.n	8001106 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001078:	4b3f      	ldr	r3, [pc, #252]	; (8001178 <HAL_RCC_OscConfig+0x4fc>)
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107e:	f7ff fb8f 	bl	80007a0 <HAL_GetTick>
 8001082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001084:	e008      	b.n	8001098 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001086:	f7ff fb8b 	bl	80007a0 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e067      	b.n	8001168 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001098:	4b35      	ldr	r3, [pc, #212]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1f0      	bne.n	8001086 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ac:	d108      	bne.n	80010c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010ae:	4b30      	ldr	r3, [pc, #192]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	492d      	ldr	r1, [pc, #180]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 80010bc:	4313      	orrs	r3, r2
 80010be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010c0:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a19      	ldr	r1, [r3, #32]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d0:	430b      	orrs	r3, r1
 80010d2:	4927      	ldr	r1, [pc, #156]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010d8:	4b27      	ldr	r3, [pc, #156]	; (8001178 <HAL_RCC_OscConfig+0x4fc>)
 80010da:	2201      	movs	r2, #1
 80010dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010de:	f7ff fb5f 	bl	80007a0 <HAL_GetTick>
 80010e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010e6:	f7ff fb5b 	bl	80007a0 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e037      	b.n	8001168 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010f8:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0f0      	beq.n	80010e6 <HAL_RCC_OscConfig+0x46a>
 8001104:	e02f      	b.n	8001166 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <HAL_RCC_OscConfig+0x4fc>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110c:	f7ff fb48 	bl	80007a0 <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001114:	f7ff fb44 	bl	80007a0 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e020      	b.n	8001168 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001126:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f0      	bne.n	8001114 <HAL_RCC_OscConfig+0x498>
 8001132:	e018      	b.n	8001166 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69db      	ldr	r3, [r3, #28]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d101      	bne.n	8001140 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e013      	b.n	8001168 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <HAL_RCC_OscConfig+0x4f4>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	429a      	cmp	r2, r3
 8001152:	d106      	bne.n	8001162 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800115e:	429a      	cmp	r2, r3
 8001160:	d001      	beq.n	8001166 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40021000 	.word	0x40021000
 8001174:	40007000 	.word	0x40007000
 8001178:	42420060 	.word	0x42420060

0800117c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e0d0      	b.n	8001332 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001190:	4b6a      	ldr	r3, [pc, #424]	; (800133c <HAL_RCC_ClockConfig+0x1c0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	429a      	cmp	r2, r3
 800119c:	d910      	bls.n	80011c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800119e:	4b67      	ldr	r3, [pc, #412]	; (800133c <HAL_RCC_ClockConfig+0x1c0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f023 0207 	bic.w	r2, r3, #7
 80011a6:	4965      	ldr	r1, [pc, #404]	; (800133c <HAL_RCC_ClockConfig+0x1c0>)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ae:	4b63      	ldr	r3, [pc, #396]	; (800133c <HAL_RCC_ClockConfig+0x1c0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d001      	beq.n	80011c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e0b8      	b.n	8001332 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d020      	beq.n	800120e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d005      	beq.n	80011e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011d8:	4b59      	ldr	r3, [pc, #356]	; (8001340 <HAL_RCC_ClockConfig+0x1c4>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	4a58      	ldr	r2, [pc, #352]	; (8001340 <HAL_RCC_ClockConfig+0x1c4>)
 80011de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0308 	and.w	r3, r3, #8
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d005      	beq.n	80011fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011f0:	4b53      	ldr	r3, [pc, #332]	; (8001340 <HAL_RCC_ClockConfig+0x1c4>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	4a52      	ldr	r2, [pc, #328]	; (8001340 <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011fc:	4b50      	ldr	r3, [pc, #320]	; (8001340 <HAL_RCC_ClockConfig+0x1c4>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	494d      	ldr	r1, [pc, #308]	; (8001340 <HAL_RCC_ClockConfig+0x1c4>)
 800120a:	4313      	orrs	r3, r2
 800120c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	d040      	beq.n	800129c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d107      	bne.n	8001232 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001222:	4b47      	ldr	r3, [pc, #284]	; (8001340 <HAL_RCC_ClockConfig+0x1c4>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d115      	bne.n	800125a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e07f      	b.n	8001332 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d107      	bne.n	800124a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800123a:	4b41      	ldr	r3, [pc, #260]	; (8001340 <HAL_RCC_ClockConfig+0x1c4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d109      	bne.n	800125a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e073      	b.n	8001332 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124a:	4b3d      	ldr	r3, [pc, #244]	; (8001340 <HAL_RCC_ClockConfig+0x1c4>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e06b      	b.n	8001332 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800125a:	4b39      	ldr	r3, [pc, #228]	; (8001340 <HAL_RCC_ClockConfig+0x1c4>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f023 0203 	bic.w	r2, r3, #3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	4936      	ldr	r1, [pc, #216]	; (8001340 <HAL_RCC_ClockConfig+0x1c4>)
 8001268:	4313      	orrs	r3, r2
 800126a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800126c:	f7ff fa98 	bl	80007a0 <HAL_GetTick>
 8001270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001272:	e00a      	b.n	800128a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001274:	f7ff fa94 	bl	80007a0 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001282:	4293      	cmp	r3, r2
 8001284:	d901      	bls.n	800128a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e053      	b.n	8001332 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800128a:	4b2d      	ldr	r3, [pc, #180]	; (8001340 <HAL_RCC_ClockConfig+0x1c4>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 020c 	and.w	r2, r3, #12
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	429a      	cmp	r2, r3
 800129a:	d1eb      	bne.n	8001274 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800129c:	4b27      	ldr	r3, [pc, #156]	; (800133c <HAL_RCC_ClockConfig+0x1c0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d210      	bcs.n	80012cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012aa:	4b24      	ldr	r3, [pc, #144]	; (800133c <HAL_RCC_ClockConfig+0x1c0>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f023 0207 	bic.w	r2, r3, #7
 80012b2:	4922      	ldr	r1, [pc, #136]	; (800133c <HAL_RCC_ClockConfig+0x1c0>)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ba:	4b20      	ldr	r3, [pc, #128]	; (800133c <HAL_RCC_ClockConfig+0x1c0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d001      	beq.n	80012cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e032      	b.n	8001332 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d008      	beq.n	80012ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <HAL_RCC_ClockConfig+0x1c4>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	4916      	ldr	r1, [pc, #88]	; (8001340 <HAL_RCC_ClockConfig+0x1c4>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d009      	beq.n	800130a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_RCC_ClockConfig+0x1c4>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	490e      	ldr	r1, [pc, #56]	; (8001340 <HAL_RCC_ClockConfig+0x1c4>)
 8001306:	4313      	orrs	r3, r2
 8001308:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800130a:	f000 f821 	bl	8001350 <HAL_RCC_GetSysClockFreq>
 800130e:	4602      	mov	r2, r0
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <HAL_RCC_ClockConfig+0x1c4>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	091b      	lsrs	r3, r3, #4
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	490a      	ldr	r1, [pc, #40]	; (8001344 <HAL_RCC_ClockConfig+0x1c8>)
 800131c:	5ccb      	ldrb	r3, [r1, r3]
 800131e:	fa22 f303 	lsr.w	r3, r2, r3
 8001322:	4a09      	ldr	r2, [pc, #36]	; (8001348 <HAL_RCC_ClockConfig+0x1cc>)
 8001324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <HAL_RCC_ClockConfig+0x1d0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f8ea 	bl	8000504 <HAL_InitTick>

  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40022000 	.word	0x40022000
 8001340:	40021000 	.word	0x40021000
 8001344:	080050e8 	.word	0x080050e8
 8001348:	20000000 	.word	0x20000000
 800134c:	20000004 	.word	0x20000004

08001350 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001350:	b490      	push	{r4, r7}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001356:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001358:	1d3c      	adds	r4, r7, #4
 800135a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800135c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001360:	f240 2301 	movw	r3, #513	; 0x201
 8001364:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800137a:	4b22      	ldr	r3, [pc, #136]	; (8001404 <HAL_RCC_GetSysClockFreq+0xb4>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f003 030c 	and.w	r3, r3, #12
 8001386:	2b04      	cmp	r3, #4
 8001388:	d002      	beq.n	8001390 <HAL_RCC_GetSysClockFreq+0x40>
 800138a:	2b08      	cmp	r3, #8
 800138c:	d003      	beq.n	8001396 <HAL_RCC_GetSysClockFreq+0x46>
 800138e:	e02d      	b.n	80013ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001390:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001392:	623b      	str	r3, [r7, #32]
      break;
 8001394:	e02d      	b.n	80013f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	0c9b      	lsrs	r3, r3, #18
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013a2:	4413      	add	r3, r2
 80013a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d013      	beq.n	80013dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	0c5b      	lsrs	r3, r3, #17
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013c2:	4413      	add	r3, r2
 80013c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80013c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013ce:	fb02 f203 	mul.w	r2, r2, r3
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
 80013da:	e004      	b.n	80013e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	4a0b      	ldr	r2, [pc, #44]	; (800140c <HAL_RCC_GetSysClockFreq+0xbc>)
 80013e0:	fb02 f303 	mul.w	r3, r2, r3
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	623b      	str	r3, [r7, #32]
      break;
 80013ea:	e002      	b.n	80013f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013ee:	623b      	str	r3, [r7, #32]
      break;
 80013f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013f2:	6a3b      	ldr	r3, [r7, #32]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3728      	adds	r7, #40	; 0x28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc90      	pop	{r4, r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	080050d0 	.word	0x080050d0
 8001404:	40021000 	.word	0x40021000
 8001408:	007a1200 	.word	0x007a1200
 800140c:	003d0900 	.word	0x003d0900

08001410 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001414:	4b02      	ldr	r3, [pc, #8]	; (8001420 <HAL_RCC_GetHCLKFreq+0x10>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	20000000 	.word	0x20000000

08001424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001428:	f7ff fff2 	bl	8001410 <HAL_RCC_GetHCLKFreq>
 800142c:	4602      	mov	r2, r0
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	0a1b      	lsrs	r3, r3, #8
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	4903      	ldr	r1, [pc, #12]	; (8001448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800143a:	5ccb      	ldrb	r3, [r1, r3]
 800143c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001440:	4618      	mov	r0, r3
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40021000 	.word	0x40021000
 8001448:	080050f8 	.word	0x080050f8

0800144c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001450:	f7ff ffde 	bl	8001410 <HAL_RCC_GetHCLKFreq>
 8001454:	4602      	mov	r2, r0
 8001456:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	0adb      	lsrs	r3, r3, #11
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	4903      	ldr	r1, [pc, #12]	; (8001470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001462:	5ccb      	ldrb	r3, [r1, r3]
 8001464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001468:	4618      	mov	r0, r3
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40021000 	.word	0x40021000
 8001470:	080050f8 	.word	0x080050f8

08001474 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	220f      	movs	r2, #15
 8001482:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <HAL_RCC_GetClockConfig+0x58>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0203 	and.w	r2, r3, #3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <HAL_RCC_GetClockConfig+0x58>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <HAL_RCC_GetClockConfig+0x58>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <HAL_RCC_GetClockConfig+0x58>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	08db      	lsrs	r3, r3, #3
 80014ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_RCC_GetClockConfig+0x5c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0207 	and.w	r2, r3, #7
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40022000 	.word	0x40022000

080014d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <RCC_Delay+0x34>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a0a      	ldr	r2, [pc, #40]	; (800150c <RCC_Delay+0x38>)
 80014e2:	fba2 2303 	umull	r2, r3, r2, r3
 80014e6:	0a5b      	lsrs	r3, r3, #9
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	fb02 f303 	mul.w	r3, r2, r3
 80014ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014f0:	bf00      	nop
  }
  while (Delay --);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	1e5a      	subs	r2, r3, #1
 80014f6:	60fa      	str	r2, [r7, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1f9      	bne.n	80014f0 <RCC_Delay+0x1c>
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	20000000 	.word	0x20000000
 800150c:	10624dd3 	.word	0x10624dd3

08001510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e041      	b.n	80015a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d106      	bne.n	800153c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f839 	bl	80015ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2202      	movs	r2, #2
 8001540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3304      	adds	r3, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4610      	mov	r0, r2
 8001550:	f000 f9b4 	bl	80018bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d001      	beq.n	80015d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e03a      	b.n	800164e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2202      	movs	r2, #2
 80015dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 0201 	orr.w	r2, r2, #1
 80015ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a18      	ldr	r2, [pc, #96]	; (8001658 <HAL_TIM_Base_Start_IT+0x98>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00e      	beq.n	8001618 <HAL_TIM_Base_Start_IT+0x58>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001602:	d009      	beq.n	8001618 <HAL_TIM_Base_Start_IT+0x58>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a14      	ldr	r2, [pc, #80]	; (800165c <HAL_TIM_Base_Start_IT+0x9c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d004      	beq.n	8001618 <HAL_TIM_Base_Start_IT+0x58>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a13      	ldr	r2, [pc, #76]	; (8001660 <HAL_TIM_Base_Start_IT+0xa0>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d111      	bne.n	800163c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2b06      	cmp	r3, #6
 8001628:	d010      	beq.n	800164c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f042 0201 	orr.w	r2, r2, #1
 8001638:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800163a:	e007      	b.n	800164c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 0201 	orr.w	r2, r2, #1
 800164a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	40012c00 	.word	0x40012c00
 800165c:	40000400 	.word	0x40000400
 8001660:	40000800 	.word	0x40000800

08001664 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b02      	cmp	r3, #2
 8001678:	d122      	bne.n	80016c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b02      	cmp	r3, #2
 8001686:	d11b      	bne.n	80016c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f06f 0202 	mvn.w	r2, #2
 8001690:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f8ed 	bl	8001886 <HAL_TIM_IC_CaptureCallback>
 80016ac:	e005      	b.n	80016ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 f8e0 	bl	8001874 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 f8ef 	bl	8001898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	d122      	bne.n	8001714 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b04      	cmp	r3, #4
 80016da:	d11b      	bne.n	8001714 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f06f 0204 	mvn.w	r2, #4
 80016e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2202      	movs	r2, #2
 80016ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f8c3 	bl	8001886 <HAL_TIM_IC_CaptureCallback>
 8001700:	e005      	b.n	800170e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f8b6 	bl	8001874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 f8c5 	bl	8001898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b08      	cmp	r3, #8
 8001720:	d122      	bne.n	8001768 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b08      	cmp	r3, #8
 800172e:	d11b      	bne.n	8001768 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f06f 0208 	mvn.w	r2, #8
 8001738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2204      	movs	r2, #4
 800173e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f899 	bl	8001886 <HAL_TIM_IC_CaptureCallback>
 8001754:	e005      	b.n	8001762 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f88c 	bl	8001874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f89b 	bl	8001898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	f003 0310 	and.w	r3, r3, #16
 8001772:	2b10      	cmp	r3, #16
 8001774:	d122      	bne.n	80017bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	2b10      	cmp	r3, #16
 8001782:	d11b      	bne.n	80017bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f06f 0210 	mvn.w	r2, #16
 800178c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2208      	movs	r2, #8
 8001792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f86f 	bl	8001886 <HAL_TIM_IC_CaptureCallback>
 80017a8:	e005      	b.n	80017b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f862 	bl	8001874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 f871 	bl	8001898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d10e      	bne.n	80017e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d107      	bne.n	80017e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f06f 0201 	mvn.w	r2, #1
 80017e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7fe fdf2 	bl	80003cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f2:	2b80      	cmp	r3, #128	; 0x80
 80017f4:	d10e      	bne.n	8001814 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001800:	2b80      	cmp	r3, #128	; 0x80
 8001802:	d107      	bne.n	8001814 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800180c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f8bf 	bl	8001992 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800181e:	2b40      	cmp	r3, #64	; 0x40
 8001820:	d10e      	bne.n	8001840 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800182c:	2b40      	cmp	r3, #64	; 0x40
 800182e:	d107      	bne.n	8001840 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 f835 	bl	80018aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	f003 0320 	and.w	r3, r3, #32
 800184a:	2b20      	cmp	r3, #32
 800184c:	d10e      	bne.n	800186c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	f003 0320 	and.w	r3, r3, #32
 8001858:	2b20      	cmp	r3, #32
 800185a:	d107      	bne.n	800186c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f06f 0220 	mvn.w	r2, #32
 8001864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f88a 	bl	8001980 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a29      	ldr	r2, [pc, #164]	; (8001974 <TIM_Base_SetConfig+0xb8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d00b      	beq.n	80018ec <TIM_Base_SetConfig+0x30>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018da:	d007      	beq.n	80018ec <TIM_Base_SetConfig+0x30>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a26      	ldr	r2, [pc, #152]	; (8001978 <TIM_Base_SetConfig+0xbc>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d003      	beq.n	80018ec <TIM_Base_SetConfig+0x30>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a25      	ldr	r2, [pc, #148]	; (800197c <TIM_Base_SetConfig+0xc0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d108      	bne.n	80018fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a1c      	ldr	r2, [pc, #112]	; (8001974 <TIM_Base_SetConfig+0xb8>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d00b      	beq.n	800191e <TIM_Base_SetConfig+0x62>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800190c:	d007      	beq.n	800191e <TIM_Base_SetConfig+0x62>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a19      	ldr	r2, [pc, #100]	; (8001978 <TIM_Base_SetConfig+0xbc>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d003      	beq.n	800191e <TIM_Base_SetConfig+0x62>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a18      	ldr	r2, [pc, #96]	; (800197c <TIM_Base_SetConfig+0xc0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d108      	bne.n	8001930 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	4313      	orrs	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	4313      	orrs	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a07      	ldr	r2, [pc, #28]	; (8001974 <TIM_Base_SetConfig+0xb8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d103      	bne.n	8001964 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	691a      	ldr	r2, [r3, #16]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	615a      	str	r2, [r3, #20]
}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	40012c00 	.word	0x40012c00
 8001978:	40000400 	.word	0x40000400
 800197c:	40000800 	.word	0x40000800

08001980 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr

08001992 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e03f      	b.n	8001a36 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d106      	bne.n	80019d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7fe fd4e 	bl	800046c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2224      	movs	r2, #36	; 0x24
 80019d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f905 	bl	8001bf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	691a      	ldr	r2, [r3, #16]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	695a      	ldr	r2, [r3, #20]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68da      	ldr	r2, [r3, #12]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2220      	movs	r2, #32
 8001a28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2220      	movs	r2, #32
 8001a30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b08a      	sub	sp, #40	; 0x28
 8001a42:	af02      	add	r7, sp, #8
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	603b      	str	r3, [r7, #0]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b20      	cmp	r3, #32
 8001a5c:	d17c      	bne.n	8001b58 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <HAL_UART_Transmit+0x2c>
 8001a64:	88fb      	ldrh	r3, [r7, #6]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e075      	b.n	8001b5a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_UART_Transmit+0x3e>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e06e      	b.n	8001b5a <HAL_UART_Transmit+0x11c>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2221      	movs	r2, #33	; 0x21
 8001a8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001a92:	f7fe fe85 	bl	80007a0 <HAL_GetTick>
 8001a96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	88fa      	ldrh	r2, [r7, #6]
 8001a9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	88fa      	ldrh	r2, [r7, #6]
 8001aa2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aac:	d108      	bne.n	8001ac0 <HAL_UART_Transmit+0x82>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d104      	bne.n	8001ac0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	61bb      	str	r3, [r7, #24]
 8001abe:	e003      	b.n	8001ac8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001ad0:	e02a      	b.n	8001b28 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2180      	movs	r1, #128	; 0x80
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f000 f840 	bl	8001b62 <UART_WaitOnFlagUntilTimeout>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e036      	b.n	8001b5a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10b      	bne.n	8001b0a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	3302      	adds	r3, #2
 8001b06:	61bb      	str	r3, [r7, #24]
 8001b08:	e007      	b.n	8001b1a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	781a      	ldrb	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	3301      	adds	r3, #1
 8001b18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	3b01      	subs	r3, #1
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1cf      	bne.n	8001ad2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2140      	movs	r1, #64	; 0x40
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f000 f810 	bl	8001b62 <UART_WaitOnFlagUntilTimeout>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e006      	b.n	8001b5a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2220      	movs	r2, #32
 8001b50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	e000      	b.n	8001b5a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001b58:	2302      	movs	r3, #2
  }
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3720      	adds	r7, #32
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b084      	sub	sp, #16
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	603b      	str	r3, [r7, #0]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b72:	e02c      	b.n	8001bce <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b7a:	d028      	beq.n	8001bce <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d007      	beq.n	8001b92 <UART_WaitOnFlagUntilTimeout+0x30>
 8001b82:	f7fe fe0d 	bl	80007a0 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d21d      	bcs.n	8001bce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ba0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	695a      	ldr	r2, [r3, #20]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0201 	bic.w	r2, r2, #1
 8001bb0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e00f      	b.n	8001bee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	bf0c      	ite	eq
 8001bde:	2301      	moveq	r3, #1
 8001be0:	2300      	movne	r3, #0
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	461a      	mov	r2, r3
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d0c3      	beq.n	8001b74 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001c32:	f023 030c 	bic.w	r3, r3, #12
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6812      	ldr	r2, [r2, #0]
 8001c3a:	68b9      	ldr	r1, [r7, #8]
 8001c3c:	430b      	orrs	r3, r1
 8001c3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699a      	ldr	r2, [r3, #24]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a2c      	ldr	r2, [pc, #176]	; (8001d0c <UART_SetConfig+0x114>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d103      	bne.n	8001c68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001c60:	f7ff fbf4 	bl	800144c <HAL_RCC_GetPCLK2Freq>
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	e002      	b.n	8001c6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001c68:	f7ff fbdc 	bl	8001424 <HAL_RCC_GetPCLK1Freq>
 8001c6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	009a      	lsls	r2, r3, #2
 8001c78:	441a      	add	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c84:	4a22      	ldr	r2, [pc, #136]	; (8001d10 <UART_SetConfig+0x118>)
 8001c86:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8a:	095b      	lsrs	r3, r3, #5
 8001c8c:	0119      	lsls	r1, r3, #4
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	009a      	lsls	r2, r3, #2
 8001c98:	441a      	add	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ca4:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <UART_SetConfig+0x118>)
 8001ca6:	fba3 0302 	umull	r0, r3, r3, r2
 8001caa:	095b      	lsrs	r3, r3, #5
 8001cac:	2064      	movs	r0, #100	; 0x64
 8001cae:	fb00 f303 	mul.w	r3, r0, r3
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	3332      	adds	r3, #50	; 0x32
 8001cb8:	4a15      	ldr	r2, [pc, #84]	; (8001d10 <UART_SetConfig+0x118>)
 8001cba:	fba2 2303 	umull	r2, r3, r2, r3
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cc4:	4419      	add	r1, r3
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	009a      	lsls	r2, r3, #2
 8001cd0:	441a      	add	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <UART_SetConfig+0x118>)
 8001cde:	fba3 0302 	umull	r0, r3, r3, r2
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	2064      	movs	r0, #100	; 0x64
 8001ce6:	fb00 f303 	mul.w	r3, r0, r3
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	3332      	adds	r3, #50	; 0x32
 8001cf0:	4a07      	ldr	r2, [pc, #28]	; (8001d10 <UART_SetConfig+0x118>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	095b      	lsrs	r3, r3, #5
 8001cf8:	f003 020f 	and.w	r2, r3, #15
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	440a      	add	r2, r1
 8001d02:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001d04:	bf00      	nop
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40013800 	.word	0x40013800
 8001d10:	51eb851f 	.word	0x51eb851f

08001d14 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001d22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d26:	2b84      	cmp	r3, #132	; 0x84
 8001d28:	d005      	beq.n	8001d36 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001d2a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4413      	add	r3, r2
 8001d32:	3303      	adds	r3, #3
 8001d34:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001d36:	68fb      	ldr	r3, [r7, #12]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr

08001d42 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d48:	f3ef 8305 	mrs	r3, IPSR
 8001d4c:	607b      	str	r3, [r7, #4]
  return(result);
 8001d4e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	bf14      	ite	ne
 8001d54:	2301      	movne	r3, #1
 8001d56:	2300      	moveq	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001d68:	f001 f8f0 	bl	8002f4c <vTaskStartScheduler>
  
  return osOK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001d72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d74:	b089      	sub	sp, #36	; 0x24
 8001d76:	af04      	add	r7, sp, #16
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d020      	beq.n	8001dc6 <osThreadCreate+0x54>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d01c      	beq.n	8001dc6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685c      	ldr	r4, [r3, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681d      	ldr	r5, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691e      	ldr	r6, [r3, #16]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ffb8 	bl	8001d14 <makeFreeRtosPriority>
 8001da4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001dae:	9202      	str	r2, [sp, #8]
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	9100      	str	r1, [sp, #0]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	4632      	mov	r2, r6
 8001db8:	4629      	mov	r1, r5
 8001dba:	4620      	mov	r0, r4
 8001dbc:	f000 ff08 	bl	8002bd0 <xTaskCreateStatic>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	e01c      	b.n	8001e00 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685c      	ldr	r4, [r3, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001dd2:	b29e      	uxth	r6, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff ff9a 	bl	8001d14 <makeFreeRtosPriority>
 8001de0:	4602      	mov	r2, r0
 8001de2:	f107 030c 	add.w	r3, r7, #12
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	9200      	str	r2, [sp, #0]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	4632      	mov	r2, r6
 8001dee:	4629      	mov	r1, r5
 8001df0:	4620      	mov	r0, r4
 8001df2:	f000 ff49 	bl	8002c88 <xTaskCreate>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d001      	beq.n	8001e00 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	e000      	b.n	8001e02 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001e00:	68fb      	ldr	r3, [r7, #12]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e0a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b084      	sub	sp, #16
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <osDelay+0x16>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	e000      	b.n	8001e22 <osDelay+0x18>
 8001e20:	2301      	movs	r3, #1
 8001e22:	4618      	mov	r0, r3
 8001e24:	f001 f85e 	bl	8002ee4 <vTaskDelay>
  
  return osOK;
 8001e28:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8001e32:	b590      	push	{r4, r7, lr}
 8001e34:	b085      	sub	sp, #20
 8001e36:	af02      	add	r7, sp, #8
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d011      	beq.n	8001e68 <osMessageCreate+0x36>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00d      	beq.n	8001e68 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6859      	ldr	r1, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2400      	movs	r4, #0
 8001e5e:	9400      	str	r4, [sp, #0]
 8001e60:	f000 f9dc 	bl	800221c <xQueueGenericCreateStatic>
 8001e64:	4603      	mov	r3, r0
 8001e66:	e008      	b.n	8001e7a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	4619      	mov	r1, r3
 8001e74:	f000 fa49 	bl	800230a <xQueueGenericCreate>
 8001e78:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd90      	pop	{r4, r7, pc}
	...

08001e84 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <osMessagePut+0x1e>
    ticks = 1;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8001ea2:	f7ff ff4e 	bl	8001d42 <inHandlerMode>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d018      	beq.n	8001ede <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8001eac:	f107 0210 	add.w	r2, r7, #16
 8001eb0:	f107 0108 	add.w	r1, r7, #8
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 fb82 	bl	80025c0 <xQueueGenericSendFromISR>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d001      	beq.n	8001ec6 <osMessagePut+0x42>
      return osErrorOS;
 8001ec2:	23ff      	movs	r3, #255	; 0xff
 8001ec4:	e018      	b.n	8001ef8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d014      	beq.n	8001ef6 <osMessagePut+0x72>
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <osMessagePut+0x7c>)
 8001ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	f3bf 8f4f 	dsb	sy
 8001ed8:	f3bf 8f6f 	isb	sy
 8001edc:	e00b      	b.n	8001ef6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8001ede:	f107 0108 	add.w	r1, r7, #8
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 fa6c 	bl	80023c4 <xQueueGenericSend>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d001      	beq.n	8001ef6 <osMessagePut+0x72>
      return osErrorOS;
 8001ef2:	23ff      	movs	r3, #255	; 0xff
 8001ef4:	e000      	b.n	8001ef8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	e000ed04 	.word	0xe000ed04

08001f04 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8001f04:	b590      	push	{r4, r7, lr}
 8001f06:	b08b      	sub	sp, #44	; 0x2c
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10a      	bne.n	8001f34 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	617b      	str	r3, [r7, #20]
    return event;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	461c      	mov	r4, r3
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f32:	e054      	b.n	8001fde <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f42:	d103      	bne.n	8001f4c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8001f44:	f04f 33ff 	mov.w	r3, #4294967295
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
 8001f4a:	e009      	b.n	8001f60 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d006      	beq.n	8001f60 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <osMessageGet+0x5c>
      ticks = 1;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8001f60:	f7ff feef 	bl	8001d42 <inHandlerMode>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d01c      	beq.n	8001fa4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8001f6a:	f107 0220 	add.w	r2, r7, #32
 8001f6e:	f107 0314 	add.w	r3, r7, #20
 8001f72:	3304      	adds	r3, #4
 8001f74:	4619      	mov	r1, r3
 8001f76:	68b8      	ldr	r0, [r7, #8]
 8001f78:	f000 fc9a 	bl	80028b0 <xQueueReceiveFromISR>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d102      	bne.n	8001f88 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8001f82:	2310      	movs	r3, #16
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	e001      	b.n	8001f8c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d01d      	beq.n	8001fce <osMessageGet+0xca>
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <osMessageGet+0xe4>)
 8001f94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	f3bf 8f4f 	dsb	sy
 8001f9e:	f3bf 8f6f 	isb	sy
 8001fa2:	e014      	b.n	8001fce <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	3304      	adds	r3, #4
 8001faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fac:	4619      	mov	r1, r3
 8001fae:	68b8      	ldr	r0, [r7, #8]
 8001fb0:	f000 fb9e 	bl	80026f0 <xQueueReceive>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d102      	bne.n	8001fc0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8001fba:	2310      	movs	r3, #16
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	e006      	b.n	8001fce <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <osMessageGet+0xc6>
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e000      	b.n	8001fcc <osMessageGet+0xc8>
 8001fca:	2340      	movs	r3, #64	; 0x40
 8001fcc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	461c      	mov	r4, r3
 8001fd2:	f107 0314 	add.w	r3, r7, #20
 8001fd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001fda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	372c      	adds	r7, #44	; 0x2c
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd90      	pop	{r4, r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	e000ed04 	.word	0xe000ed04

08001fec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f103 0208 	add.w	r2, r3, #8
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f04f 32ff 	mov.w	r2, #4294967295
 8002004:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f103 0208 	add.w	r2, r3, #8
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f103 0208 	add.w	r2, r3, #8
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr

0800202a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr

08002042 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002042:	b480      	push	{r7}
 8002044:	b085      	sub	sp, #20
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	601a      	str	r2, [r3, #0]
}
 800207e:	bf00      	nop
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209e:	d103      	bne.n	80020a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	e00c      	b.n	80020c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3308      	adds	r3, #8
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	e002      	b.n	80020b6 <vListInsert+0x2e>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d2f6      	bcs.n	80020b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	601a      	str	r2, [r3, #0]
}
 80020ee:	bf00      	nop
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6892      	ldr	r2, [r2, #8]
 800210e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6852      	ldr	r2, [r2, #4]
 8002118:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	429a      	cmp	r2, r3
 8002122:	d103      	bne.n	800212c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	1e5a      	subs	r2, r3, #1
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
	...

0800214c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10a      	bne.n	8002176 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002164:	f383 8811 	msr	BASEPRI, r3
 8002168:	f3bf 8f6f 	isb	sy
 800216c:	f3bf 8f4f 	dsb	sy
 8002170:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002172:	bf00      	nop
 8002174:	e7fe      	b.n	8002174 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002176:	f001 fce9 	bl	8003b4c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002182:	68f9      	ldr	r1, [r7, #12]
 8002184:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002186:	fb01 f303 	mul.w	r3, r1, r3
 800218a:	441a      	add	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a6:	3b01      	subs	r3, #1
 80021a8:	68f9      	ldr	r1, [r7, #12]
 80021aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021ac:	fb01 f303 	mul.w	r3, r1, r3
 80021b0:	441a      	add	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	22ff      	movs	r2, #255	; 0xff
 80021ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	22ff      	movs	r2, #255	; 0xff
 80021c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d114      	bne.n	80021f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d01a      	beq.n	800220a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	3310      	adds	r3, #16
 80021d8:	4618      	mov	r0, r3
 80021da:	f001 f8fd 	bl	80033d8 <xTaskRemoveFromEventList>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d012      	beq.n	800220a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80021e4:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <xQueueGenericReset+0xcc>)
 80021e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	f3bf 8f4f 	dsb	sy
 80021f0:	f3bf 8f6f 	isb	sy
 80021f4:	e009      	b.n	800220a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	3310      	adds	r3, #16
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff fef6 	bl	8001fec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	3324      	adds	r3, #36	; 0x24
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fef1 	bl	8001fec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800220a:	f001 fccf 	bl	8003bac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800220e:	2301      	movs	r3, #1
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	e000ed04 	.word	0xe000ed04

0800221c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08e      	sub	sp, #56	; 0x38
 8002220:	af02      	add	r7, sp, #8
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10a      	bne.n	8002246 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002234:	f383 8811 	msr	BASEPRI, r3
 8002238:	f3bf 8f6f 	isb	sy
 800223c:	f3bf 8f4f 	dsb	sy
 8002240:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002242:	bf00      	nop
 8002244:	e7fe      	b.n	8002244 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10a      	bne.n	8002262 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800224c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002250:	f383 8811 	msr	BASEPRI, r3
 8002254:	f3bf 8f6f 	isb	sy
 8002258:	f3bf 8f4f 	dsb	sy
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800225e:	bf00      	nop
 8002260:	e7fe      	b.n	8002260 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <xQueueGenericCreateStatic+0x52>
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <xQueueGenericCreateStatic+0x56>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <xQueueGenericCreateStatic+0x58>
 8002272:	2300      	movs	r3, #0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10a      	bne.n	800228e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800227c:	f383 8811 	msr	BASEPRI, r3
 8002280:	f3bf 8f6f 	isb	sy
 8002284:	f3bf 8f4f 	dsb	sy
 8002288:	623b      	str	r3, [r7, #32]
}
 800228a:	bf00      	nop
 800228c:	e7fe      	b.n	800228c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d102      	bne.n	800229a <xQueueGenericCreateStatic+0x7e>
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <xQueueGenericCreateStatic+0x82>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <xQueueGenericCreateStatic+0x84>
 800229e:	2300      	movs	r3, #0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10a      	bne.n	80022ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80022a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a8:	f383 8811 	msr	BASEPRI, r3
 80022ac:	f3bf 8f6f 	isb	sy
 80022b0:	f3bf 8f4f 	dsb	sy
 80022b4:	61fb      	str	r3, [r7, #28]
}
 80022b6:	bf00      	nop
 80022b8:	e7fe      	b.n	80022b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80022ba:	2348      	movs	r3, #72	; 0x48
 80022bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2b48      	cmp	r3, #72	; 0x48
 80022c2:	d00a      	beq.n	80022da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80022c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c8:	f383 8811 	msr	BASEPRI, r3
 80022cc:	f3bf 8f6f 	isb	sy
 80022d0:	f3bf 8f4f 	dsb	sy
 80022d4:	61bb      	str	r3, [r7, #24]
}
 80022d6:	bf00      	nop
 80022d8:	e7fe      	b.n	80022d8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80022de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00d      	beq.n	8002300 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80022e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80022ec:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80022f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	4613      	mov	r3, r2
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f843 	bl	8002386 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002302:	4618      	mov	r0, r3
 8002304:	3730      	adds	r7, #48	; 0x30
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800230a:	b580      	push	{r7, lr}
 800230c:	b08a      	sub	sp, #40	; 0x28
 800230e:	af02      	add	r7, sp, #8
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	4613      	mov	r3, r2
 8002316:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10a      	bne.n	8002334 <xQueueGenericCreate+0x2a>
	__asm volatile
 800231e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002322:	f383 8811 	msr	BASEPRI, r3
 8002326:	f3bf 8f6f 	isb	sy
 800232a:	f3bf 8f4f 	dsb	sy
 800232e:	613b      	str	r3, [r7, #16]
}
 8002330:	bf00      	nop
 8002332:	e7fe      	b.n	8002332 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d102      	bne.n	8002340 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
 800233e:	e004      	b.n	800234a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	fb02 f303 	mul.w	r3, r2, r3
 8002348:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3348      	adds	r3, #72	; 0x48
 800234e:	4618      	mov	r0, r3
 8002350:	f001 fcfc 	bl	8003d4c <pvPortMalloc>
 8002354:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00f      	beq.n	800237c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	3348      	adds	r3, #72	; 0x48
 8002360:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800236a:	79fa      	ldrb	r2, [r7, #7]
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	4613      	mov	r3, r2
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 f805 	bl	8002386 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800237c:	69bb      	ldr	r3, [r7, #24]
	}
 800237e:	4618      	mov	r0, r3
 8002380:	3720      	adds	r7, #32
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d103      	bne.n	80023a2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	e002      	b.n	80023a8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023b4:	2101      	movs	r1, #1
 80023b6:	69b8      	ldr	r0, [r7, #24]
 80023b8:	f7ff fec8 	bl	800214c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80023bc:	bf00      	nop
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08e      	sub	sp, #56	; 0x38
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80023d2:	2300      	movs	r3, #0
 80023d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80023da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10a      	bne.n	80023f6 <xQueueGenericSend+0x32>
	__asm volatile
 80023e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e4:	f383 8811 	msr	BASEPRI, r3
 80023e8:	f3bf 8f6f 	isb	sy
 80023ec:	f3bf 8f4f 	dsb	sy
 80023f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80023f2:	bf00      	nop
 80023f4:	e7fe      	b.n	80023f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d103      	bne.n	8002404 <xQueueGenericSend+0x40>
 80023fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <xQueueGenericSend+0x44>
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <xQueueGenericSend+0x46>
 8002408:	2300      	movs	r3, #0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10a      	bne.n	8002424 <xQueueGenericSend+0x60>
	__asm volatile
 800240e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002412:	f383 8811 	msr	BASEPRI, r3
 8002416:	f3bf 8f6f 	isb	sy
 800241a:	f3bf 8f4f 	dsb	sy
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002420:	bf00      	nop
 8002422:	e7fe      	b.n	8002422 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d103      	bne.n	8002432 <xQueueGenericSend+0x6e>
 800242a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <xQueueGenericSend+0x72>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <xQueueGenericSend+0x74>
 8002436:	2300      	movs	r3, #0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10a      	bne.n	8002452 <xQueueGenericSend+0x8e>
	__asm volatile
 800243c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002440:	f383 8811 	msr	BASEPRI, r3
 8002444:	f3bf 8f6f 	isb	sy
 8002448:	f3bf 8f4f 	dsb	sy
 800244c:	623b      	str	r3, [r7, #32]
}
 800244e:	bf00      	nop
 8002450:	e7fe      	b.n	8002450 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002452:	f001 f981 	bl	8003758 <xTaskGetSchedulerState>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d102      	bne.n	8002462 <xQueueGenericSend+0x9e>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <xQueueGenericSend+0xa2>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <xQueueGenericSend+0xa4>
 8002466:	2300      	movs	r3, #0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10a      	bne.n	8002482 <xQueueGenericSend+0xbe>
	__asm volatile
 800246c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002470:	f383 8811 	msr	BASEPRI, r3
 8002474:	f3bf 8f6f 	isb	sy
 8002478:	f3bf 8f4f 	dsb	sy
 800247c:	61fb      	str	r3, [r7, #28]
}
 800247e:	bf00      	nop
 8002480:	e7fe      	b.n	8002480 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002482:	f001 fb63 	bl	8003b4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800248a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248e:	429a      	cmp	r2, r3
 8002490:	d302      	bcc.n	8002498 <xQueueGenericSend+0xd4>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d129      	bne.n	80024ec <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	68b9      	ldr	r1, [r7, #8]
 800249c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800249e:	f000 fa87 	bl	80029b0 <prvCopyDataToQueue>
 80024a2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d010      	beq.n	80024ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ae:	3324      	adds	r3, #36	; 0x24
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 ff91 	bl	80033d8 <xTaskRemoveFromEventList>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d013      	beq.n	80024e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80024bc:	4b3f      	ldr	r3, [pc, #252]	; (80025bc <xQueueGenericSend+0x1f8>)
 80024be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	f3bf 8f4f 	dsb	sy
 80024c8:	f3bf 8f6f 	isb	sy
 80024cc:	e00a      	b.n	80024e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80024ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d007      	beq.n	80024e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80024d4:	4b39      	ldr	r3, [pc, #228]	; (80025bc <xQueueGenericSend+0x1f8>)
 80024d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80024e4:	f001 fb62 	bl	8003bac <vPortExitCritical>
				return pdPASS;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e063      	b.n	80025b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d103      	bne.n	80024fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80024f2:	f001 fb5b 	bl	8003bac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	e05c      	b.n	80025b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80024fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d106      	bne.n	800250e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	4618      	mov	r0, r3
 8002506:	f000 ffc9 	bl	800349c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800250a:	2301      	movs	r3, #1
 800250c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800250e:	f001 fb4d 	bl	8003bac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002512:	f000 fd7b 	bl	800300c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002516:	f001 fb19 	bl	8003b4c <vPortEnterCritical>
 800251a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002520:	b25b      	sxtb	r3, r3
 8002522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002526:	d103      	bne.n	8002530 <xQueueGenericSend+0x16c>
 8002528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002532:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002536:	b25b      	sxtb	r3, r3
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d103      	bne.n	8002546 <xQueueGenericSend+0x182>
 800253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002546:	f001 fb31 	bl	8003bac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800254a:	1d3a      	adds	r2, r7, #4
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	4611      	mov	r1, r2
 8002552:	4618      	mov	r0, r3
 8002554:	f000 ffb8 	bl	80034c8 <xTaskCheckForTimeOut>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d124      	bne.n	80025a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800255e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002560:	f000 fb1e 	bl	8002ba0 <prvIsQueueFull>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d018      	beq.n	800259c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800256a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256c:	3310      	adds	r3, #16
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	4611      	mov	r1, r2
 8002572:	4618      	mov	r0, r3
 8002574:	f000 ff0c 	bl	8003390 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002578:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800257a:	f000 faa9 	bl	8002ad0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800257e:	f000 fd53 	bl	8003028 <xTaskResumeAll>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	f47f af7c 	bne.w	8002482 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800258a:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <xQueueGenericSend+0x1f8>)
 800258c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	f3bf 8f4f 	dsb	sy
 8002596:	f3bf 8f6f 	isb	sy
 800259a:	e772      	b.n	8002482 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800259c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800259e:	f000 fa97 	bl	8002ad0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025a2:	f000 fd41 	bl	8003028 <xTaskResumeAll>
 80025a6:	e76c      	b.n	8002482 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80025a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025aa:	f000 fa91 	bl	8002ad0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80025ae:	f000 fd3b 	bl	8003028 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80025b2:	2300      	movs	r3, #0
		}
	}
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3738      	adds	r7, #56	; 0x38
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	e000ed04 	.word	0xe000ed04

080025c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08e      	sub	sp, #56	; 0x38
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80025d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10a      	bne.n	80025ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80025d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025dc:	f383 8811 	msr	BASEPRI, r3
 80025e0:	f3bf 8f6f 	isb	sy
 80025e4:	f3bf 8f4f 	dsb	sy
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80025ea:	bf00      	nop
 80025ec:	e7fe      	b.n	80025ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d103      	bne.n	80025fc <xQueueGenericSendFromISR+0x3c>
 80025f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <xQueueGenericSendFromISR+0x40>
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <xQueueGenericSendFromISR+0x42>
 8002600:	2300      	movs	r3, #0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10a      	bne.n	800261c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260a:	f383 8811 	msr	BASEPRI, r3
 800260e:	f3bf 8f6f 	isb	sy
 8002612:	f3bf 8f4f 	dsb	sy
 8002616:	623b      	str	r3, [r7, #32]
}
 8002618:	bf00      	nop
 800261a:	e7fe      	b.n	800261a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d103      	bne.n	800262a <xQueueGenericSendFromISR+0x6a>
 8002622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <xQueueGenericSendFromISR+0x6e>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <xQueueGenericSendFromISR+0x70>
 800262e:	2300      	movs	r3, #0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10a      	bne.n	800264a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002638:	f383 8811 	msr	BASEPRI, r3
 800263c:	f3bf 8f6f 	isb	sy
 8002640:	f3bf 8f4f 	dsb	sy
 8002644:	61fb      	str	r3, [r7, #28]
}
 8002646:	bf00      	nop
 8002648:	e7fe      	b.n	8002648 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800264a:	f001 fb41 	bl	8003cd0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800264e:	f3ef 8211 	mrs	r2, BASEPRI
 8002652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002656:	f383 8811 	msr	BASEPRI, r3
 800265a:	f3bf 8f6f 	isb	sy
 800265e:	f3bf 8f4f 	dsb	sy
 8002662:	61ba      	str	r2, [r7, #24]
 8002664:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002666:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002668:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800266a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800266e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002672:	429a      	cmp	r2, r3
 8002674:	d302      	bcc.n	800267c <xQueueGenericSendFromISR+0xbc>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b02      	cmp	r3, #2
 800267a:	d12c      	bne.n	80026d6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800267c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	68b9      	ldr	r1, [r7, #8]
 800268a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800268c:	f000 f990 	bl	80029b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002690:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002698:	d112      	bne.n	80026c0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800269a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d016      	beq.n	80026d0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a4:	3324      	adds	r3, #36	; 0x24
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fe96 	bl	80033d8 <xTaskRemoveFromEventList>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00e      	beq.n	80026d0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00b      	beq.n	80026d0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	e007      	b.n	80026d0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80026c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80026c4:	3301      	adds	r3, #1
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	b25a      	sxtb	r2, r3
 80026ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80026d0:	2301      	movs	r3, #1
 80026d2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80026d4:	e001      	b.n	80026da <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	637b      	str	r3, [r7, #52]	; 0x34
 80026da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026dc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80026e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80026e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3738      	adds	r7, #56	; 0x38
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08c      	sub	sp, #48	; 0x30
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80026fc:	2300      	movs	r3, #0
 80026fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10a      	bne.n	8002720 <xQueueReceive+0x30>
	__asm volatile
 800270a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800270e:	f383 8811 	msr	BASEPRI, r3
 8002712:	f3bf 8f6f 	isb	sy
 8002716:	f3bf 8f4f 	dsb	sy
 800271a:	623b      	str	r3, [r7, #32]
}
 800271c:	bf00      	nop
 800271e:	e7fe      	b.n	800271e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d103      	bne.n	800272e <xQueueReceive+0x3e>
 8002726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <xQueueReceive+0x42>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <xQueueReceive+0x44>
 8002732:	2300      	movs	r3, #0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10a      	bne.n	800274e <xQueueReceive+0x5e>
	__asm volatile
 8002738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273c:	f383 8811 	msr	BASEPRI, r3
 8002740:	f3bf 8f6f 	isb	sy
 8002744:	f3bf 8f4f 	dsb	sy
 8002748:	61fb      	str	r3, [r7, #28]
}
 800274a:	bf00      	nop
 800274c:	e7fe      	b.n	800274c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800274e:	f001 f803 	bl	8003758 <xTaskGetSchedulerState>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d102      	bne.n	800275e <xQueueReceive+0x6e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <xQueueReceive+0x72>
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <xQueueReceive+0x74>
 8002762:	2300      	movs	r3, #0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10a      	bne.n	800277e <xQueueReceive+0x8e>
	__asm volatile
 8002768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276c:	f383 8811 	msr	BASEPRI, r3
 8002770:	f3bf 8f6f 	isb	sy
 8002774:	f3bf 8f4f 	dsb	sy
 8002778:	61bb      	str	r3, [r7, #24]
}
 800277a:	bf00      	nop
 800277c:	e7fe      	b.n	800277c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800277e:	f001 f9e5 	bl	8003b4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002786:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	2b00      	cmp	r3, #0
 800278c:	d01f      	beq.n	80027ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800278e:	68b9      	ldr	r1, [r7, #8]
 8002790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002792:	f000 f977 	bl	8002a84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	1e5a      	subs	r2, r3, #1
 800279a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00f      	beq.n	80027c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a8:	3310      	adds	r3, #16
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 fe14 	bl	80033d8 <xTaskRemoveFromEventList>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d007      	beq.n	80027c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80027b6:	4b3d      	ldr	r3, [pc, #244]	; (80028ac <xQueueReceive+0x1bc>)
 80027b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	f3bf 8f4f 	dsb	sy
 80027c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80027c6:	f001 f9f1 	bl	8003bac <vPortExitCritical>
				return pdPASS;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e069      	b.n	80028a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d103      	bne.n	80027dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027d4:	f001 f9ea 	bl	8003bac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80027d8:	2300      	movs	r3, #0
 80027da:	e062      	b.n	80028a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d106      	bne.n	80027f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027e2:	f107 0310 	add.w	r3, r7, #16
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 fe58 	bl	800349c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027ec:	2301      	movs	r3, #1
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027f0:	f001 f9dc 	bl	8003bac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027f4:	f000 fc0a 	bl	800300c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027f8:	f001 f9a8 	bl	8003b4c <vPortEnterCritical>
 80027fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002802:	b25b      	sxtb	r3, r3
 8002804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002808:	d103      	bne.n	8002812 <xQueueReceive+0x122>
 800280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002814:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002818:	b25b      	sxtb	r3, r3
 800281a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281e:	d103      	bne.n	8002828 <xQueueReceive+0x138>
 8002820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002828:	f001 f9c0 	bl	8003bac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800282c:	1d3a      	adds	r2, r7, #4
 800282e:	f107 0310 	add.w	r3, r7, #16
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fe47 	bl	80034c8 <xTaskCheckForTimeOut>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d123      	bne.n	8002888 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002842:	f000 f997 	bl	8002b74 <prvIsQueueEmpty>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d017      	beq.n	800287c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800284c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284e:	3324      	adds	r3, #36	; 0x24
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	4611      	mov	r1, r2
 8002854:	4618      	mov	r0, r3
 8002856:	f000 fd9b 	bl	8003390 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800285a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800285c:	f000 f938 	bl	8002ad0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002860:	f000 fbe2 	bl	8003028 <xTaskResumeAll>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d189      	bne.n	800277e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800286a:	4b10      	ldr	r3, [pc, #64]	; (80028ac <xQueueReceive+0x1bc>)
 800286c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	f3bf 8f4f 	dsb	sy
 8002876:	f3bf 8f6f 	isb	sy
 800287a:	e780      	b.n	800277e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800287c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800287e:	f000 f927 	bl	8002ad0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002882:	f000 fbd1 	bl	8003028 <xTaskResumeAll>
 8002886:	e77a      	b.n	800277e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800288a:	f000 f921 	bl	8002ad0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800288e:	f000 fbcb 	bl	8003028 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002894:	f000 f96e 	bl	8002b74 <prvIsQueueEmpty>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	f43f af6f 	beq.w	800277e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80028a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3730      	adds	r7, #48	; 0x30
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	e000ed04 	.word	0xe000ed04

080028b0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08e      	sub	sp, #56	; 0x38
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80028c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10a      	bne.n	80028dc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80028c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ca:	f383 8811 	msr	BASEPRI, r3
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	f3bf 8f4f 	dsb	sy
 80028d6:	623b      	str	r3, [r7, #32]
}
 80028d8:	bf00      	nop
 80028da:	e7fe      	b.n	80028da <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d103      	bne.n	80028ea <xQueueReceiveFromISR+0x3a>
 80028e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <xQueueReceiveFromISR+0x3e>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <xQueueReceiveFromISR+0x40>
 80028ee:	2300      	movs	r3, #0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10a      	bne.n	800290a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80028f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f8:	f383 8811 	msr	BASEPRI, r3
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	61fb      	str	r3, [r7, #28]
}
 8002906:	bf00      	nop
 8002908:	e7fe      	b.n	8002908 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800290a:	f001 f9e1 	bl	8003cd0 <vPortValidateInterruptPriority>
	__asm volatile
 800290e:	f3ef 8211 	mrs	r2, BASEPRI
 8002912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002916:	f383 8811 	msr	BASEPRI, r3
 800291a:	f3bf 8f6f 	isb	sy
 800291e:	f3bf 8f4f 	dsb	sy
 8002922:	61ba      	str	r2, [r7, #24]
 8002924:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002926:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002928:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800292a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002932:	2b00      	cmp	r3, #0
 8002934:	d02f      	beq.n	8002996 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002938:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800293c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002940:	68b9      	ldr	r1, [r7, #8]
 8002942:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002944:	f000 f89e 	bl	8002a84 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294a:	1e5a      	subs	r2, r3, #1
 800294c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002950:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002958:	d112      	bne.n	8002980 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800295a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d016      	beq.n	8002990 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002964:	3310      	adds	r3, #16
 8002966:	4618      	mov	r0, r3
 8002968:	f000 fd36 	bl	80033d8 <xTaskRemoveFromEventList>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00e      	beq.n	8002990 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00b      	beq.n	8002990 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	e007      	b.n	8002990 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002984:	3301      	adds	r3, #1
 8002986:	b2db      	uxtb	r3, r3
 8002988:	b25a      	sxtb	r2, r3
 800298a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002990:	2301      	movs	r3, #1
 8002992:	637b      	str	r3, [r7, #52]	; 0x34
 8002994:	e001      	b.n	800299a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002996:	2300      	movs	r3, #0
 8002998:	637b      	str	r3, [r7, #52]	; 0x34
 800299a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	f383 8811 	msr	BASEPRI, r3
}
 80029a4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80029a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3738      	adds	r7, #56	; 0x38
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10d      	bne.n	80029ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d14d      	bne.n	8002a72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 feda 	bl	8003794 <xTaskPriorityDisinherit>
 80029e0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	605a      	str	r2, [r3, #4]
 80029e8:	e043      	b.n	8002a72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d119      	bne.n	8002a24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6898      	ldr	r0, [r3, #8]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	461a      	mov	r2, r3
 80029fa:	68b9      	ldr	r1, [r7, #8]
 80029fc:	f001 fba8 	bl	8004150 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	441a      	add	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d32b      	bcc.n	8002a72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	609a      	str	r2, [r3, #8]
 8002a22:	e026      	b.n	8002a72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	68d8      	ldr	r0, [r3, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	68b9      	ldr	r1, [r7, #8]
 8002a30:	f001 fb8e 	bl	8004150 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	425b      	negs	r3, r3
 8002a3e:	441a      	add	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d207      	bcs.n	8002a60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	425b      	negs	r3, r3
 8002a5a:	441a      	add	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d105      	bne.n	8002a72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002a7a:	697b      	ldr	r3, [r7, #20]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d018      	beq.n	8002ac8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	441a      	add	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d303      	bcc.n	8002ab8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68d9      	ldr	r1, [r3, #12]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	6838      	ldr	r0, [r7, #0]
 8002ac4:	f001 fb44 	bl	8004150 <memcpy>
	}
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ad8:	f001 f838 	bl	8003b4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ae2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ae4:	e011      	b.n	8002b0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d012      	beq.n	8002b14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3324      	adds	r3, #36	; 0x24
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 fc70 	bl	80033d8 <xTaskRemoveFromEventList>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002afe:	f000 fd45 	bl	800358c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	dce9      	bgt.n	8002ae6 <prvUnlockQueue+0x16>
 8002b12:	e000      	b.n	8002b16 <prvUnlockQueue+0x46>
					break;
 8002b14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	22ff      	movs	r2, #255	; 0xff
 8002b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002b1e:	f001 f845 	bl	8003bac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002b22:	f001 f813 	bl	8003b4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b2e:	e011      	b.n	8002b54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d012      	beq.n	8002b5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3310      	adds	r3, #16
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 fc4b 	bl	80033d8 <xTaskRemoveFromEventList>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002b48:	f000 fd20 	bl	800358c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002b4c:	7bbb      	ldrb	r3, [r7, #14]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	dce9      	bgt.n	8002b30 <prvUnlockQueue+0x60>
 8002b5c:	e000      	b.n	8002b60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002b5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	22ff      	movs	r2, #255	; 0xff
 8002b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002b68:	f001 f820 	bl	8003bac <vPortExitCritical>
}
 8002b6c:	bf00      	nop
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b7c:	f000 ffe6 	bl	8003b4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d102      	bne.n	8002b8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	e001      	b.n	8002b92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b92:	f001 f80b 	bl	8003bac <vPortExitCritical>

	return xReturn;
 8002b96:	68fb      	ldr	r3, [r7, #12]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ba8:	f000 ffd0 	bl	8003b4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d102      	bne.n	8002bbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	e001      	b.n	8002bc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002bc2:	f000 fff3 	bl	8003bac <vPortExitCritical>

	return xReturn;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08e      	sub	sp, #56	; 0x38
 8002bd4:	af04      	add	r7, sp, #16
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10a      	bne.n	8002bfa <xTaskCreateStatic+0x2a>
	__asm volatile
 8002be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be8:	f383 8811 	msr	BASEPRI, r3
 8002bec:	f3bf 8f6f 	isb	sy
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	623b      	str	r3, [r7, #32]
}
 8002bf6:	bf00      	nop
 8002bf8:	e7fe      	b.n	8002bf8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10a      	bne.n	8002c16 <xTaskCreateStatic+0x46>
	__asm volatile
 8002c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c04:	f383 8811 	msr	BASEPRI, r3
 8002c08:	f3bf 8f6f 	isb	sy
 8002c0c:	f3bf 8f4f 	dsb	sy
 8002c10:	61fb      	str	r3, [r7, #28]
}
 8002c12:	bf00      	nop
 8002c14:	e7fe      	b.n	8002c14 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c16:	2354      	movs	r3, #84	; 0x54
 8002c18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	2b54      	cmp	r3, #84	; 0x54
 8002c1e:	d00a      	beq.n	8002c36 <xTaskCreateStatic+0x66>
	__asm volatile
 8002c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c24:	f383 8811 	msr	BASEPRI, r3
 8002c28:	f3bf 8f6f 	isb	sy
 8002c2c:	f3bf 8f4f 	dsb	sy
 8002c30:	61bb      	str	r3, [r7, #24]
}
 8002c32:	bf00      	nop
 8002c34:	e7fe      	b.n	8002c34 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d01e      	beq.n	8002c7a <xTaskCreateStatic+0xaa>
 8002c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d01b      	beq.n	8002c7a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c4a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c54:	2300      	movs	r3, #0
 8002c56:	9303      	str	r3, [sp, #12]
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	f107 0314 	add.w	r3, r7, #20
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	68b9      	ldr	r1, [r7, #8]
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 f850 	bl	8002d12 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c74:	f000 f8cc 	bl	8002e10 <prvAddNewTaskToReadyList>
 8002c78:	e001      	b.n	8002c7e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c7e:	697b      	ldr	r3, [r7, #20]
	}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3728      	adds	r7, #40	; 0x28
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08c      	sub	sp, #48	; 0x30
 8002c8c:	af04      	add	r7, sp, #16
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	603b      	str	r3, [r7, #0]
 8002c94:	4613      	mov	r3, r2
 8002c96:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f001 f855 	bl	8003d4c <pvPortMalloc>
 8002ca2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00e      	beq.n	8002cc8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002caa:	2054      	movs	r0, #84	; 0x54
 8002cac:	f001 f84e 	bl	8003d4c <pvPortMalloc>
 8002cb0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	631a      	str	r2, [r3, #48]	; 0x30
 8002cbe:	e005      	b.n	8002ccc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002cc0:	6978      	ldr	r0, [r7, #20]
 8002cc2:	f001 f907 	bl	8003ed4 <vPortFree>
 8002cc6:	e001      	b.n	8002ccc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d017      	beq.n	8002d02 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cda:	88fa      	ldrh	r2, [r7, #6]
 8002cdc:	2300      	movs	r3, #0
 8002cde:	9303      	str	r3, [sp, #12]
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	9302      	str	r3, [sp, #8]
 8002ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce6:	9301      	str	r3, [sp, #4]
 8002ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	68b9      	ldr	r1, [r7, #8]
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 f80e 	bl	8002d12 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002cf6:	69f8      	ldr	r0, [r7, #28]
 8002cf8:	f000 f88a 	bl	8002e10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	61bb      	str	r3, [r7, #24]
 8002d00:	e002      	b.n	8002d08 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d02:	f04f 33ff 	mov.w	r3, #4294967295
 8002d06:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d08:	69bb      	ldr	r3, [r7, #24]
	}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3720      	adds	r7, #32
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b088      	sub	sp, #32
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	f023 0307 	bic.w	r3, r3, #7
 8002d38:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <prvInitialiseNewTask+0x48>
	__asm volatile
 8002d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d48:	f383 8811 	msr	BASEPRI, r3
 8002d4c:	f3bf 8f6f 	isb	sy
 8002d50:	f3bf 8f4f 	dsb	sy
 8002d54:	617b      	str	r3, [r7, #20]
}
 8002d56:	bf00      	nop
 8002d58:	e7fe      	b.n	8002d58 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
 8002d5e:	e012      	b.n	8002d86 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	4413      	add	r3, r2
 8002d66:	7819      	ldrb	r1, [r3, #0]
 8002d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3334      	adds	r3, #52	; 0x34
 8002d70:	460a      	mov	r2, r1
 8002d72:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	4413      	add	r3, r2
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d006      	beq.n	8002d8e <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	3301      	adds	r3, #1
 8002d84:	61fb      	str	r3, [r7, #28]
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	2b0f      	cmp	r3, #15
 8002d8a:	d9e9      	bls.n	8002d60 <prvInitialiseNewTask+0x4e>
 8002d8c:	e000      	b.n	8002d90 <prvInitialiseNewTask+0x7e>
		{
			break;
 8002d8e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9a:	2b06      	cmp	r3, #6
 8002d9c:	d901      	bls.n	8002da2 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d9e:	2306      	movs	r3, #6
 8002da0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002da6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dac:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db0:	2200      	movs	r2, #0
 8002db2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	3304      	adds	r3, #4
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff f936 	bl	800202a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc0:	3318      	adds	r3, #24
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff f931 	bl	800202a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dcc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd0:	f1c3 0207 	rsb	r2, r3, #7
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de0:	2200      	movs	r2, #0
 8002de2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	68f9      	ldr	r1, [r7, #12]
 8002df0:	69b8      	ldr	r0, [r7, #24]
 8002df2:	f000 fdbb 	bl	800396c <pxPortInitialiseStack>
 8002df6:	4602      	mov	r2, r0
 8002df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e06:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e08:	bf00      	nop
 8002e0a:	3720      	adds	r7, #32
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e18:	f000 fe98 	bl	8003b4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e1c:	4b2a      	ldr	r3, [pc, #168]	; (8002ec8 <prvAddNewTaskToReadyList+0xb8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3301      	adds	r3, #1
 8002e22:	4a29      	ldr	r2, [pc, #164]	; (8002ec8 <prvAddNewTaskToReadyList+0xb8>)
 8002e24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e26:	4b29      	ldr	r3, [pc, #164]	; (8002ecc <prvAddNewTaskToReadyList+0xbc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d109      	bne.n	8002e42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e2e:	4a27      	ldr	r2, [pc, #156]	; (8002ecc <prvAddNewTaskToReadyList+0xbc>)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e34:	4b24      	ldr	r3, [pc, #144]	; (8002ec8 <prvAddNewTaskToReadyList+0xb8>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d110      	bne.n	8002e5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e3c:	f000 fbca 	bl	80035d4 <prvInitialiseTaskLists>
 8002e40:	e00d      	b.n	8002e5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e42:	4b23      	ldr	r3, [pc, #140]	; (8002ed0 <prvAddNewTaskToReadyList+0xc0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d109      	bne.n	8002e5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e4a:	4b20      	ldr	r3, [pc, #128]	; (8002ecc <prvAddNewTaskToReadyList+0xbc>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d802      	bhi.n	8002e5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e58:	4a1c      	ldr	r2, [pc, #112]	; (8002ecc <prvAddNewTaskToReadyList+0xbc>)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e5e:	4b1d      	ldr	r3, [pc, #116]	; (8002ed4 <prvAddNewTaskToReadyList+0xc4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3301      	adds	r3, #1
 8002e64:	4a1b      	ldr	r2, [pc, #108]	; (8002ed4 <prvAddNewTaskToReadyList+0xc4>)
 8002e66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	4b19      	ldr	r3, [pc, #100]	; (8002ed8 <prvAddNewTaskToReadyList+0xc8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	4a18      	ldr	r2, [pc, #96]	; (8002ed8 <prvAddNewTaskToReadyList+0xc8>)
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e7e:	4613      	mov	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4a15      	ldr	r2, [pc, #84]	; (8002edc <prvAddNewTaskToReadyList+0xcc>)
 8002e88:	441a      	add	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4610      	mov	r0, r2
 8002e92:	f7ff f8d6 	bl	8002042 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e96:	f000 fe89 	bl	8003bac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e9a:	4b0d      	ldr	r3, [pc, #52]	; (8002ed0 <prvAddNewTaskToReadyList+0xc0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00e      	beq.n	8002ec0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ea2:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <prvAddNewTaskToReadyList+0xbc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d207      	bcs.n	8002ec0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <prvAddNewTaskToReadyList+0xd0>)
 8002eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	f3bf 8f4f 	dsb	sy
 8002ebc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ec0:	bf00      	nop
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	200003e8 	.word	0x200003e8
 8002ecc:	200002e8 	.word	0x200002e8
 8002ed0:	200003f4 	.word	0x200003f4
 8002ed4:	20000404 	.word	0x20000404
 8002ed8:	200003f0 	.word	0x200003f0
 8002edc:	200002ec 	.word	0x200002ec
 8002ee0:	e000ed04 	.word	0xe000ed04

08002ee4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d017      	beq.n	8002f26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002ef6:	4b13      	ldr	r3, [pc, #76]	; (8002f44 <vTaskDelay+0x60>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <vTaskDelay+0x30>
	__asm volatile
 8002efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f02:	f383 8811 	msr	BASEPRI, r3
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	60bb      	str	r3, [r7, #8]
}
 8002f10:	bf00      	nop
 8002f12:	e7fe      	b.n	8002f12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002f14:	f000 f87a 	bl	800300c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f18:	2100      	movs	r1, #0
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 fcc0 	bl	80038a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f20:	f000 f882 	bl	8003028 <xTaskResumeAll>
 8002f24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d107      	bne.n	8002f3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002f2c:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <vTaskDelay+0x64>)
 8002f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	f3bf 8f4f 	dsb	sy
 8002f38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f3c:	bf00      	nop
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20000410 	.word	0x20000410
 8002f48:	e000ed04 	.word	0xe000ed04

08002f4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08a      	sub	sp, #40	; 0x28
 8002f50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f5a:	463a      	mov	r2, r7
 8002f5c:	1d39      	adds	r1, r7, #4
 8002f5e:	f107 0308 	add.w	r3, r7, #8
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fd f8f4 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f68:	6839      	ldr	r1, [r7, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	9202      	str	r2, [sp, #8]
 8002f70:	9301      	str	r3, [sp, #4]
 8002f72:	2300      	movs	r3, #0
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	2300      	movs	r3, #0
 8002f78:	460a      	mov	r2, r1
 8002f7a:	491e      	ldr	r1, [pc, #120]	; (8002ff4 <vTaskStartScheduler+0xa8>)
 8002f7c:	481e      	ldr	r0, [pc, #120]	; (8002ff8 <vTaskStartScheduler+0xac>)
 8002f7e:	f7ff fe27 	bl	8002bd0 <xTaskCreateStatic>
 8002f82:	4603      	mov	r3, r0
 8002f84:	4a1d      	ldr	r2, [pc, #116]	; (8002ffc <vTaskStartScheduler+0xb0>)
 8002f86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002f88:	4b1c      	ldr	r3, [pc, #112]	; (8002ffc <vTaskStartScheduler+0xb0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002f90:	2301      	movs	r3, #1
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	e001      	b.n	8002f9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d116      	bne.n	8002fce <vTaskStartScheduler+0x82>
	__asm volatile
 8002fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa4:	f383 8811 	msr	BASEPRI, r3
 8002fa8:	f3bf 8f6f 	isb	sy
 8002fac:	f3bf 8f4f 	dsb	sy
 8002fb0:	613b      	str	r3, [r7, #16]
}
 8002fb2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002fb4:	4b12      	ldr	r3, [pc, #72]	; (8003000 <vTaskStartScheduler+0xb4>)
 8002fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002fba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002fbc:	4b11      	ldr	r3, [pc, #68]	; (8003004 <vTaskStartScheduler+0xb8>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002fc2:	4b11      	ldr	r3, [pc, #68]	; (8003008 <vTaskStartScheduler+0xbc>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002fc8:	f000 fd4e 	bl	8003a68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002fcc:	e00e      	b.n	8002fec <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd4:	d10a      	bne.n	8002fec <vTaskStartScheduler+0xa0>
	__asm volatile
 8002fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fda:	f383 8811 	msr	BASEPRI, r3
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	f3bf 8f4f 	dsb	sy
 8002fe6:	60fb      	str	r3, [r7, #12]
}
 8002fe8:	bf00      	nop
 8002fea:	e7fe      	b.n	8002fea <vTaskStartScheduler+0x9e>
}
 8002fec:	bf00      	nop
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	080050e0 	.word	0x080050e0
 8002ff8:	080035a5 	.word	0x080035a5
 8002ffc:	2000040c 	.word	0x2000040c
 8003000:	20000408 	.word	0x20000408
 8003004:	200003f4 	.word	0x200003f4
 8003008:	200003ec 	.word	0x200003ec

0800300c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003010:	4b04      	ldr	r3, [pc, #16]	; (8003024 <vTaskSuspendAll+0x18>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3301      	adds	r3, #1
 8003016:	4a03      	ldr	r2, [pc, #12]	; (8003024 <vTaskSuspendAll+0x18>)
 8003018:	6013      	str	r3, [r2, #0]
}
 800301a:	bf00      	nop
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	20000410 	.word	0x20000410

08003028 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003032:	2300      	movs	r3, #0
 8003034:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003036:	4b41      	ldr	r3, [pc, #260]	; (800313c <xTaskResumeAll+0x114>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10a      	bne.n	8003054 <xTaskResumeAll+0x2c>
	__asm volatile
 800303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003042:	f383 8811 	msr	BASEPRI, r3
 8003046:	f3bf 8f6f 	isb	sy
 800304a:	f3bf 8f4f 	dsb	sy
 800304e:	603b      	str	r3, [r7, #0]
}
 8003050:	bf00      	nop
 8003052:	e7fe      	b.n	8003052 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003054:	f000 fd7a 	bl	8003b4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003058:	4b38      	ldr	r3, [pc, #224]	; (800313c <xTaskResumeAll+0x114>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3b01      	subs	r3, #1
 800305e:	4a37      	ldr	r2, [pc, #220]	; (800313c <xTaskResumeAll+0x114>)
 8003060:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003062:	4b36      	ldr	r3, [pc, #216]	; (800313c <xTaskResumeAll+0x114>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d161      	bne.n	800312e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800306a:	4b35      	ldr	r3, [pc, #212]	; (8003140 <xTaskResumeAll+0x118>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d05d      	beq.n	800312e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003072:	e02e      	b.n	80030d2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003074:	4b33      	ldr	r3, [pc, #204]	; (8003144 <xTaskResumeAll+0x11c>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	3318      	adds	r3, #24
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff f839 	bl	80020f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	3304      	adds	r3, #4
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff f834 	bl	80020f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	2201      	movs	r2, #1
 8003096:	409a      	lsls	r2, r3
 8003098:	4b2b      	ldr	r3, [pc, #172]	; (8003148 <xTaskResumeAll+0x120>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4313      	orrs	r3, r2
 800309e:	4a2a      	ldr	r2, [pc, #168]	; (8003148 <xTaskResumeAll+0x120>)
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a6:	4613      	mov	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4a27      	ldr	r2, [pc, #156]	; (800314c <xTaskResumeAll+0x124>)
 80030b0:	441a      	add	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	3304      	adds	r3, #4
 80030b6:	4619      	mov	r1, r3
 80030b8:	4610      	mov	r0, r2
 80030ba:	f7fe ffc2 	bl	8002042 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c2:	4b23      	ldr	r3, [pc, #140]	; (8003150 <xTaskResumeAll+0x128>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d302      	bcc.n	80030d2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80030cc:	4b21      	ldr	r3, [pc, #132]	; (8003154 <xTaskResumeAll+0x12c>)
 80030ce:	2201      	movs	r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030d2:	4b1c      	ldr	r3, [pc, #112]	; (8003144 <xTaskResumeAll+0x11c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1cc      	bne.n	8003074 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80030e0:	f000 fb16 	bl	8003710 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80030e4:	4b1c      	ldr	r3, [pc, #112]	; (8003158 <xTaskResumeAll+0x130>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d010      	beq.n	8003112 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80030f0:	f000 f836 	bl	8003160 <xTaskIncrementTick>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80030fa:	4b16      	ldr	r3, [pc, #88]	; (8003154 <xTaskResumeAll+0x12c>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3b01      	subs	r3, #1
 8003104:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f1      	bne.n	80030f0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800310c:	4b12      	ldr	r3, [pc, #72]	; (8003158 <xTaskResumeAll+0x130>)
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003112:	4b10      	ldr	r3, [pc, #64]	; (8003154 <xTaskResumeAll+0x12c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800311a:	2301      	movs	r3, #1
 800311c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800311e:	4b0f      	ldr	r3, [pc, #60]	; (800315c <xTaskResumeAll+0x134>)
 8003120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800312e:	f000 fd3d 	bl	8003bac <vPortExitCritical>

	return xAlreadyYielded;
 8003132:	68bb      	ldr	r3, [r7, #8]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	20000410 	.word	0x20000410
 8003140:	200003e8 	.word	0x200003e8
 8003144:	200003a8 	.word	0x200003a8
 8003148:	200003f0 	.word	0x200003f0
 800314c:	200002ec 	.word	0x200002ec
 8003150:	200002e8 	.word	0x200002e8
 8003154:	200003fc 	.word	0x200003fc
 8003158:	200003f8 	.word	0x200003f8
 800315c:	e000ed04 	.word	0xe000ed04

08003160 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800316a:	4b51      	ldr	r3, [pc, #324]	; (80032b0 <xTaskIncrementTick+0x150>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	f040 808d 	bne.w	800328e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003174:	4b4f      	ldr	r3, [pc, #316]	; (80032b4 <xTaskIncrementTick+0x154>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3301      	adds	r3, #1
 800317a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800317c:	4a4d      	ldr	r2, [pc, #308]	; (80032b4 <xTaskIncrementTick+0x154>)
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d120      	bne.n	80031ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003188:	4b4b      	ldr	r3, [pc, #300]	; (80032b8 <xTaskIncrementTick+0x158>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00a      	beq.n	80031a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8003192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	603b      	str	r3, [r7, #0]
}
 80031a4:	bf00      	nop
 80031a6:	e7fe      	b.n	80031a6 <xTaskIncrementTick+0x46>
 80031a8:	4b43      	ldr	r3, [pc, #268]	; (80032b8 <xTaskIncrementTick+0x158>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	4b43      	ldr	r3, [pc, #268]	; (80032bc <xTaskIncrementTick+0x15c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a41      	ldr	r2, [pc, #260]	; (80032b8 <xTaskIncrementTick+0x158>)
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	4a41      	ldr	r2, [pc, #260]	; (80032bc <xTaskIncrementTick+0x15c>)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	4b40      	ldr	r3, [pc, #256]	; (80032c0 <xTaskIncrementTick+0x160>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3301      	adds	r3, #1
 80031c2:	4a3f      	ldr	r2, [pc, #252]	; (80032c0 <xTaskIncrementTick+0x160>)
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	f000 faa3 	bl	8003710 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80031ca:	4b3e      	ldr	r3, [pc, #248]	; (80032c4 <xTaskIncrementTick+0x164>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d34d      	bcc.n	8003270 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031d4:	4b38      	ldr	r3, [pc, #224]	; (80032b8 <xTaskIncrementTick+0x158>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <xTaskIncrementTick+0x82>
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <xTaskIncrementTick+0x84>
 80031e2:	2300      	movs	r3, #0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d004      	beq.n	80031f2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031e8:	4b36      	ldr	r3, [pc, #216]	; (80032c4 <xTaskIncrementTick+0x164>)
 80031ea:	f04f 32ff 	mov.w	r2, #4294967295
 80031ee:	601a      	str	r2, [r3, #0]
					break;
 80031f0:	e03e      	b.n	8003270 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031f2:	4b31      	ldr	r3, [pc, #196]	; (80032b8 <xTaskIncrementTick+0x158>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	429a      	cmp	r2, r3
 8003208:	d203      	bcs.n	8003212 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800320a:	4a2e      	ldr	r2, [pc, #184]	; (80032c4 <xTaskIncrementTick+0x164>)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6013      	str	r3, [r2, #0]
						break;
 8003210:	e02e      	b.n	8003270 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	3304      	adds	r3, #4
 8003216:	4618      	mov	r0, r3
 8003218:	f7fe ff6e 	bl	80020f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003220:	2b00      	cmp	r3, #0
 8003222:	d004      	beq.n	800322e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	3318      	adds	r3, #24
 8003228:	4618      	mov	r0, r3
 800322a:	f7fe ff65 	bl	80020f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	2201      	movs	r2, #1
 8003234:	409a      	lsls	r2, r3
 8003236:	4b24      	ldr	r3, [pc, #144]	; (80032c8 <xTaskIncrementTick+0x168>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4313      	orrs	r3, r2
 800323c:	4a22      	ldr	r2, [pc, #136]	; (80032c8 <xTaskIncrementTick+0x168>)
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4a1f      	ldr	r2, [pc, #124]	; (80032cc <xTaskIncrementTick+0x16c>)
 800324e:	441a      	add	r2, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	3304      	adds	r3, #4
 8003254:	4619      	mov	r1, r3
 8003256:	4610      	mov	r0, r2
 8003258:	f7fe fef3 	bl	8002042 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003260:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <xTaskIncrementTick+0x170>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	429a      	cmp	r2, r3
 8003268:	d3b4      	bcc.n	80031d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800326a:	2301      	movs	r3, #1
 800326c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800326e:	e7b1      	b.n	80031d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003270:	4b17      	ldr	r3, [pc, #92]	; (80032d0 <xTaskIncrementTick+0x170>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003276:	4915      	ldr	r1, [pc, #84]	; (80032cc <xTaskIncrementTick+0x16c>)
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d907      	bls.n	8003298 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003288:	2301      	movs	r3, #1
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	e004      	b.n	8003298 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800328e:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <xTaskIncrementTick+0x174>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	3301      	adds	r3, #1
 8003294:	4a0f      	ldr	r2, [pc, #60]	; (80032d4 <xTaskIncrementTick+0x174>)
 8003296:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003298:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <xTaskIncrementTick+0x178>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80032a0:	2301      	movs	r3, #1
 80032a2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80032a4:	697b      	ldr	r3, [r7, #20]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	20000410 	.word	0x20000410
 80032b4:	200003ec 	.word	0x200003ec
 80032b8:	200003a0 	.word	0x200003a0
 80032bc:	200003a4 	.word	0x200003a4
 80032c0:	20000400 	.word	0x20000400
 80032c4:	20000408 	.word	0x20000408
 80032c8:	200003f0 	.word	0x200003f0
 80032cc:	200002ec 	.word	0x200002ec
 80032d0:	200002e8 	.word	0x200002e8
 80032d4:	200003f8 	.word	0x200003f8
 80032d8:	200003fc 	.word	0x200003fc

080032dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032e2:	4b26      	ldr	r3, [pc, #152]	; (800337c <vTaskSwitchContext+0xa0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80032ea:	4b25      	ldr	r3, [pc, #148]	; (8003380 <vTaskSwitchContext+0xa4>)
 80032ec:	2201      	movs	r2, #1
 80032ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80032f0:	e03f      	b.n	8003372 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80032f2:	4b23      	ldr	r3, [pc, #140]	; (8003380 <vTaskSwitchContext+0xa4>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80032f8:	4b22      	ldr	r3, [pc, #136]	; (8003384 <vTaskSwitchContext+0xa8>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	fab3 f383 	clz	r3, r3
 8003304:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003306:	7afb      	ldrb	r3, [r7, #11]
 8003308:	f1c3 031f 	rsb	r3, r3, #31
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	491e      	ldr	r1, [pc, #120]	; (8003388 <vTaskSwitchContext+0xac>)
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10a      	bne.n	8003338 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	607b      	str	r3, [r7, #4]
}
 8003334:	bf00      	nop
 8003336:	e7fe      	b.n	8003336 <vTaskSwitchContext+0x5a>
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4a11      	ldr	r2, [pc, #68]	; (8003388 <vTaskSwitchContext+0xac>)
 8003344:	4413      	add	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	3308      	adds	r3, #8
 800335a:	429a      	cmp	r2, r3
 800335c:	d104      	bne.n	8003368 <vTaskSwitchContext+0x8c>
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	605a      	str	r2, [r3, #4]
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	4a07      	ldr	r2, [pc, #28]	; (800338c <vTaskSwitchContext+0xb0>)
 8003370:	6013      	str	r3, [r2, #0]
}
 8003372:	bf00      	nop
 8003374:	371c      	adds	r7, #28
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr
 800337c:	20000410 	.word	0x20000410
 8003380:	200003fc 	.word	0x200003fc
 8003384:	200003f0 	.word	0x200003f0
 8003388:	200002ec 	.word	0x200002ec
 800338c:	200002e8 	.word	0x200002e8

08003390 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10a      	bne.n	80033b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80033a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	60fb      	str	r3, [r7, #12]
}
 80033b2:	bf00      	nop
 80033b4:	e7fe      	b.n	80033b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033b6:	4b07      	ldr	r3, [pc, #28]	; (80033d4 <vTaskPlaceOnEventList+0x44>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	3318      	adds	r3, #24
 80033bc:	4619      	mov	r1, r3
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fe fe62 	bl	8002088 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033c4:	2101      	movs	r1, #1
 80033c6:	6838      	ldr	r0, [r7, #0]
 80033c8:	f000 fa6a 	bl	80038a0 <prvAddCurrentTaskToDelayedList>
}
 80033cc:	bf00      	nop
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	200002e8 	.word	0x200002e8

080033d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10a      	bne.n	8003404 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80033ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f2:	f383 8811 	msr	BASEPRI, r3
 80033f6:	f3bf 8f6f 	isb	sy
 80033fa:	f3bf 8f4f 	dsb	sy
 80033fe:	60fb      	str	r3, [r7, #12]
}
 8003400:	bf00      	nop
 8003402:	e7fe      	b.n	8003402 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	3318      	adds	r3, #24
 8003408:	4618      	mov	r0, r3
 800340a:	f7fe fe75 	bl	80020f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800340e:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <xTaskRemoveFromEventList+0xac>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d11c      	bne.n	8003450 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	3304      	adds	r3, #4
 800341a:	4618      	mov	r0, r3
 800341c:	f7fe fe6c 	bl	80020f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	2201      	movs	r2, #1
 8003426:	409a      	lsls	r2, r3
 8003428:	4b17      	ldr	r3, [pc, #92]	; (8003488 <xTaskRemoveFromEventList+0xb0>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4313      	orrs	r3, r2
 800342e:	4a16      	ldr	r2, [pc, #88]	; (8003488 <xTaskRemoveFromEventList+0xb0>)
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4a13      	ldr	r2, [pc, #76]	; (800348c <xTaskRemoveFromEventList+0xb4>)
 8003440:	441a      	add	r2, r3
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	3304      	adds	r3, #4
 8003446:	4619      	mov	r1, r3
 8003448:	4610      	mov	r0, r2
 800344a:	f7fe fdfa 	bl	8002042 <vListInsertEnd>
 800344e:	e005      	b.n	800345c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	3318      	adds	r3, #24
 8003454:	4619      	mov	r1, r3
 8003456:	480e      	ldr	r0, [pc, #56]	; (8003490 <xTaskRemoveFromEventList+0xb8>)
 8003458:	f7fe fdf3 	bl	8002042 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <xTaskRemoveFromEventList+0xbc>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	429a      	cmp	r2, r3
 8003468:	d905      	bls.n	8003476 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800346a:	2301      	movs	r3, #1
 800346c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800346e:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <xTaskRemoveFromEventList+0xc0>)
 8003470:	2201      	movs	r2, #1
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	e001      	b.n	800347a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800347a:	697b      	ldr	r3, [r7, #20]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	20000410 	.word	0x20000410
 8003488:	200003f0 	.word	0x200003f0
 800348c:	200002ec 	.word	0x200002ec
 8003490:	200003a8 	.word	0x200003a8
 8003494:	200002e8 	.word	0x200002e8
 8003498:	200003fc 	.word	0x200003fc

0800349c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80034a4:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <vTaskInternalSetTimeOutState+0x24>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80034ac:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <vTaskInternalSetTimeOutState+0x28>)
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	605a      	str	r2, [r3, #4]
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	20000400 	.word	0x20000400
 80034c4:	200003ec 	.word	0x200003ec

080034c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80034d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	613b      	str	r3, [r7, #16]
}
 80034ea:	bf00      	nop
 80034ec:	e7fe      	b.n	80034ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10a      	bne.n	800350a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80034f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f8:	f383 8811 	msr	BASEPRI, r3
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	60fb      	str	r3, [r7, #12]
}
 8003506:	bf00      	nop
 8003508:	e7fe      	b.n	8003508 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800350a:	f000 fb1f 	bl	8003b4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800350e:	4b1d      	ldr	r3, [pc, #116]	; (8003584 <xTaskCheckForTimeOut+0xbc>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003526:	d102      	bne.n	800352e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003528:	2300      	movs	r3, #0
 800352a:	61fb      	str	r3, [r7, #28]
 800352c:	e023      	b.n	8003576 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	4b15      	ldr	r3, [pc, #84]	; (8003588 <xTaskCheckForTimeOut+0xc0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d007      	beq.n	800354a <xTaskCheckForTimeOut+0x82>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	429a      	cmp	r2, r3
 8003542:	d302      	bcc.n	800354a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003544:	2301      	movs	r3, #1
 8003546:	61fb      	str	r3, [r7, #28]
 8003548:	e015      	b.n	8003576 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	429a      	cmp	r2, r3
 8003552:	d20b      	bcs.n	800356c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	1ad2      	subs	r2, r2, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff ff9b 	bl	800349c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	e004      	b.n	8003576 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003572:	2301      	movs	r3, #1
 8003574:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003576:	f000 fb19 	bl	8003bac <vPortExitCritical>

	return xReturn;
 800357a:	69fb      	ldr	r3, [r7, #28]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3720      	adds	r7, #32
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	200003ec 	.word	0x200003ec
 8003588:	20000400 	.word	0x20000400

0800358c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003590:	4b03      	ldr	r3, [pc, #12]	; (80035a0 <vTaskMissedYield+0x14>)
 8003592:	2201      	movs	r2, #1
 8003594:	601a      	str	r2, [r3, #0]
}
 8003596:	bf00      	nop
 8003598:	46bd      	mov	sp, r7
 800359a:	bc80      	pop	{r7}
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	200003fc 	.word	0x200003fc

080035a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80035ac:	f000 f852 	bl	8003654 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80035b0:	4b06      	ldr	r3, [pc, #24]	; (80035cc <prvIdleTask+0x28>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d9f9      	bls.n	80035ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80035b8:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <prvIdleTask+0x2c>)
 80035ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80035c8:	e7f0      	b.n	80035ac <prvIdleTask+0x8>
 80035ca:	bf00      	nop
 80035cc:	200002ec 	.word	0x200002ec
 80035d0:	e000ed04 	.word	0xe000ed04

080035d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035da:	2300      	movs	r3, #0
 80035dc:	607b      	str	r3, [r7, #4]
 80035de:	e00c      	b.n	80035fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4a12      	ldr	r2, [pc, #72]	; (8003634 <prvInitialiseTaskLists+0x60>)
 80035ec:	4413      	add	r3, r2
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fe fcfc 	bl	8001fec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3301      	adds	r3, #1
 80035f8:	607b      	str	r3, [r7, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b06      	cmp	r3, #6
 80035fe:	d9ef      	bls.n	80035e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003600:	480d      	ldr	r0, [pc, #52]	; (8003638 <prvInitialiseTaskLists+0x64>)
 8003602:	f7fe fcf3 	bl	8001fec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003606:	480d      	ldr	r0, [pc, #52]	; (800363c <prvInitialiseTaskLists+0x68>)
 8003608:	f7fe fcf0 	bl	8001fec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800360c:	480c      	ldr	r0, [pc, #48]	; (8003640 <prvInitialiseTaskLists+0x6c>)
 800360e:	f7fe fced 	bl	8001fec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003612:	480c      	ldr	r0, [pc, #48]	; (8003644 <prvInitialiseTaskLists+0x70>)
 8003614:	f7fe fcea 	bl	8001fec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003618:	480b      	ldr	r0, [pc, #44]	; (8003648 <prvInitialiseTaskLists+0x74>)
 800361a:	f7fe fce7 	bl	8001fec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800361e:	4b0b      	ldr	r3, [pc, #44]	; (800364c <prvInitialiseTaskLists+0x78>)
 8003620:	4a05      	ldr	r2, [pc, #20]	; (8003638 <prvInitialiseTaskLists+0x64>)
 8003622:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003624:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <prvInitialiseTaskLists+0x7c>)
 8003626:	4a05      	ldr	r2, [pc, #20]	; (800363c <prvInitialiseTaskLists+0x68>)
 8003628:	601a      	str	r2, [r3, #0]
}
 800362a:	bf00      	nop
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	200002ec 	.word	0x200002ec
 8003638:	20000378 	.word	0x20000378
 800363c:	2000038c 	.word	0x2000038c
 8003640:	200003a8 	.word	0x200003a8
 8003644:	200003bc 	.word	0x200003bc
 8003648:	200003d4 	.word	0x200003d4
 800364c:	200003a0 	.word	0x200003a0
 8003650:	200003a4 	.word	0x200003a4

08003654 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800365a:	e019      	b.n	8003690 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800365c:	f000 fa76 	bl	8003b4c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003660:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <prvCheckTasksWaitingTermination+0x50>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3304      	adds	r3, #4
 800366c:	4618      	mov	r0, r3
 800366e:	f7fe fd43 	bl	80020f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003672:	4b0d      	ldr	r3, [pc, #52]	; (80036a8 <prvCheckTasksWaitingTermination+0x54>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3b01      	subs	r3, #1
 8003678:	4a0b      	ldr	r2, [pc, #44]	; (80036a8 <prvCheckTasksWaitingTermination+0x54>)
 800367a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <prvCheckTasksWaitingTermination+0x58>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3b01      	subs	r3, #1
 8003682:	4a0a      	ldr	r2, [pc, #40]	; (80036ac <prvCheckTasksWaitingTermination+0x58>)
 8003684:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003686:	f000 fa91 	bl	8003bac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f810 	bl	80036b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <prvCheckTasksWaitingTermination+0x58>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1e1      	bne.n	800365c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003698:	bf00      	nop
 800369a:	bf00      	nop
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	200003bc 	.word	0x200003bc
 80036a8:	200003e8 	.word	0x200003e8
 80036ac:	200003d0 	.word	0x200003d0

080036b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d108      	bne.n	80036d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 fc04 	bl	8003ed4 <vPortFree>
				vPortFree( pxTCB );
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 fc01 	bl	8003ed4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80036d2:	e018      	b.n	8003706 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d103      	bne.n	80036e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fbf8 	bl	8003ed4 <vPortFree>
	}
 80036e4:	e00f      	b.n	8003706 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d00a      	beq.n	8003706 <prvDeleteTCB+0x56>
	__asm volatile
 80036f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	60fb      	str	r3, [r7, #12]
}
 8003702:	bf00      	nop
 8003704:	e7fe      	b.n	8003704 <prvDeleteTCB+0x54>
	}
 8003706:	bf00      	nop
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003716:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <prvResetNextTaskUnblockTime+0x40>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <prvResetNextTaskUnblockTime+0x14>
 8003720:	2301      	movs	r3, #1
 8003722:	e000      	b.n	8003726 <prvResetNextTaskUnblockTime+0x16>
 8003724:	2300      	movs	r3, #0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d004      	beq.n	8003734 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800372a:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <prvResetNextTaskUnblockTime+0x44>)
 800372c:	f04f 32ff 	mov.w	r2, #4294967295
 8003730:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003732:	e008      	b.n	8003746 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003734:	4b06      	ldr	r3, [pc, #24]	; (8003750 <prvResetNextTaskUnblockTime+0x40>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	4a04      	ldr	r2, [pc, #16]	; (8003754 <prvResetNextTaskUnblockTime+0x44>)
 8003744:	6013      	str	r3, [r2, #0]
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr
 8003750:	200003a0 	.word	0x200003a0
 8003754:	20000408 	.word	0x20000408

08003758 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800375e:	4b0b      	ldr	r3, [pc, #44]	; (800378c <xTaskGetSchedulerState+0x34>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d102      	bne.n	800376c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003766:	2301      	movs	r3, #1
 8003768:	607b      	str	r3, [r7, #4]
 800376a:	e008      	b.n	800377e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800376c:	4b08      	ldr	r3, [pc, #32]	; (8003790 <xTaskGetSchedulerState+0x38>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d102      	bne.n	800377a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003774:	2302      	movs	r3, #2
 8003776:	607b      	str	r3, [r7, #4]
 8003778:	e001      	b.n	800377e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800377a:	2300      	movs	r3, #0
 800377c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800377e:	687b      	ldr	r3, [r7, #4]
	}
 8003780:	4618      	mov	r0, r3
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	bc80      	pop	{r7}
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	200003f4 	.word	0x200003f4
 8003790:	20000410 	.word	0x20000410

08003794 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d06e      	beq.n	8003888 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80037aa:	4b3a      	ldr	r3, [pc, #232]	; (8003894 <xTaskPriorityDisinherit+0x100>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d00a      	beq.n	80037ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80037b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	60fb      	str	r3, [r7, #12]
}
 80037c6:	bf00      	nop
 80037c8:	e7fe      	b.n	80037c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10a      	bne.n	80037e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80037d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	60bb      	str	r3, [r7, #8]
}
 80037e4:	bf00      	nop
 80037e6:	e7fe      	b.n	80037e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ec:	1e5a      	subs	r2, r3, #1
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d044      	beq.n	8003888 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003802:	2b00      	cmp	r3, #0
 8003804:	d140      	bne.n	8003888 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	3304      	adds	r3, #4
 800380a:	4618      	mov	r0, r3
 800380c:	f7fe fc74 	bl	80020f8 <uxListRemove>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d115      	bne.n	8003842 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381a:	491f      	ldr	r1, [pc, #124]	; (8003898 <xTaskPriorityDisinherit+0x104>)
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10a      	bne.n	8003842 <xTaskPriorityDisinherit+0xae>
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	2201      	movs	r2, #1
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	43da      	mvns	r2, r3
 8003838:	4b18      	ldr	r3, [pc, #96]	; (800389c <xTaskPriorityDisinherit+0x108>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4013      	ands	r3, r2
 800383e:	4a17      	ldr	r2, [pc, #92]	; (800389c <xTaskPriorityDisinherit+0x108>)
 8003840:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384e:	f1c3 0207 	rsb	r2, r3, #7
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385a:	2201      	movs	r2, #1
 800385c:	409a      	lsls	r2, r3
 800385e:	4b0f      	ldr	r3, [pc, #60]	; (800389c <xTaskPriorityDisinherit+0x108>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4313      	orrs	r3, r2
 8003864:	4a0d      	ldr	r2, [pc, #52]	; (800389c <xTaskPriorityDisinherit+0x108>)
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386c:	4613      	mov	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4a08      	ldr	r2, [pc, #32]	; (8003898 <xTaskPriorityDisinherit+0x104>)
 8003876:	441a      	add	r2, r3
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	3304      	adds	r3, #4
 800387c:	4619      	mov	r1, r3
 800387e:	4610      	mov	r0, r2
 8003880:	f7fe fbdf 	bl	8002042 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003884:	2301      	movs	r3, #1
 8003886:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003888:	697b      	ldr	r3, [r7, #20]
	}
 800388a:	4618      	mov	r0, r3
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	200002e8 	.word	0x200002e8
 8003898:	200002ec 	.word	0x200002ec
 800389c:	200003f0 	.word	0x200003f0

080038a0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80038aa:	4b29      	ldr	r3, [pc, #164]	; (8003950 <prvAddCurrentTaskToDelayedList+0xb0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038b0:	4b28      	ldr	r3, [pc, #160]	; (8003954 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3304      	adds	r3, #4
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fe fc1e 	bl	80020f8 <uxListRemove>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10b      	bne.n	80038da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80038c2:	4b24      	ldr	r3, [pc, #144]	; (8003954 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	2201      	movs	r2, #1
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43da      	mvns	r2, r3
 80038d0:	4b21      	ldr	r3, [pc, #132]	; (8003958 <prvAddCurrentTaskToDelayedList+0xb8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4013      	ands	r3, r2
 80038d6:	4a20      	ldr	r2, [pc, #128]	; (8003958 <prvAddCurrentTaskToDelayedList+0xb8>)
 80038d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e0:	d10a      	bne.n	80038f8 <prvAddCurrentTaskToDelayedList+0x58>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d007      	beq.n	80038f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038e8:	4b1a      	ldr	r3, [pc, #104]	; (8003954 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3304      	adds	r3, #4
 80038ee:	4619      	mov	r1, r3
 80038f0:	481a      	ldr	r0, [pc, #104]	; (800395c <prvAddCurrentTaskToDelayedList+0xbc>)
 80038f2:	f7fe fba6 	bl	8002042 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80038f6:	e026      	b.n	8003946 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4413      	add	r3, r2
 80038fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003900:	4b14      	ldr	r3, [pc, #80]	; (8003954 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	429a      	cmp	r2, r3
 800390e:	d209      	bcs.n	8003924 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003910:	4b13      	ldr	r3, [pc, #76]	; (8003960 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	4b0f      	ldr	r3, [pc, #60]	; (8003954 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3304      	adds	r3, #4
 800391a:	4619      	mov	r1, r3
 800391c:	4610      	mov	r0, r2
 800391e:	f7fe fbb3 	bl	8002088 <vListInsert>
}
 8003922:	e010      	b.n	8003946 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003924:	4b0f      	ldr	r3, [pc, #60]	; (8003964 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <prvAddCurrentTaskToDelayedList+0xb4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3304      	adds	r3, #4
 800392e:	4619      	mov	r1, r3
 8003930:	4610      	mov	r0, r2
 8003932:	f7fe fba9 	bl	8002088 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003936:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	429a      	cmp	r2, r3
 800393e:	d202      	bcs.n	8003946 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003940:	4a09      	ldr	r2, [pc, #36]	; (8003968 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	6013      	str	r3, [r2, #0]
}
 8003946:	bf00      	nop
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	200003ec 	.word	0x200003ec
 8003954:	200002e8 	.word	0x200002e8
 8003958:	200003f0 	.word	0x200003f0
 800395c:	200003d4 	.word	0x200003d4
 8003960:	200003a4 	.word	0x200003a4
 8003964:	200003a0 	.word	0x200003a0
 8003968:	20000408 	.word	0x20000408

0800396c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	3b04      	subs	r3, #4
 800397c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003984:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	3b04      	subs	r3, #4
 800398a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f023 0201 	bic.w	r2, r3, #1
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	3b04      	subs	r3, #4
 800399a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800399c:	4a08      	ldr	r2, [pc, #32]	; (80039c0 <pxPortInitialiseStack+0x54>)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	3b14      	subs	r3, #20
 80039a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	3b20      	subs	r3, #32
 80039b2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80039b4:	68fb      	ldr	r3, [r7, #12]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr
 80039c0:	080039c5 	.word	0x080039c5

080039c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80039ce:	4b12      	ldr	r3, [pc, #72]	; (8003a18 <prvTaskExitError+0x54>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d6:	d00a      	beq.n	80039ee <prvTaskExitError+0x2a>
	__asm volatile
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	60fb      	str	r3, [r7, #12]
}
 80039ea:	bf00      	nop
 80039ec:	e7fe      	b.n	80039ec <prvTaskExitError+0x28>
	__asm volatile
 80039ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	60bb      	str	r3, [r7, #8]
}
 8003a00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003a02:	bf00      	nop
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0fc      	beq.n	8003a04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003a0a:	bf00      	nop
 8003a0c:	bf00      	nop
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	2000000c 	.word	0x2000000c
 8003a1c:	00000000 	.word	0x00000000

08003a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003a20:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <pxCurrentTCBConst2>)
 8003a22:	6819      	ldr	r1, [r3, #0]
 8003a24:	6808      	ldr	r0, [r1, #0]
 8003a26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003a2a:	f380 8809 	msr	PSP, r0
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f04f 0000 	mov.w	r0, #0
 8003a36:	f380 8811 	msr	BASEPRI, r0
 8003a3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003a3e:	4770      	bx	lr

08003a40 <pxCurrentTCBConst2>:
 8003a40:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003a44:	bf00      	nop
 8003a46:	bf00      	nop

08003a48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003a48:	4806      	ldr	r0, [pc, #24]	; (8003a64 <prvPortStartFirstTask+0x1c>)
 8003a4a:	6800      	ldr	r0, [r0, #0]
 8003a4c:	6800      	ldr	r0, [r0, #0]
 8003a4e:	f380 8808 	msr	MSP, r0
 8003a52:	b662      	cpsie	i
 8003a54:	b661      	cpsie	f
 8003a56:	f3bf 8f4f 	dsb	sy
 8003a5a:	f3bf 8f6f 	isb	sy
 8003a5e:	df00      	svc	0
 8003a60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003a62:	bf00      	nop
 8003a64:	e000ed08 	.word	0xe000ed08

08003a68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a6e:	4b32      	ldr	r3, [pc, #200]	; (8003b38 <xPortStartScheduler+0xd0>)
 8003a70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	22ff      	movs	r2, #255	; 0xff
 8003a7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	4b2a      	ldr	r3, [pc, #168]	; (8003b3c <xPortStartScheduler+0xd4>)
 8003a94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a96:	4b2a      	ldr	r3, [pc, #168]	; (8003b40 <xPortStartScheduler+0xd8>)
 8003a98:	2207      	movs	r2, #7
 8003a9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a9c:	e009      	b.n	8003ab2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003a9e:	4b28      	ldr	r3, [pc, #160]	; (8003b40 <xPortStartScheduler+0xd8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	4a26      	ldr	r2, [pc, #152]	; (8003b40 <xPortStartScheduler+0xd8>)
 8003aa6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ab2:	78fb      	ldrb	r3, [r7, #3]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aba:	2b80      	cmp	r3, #128	; 0x80
 8003abc:	d0ef      	beq.n	8003a9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003abe:	4b20      	ldr	r3, [pc, #128]	; (8003b40 <xPortStartScheduler+0xd8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f1c3 0307 	rsb	r3, r3, #7
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d00a      	beq.n	8003ae0 <xPortStartScheduler+0x78>
	__asm volatile
 8003aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ace:	f383 8811 	msr	BASEPRI, r3
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	f3bf 8f4f 	dsb	sy
 8003ada:	60bb      	str	r3, [r7, #8]
}
 8003adc:	bf00      	nop
 8003ade:	e7fe      	b.n	8003ade <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ae0:	4b17      	ldr	r3, [pc, #92]	; (8003b40 <xPortStartScheduler+0xd8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	021b      	lsls	r3, r3, #8
 8003ae6:	4a16      	ldr	r2, [pc, #88]	; (8003b40 <xPortStartScheduler+0xd8>)
 8003ae8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003aea:	4b15      	ldr	r3, [pc, #84]	; (8003b40 <xPortStartScheduler+0xd8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003af2:	4a13      	ldr	r2, [pc, #76]	; (8003b40 <xPortStartScheduler+0xd8>)
 8003af4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003afe:	4b11      	ldr	r3, [pc, #68]	; (8003b44 <xPortStartScheduler+0xdc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a10      	ldr	r2, [pc, #64]	; (8003b44 <xPortStartScheduler+0xdc>)
 8003b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003b0a:	4b0e      	ldr	r3, [pc, #56]	; (8003b44 <xPortStartScheduler+0xdc>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a0d      	ldr	r2, [pc, #52]	; (8003b44 <xPortStartScheduler+0xdc>)
 8003b10:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003b14:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003b16:	f000 f8b9 	bl	8003c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003b1a:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <xPortStartScheduler+0xe0>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003b20:	f7ff ff92 	bl	8003a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003b24:	f7ff fbda 	bl	80032dc <vTaskSwitchContext>
	prvTaskExitError();
 8003b28:	f7ff ff4c 	bl	80039c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	e000e400 	.word	0xe000e400
 8003b3c:	20000414 	.word	0x20000414
 8003b40:	20000418 	.word	0x20000418
 8003b44:	e000ed20 	.word	0xe000ed20
 8003b48:	2000000c 	.word	0x2000000c

08003b4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
	__asm volatile
 8003b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b56:	f383 8811 	msr	BASEPRI, r3
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	607b      	str	r3, [r7, #4]
}
 8003b64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003b66:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <vPortEnterCritical+0x58>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	4a0d      	ldr	r2, [pc, #52]	; (8003ba4 <vPortEnterCritical+0x58>)
 8003b6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003b70:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <vPortEnterCritical+0x58>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d10f      	bne.n	8003b98 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003b78:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <vPortEnterCritical+0x5c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <vPortEnterCritical+0x4c>
	__asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	603b      	str	r3, [r7, #0]
}
 8003b94:	bf00      	nop
 8003b96:	e7fe      	b.n	8003b96 <vPortEnterCritical+0x4a>
	}
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	2000000c 	.word	0x2000000c
 8003ba8:	e000ed04 	.word	0xe000ed04

08003bac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003bb2:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <vPortExitCritical+0x4c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10a      	bne.n	8003bd0 <vPortExitCritical+0x24>
	__asm volatile
 8003bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	607b      	str	r3, [r7, #4]
}
 8003bcc:	bf00      	nop
 8003bce:	e7fe      	b.n	8003bce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003bd0:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <vPortExitCritical+0x4c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	4a08      	ldr	r2, [pc, #32]	; (8003bf8 <vPortExitCritical+0x4c>)
 8003bd8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003bda:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <vPortExitCritical+0x4c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d105      	bne.n	8003bee <vPortExitCritical+0x42>
 8003be2:	2300      	movs	r3, #0
 8003be4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	f383 8811 	msr	BASEPRI, r3
}
 8003bec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr
 8003bf8:	2000000c 	.word	0x2000000c
 8003bfc:	00000000 	.word	0x00000000

08003c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003c00:	f3ef 8009 	mrs	r0, PSP
 8003c04:	f3bf 8f6f 	isb	sy
 8003c08:	4b0d      	ldr	r3, [pc, #52]	; (8003c40 <pxCurrentTCBConst>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003c10:	6010      	str	r0, [r2, #0]
 8003c12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003c16:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003c1a:	f380 8811 	msr	BASEPRI, r0
 8003c1e:	f7ff fb5d 	bl	80032dc <vTaskSwitchContext>
 8003c22:	f04f 0000 	mov.w	r0, #0
 8003c26:	f380 8811 	msr	BASEPRI, r0
 8003c2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003c2e:	6819      	ldr	r1, [r3, #0]
 8003c30:	6808      	ldr	r0, [r1, #0]
 8003c32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003c36:	f380 8809 	msr	PSP, r0
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	4770      	bx	lr

08003c40 <pxCurrentTCBConst>:
 8003c40:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003c44:	bf00      	nop
 8003c46:	bf00      	nop

08003c48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8003c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c52:	f383 8811 	msr	BASEPRI, r3
 8003c56:	f3bf 8f6f 	isb	sy
 8003c5a:	f3bf 8f4f 	dsb	sy
 8003c5e:	607b      	str	r3, [r7, #4]
}
 8003c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003c62:	f7ff fa7d 	bl	8003160 <xTaskIncrementTick>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003c6c:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <SysTick_Handler+0x40>)
 8003c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	2300      	movs	r3, #0
 8003c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	f383 8811 	msr	BASEPRI, r3
}
 8003c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003c80:	bf00      	nop
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	e000ed04 	.word	0xe000ed04

08003c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003c90:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <vPortSetupTimerInterrupt+0x30>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003c96:	4b0a      	ldr	r3, [pc, #40]	; (8003cc0 <vPortSetupTimerInterrupt+0x34>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c9c:	4b09      	ldr	r3, [pc, #36]	; (8003cc4 <vPortSetupTimerInterrupt+0x38>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a09      	ldr	r2, [pc, #36]	; (8003cc8 <vPortSetupTimerInterrupt+0x3c>)
 8003ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca6:	099b      	lsrs	r3, r3, #6
 8003ca8:	4a08      	ldr	r2, [pc, #32]	; (8003ccc <vPortSetupTimerInterrupt+0x40>)
 8003caa:	3b01      	subs	r3, #1
 8003cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003cae:	4b03      	ldr	r3, [pc, #12]	; (8003cbc <vPortSetupTimerInterrupt+0x30>)
 8003cb0:	2207      	movs	r2, #7
 8003cb2:	601a      	str	r2, [r3, #0]
}
 8003cb4:	bf00      	nop
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr
 8003cbc:	e000e010 	.word	0xe000e010
 8003cc0:	e000e018 	.word	0xe000e018
 8003cc4:	20000000 	.word	0x20000000
 8003cc8:	10624dd3 	.word	0x10624dd3
 8003ccc:	e000e014 	.word	0xe000e014

08003cd0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003cd6:	f3ef 8305 	mrs	r3, IPSR
 8003cda:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b0f      	cmp	r3, #15
 8003ce0:	d914      	bls.n	8003d0c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003ce2:	4a16      	ldr	r2, [pc, #88]	; (8003d3c <vPortValidateInterruptPriority+0x6c>)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003cec:	4b14      	ldr	r3, [pc, #80]	; (8003d40 <vPortValidateInterruptPriority+0x70>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	7afa      	ldrb	r2, [r7, #11]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d20a      	bcs.n	8003d0c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfa:	f383 8811 	msr	BASEPRI, r3
 8003cfe:	f3bf 8f6f 	isb	sy
 8003d02:	f3bf 8f4f 	dsb	sy
 8003d06:	607b      	str	r3, [r7, #4]
}
 8003d08:	bf00      	nop
 8003d0a:	e7fe      	b.n	8003d0a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003d0c:	4b0d      	ldr	r3, [pc, #52]	; (8003d44 <vPortValidateInterruptPriority+0x74>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d14:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <vPortValidateInterruptPriority+0x78>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d90a      	bls.n	8003d32 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d20:	f383 8811 	msr	BASEPRI, r3
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	603b      	str	r3, [r7, #0]
}
 8003d2e:	bf00      	nop
 8003d30:	e7fe      	b.n	8003d30 <vPortValidateInterruptPriority+0x60>
	}
 8003d32:	bf00      	nop
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr
 8003d3c:	e000e3f0 	.word	0xe000e3f0
 8003d40:	20000414 	.word	0x20000414
 8003d44:	e000ed0c 	.word	0xe000ed0c
 8003d48:	20000418 	.word	0x20000418

08003d4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08a      	sub	sp, #40	; 0x28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003d54:	2300      	movs	r3, #0
 8003d56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003d58:	f7ff f958 	bl	800300c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003d5c:	4b58      	ldr	r3, [pc, #352]	; (8003ec0 <pvPortMalloc+0x174>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003d64:	f000 f910 	bl	8003f88 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003d68:	4b56      	ldr	r3, [pc, #344]	; (8003ec4 <pvPortMalloc+0x178>)
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f040 808e 	bne.w	8003e92 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d01d      	beq.n	8003db8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003d7c:	2208      	movs	r2, #8
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4413      	add	r3, r2
 8003d82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d014      	beq.n	8003db8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f023 0307 	bic.w	r3, r3, #7
 8003d94:	3308      	adds	r3, #8
 8003d96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <pvPortMalloc+0x6c>
	__asm volatile
 8003da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	617b      	str	r3, [r7, #20]
}
 8003db4:	bf00      	nop
 8003db6:	e7fe      	b.n	8003db6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d069      	beq.n	8003e92 <pvPortMalloc+0x146>
 8003dbe:	4b42      	ldr	r3, [pc, #264]	; (8003ec8 <pvPortMalloc+0x17c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d864      	bhi.n	8003e92 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003dc8:	4b40      	ldr	r3, [pc, #256]	; (8003ecc <pvPortMalloc+0x180>)
 8003dca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003dcc:	4b3f      	ldr	r3, [pc, #252]	; (8003ecc <pvPortMalloc+0x180>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003dd2:	e004      	b.n	8003dde <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d903      	bls.n	8003df0 <pvPortMalloc+0xa4>
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1f1      	bne.n	8003dd4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003df0:	4b33      	ldr	r3, [pc, #204]	; (8003ec0 <pvPortMalloc+0x174>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d04b      	beq.n	8003e92 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2208      	movs	r2, #8
 8003e00:	4413      	add	r3, r2
 8003e02:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	1ad2      	subs	r2, r2, r3
 8003e14:	2308      	movs	r3, #8
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d91f      	bls.n	8003e5c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4413      	add	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <pvPortMalloc+0xf8>
	__asm volatile
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	613b      	str	r3, [r7, #16]
}
 8003e40:	bf00      	nop
 8003e42:	e7fe      	b.n	8003e42 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	1ad2      	subs	r2, r2, r3
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003e56:	69b8      	ldr	r0, [r7, #24]
 8003e58:	f000 f8f8 	bl	800404c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003e5c:	4b1a      	ldr	r3, [pc, #104]	; (8003ec8 <pvPortMalloc+0x17c>)
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	4a18      	ldr	r2, [pc, #96]	; (8003ec8 <pvPortMalloc+0x17c>)
 8003e68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003e6a:	4b17      	ldr	r3, [pc, #92]	; (8003ec8 <pvPortMalloc+0x17c>)
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	4b18      	ldr	r3, [pc, #96]	; (8003ed0 <pvPortMalloc+0x184>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d203      	bcs.n	8003e7e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003e76:	4b14      	ldr	r3, [pc, #80]	; (8003ec8 <pvPortMalloc+0x17c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a15      	ldr	r2, [pc, #84]	; (8003ed0 <pvPortMalloc+0x184>)
 8003e7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	4b10      	ldr	r3, [pc, #64]	; (8003ec4 <pvPortMalloc+0x178>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	431a      	orrs	r2, r3
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	2200      	movs	r2, #0
 8003e90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003e92:	f7ff f8c9 	bl	8003028 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <pvPortMalloc+0x16a>
	__asm volatile
 8003ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	60fb      	str	r3, [r7, #12]
}
 8003eb2:	bf00      	nop
 8003eb4:	e7fe      	b.n	8003eb4 <pvPortMalloc+0x168>
	return pvReturn;
 8003eb6:	69fb      	ldr	r3, [r7, #28]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3728      	adds	r7, #40	; 0x28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	20001024 	.word	0x20001024
 8003ec4:	20001030 	.word	0x20001030
 8003ec8:	20001028 	.word	0x20001028
 8003ecc:	2000101c 	.word	0x2000101c
 8003ed0:	2000102c 	.word	0x2000102c

08003ed4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d048      	beq.n	8003f78 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003ee6:	2308      	movs	r3, #8
 8003ee8:	425b      	negs	r3, r3
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	4413      	add	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	4b21      	ldr	r3, [pc, #132]	; (8003f80 <vPortFree+0xac>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4013      	ands	r3, r2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10a      	bne.n	8003f18 <vPortFree+0x44>
	__asm volatile
 8003f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f06:	f383 8811 	msr	BASEPRI, r3
 8003f0a:	f3bf 8f6f 	isb	sy
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	60fb      	str	r3, [r7, #12]
}
 8003f14:	bf00      	nop
 8003f16:	e7fe      	b.n	8003f16 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00a      	beq.n	8003f36 <vPortFree+0x62>
	__asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	60bb      	str	r3, [r7, #8]
}
 8003f32:	bf00      	nop
 8003f34:	e7fe      	b.n	8003f34 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <vPortFree+0xac>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d019      	beq.n	8003f78 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d115      	bne.n	8003f78 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <vPortFree+0xac>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	43db      	mvns	r3, r3
 8003f56:	401a      	ands	r2, r3
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003f5c:	f7ff f856 	bl	800300c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <vPortFree+0xb0>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4413      	add	r3, r2
 8003f6a:	4a06      	ldr	r2, [pc, #24]	; (8003f84 <vPortFree+0xb0>)
 8003f6c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003f6e:	6938      	ldr	r0, [r7, #16]
 8003f70:	f000 f86c 	bl	800404c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003f74:	f7ff f858 	bl	8003028 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003f78:	bf00      	nop
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	20001030 	.word	0x20001030
 8003f84:	20001028 	.word	0x20001028

08003f88 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003f8e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003f92:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003f94:	4b27      	ldr	r3, [pc, #156]	; (8004034 <prvHeapInit+0xac>)
 8003f96:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00c      	beq.n	8003fbc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	3307      	adds	r3, #7
 8003fa6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f023 0307 	bic.w	r3, r3, #7
 8003fae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	4a1f      	ldr	r2, [pc, #124]	; (8004034 <prvHeapInit+0xac>)
 8003fb8:	4413      	add	r3, r2
 8003fba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003fc0:	4a1d      	ldr	r2, [pc, #116]	; (8004038 <prvHeapInit+0xb0>)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003fc6:	4b1c      	ldr	r3, [pc, #112]	; (8004038 <prvHeapInit+0xb0>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003fd4:	2208      	movs	r2, #8
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	1a9b      	subs	r3, r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0307 	bic.w	r3, r3, #7
 8003fe2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4a15      	ldr	r2, [pc, #84]	; (800403c <prvHeapInit+0xb4>)
 8003fe8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003fea:	4b14      	ldr	r3, [pc, #80]	; (800403c <prvHeapInit+0xb4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003ff2:	4b12      	ldr	r3, [pc, #72]	; (800403c <prvHeapInit+0xb4>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	1ad2      	subs	r2, r2, r3
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004008:	4b0c      	ldr	r3, [pc, #48]	; (800403c <prvHeapInit+0xb4>)
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	4a0a      	ldr	r2, [pc, #40]	; (8004040 <prvHeapInit+0xb8>)
 8004016:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	4a09      	ldr	r2, [pc, #36]	; (8004044 <prvHeapInit+0xbc>)
 800401e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004020:	4b09      	ldr	r3, [pc, #36]	; (8004048 <prvHeapInit+0xc0>)
 8004022:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004026:	601a      	str	r2, [r3, #0]
}
 8004028:	bf00      	nop
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	bc80      	pop	{r7}
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	2000041c 	.word	0x2000041c
 8004038:	2000101c 	.word	0x2000101c
 800403c:	20001024 	.word	0x20001024
 8004040:	2000102c 	.word	0x2000102c
 8004044:	20001028 	.word	0x20001028
 8004048:	20001030 	.word	0x20001030

0800404c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004054:	4b27      	ldr	r3, [pc, #156]	; (80040f4 <prvInsertBlockIntoFreeList+0xa8>)
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	e002      	b.n	8004060 <prvInsertBlockIntoFreeList+0x14>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	429a      	cmp	r2, r3
 8004068:	d8f7      	bhi.n	800405a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	4413      	add	r3, r2
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	429a      	cmp	r2, r3
 800407a:	d108      	bne.n	800408e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	441a      	add	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	441a      	add	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d118      	bne.n	80040d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	4b14      	ldr	r3, [pc, #80]	; (80040f8 <prvInsertBlockIntoFreeList+0xac>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d00d      	beq.n	80040ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	441a      	add	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	e008      	b.n	80040dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80040ca:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <prvInsertBlockIntoFreeList+0xac>)
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	e003      	b.n	80040dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d002      	beq.n	80040ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040ea:	bf00      	nop
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr
 80040f4:	2000101c 	.word	0x2000101c
 80040f8:	20001024 	.word	0x20001024

080040fc <__errno>:
 80040fc:	4b01      	ldr	r3, [pc, #4]	; (8004104 <__errno+0x8>)
 80040fe:	6818      	ldr	r0, [r3, #0]
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	20000010 	.word	0x20000010

08004108 <__libc_init_array>:
 8004108:	b570      	push	{r4, r5, r6, lr}
 800410a:	2600      	movs	r6, #0
 800410c:	4d0c      	ldr	r5, [pc, #48]	; (8004140 <__libc_init_array+0x38>)
 800410e:	4c0d      	ldr	r4, [pc, #52]	; (8004144 <__libc_init_array+0x3c>)
 8004110:	1b64      	subs	r4, r4, r5
 8004112:	10a4      	asrs	r4, r4, #2
 8004114:	42a6      	cmp	r6, r4
 8004116:	d109      	bne.n	800412c <__libc_init_array+0x24>
 8004118:	f000 ff90 	bl	800503c <_init>
 800411c:	2600      	movs	r6, #0
 800411e:	4d0a      	ldr	r5, [pc, #40]	; (8004148 <__libc_init_array+0x40>)
 8004120:	4c0a      	ldr	r4, [pc, #40]	; (800414c <__libc_init_array+0x44>)
 8004122:	1b64      	subs	r4, r4, r5
 8004124:	10a4      	asrs	r4, r4, #2
 8004126:	42a6      	cmp	r6, r4
 8004128:	d105      	bne.n	8004136 <__libc_init_array+0x2e>
 800412a:	bd70      	pop	{r4, r5, r6, pc}
 800412c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004130:	4798      	blx	r3
 8004132:	3601      	adds	r6, #1
 8004134:	e7ee      	b.n	8004114 <__libc_init_array+0xc>
 8004136:	f855 3b04 	ldr.w	r3, [r5], #4
 800413a:	4798      	blx	r3
 800413c:	3601      	adds	r6, #1
 800413e:	e7f2      	b.n	8004126 <__libc_init_array+0x1e>
 8004140:	08005198 	.word	0x08005198
 8004144:	08005198 	.word	0x08005198
 8004148:	08005198 	.word	0x08005198
 800414c:	0800519c 	.word	0x0800519c

08004150 <memcpy>:
 8004150:	440a      	add	r2, r1
 8004152:	4291      	cmp	r1, r2
 8004154:	f100 33ff 	add.w	r3, r0, #4294967295
 8004158:	d100      	bne.n	800415c <memcpy+0xc>
 800415a:	4770      	bx	lr
 800415c:	b510      	push	{r4, lr}
 800415e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004162:	4291      	cmp	r1, r2
 8004164:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004168:	d1f9      	bne.n	800415e <memcpy+0xe>
 800416a:	bd10      	pop	{r4, pc}

0800416c <memset>:
 800416c:	4603      	mov	r3, r0
 800416e:	4402      	add	r2, r0
 8004170:	4293      	cmp	r3, r2
 8004172:	d100      	bne.n	8004176 <memset+0xa>
 8004174:	4770      	bx	lr
 8004176:	f803 1b01 	strb.w	r1, [r3], #1
 800417a:	e7f9      	b.n	8004170 <memset+0x4>

0800417c <iprintf>:
 800417c:	b40f      	push	{r0, r1, r2, r3}
 800417e:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <iprintf+0x2c>)
 8004180:	b513      	push	{r0, r1, r4, lr}
 8004182:	681c      	ldr	r4, [r3, #0]
 8004184:	b124      	cbz	r4, 8004190 <iprintf+0x14>
 8004186:	69a3      	ldr	r3, [r4, #24]
 8004188:	b913      	cbnz	r3, 8004190 <iprintf+0x14>
 800418a:	4620      	mov	r0, r4
 800418c:	f000 f866 	bl	800425c <__sinit>
 8004190:	ab05      	add	r3, sp, #20
 8004192:	4620      	mov	r0, r4
 8004194:	9a04      	ldr	r2, [sp, #16]
 8004196:	68a1      	ldr	r1, [r4, #8]
 8004198:	9301      	str	r3, [sp, #4]
 800419a:	f000 f981 	bl	80044a0 <_vfiprintf_r>
 800419e:	b002      	add	sp, #8
 80041a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041a4:	b004      	add	sp, #16
 80041a6:	4770      	bx	lr
 80041a8:	20000010 	.word	0x20000010

080041ac <std>:
 80041ac:	2300      	movs	r3, #0
 80041ae:	b510      	push	{r4, lr}
 80041b0:	4604      	mov	r4, r0
 80041b2:	e9c0 3300 	strd	r3, r3, [r0]
 80041b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041ba:	6083      	str	r3, [r0, #8]
 80041bc:	8181      	strh	r1, [r0, #12]
 80041be:	6643      	str	r3, [r0, #100]	; 0x64
 80041c0:	81c2      	strh	r2, [r0, #14]
 80041c2:	6183      	str	r3, [r0, #24]
 80041c4:	4619      	mov	r1, r3
 80041c6:	2208      	movs	r2, #8
 80041c8:	305c      	adds	r0, #92	; 0x5c
 80041ca:	f7ff ffcf 	bl	800416c <memset>
 80041ce:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <std+0x38>)
 80041d0:	6224      	str	r4, [r4, #32]
 80041d2:	6263      	str	r3, [r4, #36]	; 0x24
 80041d4:	4b04      	ldr	r3, [pc, #16]	; (80041e8 <std+0x3c>)
 80041d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80041d8:	4b04      	ldr	r3, [pc, #16]	; (80041ec <std+0x40>)
 80041da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80041dc:	4b04      	ldr	r3, [pc, #16]	; (80041f0 <std+0x44>)
 80041de:	6323      	str	r3, [r4, #48]	; 0x30
 80041e0:	bd10      	pop	{r4, pc}
 80041e2:	bf00      	nop
 80041e4:	08004a4d 	.word	0x08004a4d
 80041e8:	08004a6f 	.word	0x08004a6f
 80041ec:	08004aa7 	.word	0x08004aa7
 80041f0:	08004acb 	.word	0x08004acb

080041f4 <_cleanup_r>:
 80041f4:	4901      	ldr	r1, [pc, #4]	; (80041fc <_cleanup_r+0x8>)
 80041f6:	f000 b8af 	b.w	8004358 <_fwalk_reent>
 80041fa:	bf00      	nop
 80041fc:	08004da5 	.word	0x08004da5

08004200 <__sfmoreglue>:
 8004200:	b570      	push	{r4, r5, r6, lr}
 8004202:	2568      	movs	r5, #104	; 0x68
 8004204:	1e4a      	subs	r2, r1, #1
 8004206:	4355      	muls	r5, r2
 8004208:	460e      	mov	r6, r1
 800420a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800420e:	f000 f8c5 	bl	800439c <_malloc_r>
 8004212:	4604      	mov	r4, r0
 8004214:	b140      	cbz	r0, 8004228 <__sfmoreglue+0x28>
 8004216:	2100      	movs	r1, #0
 8004218:	e9c0 1600 	strd	r1, r6, [r0]
 800421c:	300c      	adds	r0, #12
 800421e:	60a0      	str	r0, [r4, #8]
 8004220:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004224:	f7ff ffa2 	bl	800416c <memset>
 8004228:	4620      	mov	r0, r4
 800422a:	bd70      	pop	{r4, r5, r6, pc}

0800422c <__sfp_lock_acquire>:
 800422c:	4801      	ldr	r0, [pc, #4]	; (8004234 <__sfp_lock_acquire+0x8>)
 800422e:	f000 b8b3 	b.w	8004398 <__retarget_lock_acquire_recursive>
 8004232:	bf00      	nop
 8004234:	200010dc 	.word	0x200010dc

08004238 <__sfp_lock_release>:
 8004238:	4801      	ldr	r0, [pc, #4]	; (8004240 <__sfp_lock_release+0x8>)
 800423a:	f000 b8ae 	b.w	800439a <__retarget_lock_release_recursive>
 800423e:	bf00      	nop
 8004240:	200010dc 	.word	0x200010dc

08004244 <__sinit_lock_acquire>:
 8004244:	4801      	ldr	r0, [pc, #4]	; (800424c <__sinit_lock_acquire+0x8>)
 8004246:	f000 b8a7 	b.w	8004398 <__retarget_lock_acquire_recursive>
 800424a:	bf00      	nop
 800424c:	200010d7 	.word	0x200010d7

08004250 <__sinit_lock_release>:
 8004250:	4801      	ldr	r0, [pc, #4]	; (8004258 <__sinit_lock_release+0x8>)
 8004252:	f000 b8a2 	b.w	800439a <__retarget_lock_release_recursive>
 8004256:	bf00      	nop
 8004258:	200010d7 	.word	0x200010d7

0800425c <__sinit>:
 800425c:	b510      	push	{r4, lr}
 800425e:	4604      	mov	r4, r0
 8004260:	f7ff fff0 	bl	8004244 <__sinit_lock_acquire>
 8004264:	69a3      	ldr	r3, [r4, #24]
 8004266:	b11b      	cbz	r3, 8004270 <__sinit+0x14>
 8004268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800426c:	f7ff bff0 	b.w	8004250 <__sinit_lock_release>
 8004270:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004274:	6523      	str	r3, [r4, #80]	; 0x50
 8004276:	4b13      	ldr	r3, [pc, #76]	; (80042c4 <__sinit+0x68>)
 8004278:	4a13      	ldr	r2, [pc, #76]	; (80042c8 <__sinit+0x6c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	62a2      	str	r2, [r4, #40]	; 0x28
 800427e:	42a3      	cmp	r3, r4
 8004280:	bf08      	it	eq
 8004282:	2301      	moveq	r3, #1
 8004284:	4620      	mov	r0, r4
 8004286:	bf08      	it	eq
 8004288:	61a3      	streq	r3, [r4, #24]
 800428a:	f000 f81f 	bl	80042cc <__sfp>
 800428e:	6060      	str	r0, [r4, #4]
 8004290:	4620      	mov	r0, r4
 8004292:	f000 f81b 	bl	80042cc <__sfp>
 8004296:	60a0      	str	r0, [r4, #8]
 8004298:	4620      	mov	r0, r4
 800429a:	f000 f817 	bl	80042cc <__sfp>
 800429e:	2200      	movs	r2, #0
 80042a0:	2104      	movs	r1, #4
 80042a2:	60e0      	str	r0, [r4, #12]
 80042a4:	6860      	ldr	r0, [r4, #4]
 80042a6:	f7ff ff81 	bl	80041ac <std>
 80042aa:	2201      	movs	r2, #1
 80042ac:	2109      	movs	r1, #9
 80042ae:	68a0      	ldr	r0, [r4, #8]
 80042b0:	f7ff ff7c 	bl	80041ac <std>
 80042b4:	2202      	movs	r2, #2
 80042b6:	2112      	movs	r1, #18
 80042b8:	68e0      	ldr	r0, [r4, #12]
 80042ba:	f7ff ff77 	bl	80041ac <std>
 80042be:	2301      	movs	r3, #1
 80042c0:	61a3      	str	r3, [r4, #24]
 80042c2:	e7d1      	b.n	8004268 <__sinit+0xc>
 80042c4:	08005100 	.word	0x08005100
 80042c8:	080041f5 	.word	0x080041f5

080042cc <__sfp>:
 80042cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ce:	4607      	mov	r7, r0
 80042d0:	f7ff ffac 	bl	800422c <__sfp_lock_acquire>
 80042d4:	4b1e      	ldr	r3, [pc, #120]	; (8004350 <__sfp+0x84>)
 80042d6:	681e      	ldr	r6, [r3, #0]
 80042d8:	69b3      	ldr	r3, [r6, #24]
 80042da:	b913      	cbnz	r3, 80042e2 <__sfp+0x16>
 80042dc:	4630      	mov	r0, r6
 80042de:	f7ff ffbd 	bl	800425c <__sinit>
 80042e2:	3648      	adds	r6, #72	; 0x48
 80042e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80042e8:	3b01      	subs	r3, #1
 80042ea:	d503      	bpl.n	80042f4 <__sfp+0x28>
 80042ec:	6833      	ldr	r3, [r6, #0]
 80042ee:	b30b      	cbz	r3, 8004334 <__sfp+0x68>
 80042f0:	6836      	ldr	r6, [r6, #0]
 80042f2:	e7f7      	b.n	80042e4 <__sfp+0x18>
 80042f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80042f8:	b9d5      	cbnz	r5, 8004330 <__sfp+0x64>
 80042fa:	4b16      	ldr	r3, [pc, #88]	; (8004354 <__sfp+0x88>)
 80042fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004300:	60e3      	str	r3, [r4, #12]
 8004302:	6665      	str	r5, [r4, #100]	; 0x64
 8004304:	f000 f847 	bl	8004396 <__retarget_lock_init_recursive>
 8004308:	f7ff ff96 	bl	8004238 <__sfp_lock_release>
 800430c:	2208      	movs	r2, #8
 800430e:	4629      	mov	r1, r5
 8004310:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004314:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004318:	6025      	str	r5, [r4, #0]
 800431a:	61a5      	str	r5, [r4, #24]
 800431c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004320:	f7ff ff24 	bl	800416c <memset>
 8004324:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004328:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800432c:	4620      	mov	r0, r4
 800432e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004330:	3468      	adds	r4, #104	; 0x68
 8004332:	e7d9      	b.n	80042e8 <__sfp+0x1c>
 8004334:	2104      	movs	r1, #4
 8004336:	4638      	mov	r0, r7
 8004338:	f7ff ff62 	bl	8004200 <__sfmoreglue>
 800433c:	4604      	mov	r4, r0
 800433e:	6030      	str	r0, [r6, #0]
 8004340:	2800      	cmp	r0, #0
 8004342:	d1d5      	bne.n	80042f0 <__sfp+0x24>
 8004344:	f7ff ff78 	bl	8004238 <__sfp_lock_release>
 8004348:	230c      	movs	r3, #12
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	e7ee      	b.n	800432c <__sfp+0x60>
 800434e:	bf00      	nop
 8004350:	08005100 	.word	0x08005100
 8004354:	ffff0001 	.word	0xffff0001

08004358 <_fwalk_reent>:
 8004358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800435c:	4606      	mov	r6, r0
 800435e:	4688      	mov	r8, r1
 8004360:	2700      	movs	r7, #0
 8004362:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004366:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800436a:	f1b9 0901 	subs.w	r9, r9, #1
 800436e:	d505      	bpl.n	800437c <_fwalk_reent+0x24>
 8004370:	6824      	ldr	r4, [r4, #0]
 8004372:	2c00      	cmp	r4, #0
 8004374:	d1f7      	bne.n	8004366 <_fwalk_reent+0xe>
 8004376:	4638      	mov	r0, r7
 8004378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800437c:	89ab      	ldrh	r3, [r5, #12]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d907      	bls.n	8004392 <_fwalk_reent+0x3a>
 8004382:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004386:	3301      	adds	r3, #1
 8004388:	d003      	beq.n	8004392 <_fwalk_reent+0x3a>
 800438a:	4629      	mov	r1, r5
 800438c:	4630      	mov	r0, r6
 800438e:	47c0      	blx	r8
 8004390:	4307      	orrs	r7, r0
 8004392:	3568      	adds	r5, #104	; 0x68
 8004394:	e7e9      	b.n	800436a <_fwalk_reent+0x12>

08004396 <__retarget_lock_init_recursive>:
 8004396:	4770      	bx	lr

08004398 <__retarget_lock_acquire_recursive>:
 8004398:	4770      	bx	lr

0800439a <__retarget_lock_release_recursive>:
 800439a:	4770      	bx	lr

0800439c <_malloc_r>:
 800439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439e:	1ccd      	adds	r5, r1, #3
 80043a0:	f025 0503 	bic.w	r5, r5, #3
 80043a4:	3508      	adds	r5, #8
 80043a6:	2d0c      	cmp	r5, #12
 80043a8:	bf38      	it	cc
 80043aa:	250c      	movcc	r5, #12
 80043ac:	2d00      	cmp	r5, #0
 80043ae:	4606      	mov	r6, r0
 80043b0:	db01      	blt.n	80043b6 <_malloc_r+0x1a>
 80043b2:	42a9      	cmp	r1, r5
 80043b4:	d903      	bls.n	80043be <_malloc_r+0x22>
 80043b6:	230c      	movs	r3, #12
 80043b8:	6033      	str	r3, [r6, #0]
 80043ba:	2000      	movs	r0, #0
 80043bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043be:	f000 fdb1 	bl	8004f24 <__malloc_lock>
 80043c2:	4921      	ldr	r1, [pc, #132]	; (8004448 <_malloc_r+0xac>)
 80043c4:	680a      	ldr	r2, [r1, #0]
 80043c6:	4614      	mov	r4, r2
 80043c8:	b99c      	cbnz	r4, 80043f2 <_malloc_r+0x56>
 80043ca:	4f20      	ldr	r7, [pc, #128]	; (800444c <_malloc_r+0xb0>)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	b923      	cbnz	r3, 80043da <_malloc_r+0x3e>
 80043d0:	4621      	mov	r1, r4
 80043d2:	4630      	mov	r0, r6
 80043d4:	f000 fb2a 	bl	8004a2c <_sbrk_r>
 80043d8:	6038      	str	r0, [r7, #0]
 80043da:	4629      	mov	r1, r5
 80043dc:	4630      	mov	r0, r6
 80043de:	f000 fb25 	bl	8004a2c <_sbrk_r>
 80043e2:	1c43      	adds	r3, r0, #1
 80043e4:	d123      	bne.n	800442e <_malloc_r+0x92>
 80043e6:	230c      	movs	r3, #12
 80043e8:	4630      	mov	r0, r6
 80043ea:	6033      	str	r3, [r6, #0]
 80043ec:	f000 fda0 	bl	8004f30 <__malloc_unlock>
 80043f0:	e7e3      	b.n	80043ba <_malloc_r+0x1e>
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	1b5b      	subs	r3, r3, r5
 80043f6:	d417      	bmi.n	8004428 <_malloc_r+0x8c>
 80043f8:	2b0b      	cmp	r3, #11
 80043fa:	d903      	bls.n	8004404 <_malloc_r+0x68>
 80043fc:	6023      	str	r3, [r4, #0]
 80043fe:	441c      	add	r4, r3
 8004400:	6025      	str	r5, [r4, #0]
 8004402:	e004      	b.n	800440e <_malloc_r+0x72>
 8004404:	6863      	ldr	r3, [r4, #4]
 8004406:	42a2      	cmp	r2, r4
 8004408:	bf0c      	ite	eq
 800440a:	600b      	streq	r3, [r1, #0]
 800440c:	6053      	strne	r3, [r2, #4]
 800440e:	4630      	mov	r0, r6
 8004410:	f000 fd8e 	bl	8004f30 <__malloc_unlock>
 8004414:	f104 000b 	add.w	r0, r4, #11
 8004418:	1d23      	adds	r3, r4, #4
 800441a:	f020 0007 	bic.w	r0, r0, #7
 800441e:	1ac2      	subs	r2, r0, r3
 8004420:	d0cc      	beq.n	80043bc <_malloc_r+0x20>
 8004422:	1a1b      	subs	r3, r3, r0
 8004424:	50a3      	str	r3, [r4, r2]
 8004426:	e7c9      	b.n	80043bc <_malloc_r+0x20>
 8004428:	4622      	mov	r2, r4
 800442a:	6864      	ldr	r4, [r4, #4]
 800442c:	e7cc      	b.n	80043c8 <_malloc_r+0x2c>
 800442e:	1cc4      	adds	r4, r0, #3
 8004430:	f024 0403 	bic.w	r4, r4, #3
 8004434:	42a0      	cmp	r0, r4
 8004436:	d0e3      	beq.n	8004400 <_malloc_r+0x64>
 8004438:	1a21      	subs	r1, r4, r0
 800443a:	4630      	mov	r0, r6
 800443c:	f000 faf6 	bl	8004a2c <_sbrk_r>
 8004440:	3001      	adds	r0, #1
 8004442:	d1dd      	bne.n	8004400 <_malloc_r+0x64>
 8004444:	e7cf      	b.n	80043e6 <_malloc_r+0x4a>
 8004446:	bf00      	nop
 8004448:	20001034 	.word	0x20001034
 800444c:	20001038 	.word	0x20001038

08004450 <__sfputc_r>:
 8004450:	6893      	ldr	r3, [r2, #8]
 8004452:	b410      	push	{r4}
 8004454:	3b01      	subs	r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	6093      	str	r3, [r2, #8]
 800445a:	da07      	bge.n	800446c <__sfputc_r+0x1c>
 800445c:	6994      	ldr	r4, [r2, #24]
 800445e:	42a3      	cmp	r3, r4
 8004460:	db01      	blt.n	8004466 <__sfputc_r+0x16>
 8004462:	290a      	cmp	r1, #10
 8004464:	d102      	bne.n	800446c <__sfputc_r+0x1c>
 8004466:	bc10      	pop	{r4}
 8004468:	f000 bb34 	b.w	8004ad4 <__swbuf_r>
 800446c:	6813      	ldr	r3, [r2, #0]
 800446e:	1c58      	adds	r0, r3, #1
 8004470:	6010      	str	r0, [r2, #0]
 8004472:	7019      	strb	r1, [r3, #0]
 8004474:	4608      	mov	r0, r1
 8004476:	bc10      	pop	{r4}
 8004478:	4770      	bx	lr

0800447a <__sfputs_r>:
 800447a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447c:	4606      	mov	r6, r0
 800447e:	460f      	mov	r7, r1
 8004480:	4614      	mov	r4, r2
 8004482:	18d5      	adds	r5, r2, r3
 8004484:	42ac      	cmp	r4, r5
 8004486:	d101      	bne.n	800448c <__sfputs_r+0x12>
 8004488:	2000      	movs	r0, #0
 800448a:	e007      	b.n	800449c <__sfputs_r+0x22>
 800448c:	463a      	mov	r2, r7
 800448e:	4630      	mov	r0, r6
 8004490:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004494:	f7ff ffdc 	bl	8004450 <__sfputc_r>
 8004498:	1c43      	adds	r3, r0, #1
 800449a:	d1f3      	bne.n	8004484 <__sfputs_r+0xa>
 800449c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044a0 <_vfiprintf_r>:
 80044a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044a4:	460d      	mov	r5, r1
 80044a6:	4614      	mov	r4, r2
 80044a8:	4698      	mov	r8, r3
 80044aa:	4606      	mov	r6, r0
 80044ac:	b09d      	sub	sp, #116	; 0x74
 80044ae:	b118      	cbz	r0, 80044b8 <_vfiprintf_r+0x18>
 80044b0:	6983      	ldr	r3, [r0, #24]
 80044b2:	b90b      	cbnz	r3, 80044b8 <_vfiprintf_r+0x18>
 80044b4:	f7ff fed2 	bl	800425c <__sinit>
 80044b8:	4b89      	ldr	r3, [pc, #548]	; (80046e0 <_vfiprintf_r+0x240>)
 80044ba:	429d      	cmp	r5, r3
 80044bc:	d11b      	bne.n	80044f6 <_vfiprintf_r+0x56>
 80044be:	6875      	ldr	r5, [r6, #4]
 80044c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044c2:	07d9      	lsls	r1, r3, #31
 80044c4:	d405      	bmi.n	80044d2 <_vfiprintf_r+0x32>
 80044c6:	89ab      	ldrh	r3, [r5, #12]
 80044c8:	059a      	lsls	r2, r3, #22
 80044ca:	d402      	bmi.n	80044d2 <_vfiprintf_r+0x32>
 80044cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044ce:	f7ff ff63 	bl	8004398 <__retarget_lock_acquire_recursive>
 80044d2:	89ab      	ldrh	r3, [r5, #12]
 80044d4:	071b      	lsls	r3, r3, #28
 80044d6:	d501      	bpl.n	80044dc <_vfiprintf_r+0x3c>
 80044d8:	692b      	ldr	r3, [r5, #16]
 80044da:	b9eb      	cbnz	r3, 8004518 <_vfiprintf_r+0x78>
 80044dc:	4629      	mov	r1, r5
 80044de:	4630      	mov	r0, r6
 80044e0:	f000 fb5c 	bl	8004b9c <__swsetup_r>
 80044e4:	b1c0      	cbz	r0, 8004518 <_vfiprintf_r+0x78>
 80044e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044e8:	07dc      	lsls	r4, r3, #31
 80044ea:	d50e      	bpl.n	800450a <_vfiprintf_r+0x6a>
 80044ec:	f04f 30ff 	mov.w	r0, #4294967295
 80044f0:	b01d      	add	sp, #116	; 0x74
 80044f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044f6:	4b7b      	ldr	r3, [pc, #492]	; (80046e4 <_vfiprintf_r+0x244>)
 80044f8:	429d      	cmp	r5, r3
 80044fa:	d101      	bne.n	8004500 <_vfiprintf_r+0x60>
 80044fc:	68b5      	ldr	r5, [r6, #8]
 80044fe:	e7df      	b.n	80044c0 <_vfiprintf_r+0x20>
 8004500:	4b79      	ldr	r3, [pc, #484]	; (80046e8 <_vfiprintf_r+0x248>)
 8004502:	429d      	cmp	r5, r3
 8004504:	bf08      	it	eq
 8004506:	68f5      	ldreq	r5, [r6, #12]
 8004508:	e7da      	b.n	80044c0 <_vfiprintf_r+0x20>
 800450a:	89ab      	ldrh	r3, [r5, #12]
 800450c:	0598      	lsls	r0, r3, #22
 800450e:	d4ed      	bmi.n	80044ec <_vfiprintf_r+0x4c>
 8004510:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004512:	f7ff ff42 	bl	800439a <__retarget_lock_release_recursive>
 8004516:	e7e9      	b.n	80044ec <_vfiprintf_r+0x4c>
 8004518:	2300      	movs	r3, #0
 800451a:	9309      	str	r3, [sp, #36]	; 0x24
 800451c:	2320      	movs	r3, #32
 800451e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004522:	2330      	movs	r3, #48	; 0x30
 8004524:	f04f 0901 	mov.w	r9, #1
 8004528:	f8cd 800c 	str.w	r8, [sp, #12]
 800452c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80046ec <_vfiprintf_r+0x24c>
 8004530:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004534:	4623      	mov	r3, r4
 8004536:	469a      	mov	sl, r3
 8004538:	f813 2b01 	ldrb.w	r2, [r3], #1
 800453c:	b10a      	cbz	r2, 8004542 <_vfiprintf_r+0xa2>
 800453e:	2a25      	cmp	r2, #37	; 0x25
 8004540:	d1f9      	bne.n	8004536 <_vfiprintf_r+0x96>
 8004542:	ebba 0b04 	subs.w	fp, sl, r4
 8004546:	d00b      	beq.n	8004560 <_vfiprintf_r+0xc0>
 8004548:	465b      	mov	r3, fp
 800454a:	4622      	mov	r2, r4
 800454c:	4629      	mov	r1, r5
 800454e:	4630      	mov	r0, r6
 8004550:	f7ff ff93 	bl	800447a <__sfputs_r>
 8004554:	3001      	adds	r0, #1
 8004556:	f000 80aa 	beq.w	80046ae <_vfiprintf_r+0x20e>
 800455a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800455c:	445a      	add	r2, fp
 800455e:	9209      	str	r2, [sp, #36]	; 0x24
 8004560:	f89a 3000 	ldrb.w	r3, [sl]
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 80a2 	beq.w	80046ae <_vfiprintf_r+0x20e>
 800456a:	2300      	movs	r3, #0
 800456c:	f04f 32ff 	mov.w	r2, #4294967295
 8004570:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004574:	f10a 0a01 	add.w	sl, sl, #1
 8004578:	9304      	str	r3, [sp, #16]
 800457a:	9307      	str	r3, [sp, #28]
 800457c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004580:	931a      	str	r3, [sp, #104]	; 0x68
 8004582:	4654      	mov	r4, sl
 8004584:	2205      	movs	r2, #5
 8004586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800458a:	4858      	ldr	r0, [pc, #352]	; (80046ec <_vfiprintf_r+0x24c>)
 800458c:	f000 fcbc 	bl	8004f08 <memchr>
 8004590:	9a04      	ldr	r2, [sp, #16]
 8004592:	b9d8      	cbnz	r0, 80045cc <_vfiprintf_r+0x12c>
 8004594:	06d1      	lsls	r1, r2, #27
 8004596:	bf44      	itt	mi
 8004598:	2320      	movmi	r3, #32
 800459a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800459e:	0713      	lsls	r3, r2, #28
 80045a0:	bf44      	itt	mi
 80045a2:	232b      	movmi	r3, #43	; 0x2b
 80045a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045a8:	f89a 3000 	ldrb.w	r3, [sl]
 80045ac:	2b2a      	cmp	r3, #42	; 0x2a
 80045ae:	d015      	beq.n	80045dc <_vfiprintf_r+0x13c>
 80045b0:	4654      	mov	r4, sl
 80045b2:	2000      	movs	r0, #0
 80045b4:	f04f 0c0a 	mov.w	ip, #10
 80045b8:	9a07      	ldr	r2, [sp, #28]
 80045ba:	4621      	mov	r1, r4
 80045bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045c0:	3b30      	subs	r3, #48	; 0x30
 80045c2:	2b09      	cmp	r3, #9
 80045c4:	d94e      	bls.n	8004664 <_vfiprintf_r+0x1c4>
 80045c6:	b1b0      	cbz	r0, 80045f6 <_vfiprintf_r+0x156>
 80045c8:	9207      	str	r2, [sp, #28]
 80045ca:	e014      	b.n	80045f6 <_vfiprintf_r+0x156>
 80045cc:	eba0 0308 	sub.w	r3, r0, r8
 80045d0:	fa09 f303 	lsl.w	r3, r9, r3
 80045d4:	4313      	orrs	r3, r2
 80045d6:	46a2      	mov	sl, r4
 80045d8:	9304      	str	r3, [sp, #16]
 80045da:	e7d2      	b.n	8004582 <_vfiprintf_r+0xe2>
 80045dc:	9b03      	ldr	r3, [sp, #12]
 80045de:	1d19      	adds	r1, r3, #4
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	9103      	str	r1, [sp, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	bfbb      	ittet	lt
 80045e8:	425b      	neglt	r3, r3
 80045ea:	f042 0202 	orrlt.w	r2, r2, #2
 80045ee:	9307      	strge	r3, [sp, #28]
 80045f0:	9307      	strlt	r3, [sp, #28]
 80045f2:	bfb8      	it	lt
 80045f4:	9204      	strlt	r2, [sp, #16]
 80045f6:	7823      	ldrb	r3, [r4, #0]
 80045f8:	2b2e      	cmp	r3, #46	; 0x2e
 80045fa:	d10c      	bne.n	8004616 <_vfiprintf_r+0x176>
 80045fc:	7863      	ldrb	r3, [r4, #1]
 80045fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004600:	d135      	bne.n	800466e <_vfiprintf_r+0x1ce>
 8004602:	9b03      	ldr	r3, [sp, #12]
 8004604:	3402      	adds	r4, #2
 8004606:	1d1a      	adds	r2, r3, #4
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	9203      	str	r2, [sp, #12]
 800460c:	2b00      	cmp	r3, #0
 800460e:	bfb8      	it	lt
 8004610:	f04f 33ff 	movlt.w	r3, #4294967295
 8004614:	9305      	str	r3, [sp, #20]
 8004616:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80046fc <_vfiprintf_r+0x25c>
 800461a:	2203      	movs	r2, #3
 800461c:	4650      	mov	r0, sl
 800461e:	7821      	ldrb	r1, [r4, #0]
 8004620:	f000 fc72 	bl	8004f08 <memchr>
 8004624:	b140      	cbz	r0, 8004638 <_vfiprintf_r+0x198>
 8004626:	2340      	movs	r3, #64	; 0x40
 8004628:	eba0 000a 	sub.w	r0, r0, sl
 800462c:	fa03 f000 	lsl.w	r0, r3, r0
 8004630:	9b04      	ldr	r3, [sp, #16]
 8004632:	3401      	adds	r4, #1
 8004634:	4303      	orrs	r3, r0
 8004636:	9304      	str	r3, [sp, #16]
 8004638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800463c:	2206      	movs	r2, #6
 800463e:	482c      	ldr	r0, [pc, #176]	; (80046f0 <_vfiprintf_r+0x250>)
 8004640:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004644:	f000 fc60 	bl	8004f08 <memchr>
 8004648:	2800      	cmp	r0, #0
 800464a:	d03f      	beq.n	80046cc <_vfiprintf_r+0x22c>
 800464c:	4b29      	ldr	r3, [pc, #164]	; (80046f4 <_vfiprintf_r+0x254>)
 800464e:	bb1b      	cbnz	r3, 8004698 <_vfiprintf_r+0x1f8>
 8004650:	9b03      	ldr	r3, [sp, #12]
 8004652:	3307      	adds	r3, #7
 8004654:	f023 0307 	bic.w	r3, r3, #7
 8004658:	3308      	adds	r3, #8
 800465a:	9303      	str	r3, [sp, #12]
 800465c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800465e:	443b      	add	r3, r7
 8004660:	9309      	str	r3, [sp, #36]	; 0x24
 8004662:	e767      	b.n	8004534 <_vfiprintf_r+0x94>
 8004664:	460c      	mov	r4, r1
 8004666:	2001      	movs	r0, #1
 8004668:	fb0c 3202 	mla	r2, ip, r2, r3
 800466c:	e7a5      	b.n	80045ba <_vfiprintf_r+0x11a>
 800466e:	2300      	movs	r3, #0
 8004670:	f04f 0c0a 	mov.w	ip, #10
 8004674:	4619      	mov	r1, r3
 8004676:	3401      	adds	r4, #1
 8004678:	9305      	str	r3, [sp, #20]
 800467a:	4620      	mov	r0, r4
 800467c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004680:	3a30      	subs	r2, #48	; 0x30
 8004682:	2a09      	cmp	r2, #9
 8004684:	d903      	bls.n	800468e <_vfiprintf_r+0x1ee>
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0c5      	beq.n	8004616 <_vfiprintf_r+0x176>
 800468a:	9105      	str	r1, [sp, #20]
 800468c:	e7c3      	b.n	8004616 <_vfiprintf_r+0x176>
 800468e:	4604      	mov	r4, r0
 8004690:	2301      	movs	r3, #1
 8004692:	fb0c 2101 	mla	r1, ip, r1, r2
 8004696:	e7f0      	b.n	800467a <_vfiprintf_r+0x1da>
 8004698:	ab03      	add	r3, sp, #12
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	462a      	mov	r2, r5
 800469e:	4630      	mov	r0, r6
 80046a0:	4b15      	ldr	r3, [pc, #84]	; (80046f8 <_vfiprintf_r+0x258>)
 80046a2:	a904      	add	r1, sp, #16
 80046a4:	f3af 8000 	nop.w
 80046a8:	4607      	mov	r7, r0
 80046aa:	1c78      	adds	r0, r7, #1
 80046ac:	d1d6      	bne.n	800465c <_vfiprintf_r+0x1bc>
 80046ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046b0:	07d9      	lsls	r1, r3, #31
 80046b2:	d405      	bmi.n	80046c0 <_vfiprintf_r+0x220>
 80046b4:	89ab      	ldrh	r3, [r5, #12]
 80046b6:	059a      	lsls	r2, r3, #22
 80046b8:	d402      	bmi.n	80046c0 <_vfiprintf_r+0x220>
 80046ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046bc:	f7ff fe6d 	bl	800439a <__retarget_lock_release_recursive>
 80046c0:	89ab      	ldrh	r3, [r5, #12]
 80046c2:	065b      	lsls	r3, r3, #25
 80046c4:	f53f af12 	bmi.w	80044ec <_vfiprintf_r+0x4c>
 80046c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046ca:	e711      	b.n	80044f0 <_vfiprintf_r+0x50>
 80046cc:	ab03      	add	r3, sp, #12
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	462a      	mov	r2, r5
 80046d2:	4630      	mov	r0, r6
 80046d4:	4b08      	ldr	r3, [pc, #32]	; (80046f8 <_vfiprintf_r+0x258>)
 80046d6:	a904      	add	r1, sp, #16
 80046d8:	f000 f882 	bl	80047e0 <_printf_i>
 80046dc:	e7e4      	b.n	80046a8 <_vfiprintf_r+0x208>
 80046de:	bf00      	nop
 80046e0:	08005124 	.word	0x08005124
 80046e4:	08005144 	.word	0x08005144
 80046e8:	08005104 	.word	0x08005104
 80046ec:	08005164 	.word	0x08005164
 80046f0:	0800516e 	.word	0x0800516e
 80046f4:	00000000 	.word	0x00000000
 80046f8:	0800447b 	.word	0x0800447b
 80046fc:	0800516a 	.word	0x0800516a

08004700 <_printf_common>:
 8004700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004704:	4616      	mov	r6, r2
 8004706:	4699      	mov	r9, r3
 8004708:	688a      	ldr	r2, [r1, #8]
 800470a:	690b      	ldr	r3, [r1, #16]
 800470c:	4607      	mov	r7, r0
 800470e:	4293      	cmp	r3, r2
 8004710:	bfb8      	it	lt
 8004712:	4613      	movlt	r3, r2
 8004714:	6033      	str	r3, [r6, #0]
 8004716:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800471a:	460c      	mov	r4, r1
 800471c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004720:	b10a      	cbz	r2, 8004726 <_printf_common+0x26>
 8004722:	3301      	adds	r3, #1
 8004724:	6033      	str	r3, [r6, #0]
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	0699      	lsls	r1, r3, #26
 800472a:	bf42      	ittt	mi
 800472c:	6833      	ldrmi	r3, [r6, #0]
 800472e:	3302      	addmi	r3, #2
 8004730:	6033      	strmi	r3, [r6, #0]
 8004732:	6825      	ldr	r5, [r4, #0]
 8004734:	f015 0506 	ands.w	r5, r5, #6
 8004738:	d106      	bne.n	8004748 <_printf_common+0x48>
 800473a:	f104 0a19 	add.w	sl, r4, #25
 800473e:	68e3      	ldr	r3, [r4, #12]
 8004740:	6832      	ldr	r2, [r6, #0]
 8004742:	1a9b      	subs	r3, r3, r2
 8004744:	42ab      	cmp	r3, r5
 8004746:	dc28      	bgt.n	800479a <_printf_common+0x9a>
 8004748:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800474c:	1e13      	subs	r3, r2, #0
 800474e:	6822      	ldr	r2, [r4, #0]
 8004750:	bf18      	it	ne
 8004752:	2301      	movne	r3, #1
 8004754:	0692      	lsls	r2, r2, #26
 8004756:	d42d      	bmi.n	80047b4 <_printf_common+0xb4>
 8004758:	4649      	mov	r1, r9
 800475a:	4638      	mov	r0, r7
 800475c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004760:	47c0      	blx	r8
 8004762:	3001      	adds	r0, #1
 8004764:	d020      	beq.n	80047a8 <_printf_common+0xa8>
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	68e5      	ldr	r5, [r4, #12]
 800476a:	f003 0306 	and.w	r3, r3, #6
 800476e:	2b04      	cmp	r3, #4
 8004770:	bf18      	it	ne
 8004772:	2500      	movne	r5, #0
 8004774:	6832      	ldr	r2, [r6, #0]
 8004776:	f04f 0600 	mov.w	r6, #0
 800477a:	68a3      	ldr	r3, [r4, #8]
 800477c:	bf08      	it	eq
 800477e:	1aad      	subeq	r5, r5, r2
 8004780:	6922      	ldr	r2, [r4, #16]
 8004782:	bf08      	it	eq
 8004784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004788:	4293      	cmp	r3, r2
 800478a:	bfc4      	itt	gt
 800478c:	1a9b      	subgt	r3, r3, r2
 800478e:	18ed      	addgt	r5, r5, r3
 8004790:	341a      	adds	r4, #26
 8004792:	42b5      	cmp	r5, r6
 8004794:	d11a      	bne.n	80047cc <_printf_common+0xcc>
 8004796:	2000      	movs	r0, #0
 8004798:	e008      	b.n	80047ac <_printf_common+0xac>
 800479a:	2301      	movs	r3, #1
 800479c:	4652      	mov	r2, sl
 800479e:	4649      	mov	r1, r9
 80047a0:	4638      	mov	r0, r7
 80047a2:	47c0      	blx	r8
 80047a4:	3001      	adds	r0, #1
 80047a6:	d103      	bne.n	80047b0 <_printf_common+0xb0>
 80047a8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b0:	3501      	adds	r5, #1
 80047b2:	e7c4      	b.n	800473e <_printf_common+0x3e>
 80047b4:	2030      	movs	r0, #48	; 0x30
 80047b6:	18e1      	adds	r1, r4, r3
 80047b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047bc:	1c5a      	adds	r2, r3, #1
 80047be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047c2:	4422      	add	r2, r4
 80047c4:	3302      	adds	r3, #2
 80047c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047ca:	e7c5      	b.n	8004758 <_printf_common+0x58>
 80047cc:	2301      	movs	r3, #1
 80047ce:	4622      	mov	r2, r4
 80047d0:	4649      	mov	r1, r9
 80047d2:	4638      	mov	r0, r7
 80047d4:	47c0      	blx	r8
 80047d6:	3001      	adds	r0, #1
 80047d8:	d0e6      	beq.n	80047a8 <_printf_common+0xa8>
 80047da:	3601      	adds	r6, #1
 80047dc:	e7d9      	b.n	8004792 <_printf_common+0x92>
	...

080047e0 <_printf_i>:
 80047e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047e4:	460c      	mov	r4, r1
 80047e6:	7e27      	ldrb	r7, [r4, #24]
 80047e8:	4691      	mov	r9, r2
 80047ea:	2f78      	cmp	r7, #120	; 0x78
 80047ec:	4680      	mov	r8, r0
 80047ee:	469a      	mov	sl, r3
 80047f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80047f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047f6:	d807      	bhi.n	8004808 <_printf_i+0x28>
 80047f8:	2f62      	cmp	r7, #98	; 0x62
 80047fa:	d80a      	bhi.n	8004812 <_printf_i+0x32>
 80047fc:	2f00      	cmp	r7, #0
 80047fe:	f000 80d9 	beq.w	80049b4 <_printf_i+0x1d4>
 8004802:	2f58      	cmp	r7, #88	; 0x58
 8004804:	f000 80a4 	beq.w	8004950 <_printf_i+0x170>
 8004808:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800480c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004810:	e03a      	b.n	8004888 <_printf_i+0xa8>
 8004812:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004816:	2b15      	cmp	r3, #21
 8004818:	d8f6      	bhi.n	8004808 <_printf_i+0x28>
 800481a:	a001      	add	r0, pc, #4	; (adr r0, 8004820 <_printf_i+0x40>)
 800481c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004820:	08004879 	.word	0x08004879
 8004824:	0800488d 	.word	0x0800488d
 8004828:	08004809 	.word	0x08004809
 800482c:	08004809 	.word	0x08004809
 8004830:	08004809 	.word	0x08004809
 8004834:	08004809 	.word	0x08004809
 8004838:	0800488d 	.word	0x0800488d
 800483c:	08004809 	.word	0x08004809
 8004840:	08004809 	.word	0x08004809
 8004844:	08004809 	.word	0x08004809
 8004848:	08004809 	.word	0x08004809
 800484c:	0800499b 	.word	0x0800499b
 8004850:	080048bd 	.word	0x080048bd
 8004854:	0800497d 	.word	0x0800497d
 8004858:	08004809 	.word	0x08004809
 800485c:	08004809 	.word	0x08004809
 8004860:	080049bd 	.word	0x080049bd
 8004864:	08004809 	.word	0x08004809
 8004868:	080048bd 	.word	0x080048bd
 800486c:	08004809 	.word	0x08004809
 8004870:	08004809 	.word	0x08004809
 8004874:	08004985 	.word	0x08004985
 8004878:	680b      	ldr	r3, [r1, #0]
 800487a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800487e:	1d1a      	adds	r2, r3, #4
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	600a      	str	r2, [r1, #0]
 8004884:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004888:	2301      	movs	r3, #1
 800488a:	e0a4      	b.n	80049d6 <_printf_i+0x1f6>
 800488c:	6825      	ldr	r5, [r4, #0]
 800488e:	6808      	ldr	r0, [r1, #0]
 8004890:	062e      	lsls	r6, r5, #24
 8004892:	f100 0304 	add.w	r3, r0, #4
 8004896:	d50a      	bpl.n	80048ae <_printf_i+0xce>
 8004898:	6805      	ldr	r5, [r0, #0]
 800489a:	600b      	str	r3, [r1, #0]
 800489c:	2d00      	cmp	r5, #0
 800489e:	da03      	bge.n	80048a8 <_printf_i+0xc8>
 80048a0:	232d      	movs	r3, #45	; 0x2d
 80048a2:	426d      	negs	r5, r5
 80048a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048a8:	230a      	movs	r3, #10
 80048aa:	485e      	ldr	r0, [pc, #376]	; (8004a24 <_printf_i+0x244>)
 80048ac:	e019      	b.n	80048e2 <_printf_i+0x102>
 80048ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80048b2:	6805      	ldr	r5, [r0, #0]
 80048b4:	600b      	str	r3, [r1, #0]
 80048b6:	bf18      	it	ne
 80048b8:	b22d      	sxthne	r5, r5
 80048ba:	e7ef      	b.n	800489c <_printf_i+0xbc>
 80048bc:	680b      	ldr	r3, [r1, #0]
 80048be:	6825      	ldr	r5, [r4, #0]
 80048c0:	1d18      	adds	r0, r3, #4
 80048c2:	6008      	str	r0, [r1, #0]
 80048c4:	0628      	lsls	r0, r5, #24
 80048c6:	d501      	bpl.n	80048cc <_printf_i+0xec>
 80048c8:	681d      	ldr	r5, [r3, #0]
 80048ca:	e002      	b.n	80048d2 <_printf_i+0xf2>
 80048cc:	0669      	lsls	r1, r5, #25
 80048ce:	d5fb      	bpl.n	80048c8 <_printf_i+0xe8>
 80048d0:	881d      	ldrh	r5, [r3, #0]
 80048d2:	2f6f      	cmp	r7, #111	; 0x6f
 80048d4:	bf0c      	ite	eq
 80048d6:	2308      	moveq	r3, #8
 80048d8:	230a      	movne	r3, #10
 80048da:	4852      	ldr	r0, [pc, #328]	; (8004a24 <_printf_i+0x244>)
 80048dc:	2100      	movs	r1, #0
 80048de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048e2:	6866      	ldr	r6, [r4, #4]
 80048e4:	2e00      	cmp	r6, #0
 80048e6:	bfa8      	it	ge
 80048e8:	6821      	ldrge	r1, [r4, #0]
 80048ea:	60a6      	str	r6, [r4, #8]
 80048ec:	bfa4      	itt	ge
 80048ee:	f021 0104 	bicge.w	r1, r1, #4
 80048f2:	6021      	strge	r1, [r4, #0]
 80048f4:	b90d      	cbnz	r5, 80048fa <_printf_i+0x11a>
 80048f6:	2e00      	cmp	r6, #0
 80048f8:	d04d      	beq.n	8004996 <_printf_i+0x1b6>
 80048fa:	4616      	mov	r6, r2
 80048fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8004900:	fb03 5711 	mls	r7, r3, r1, r5
 8004904:	5dc7      	ldrb	r7, [r0, r7]
 8004906:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800490a:	462f      	mov	r7, r5
 800490c:	42bb      	cmp	r3, r7
 800490e:	460d      	mov	r5, r1
 8004910:	d9f4      	bls.n	80048fc <_printf_i+0x11c>
 8004912:	2b08      	cmp	r3, #8
 8004914:	d10b      	bne.n	800492e <_printf_i+0x14e>
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	07df      	lsls	r7, r3, #31
 800491a:	d508      	bpl.n	800492e <_printf_i+0x14e>
 800491c:	6923      	ldr	r3, [r4, #16]
 800491e:	6861      	ldr	r1, [r4, #4]
 8004920:	4299      	cmp	r1, r3
 8004922:	bfde      	ittt	le
 8004924:	2330      	movle	r3, #48	; 0x30
 8004926:	f806 3c01 	strble.w	r3, [r6, #-1]
 800492a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800492e:	1b92      	subs	r2, r2, r6
 8004930:	6122      	str	r2, [r4, #16]
 8004932:	464b      	mov	r3, r9
 8004934:	4621      	mov	r1, r4
 8004936:	4640      	mov	r0, r8
 8004938:	f8cd a000 	str.w	sl, [sp]
 800493c:	aa03      	add	r2, sp, #12
 800493e:	f7ff fedf 	bl	8004700 <_printf_common>
 8004942:	3001      	adds	r0, #1
 8004944:	d14c      	bne.n	80049e0 <_printf_i+0x200>
 8004946:	f04f 30ff 	mov.w	r0, #4294967295
 800494a:	b004      	add	sp, #16
 800494c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004950:	4834      	ldr	r0, [pc, #208]	; (8004a24 <_printf_i+0x244>)
 8004952:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004956:	680e      	ldr	r6, [r1, #0]
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	f856 5b04 	ldr.w	r5, [r6], #4
 800495e:	061f      	lsls	r7, r3, #24
 8004960:	600e      	str	r6, [r1, #0]
 8004962:	d514      	bpl.n	800498e <_printf_i+0x1ae>
 8004964:	07d9      	lsls	r1, r3, #31
 8004966:	bf44      	itt	mi
 8004968:	f043 0320 	orrmi.w	r3, r3, #32
 800496c:	6023      	strmi	r3, [r4, #0]
 800496e:	b91d      	cbnz	r5, 8004978 <_printf_i+0x198>
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	f023 0320 	bic.w	r3, r3, #32
 8004976:	6023      	str	r3, [r4, #0]
 8004978:	2310      	movs	r3, #16
 800497a:	e7af      	b.n	80048dc <_printf_i+0xfc>
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	f043 0320 	orr.w	r3, r3, #32
 8004982:	6023      	str	r3, [r4, #0]
 8004984:	2378      	movs	r3, #120	; 0x78
 8004986:	4828      	ldr	r0, [pc, #160]	; (8004a28 <_printf_i+0x248>)
 8004988:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800498c:	e7e3      	b.n	8004956 <_printf_i+0x176>
 800498e:	065e      	lsls	r6, r3, #25
 8004990:	bf48      	it	mi
 8004992:	b2ad      	uxthmi	r5, r5
 8004994:	e7e6      	b.n	8004964 <_printf_i+0x184>
 8004996:	4616      	mov	r6, r2
 8004998:	e7bb      	b.n	8004912 <_printf_i+0x132>
 800499a:	680b      	ldr	r3, [r1, #0]
 800499c:	6826      	ldr	r6, [r4, #0]
 800499e:	1d1d      	adds	r5, r3, #4
 80049a0:	6960      	ldr	r0, [r4, #20]
 80049a2:	600d      	str	r5, [r1, #0]
 80049a4:	0635      	lsls	r5, r6, #24
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	d501      	bpl.n	80049ae <_printf_i+0x1ce>
 80049aa:	6018      	str	r0, [r3, #0]
 80049ac:	e002      	b.n	80049b4 <_printf_i+0x1d4>
 80049ae:	0671      	lsls	r1, r6, #25
 80049b0:	d5fb      	bpl.n	80049aa <_printf_i+0x1ca>
 80049b2:	8018      	strh	r0, [r3, #0]
 80049b4:	2300      	movs	r3, #0
 80049b6:	4616      	mov	r6, r2
 80049b8:	6123      	str	r3, [r4, #16]
 80049ba:	e7ba      	b.n	8004932 <_printf_i+0x152>
 80049bc:	680b      	ldr	r3, [r1, #0]
 80049be:	1d1a      	adds	r2, r3, #4
 80049c0:	600a      	str	r2, [r1, #0]
 80049c2:	681e      	ldr	r6, [r3, #0]
 80049c4:	2100      	movs	r1, #0
 80049c6:	4630      	mov	r0, r6
 80049c8:	6862      	ldr	r2, [r4, #4]
 80049ca:	f000 fa9d 	bl	8004f08 <memchr>
 80049ce:	b108      	cbz	r0, 80049d4 <_printf_i+0x1f4>
 80049d0:	1b80      	subs	r0, r0, r6
 80049d2:	6060      	str	r0, [r4, #4]
 80049d4:	6863      	ldr	r3, [r4, #4]
 80049d6:	6123      	str	r3, [r4, #16]
 80049d8:	2300      	movs	r3, #0
 80049da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049de:	e7a8      	b.n	8004932 <_printf_i+0x152>
 80049e0:	4632      	mov	r2, r6
 80049e2:	4649      	mov	r1, r9
 80049e4:	4640      	mov	r0, r8
 80049e6:	6923      	ldr	r3, [r4, #16]
 80049e8:	47d0      	blx	sl
 80049ea:	3001      	adds	r0, #1
 80049ec:	d0ab      	beq.n	8004946 <_printf_i+0x166>
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	079b      	lsls	r3, r3, #30
 80049f2:	d413      	bmi.n	8004a1c <_printf_i+0x23c>
 80049f4:	68e0      	ldr	r0, [r4, #12]
 80049f6:	9b03      	ldr	r3, [sp, #12]
 80049f8:	4298      	cmp	r0, r3
 80049fa:	bfb8      	it	lt
 80049fc:	4618      	movlt	r0, r3
 80049fe:	e7a4      	b.n	800494a <_printf_i+0x16a>
 8004a00:	2301      	movs	r3, #1
 8004a02:	4632      	mov	r2, r6
 8004a04:	4649      	mov	r1, r9
 8004a06:	4640      	mov	r0, r8
 8004a08:	47d0      	blx	sl
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	d09b      	beq.n	8004946 <_printf_i+0x166>
 8004a0e:	3501      	adds	r5, #1
 8004a10:	68e3      	ldr	r3, [r4, #12]
 8004a12:	9903      	ldr	r1, [sp, #12]
 8004a14:	1a5b      	subs	r3, r3, r1
 8004a16:	42ab      	cmp	r3, r5
 8004a18:	dcf2      	bgt.n	8004a00 <_printf_i+0x220>
 8004a1a:	e7eb      	b.n	80049f4 <_printf_i+0x214>
 8004a1c:	2500      	movs	r5, #0
 8004a1e:	f104 0619 	add.w	r6, r4, #25
 8004a22:	e7f5      	b.n	8004a10 <_printf_i+0x230>
 8004a24:	08005175 	.word	0x08005175
 8004a28:	08005186 	.word	0x08005186

08004a2c <_sbrk_r>:
 8004a2c:	b538      	push	{r3, r4, r5, lr}
 8004a2e:	2300      	movs	r3, #0
 8004a30:	4d05      	ldr	r5, [pc, #20]	; (8004a48 <_sbrk_r+0x1c>)
 8004a32:	4604      	mov	r4, r0
 8004a34:	4608      	mov	r0, r1
 8004a36:	602b      	str	r3, [r5, #0]
 8004a38:	f7fb fe28 	bl	800068c <_sbrk>
 8004a3c:	1c43      	adds	r3, r0, #1
 8004a3e:	d102      	bne.n	8004a46 <_sbrk_r+0x1a>
 8004a40:	682b      	ldr	r3, [r5, #0]
 8004a42:	b103      	cbz	r3, 8004a46 <_sbrk_r+0x1a>
 8004a44:	6023      	str	r3, [r4, #0]
 8004a46:	bd38      	pop	{r3, r4, r5, pc}
 8004a48:	200010e0 	.word	0x200010e0

08004a4c <__sread>:
 8004a4c:	b510      	push	{r4, lr}
 8004a4e:	460c      	mov	r4, r1
 8004a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a54:	f000 fabe 	bl	8004fd4 <_read_r>
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	bfab      	itete	ge
 8004a5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a5e:	89a3      	ldrhlt	r3, [r4, #12]
 8004a60:	181b      	addge	r3, r3, r0
 8004a62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a66:	bfac      	ite	ge
 8004a68:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a6a:	81a3      	strhlt	r3, [r4, #12]
 8004a6c:	bd10      	pop	{r4, pc}

08004a6e <__swrite>:
 8004a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a72:	461f      	mov	r7, r3
 8004a74:	898b      	ldrh	r3, [r1, #12]
 8004a76:	4605      	mov	r5, r0
 8004a78:	05db      	lsls	r3, r3, #23
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	4616      	mov	r6, r2
 8004a7e:	d505      	bpl.n	8004a8c <__swrite+0x1e>
 8004a80:	2302      	movs	r3, #2
 8004a82:	2200      	movs	r2, #0
 8004a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a88:	f000 f9c8 	bl	8004e1c <_lseek_r>
 8004a8c:	89a3      	ldrh	r3, [r4, #12]
 8004a8e:	4632      	mov	r2, r6
 8004a90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a94:	81a3      	strh	r3, [r4, #12]
 8004a96:	4628      	mov	r0, r5
 8004a98:	463b      	mov	r3, r7
 8004a9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aa2:	f000 b869 	b.w	8004b78 <_write_r>

08004aa6 <__sseek>:
 8004aa6:	b510      	push	{r4, lr}
 8004aa8:	460c      	mov	r4, r1
 8004aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aae:	f000 f9b5 	bl	8004e1c <_lseek_r>
 8004ab2:	1c43      	adds	r3, r0, #1
 8004ab4:	89a3      	ldrh	r3, [r4, #12]
 8004ab6:	bf15      	itete	ne
 8004ab8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004aba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004abe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ac2:	81a3      	strheq	r3, [r4, #12]
 8004ac4:	bf18      	it	ne
 8004ac6:	81a3      	strhne	r3, [r4, #12]
 8004ac8:	bd10      	pop	{r4, pc}

08004aca <__sclose>:
 8004aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ace:	f000 b8d3 	b.w	8004c78 <_close_r>
	...

08004ad4 <__swbuf_r>:
 8004ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad6:	460e      	mov	r6, r1
 8004ad8:	4614      	mov	r4, r2
 8004ada:	4605      	mov	r5, r0
 8004adc:	b118      	cbz	r0, 8004ae6 <__swbuf_r+0x12>
 8004ade:	6983      	ldr	r3, [r0, #24]
 8004ae0:	b90b      	cbnz	r3, 8004ae6 <__swbuf_r+0x12>
 8004ae2:	f7ff fbbb 	bl	800425c <__sinit>
 8004ae6:	4b21      	ldr	r3, [pc, #132]	; (8004b6c <__swbuf_r+0x98>)
 8004ae8:	429c      	cmp	r4, r3
 8004aea:	d12b      	bne.n	8004b44 <__swbuf_r+0x70>
 8004aec:	686c      	ldr	r4, [r5, #4]
 8004aee:	69a3      	ldr	r3, [r4, #24]
 8004af0:	60a3      	str	r3, [r4, #8]
 8004af2:	89a3      	ldrh	r3, [r4, #12]
 8004af4:	071a      	lsls	r2, r3, #28
 8004af6:	d52f      	bpl.n	8004b58 <__swbuf_r+0x84>
 8004af8:	6923      	ldr	r3, [r4, #16]
 8004afa:	b36b      	cbz	r3, 8004b58 <__swbuf_r+0x84>
 8004afc:	6923      	ldr	r3, [r4, #16]
 8004afe:	6820      	ldr	r0, [r4, #0]
 8004b00:	b2f6      	uxtb	r6, r6
 8004b02:	1ac0      	subs	r0, r0, r3
 8004b04:	6963      	ldr	r3, [r4, #20]
 8004b06:	4637      	mov	r7, r6
 8004b08:	4283      	cmp	r3, r0
 8004b0a:	dc04      	bgt.n	8004b16 <__swbuf_r+0x42>
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	4628      	mov	r0, r5
 8004b10:	f000 f948 	bl	8004da4 <_fflush_r>
 8004b14:	bb30      	cbnz	r0, 8004b64 <__swbuf_r+0x90>
 8004b16:	68a3      	ldr	r3, [r4, #8]
 8004b18:	3001      	adds	r0, #1
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	60a3      	str	r3, [r4, #8]
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	6022      	str	r2, [r4, #0]
 8004b24:	701e      	strb	r6, [r3, #0]
 8004b26:	6963      	ldr	r3, [r4, #20]
 8004b28:	4283      	cmp	r3, r0
 8004b2a:	d004      	beq.n	8004b36 <__swbuf_r+0x62>
 8004b2c:	89a3      	ldrh	r3, [r4, #12]
 8004b2e:	07db      	lsls	r3, r3, #31
 8004b30:	d506      	bpl.n	8004b40 <__swbuf_r+0x6c>
 8004b32:	2e0a      	cmp	r6, #10
 8004b34:	d104      	bne.n	8004b40 <__swbuf_r+0x6c>
 8004b36:	4621      	mov	r1, r4
 8004b38:	4628      	mov	r0, r5
 8004b3a:	f000 f933 	bl	8004da4 <_fflush_r>
 8004b3e:	b988      	cbnz	r0, 8004b64 <__swbuf_r+0x90>
 8004b40:	4638      	mov	r0, r7
 8004b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b44:	4b0a      	ldr	r3, [pc, #40]	; (8004b70 <__swbuf_r+0x9c>)
 8004b46:	429c      	cmp	r4, r3
 8004b48:	d101      	bne.n	8004b4e <__swbuf_r+0x7a>
 8004b4a:	68ac      	ldr	r4, [r5, #8]
 8004b4c:	e7cf      	b.n	8004aee <__swbuf_r+0x1a>
 8004b4e:	4b09      	ldr	r3, [pc, #36]	; (8004b74 <__swbuf_r+0xa0>)
 8004b50:	429c      	cmp	r4, r3
 8004b52:	bf08      	it	eq
 8004b54:	68ec      	ldreq	r4, [r5, #12]
 8004b56:	e7ca      	b.n	8004aee <__swbuf_r+0x1a>
 8004b58:	4621      	mov	r1, r4
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	f000 f81e 	bl	8004b9c <__swsetup_r>
 8004b60:	2800      	cmp	r0, #0
 8004b62:	d0cb      	beq.n	8004afc <__swbuf_r+0x28>
 8004b64:	f04f 37ff 	mov.w	r7, #4294967295
 8004b68:	e7ea      	b.n	8004b40 <__swbuf_r+0x6c>
 8004b6a:	bf00      	nop
 8004b6c:	08005124 	.word	0x08005124
 8004b70:	08005144 	.word	0x08005144
 8004b74:	08005104 	.word	0x08005104

08004b78 <_write_r>:
 8004b78:	b538      	push	{r3, r4, r5, lr}
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	4608      	mov	r0, r1
 8004b7e:	4611      	mov	r1, r2
 8004b80:	2200      	movs	r2, #0
 8004b82:	4d05      	ldr	r5, [pc, #20]	; (8004b98 <_write_r+0x20>)
 8004b84:	602a      	str	r2, [r5, #0]
 8004b86:	461a      	mov	r2, r3
 8004b88:	f7fb fafa 	bl	8000180 <_write>
 8004b8c:	1c43      	adds	r3, r0, #1
 8004b8e:	d102      	bne.n	8004b96 <_write_r+0x1e>
 8004b90:	682b      	ldr	r3, [r5, #0]
 8004b92:	b103      	cbz	r3, 8004b96 <_write_r+0x1e>
 8004b94:	6023      	str	r3, [r4, #0]
 8004b96:	bd38      	pop	{r3, r4, r5, pc}
 8004b98:	200010e0 	.word	0x200010e0

08004b9c <__swsetup_r>:
 8004b9c:	4b32      	ldr	r3, [pc, #200]	; (8004c68 <__swsetup_r+0xcc>)
 8004b9e:	b570      	push	{r4, r5, r6, lr}
 8004ba0:	681d      	ldr	r5, [r3, #0]
 8004ba2:	4606      	mov	r6, r0
 8004ba4:	460c      	mov	r4, r1
 8004ba6:	b125      	cbz	r5, 8004bb2 <__swsetup_r+0x16>
 8004ba8:	69ab      	ldr	r3, [r5, #24]
 8004baa:	b913      	cbnz	r3, 8004bb2 <__swsetup_r+0x16>
 8004bac:	4628      	mov	r0, r5
 8004bae:	f7ff fb55 	bl	800425c <__sinit>
 8004bb2:	4b2e      	ldr	r3, [pc, #184]	; (8004c6c <__swsetup_r+0xd0>)
 8004bb4:	429c      	cmp	r4, r3
 8004bb6:	d10f      	bne.n	8004bd8 <__swsetup_r+0x3c>
 8004bb8:	686c      	ldr	r4, [r5, #4]
 8004bba:	89a3      	ldrh	r3, [r4, #12]
 8004bbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bc0:	0719      	lsls	r1, r3, #28
 8004bc2:	d42c      	bmi.n	8004c1e <__swsetup_r+0x82>
 8004bc4:	06dd      	lsls	r5, r3, #27
 8004bc6:	d411      	bmi.n	8004bec <__swsetup_r+0x50>
 8004bc8:	2309      	movs	r3, #9
 8004bca:	6033      	str	r3, [r6, #0]
 8004bcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd4:	81a3      	strh	r3, [r4, #12]
 8004bd6:	e03e      	b.n	8004c56 <__swsetup_r+0xba>
 8004bd8:	4b25      	ldr	r3, [pc, #148]	; (8004c70 <__swsetup_r+0xd4>)
 8004bda:	429c      	cmp	r4, r3
 8004bdc:	d101      	bne.n	8004be2 <__swsetup_r+0x46>
 8004bde:	68ac      	ldr	r4, [r5, #8]
 8004be0:	e7eb      	b.n	8004bba <__swsetup_r+0x1e>
 8004be2:	4b24      	ldr	r3, [pc, #144]	; (8004c74 <__swsetup_r+0xd8>)
 8004be4:	429c      	cmp	r4, r3
 8004be6:	bf08      	it	eq
 8004be8:	68ec      	ldreq	r4, [r5, #12]
 8004bea:	e7e6      	b.n	8004bba <__swsetup_r+0x1e>
 8004bec:	0758      	lsls	r0, r3, #29
 8004bee:	d512      	bpl.n	8004c16 <__swsetup_r+0x7a>
 8004bf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bf2:	b141      	cbz	r1, 8004c06 <__swsetup_r+0x6a>
 8004bf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bf8:	4299      	cmp	r1, r3
 8004bfa:	d002      	beq.n	8004c02 <__swsetup_r+0x66>
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	f000 f99d 	bl	8004f3c <_free_r>
 8004c02:	2300      	movs	r3, #0
 8004c04:	6363      	str	r3, [r4, #52]	; 0x34
 8004c06:	89a3      	ldrh	r3, [r4, #12]
 8004c08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c0c:	81a3      	strh	r3, [r4, #12]
 8004c0e:	2300      	movs	r3, #0
 8004c10:	6063      	str	r3, [r4, #4]
 8004c12:	6923      	ldr	r3, [r4, #16]
 8004c14:	6023      	str	r3, [r4, #0]
 8004c16:	89a3      	ldrh	r3, [r4, #12]
 8004c18:	f043 0308 	orr.w	r3, r3, #8
 8004c1c:	81a3      	strh	r3, [r4, #12]
 8004c1e:	6923      	ldr	r3, [r4, #16]
 8004c20:	b94b      	cbnz	r3, 8004c36 <__swsetup_r+0x9a>
 8004c22:	89a3      	ldrh	r3, [r4, #12]
 8004c24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c2c:	d003      	beq.n	8004c36 <__swsetup_r+0x9a>
 8004c2e:	4621      	mov	r1, r4
 8004c30:	4630      	mov	r0, r6
 8004c32:	f000 f929 	bl	8004e88 <__smakebuf_r>
 8004c36:	89a0      	ldrh	r0, [r4, #12]
 8004c38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c3c:	f010 0301 	ands.w	r3, r0, #1
 8004c40:	d00a      	beq.n	8004c58 <__swsetup_r+0xbc>
 8004c42:	2300      	movs	r3, #0
 8004c44:	60a3      	str	r3, [r4, #8]
 8004c46:	6963      	ldr	r3, [r4, #20]
 8004c48:	425b      	negs	r3, r3
 8004c4a:	61a3      	str	r3, [r4, #24]
 8004c4c:	6923      	ldr	r3, [r4, #16]
 8004c4e:	b943      	cbnz	r3, 8004c62 <__swsetup_r+0xc6>
 8004c50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c54:	d1ba      	bne.n	8004bcc <__swsetup_r+0x30>
 8004c56:	bd70      	pop	{r4, r5, r6, pc}
 8004c58:	0781      	lsls	r1, r0, #30
 8004c5a:	bf58      	it	pl
 8004c5c:	6963      	ldrpl	r3, [r4, #20]
 8004c5e:	60a3      	str	r3, [r4, #8]
 8004c60:	e7f4      	b.n	8004c4c <__swsetup_r+0xb0>
 8004c62:	2000      	movs	r0, #0
 8004c64:	e7f7      	b.n	8004c56 <__swsetup_r+0xba>
 8004c66:	bf00      	nop
 8004c68:	20000010 	.word	0x20000010
 8004c6c:	08005124 	.word	0x08005124
 8004c70:	08005144 	.word	0x08005144
 8004c74:	08005104 	.word	0x08005104

08004c78 <_close_r>:
 8004c78:	b538      	push	{r3, r4, r5, lr}
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	4d05      	ldr	r5, [pc, #20]	; (8004c94 <_close_r+0x1c>)
 8004c7e:	4604      	mov	r4, r0
 8004c80:	4608      	mov	r0, r1
 8004c82:	602b      	str	r3, [r5, #0]
 8004c84:	f7fb fcd1 	bl	800062a <_close>
 8004c88:	1c43      	adds	r3, r0, #1
 8004c8a:	d102      	bne.n	8004c92 <_close_r+0x1a>
 8004c8c:	682b      	ldr	r3, [r5, #0]
 8004c8e:	b103      	cbz	r3, 8004c92 <_close_r+0x1a>
 8004c90:	6023      	str	r3, [r4, #0]
 8004c92:	bd38      	pop	{r3, r4, r5, pc}
 8004c94:	200010e0 	.word	0x200010e0

08004c98 <__sflush_r>:
 8004c98:	898a      	ldrh	r2, [r1, #12]
 8004c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c9e:	4605      	mov	r5, r0
 8004ca0:	0710      	lsls	r0, r2, #28
 8004ca2:	460c      	mov	r4, r1
 8004ca4:	d458      	bmi.n	8004d58 <__sflush_r+0xc0>
 8004ca6:	684b      	ldr	r3, [r1, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	dc05      	bgt.n	8004cb8 <__sflush_r+0x20>
 8004cac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	dc02      	bgt.n	8004cb8 <__sflush_r+0x20>
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cba:	2e00      	cmp	r6, #0
 8004cbc:	d0f9      	beq.n	8004cb2 <__sflush_r+0x1a>
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004cc4:	682f      	ldr	r7, [r5, #0]
 8004cc6:	602b      	str	r3, [r5, #0]
 8004cc8:	d032      	beq.n	8004d30 <__sflush_r+0x98>
 8004cca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ccc:	89a3      	ldrh	r3, [r4, #12]
 8004cce:	075a      	lsls	r2, r3, #29
 8004cd0:	d505      	bpl.n	8004cde <__sflush_r+0x46>
 8004cd2:	6863      	ldr	r3, [r4, #4]
 8004cd4:	1ac0      	subs	r0, r0, r3
 8004cd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cd8:	b10b      	cbz	r3, 8004cde <__sflush_r+0x46>
 8004cda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cdc:	1ac0      	subs	r0, r0, r3
 8004cde:	2300      	movs	r3, #0
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	6a21      	ldr	r1, [r4, #32]
 8004ce8:	47b0      	blx	r6
 8004cea:	1c43      	adds	r3, r0, #1
 8004cec:	89a3      	ldrh	r3, [r4, #12]
 8004cee:	d106      	bne.n	8004cfe <__sflush_r+0x66>
 8004cf0:	6829      	ldr	r1, [r5, #0]
 8004cf2:	291d      	cmp	r1, #29
 8004cf4:	d82c      	bhi.n	8004d50 <__sflush_r+0xb8>
 8004cf6:	4a2a      	ldr	r2, [pc, #168]	; (8004da0 <__sflush_r+0x108>)
 8004cf8:	40ca      	lsrs	r2, r1
 8004cfa:	07d6      	lsls	r6, r2, #31
 8004cfc:	d528      	bpl.n	8004d50 <__sflush_r+0xb8>
 8004cfe:	2200      	movs	r2, #0
 8004d00:	6062      	str	r2, [r4, #4]
 8004d02:	6922      	ldr	r2, [r4, #16]
 8004d04:	04d9      	lsls	r1, r3, #19
 8004d06:	6022      	str	r2, [r4, #0]
 8004d08:	d504      	bpl.n	8004d14 <__sflush_r+0x7c>
 8004d0a:	1c42      	adds	r2, r0, #1
 8004d0c:	d101      	bne.n	8004d12 <__sflush_r+0x7a>
 8004d0e:	682b      	ldr	r3, [r5, #0]
 8004d10:	b903      	cbnz	r3, 8004d14 <__sflush_r+0x7c>
 8004d12:	6560      	str	r0, [r4, #84]	; 0x54
 8004d14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d16:	602f      	str	r7, [r5, #0]
 8004d18:	2900      	cmp	r1, #0
 8004d1a:	d0ca      	beq.n	8004cb2 <__sflush_r+0x1a>
 8004d1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d20:	4299      	cmp	r1, r3
 8004d22:	d002      	beq.n	8004d2a <__sflush_r+0x92>
 8004d24:	4628      	mov	r0, r5
 8004d26:	f000 f909 	bl	8004f3c <_free_r>
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	6360      	str	r0, [r4, #52]	; 0x34
 8004d2e:	e7c1      	b.n	8004cb4 <__sflush_r+0x1c>
 8004d30:	6a21      	ldr	r1, [r4, #32]
 8004d32:	2301      	movs	r3, #1
 8004d34:	4628      	mov	r0, r5
 8004d36:	47b0      	blx	r6
 8004d38:	1c41      	adds	r1, r0, #1
 8004d3a:	d1c7      	bne.n	8004ccc <__sflush_r+0x34>
 8004d3c:	682b      	ldr	r3, [r5, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0c4      	beq.n	8004ccc <__sflush_r+0x34>
 8004d42:	2b1d      	cmp	r3, #29
 8004d44:	d001      	beq.n	8004d4a <__sflush_r+0xb2>
 8004d46:	2b16      	cmp	r3, #22
 8004d48:	d101      	bne.n	8004d4e <__sflush_r+0xb6>
 8004d4a:	602f      	str	r7, [r5, #0]
 8004d4c:	e7b1      	b.n	8004cb2 <__sflush_r+0x1a>
 8004d4e:	89a3      	ldrh	r3, [r4, #12]
 8004d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d54:	81a3      	strh	r3, [r4, #12]
 8004d56:	e7ad      	b.n	8004cb4 <__sflush_r+0x1c>
 8004d58:	690f      	ldr	r7, [r1, #16]
 8004d5a:	2f00      	cmp	r7, #0
 8004d5c:	d0a9      	beq.n	8004cb2 <__sflush_r+0x1a>
 8004d5e:	0793      	lsls	r3, r2, #30
 8004d60:	bf18      	it	ne
 8004d62:	2300      	movne	r3, #0
 8004d64:	680e      	ldr	r6, [r1, #0]
 8004d66:	bf08      	it	eq
 8004d68:	694b      	ldreq	r3, [r1, #20]
 8004d6a:	eba6 0807 	sub.w	r8, r6, r7
 8004d6e:	600f      	str	r7, [r1, #0]
 8004d70:	608b      	str	r3, [r1, #8]
 8004d72:	f1b8 0f00 	cmp.w	r8, #0
 8004d76:	dd9c      	ble.n	8004cb2 <__sflush_r+0x1a>
 8004d78:	4643      	mov	r3, r8
 8004d7a:	463a      	mov	r2, r7
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	6a21      	ldr	r1, [r4, #32]
 8004d80:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d82:	47b0      	blx	r6
 8004d84:	2800      	cmp	r0, #0
 8004d86:	dc06      	bgt.n	8004d96 <__sflush_r+0xfe>
 8004d88:	89a3      	ldrh	r3, [r4, #12]
 8004d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d92:	81a3      	strh	r3, [r4, #12]
 8004d94:	e78e      	b.n	8004cb4 <__sflush_r+0x1c>
 8004d96:	4407      	add	r7, r0
 8004d98:	eba8 0800 	sub.w	r8, r8, r0
 8004d9c:	e7e9      	b.n	8004d72 <__sflush_r+0xda>
 8004d9e:	bf00      	nop
 8004da0:	20400001 	.word	0x20400001

08004da4 <_fflush_r>:
 8004da4:	b538      	push	{r3, r4, r5, lr}
 8004da6:	690b      	ldr	r3, [r1, #16]
 8004da8:	4605      	mov	r5, r0
 8004daa:	460c      	mov	r4, r1
 8004dac:	b913      	cbnz	r3, 8004db4 <_fflush_r+0x10>
 8004dae:	2500      	movs	r5, #0
 8004db0:	4628      	mov	r0, r5
 8004db2:	bd38      	pop	{r3, r4, r5, pc}
 8004db4:	b118      	cbz	r0, 8004dbe <_fflush_r+0x1a>
 8004db6:	6983      	ldr	r3, [r0, #24]
 8004db8:	b90b      	cbnz	r3, 8004dbe <_fflush_r+0x1a>
 8004dba:	f7ff fa4f 	bl	800425c <__sinit>
 8004dbe:	4b14      	ldr	r3, [pc, #80]	; (8004e10 <_fflush_r+0x6c>)
 8004dc0:	429c      	cmp	r4, r3
 8004dc2:	d11b      	bne.n	8004dfc <_fflush_r+0x58>
 8004dc4:	686c      	ldr	r4, [r5, #4]
 8004dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d0ef      	beq.n	8004dae <_fflush_r+0xa>
 8004dce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004dd0:	07d0      	lsls	r0, r2, #31
 8004dd2:	d404      	bmi.n	8004dde <_fflush_r+0x3a>
 8004dd4:	0599      	lsls	r1, r3, #22
 8004dd6:	d402      	bmi.n	8004dde <_fflush_r+0x3a>
 8004dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dda:	f7ff fadd 	bl	8004398 <__retarget_lock_acquire_recursive>
 8004dde:	4628      	mov	r0, r5
 8004de0:	4621      	mov	r1, r4
 8004de2:	f7ff ff59 	bl	8004c98 <__sflush_r>
 8004de6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004de8:	4605      	mov	r5, r0
 8004dea:	07da      	lsls	r2, r3, #31
 8004dec:	d4e0      	bmi.n	8004db0 <_fflush_r+0xc>
 8004dee:	89a3      	ldrh	r3, [r4, #12]
 8004df0:	059b      	lsls	r3, r3, #22
 8004df2:	d4dd      	bmi.n	8004db0 <_fflush_r+0xc>
 8004df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004df6:	f7ff fad0 	bl	800439a <__retarget_lock_release_recursive>
 8004dfa:	e7d9      	b.n	8004db0 <_fflush_r+0xc>
 8004dfc:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <_fflush_r+0x70>)
 8004dfe:	429c      	cmp	r4, r3
 8004e00:	d101      	bne.n	8004e06 <_fflush_r+0x62>
 8004e02:	68ac      	ldr	r4, [r5, #8]
 8004e04:	e7df      	b.n	8004dc6 <_fflush_r+0x22>
 8004e06:	4b04      	ldr	r3, [pc, #16]	; (8004e18 <_fflush_r+0x74>)
 8004e08:	429c      	cmp	r4, r3
 8004e0a:	bf08      	it	eq
 8004e0c:	68ec      	ldreq	r4, [r5, #12]
 8004e0e:	e7da      	b.n	8004dc6 <_fflush_r+0x22>
 8004e10:	08005124 	.word	0x08005124
 8004e14:	08005144 	.word	0x08005144
 8004e18:	08005104 	.word	0x08005104

08004e1c <_lseek_r>:
 8004e1c:	b538      	push	{r3, r4, r5, lr}
 8004e1e:	4604      	mov	r4, r0
 8004e20:	4608      	mov	r0, r1
 8004e22:	4611      	mov	r1, r2
 8004e24:	2200      	movs	r2, #0
 8004e26:	4d05      	ldr	r5, [pc, #20]	; (8004e3c <_lseek_r+0x20>)
 8004e28:	602a      	str	r2, [r5, #0]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f7fb fc21 	bl	8000672 <_lseek>
 8004e30:	1c43      	adds	r3, r0, #1
 8004e32:	d102      	bne.n	8004e3a <_lseek_r+0x1e>
 8004e34:	682b      	ldr	r3, [r5, #0]
 8004e36:	b103      	cbz	r3, 8004e3a <_lseek_r+0x1e>
 8004e38:	6023      	str	r3, [r4, #0]
 8004e3a:	bd38      	pop	{r3, r4, r5, pc}
 8004e3c:	200010e0 	.word	0x200010e0

08004e40 <__swhatbuf_r>:
 8004e40:	b570      	push	{r4, r5, r6, lr}
 8004e42:	460e      	mov	r6, r1
 8004e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e48:	4614      	mov	r4, r2
 8004e4a:	2900      	cmp	r1, #0
 8004e4c:	461d      	mov	r5, r3
 8004e4e:	b096      	sub	sp, #88	; 0x58
 8004e50:	da07      	bge.n	8004e62 <__swhatbuf_r+0x22>
 8004e52:	2300      	movs	r3, #0
 8004e54:	602b      	str	r3, [r5, #0]
 8004e56:	89b3      	ldrh	r3, [r6, #12]
 8004e58:	061a      	lsls	r2, r3, #24
 8004e5a:	d410      	bmi.n	8004e7e <__swhatbuf_r+0x3e>
 8004e5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e60:	e00e      	b.n	8004e80 <__swhatbuf_r+0x40>
 8004e62:	466a      	mov	r2, sp
 8004e64:	f000 f8c8 	bl	8004ff8 <_fstat_r>
 8004e68:	2800      	cmp	r0, #0
 8004e6a:	dbf2      	blt.n	8004e52 <__swhatbuf_r+0x12>
 8004e6c:	9a01      	ldr	r2, [sp, #4]
 8004e6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004e72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004e76:	425a      	negs	r2, r3
 8004e78:	415a      	adcs	r2, r3
 8004e7a:	602a      	str	r2, [r5, #0]
 8004e7c:	e7ee      	b.n	8004e5c <__swhatbuf_r+0x1c>
 8004e7e:	2340      	movs	r3, #64	; 0x40
 8004e80:	2000      	movs	r0, #0
 8004e82:	6023      	str	r3, [r4, #0]
 8004e84:	b016      	add	sp, #88	; 0x58
 8004e86:	bd70      	pop	{r4, r5, r6, pc}

08004e88 <__smakebuf_r>:
 8004e88:	898b      	ldrh	r3, [r1, #12]
 8004e8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e8c:	079d      	lsls	r5, r3, #30
 8004e8e:	4606      	mov	r6, r0
 8004e90:	460c      	mov	r4, r1
 8004e92:	d507      	bpl.n	8004ea4 <__smakebuf_r+0x1c>
 8004e94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e98:	6023      	str	r3, [r4, #0]
 8004e9a:	6123      	str	r3, [r4, #16]
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	6163      	str	r3, [r4, #20]
 8004ea0:	b002      	add	sp, #8
 8004ea2:	bd70      	pop	{r4, r5, r6, pc}
 8004ea4:	466a      	mov	r2, sp
 8004ea6:	ab01      	add	r3, sp, #4
 8004ea8:	f7ff ffca 	bl	8004e40 <__swhatbuf_r>
 8004eac:	9900      	ldr	r1, [sp, #0]
 8004eae:	4605      	mov	r5, r0
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	f7ff fa73 	bl	800439c <_malloc_r>
 8004eb6:	b948      	cbnz	r0, 8004ecc <__smakebuf_r+0x44>
 8004eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ebc:	059a      	lsls	r2, r3, #22
 8004ebe:	d4ef      	bmi.n	8004ea0 <__smakebuf_r+0x18>
 8004ec0:	f023 0303 	bic.w	r3, r3, #3
 8004ec4:	f043 0302 	orr.w	r3, r3, #2
 8004ec8:	81a3      	strh	r3, [r4, #12]
 8004eca:	e7e3      	b.n	8004e94 <__smakebuf_r+0xc>
 8004ecc:	4b0d      	ldr	r3, [pc, #52]	; (8004f04 <__smakebuf_r+0x7c>)
 8004ece:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ed0:	89a3      	ldrh	r3, [r4, #12]
 8004ed2:	6020      	str	r0, [r4, #0]
 8004ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed8:	81a3      	strh	r3, [r4, #12]
 8004eda:	9b00      	ldr	r3, [sp, #0]
 8004edc:	6120      	str	r0, [r4, #16]
 8004ede:	6163      	str	r3, [r4, #20]
 8004ee0:	9b01      	ldr	r3, [sp, #4]
 8004ee2:	b15b      	cbz	r3, 8004efc <__smakebuf_r+0x74>
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004eea:	f000 f897 	bl	800501c <_isatty_r>
 8004eee:	b128      	cbz	r0, 8004efc <__smakebuf_r+0x74>
 8004ef0:	89a3      	ldrh	r3, [r4, #12]
 8004ef2:	f023 0303 	bic.w	r3, r3, #3
 8004ef6:	f043 0301 	orr.w	r3, r3, #1
 8004efa:	81a3      	strh	r3, [r4, #12]
 8004efc:	89a0      	ldrh	r0, [r4, #12]
 8004efe:	4305      	orrs	r5, r0
 8004f00:	81a5      	strh	r5, [r4, #12]
 8004f02:	e7cd      	b.n	8004ea0 <__smakebuf_r+0x18>
 8004f04:	080041f5 	.word	0x080041f5

08004f08 <memchr>:
 8004f08:	4603      	mov	r3, r0
 8004f0a:	b510      	push	{r4, lr}
 8004f0c:	b2c9      	uxtb	r1, r1
 8004f0e:	4402      	add	r2, r0
 8004f10:	4293      	cmp	r3, r2
 8004f12:	4618      	mov	r0, r3
 8004f14:	d101      	bne.n	8004f1a <memchr+0x12>
 8004f16:	2000      	movs	r0, #0
 8004f18:	e003      	b.n	8004f22 <memchr+0x1a>
 8004f1a:	7804      	ldrb	r4, [r0, #0]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	428c      	cmp	r4, r1
 8004f20:	d1f6      	bne.n	8004f10 <memchr+0x8>
 8004f22:	bd10      	pop	{r4, pc}

08004f24 <__malloc_lock>:
 8004f24:	4801      	ldr	r0, [pc, #4]	; (8004f2c <__malloc_lock+0x8>)
 8004f26:	f7ff ba37 	b.w	8004398 <__retarget_lock_acquire_recursive>
 8004f2a:	bf00      	nop
 8004f2c:	200010d8 	.word	0x200010d8

08004f30 <__malloc_unlock>:
 8004f30:	4801      	ldr	r0, [pc, #4]	; (8004f38 <__malloc_unlock+0x8>)
 8004f32:	f7ff ba32 	b.w	800439a <__retarget_lock_release_recursive>
 8004f36:	bf00      	nop
 8004f38:	200010d8 	.word	0x200010d8

08004f3c <_free_r>:
 8004f3c:	b538      	push	{r3, r4, r5, lr}
 8004f3e:	4605      	mov	r5, r0
 8004f40:	2900      	cmp	r1, #0
 8004f42:	d043      	beq.n	8004fcc <_free_r+0x90>
 8004f44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f48:	1f0c      	subs	r4, r1, #4
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	bfb8      	it	lt
 8004f4e:	18e4      	addlt	r4, r4, r3
 8004f50:	f7ff ffe8 	bl	8004f24 <__malloc_lock>
 8004f54:	4a1e      	ldr	r2, [pc, #120]	; (8004fd0 <_free_r+0x94>)
 8004f56:	6813      	ldr	r3, [r2, #0]
 8004f58:	4610      	mov	r0, r2
 8004f5a:	b933      	cbnz	r3, 8004f6a <_free_r+0x2e>
 8004f5c:	6063      	str	r3, [r4, #4]
 8004f5e:	6014      	str	r4, [r2, #0]
 8004f60:	4628      	mov	r0, r5
 8004f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f66:	f7ff bfe3 	b.w	8004f30 <__malloc_unlock>
 8004f6a:	42a3      	cmp	r3, r4
 8004f6c:	d90a      	bls.n	8004f84 <_free_r+0x48>
 8004f6e:	6821      	ldr	r1, [r4, #0]
 8004f70:	1862      	adds	r2, r4, r1
 8004f72:	4293      	cmp	r3, r2
 8004f74:	bf01      	itttt	eq
 8004f76:	681a      	ldreq	r2, [r3, #0]
 8004f78:	685b      	ldreq	r3, [r3, #4]
 8004f7a:	1852      	addeq	r2, r2, r1
 8004f7c:	6022      	streq	r2, [r4, #0]
 8004f7e:	6063      	str	r3, [r4, #4]
 8004f80:	6004      	str	r4, [r0, #0]
 8004f82:	e7ed      	b.n	8004f60 <_free_r+0x24>
 8004f84:	461a      	mov	r2, r3
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	b10b      	cbz	r3, 8004f8e <_free_r+0x52>
 8004f8a:	42a3      	cmp	r3, r4
 8004f8c:	d9fa      	bls.n	8004f84 <_free_r+0x48>
 8004f8e:	6811      	ldr	r1, [r2, #0]
 8004f90:	1850      	adds	r0, r2, r1
 8004f92:	42a0      	cmp	r0, r4
 8004f94:	d10b      	bne.n	8004fae <_free_r+0x72>
 8004f96:	6820      	ldr	r0, [r4, #0]
 8004f98:	4401      	add	r1, r0
 8004f9a:	1850      	adds	r0, r2, r1
 8004f9c:	4283      	cmp	r3, r0
 8004f9e:	6011      	str	r1, [r2, #0]
 8004fa0:	d1de      	bne.n	8004f60 <_free_r+0x24>
 8004fa2:	6818      	ldr	r0, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	4401      	add	r1, r0
 8004fa8:	6011      	str	r1, [r2, #0]
 8004faa:	6053      	str	r3, [r2, #4]
 8004fac:	e7d8      	b.n	8004f60 <_free_r+0x24>
 8004fae:	d902      	bls.n	8004fb6 <_free_r+0x7a>
 8004fb0:	230c      	movs	r3, #12
 8004fb2:	602b      	str	r3, [r5, #0]
 8004fb4:	e7d4      	b.n	8004f60 <_free_r+0x24>
 8004fb6:	6820      	ldr	r0, [r4, #0]
 8004fb8:	1821      	adds	r1, r4, r0
 8004fba:	428b      	cmp	r3, r1
 8004fbc:	bf01      	itttt	eq
 8004fbe:	6819      	ldreq	r1, [r3, #0]
 8004fc0:	685b      	ldreq	r3, [r3, #4]
 8004fc2:	1809      	addeq	r1, r1, r0
 8004fc4:	6021      	streq	r1, [r4, #0]
 8004fc6:	6063      	str	r3, [r4, #4]
 8004fc8:	6054      	str	r4, [r2, #4]
 8004fca:	e7c9      	b.n	8004f60 <_free_r+0x24>
 8004fcc:	bd38      	pop	{r3, r4, r5, pc}
 8004fce:	bf00      	nop
 8004fd0:	20001034 	.word	0x20001034

08004fd4 <_read_r>:
 8004fd4:	b538      	push	{r3, r4, r5, lr}
 8004fd6:	4604      	mov	r4, r0
 8004fd8:	4608      	mov	r0, r1
 8004fda:	4611      	mov	r1, r2
 8004fdc:	2200      	movs	r2, #0
 8004fde:	4d05      	ldr	r5, [pc, #20]	; (8004ff4 <_read_r+0x20>)
 8004fe0:	602a      	str	r2, [r5, #0]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	f7fb fb04 	bl	80005f0 <_read>
 8004fe8:	1c43      	adds	r3, r0, #1
 8004fea:	d102      	bne.n	8004ff2 <_read_r+0x1e>
 8004fec:	682b      	ldr	r3, [r5, #0]
 8004fee:	b103      	cbz	r3, 8004ff2 <_read_r+0x1e>
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	bd38      	pop	{r3, r4, r5, pc}
 8004ff4:	200010e0 	.word	0x200010e0

08004ff8 <_fstat_r>:
 8004ff8:	b538      	push	{r3, r4, r5, lr}
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	4d06      	ldr	r5, [pc, #24]	; (8005018 <_fstat_r+0x20>)
 8004ffe:	4604      	mov	r4, r0
 8005000:	4608      	mov	r0, r1
 8005002:	4611      	mov	r1, r2
 8005004:	602b      	str	r3, [r5, #0]
 8005006:	f7fb fb1b 	bl	8000640 <_fstat>
 800500a:	1c43      	adds	r3, r0, #1
 800500c:	d102      	bne.n	8005014 <_fstat_r+0x1c>
 800500e:	682b      	ldr	r3, [r5, #0]
 8005010:	b103      	cbz	r3, 8005014 <_fstat_r+0x1c>
 8005012:	6023      	str	r3, [r4, #0]
 8005014:	bd38      	pop	{r3, r4, r5, pc}
 8005016:	bf00      	nop
 8005018:	200010e0 	.word	0x200010e0

0800501c <_isatty_r>:
 800501c:	b538      	push	{r3, r4, r5, lr}
 800501e:	2300      	movs	r3, #0
 8005020:	4d05      	ldr	r5, [pc, #20]	; (8005038 <_isatty_r+0x1c>)
 8005022:	4604      	mov	r4, r0
 8005024:	4608      	mov	r0, r1
 8005026:	602b      	str	r3, [r5, #0]
 8005028:	f7fb fb19 	bl	800065e <_isatty>
 800502c:	1c43      	adds	r3, r0, #1
 800502e:	d102      	bne.n	8005036 <_isatty_r+0x1a>
 8005030:	682b      	ldr	r3, [r5, #0]
 8005032:	b103      	cbz	r3, 8005036 <_isatty_r+0x1a>
 8005034:	6023      	str	r3, [r4, #0]
 8005036:	bd38      	pop	{r3, r4, r5, pc}
 8005038:	200010e0 	.word	0x200010e0

0800503c <_init>:
 800503c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503e:	bf00      	nop
 8005040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005042:	bc08      	pop	{r3}
 8005044:	469e      	mov	lr, r3
 8005046:	4770      	bx	lr

08005048 <_fini>:
 8005048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504a:	bf00      	nop
 800504c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504e:	bc08      	pop	{r3}
 8005050:	469e      	mov	lr, r3
 8005052:	4770      	bx	lr
