
04semaforo_binario.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004408  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08004518  08004518  00014518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004708  08004708  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004708  08004708  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004708  08004708  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004708  08004708  00014708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800470c  0800470c  0001470c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001058  20000010  08004720  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001068  08004720  00021068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b0e  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c94  00000000  00000000  00032b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  000357e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  000368d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001874e  00000000  00000000  00037888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001133a  00000000  00000000  0004ffd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091ab1  00000000  00000000  00061310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f2dc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004650  00000000  00000000  000f2e14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004500 	.word	0x08004500

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004500 	.word	0x08004500

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	20000080 	.word	0x20000080

08000180 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b098      	sub	sp, #96	; 0x60
 8000184:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000186:	f000 fb43 	bl	8000810 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800018a:	f000 f859 	bl	8000240 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800018e:	f000 f8c7 	bl	8000320 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000192:	f000 f89b 	bl	80002cc <MX_USART1_UART_Init>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of BinarySem */
	osSemaphoreDef(BinarySem);
 8000196:	2300      	movs	r3, #0
 8000198:	65bb      	str	r3, [r7, #88]	; 0x58
 800019a:	2300      	movs	r3, #0
 800019c:	65fb      	str	r3, [r7, #92]	; 0x5c
	BinarySemHandle = osSemaphoreCreate(osSemaphore(BinarySem), 1);
 800019e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80001a2:	2101      	movs	r1, #1
 80001a4:	4618      	mov	r0, r3
 80001a6:	f001 febc 	bl	8001f22 <osSemaphoreCreate>
 80001aa:	4603      	mov	r3, r0
 80001ac:	4a1d      	ldr	r2, [pc, #116]	; (8000224 <main+0xa4>)
 80001ae:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of normalTask */
	osThreadDef(normalTask, StartnormalTask, osPriorityNormal, 0, 128);
 80001b0:	4b1d      	ldr	r3, [pc, #116]	; (8000228 <main+0xa8>)
 80001b2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80001b6:	461d      	mov	r5, r3
 80001b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	normalTaskHandle = osThreadCreate(osThread(normalTask), NULL);
 80001c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80001c8:	2100      	movs	r1, #0
 80001ca:	4618      	mov	r0, r3
 80001cc:	f001 fe49 	bl	8001e62 <osThreadCreate>
 80001d0:	4603      	mov	r3, r0
 80001d2:	4a16      	ldr	r2, [pc, #88]	; (800022c <main+0xac>)
 80001d4:	6013      	str	r3, [r2, #0]

	/* definition and creation of HIghTask */
	osThreadDef(HIghTask, StarthighTask, osPriorityAboveNormal, 0, 128);
 80001d6:	4b16      	ldr	r3, [pc, #88]	; (8000230 <main+0xb0>)
 80001d8:	f107 0420 	add.w	r4, r7, #32
 80001dc:	461d      	mov	r5, r3
 80001de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HIghTaskHandle = osThreadCreate(osThread(HIghTask), NULL);
 80001ea:	f107 0320 	add.w	r3, r7, #32
 80001ee:	2100      	movs	r1, #0
 80001f0:	4618      	mov	r0, r3
 80001f2:	f001 fe36 	bl	8001e62 <osThreadCreate>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4a0e      	ldr	r2, [pc, #56]	; (8000234 <main+0xb4>)
 80001fa:	6013      	str	r3, [r2, #0]

	/* definition and creation of LowTask */
	osThreadDef(LowTask, StartLowTask, osPriorityLow, 0, 128);
 80001fc:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <main+0xb8>)
 80001fe:	1d3c      	adds	r4, r7, #4
 8000200:	461d      	mov	r5, r3
 8000202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000206:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800020a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	LowTaskHandle = osThreadCreate(osThread(LowTask), NULL);
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f001 fe25 	bl	8001e62 <osThreadCreate>
 8000218:	4603      	mov	r3, r0
 800021a:	4a08      	ldr	r2, [pc, #32]	; (800023c <main+0xbc>)
 800021c:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 800021e:	f001 fe19 	bl	8001e54 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000222:	e7fe      	b.n	8000222 <main+0xa2>
 8000224:	20000fd0 	.word	0x20000fd0
 8000228:	08004538 	.word	0x08004538
 800022c:	20000fcc 	.word	0x20000fcc
 8000230:	08004554 	.word	0x08004554
 8000234:	20001018 	.word	0x20001018
 8000238:	08004570 	.word	0x08004570
 800023c:	20001014 	.word	0x20001014

08000240 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000240:	b580      	push	{r7, lr}
 8000242:	b090      	sub	sp, #64	; 0x40
 8000244:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000246:	f107 0318 	add.w	r3, r7, #24
 800024a:	2228      	movs	r2, #40	; 0x28
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f004 f94e 	bl	80044f0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000262:	2301      	movs	r3, #1
 8000264:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000270:	2301      	movs	r3, #1
 8000272:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000274:	2302      	movs	r3, #2
 8000276:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000278:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800027e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000282:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000284:	f107 0318 	add.w	r3, r7, #24
 8000288:	4618      	mov	r0, r3
 800028a:	f000 fd6f 	bl	8000d6c <HAL_RCC_OscConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x58>
		Error_Handler();
 8000294:	f000 f990 	bl	80005b8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000298:	230f      	movs	r3, #15
 800029a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029c:	2302      	movs	r3, #2
 800029e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	2102      	movs	r1, #2
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 ffda 	bl	800126c <HAL_RCC_ClockConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x82>
		Error_Handler();
 80002be:	f000 f97b 	bl	80005b8 <Error_Handler>
	}
}
 80002c2:	bf00      	nop
 80002c4:	3740      	adds	r7, #64	; 0x40
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
	...

080002cc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80002d0:	4b11      	ldr	r3, [pc, #68]	; (8000318 <MX_USART1_UART_Init+0x4c>)
 80002d2:	4a12      	ldr	r2, [pc, #72]	; (800031c <MX_USART1_UART_Init+0x50>)
 80002d4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80002d6:	4b10      	ldr	r3, [pc, #64]	; (8000318 <MX_USART1_UART_Init+0x4c>)
 80002d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002dc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002de:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <MX_USART1_UART_Init+0x4c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80002e4:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <MX_USART1_UART_Init+0x4c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80002ea:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <MX_USART1_UART_Init+0x4c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80002f0:	4b09      	ldr	r3, [pc, #36]	; (8000318 <MX_USART1_UART_Init+0x4c>)
 80002f2:	220c      	movs	r2, #12
 80002f4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002f6:	4b08      	ldr	r3, [pc, #32]	; (8000318 <MX_USART1_UART_Init+0x4c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <MX_USART1_UART_Init+0x4c>)
 80002fe:	2200      	movs	r2, #0
 8000300:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000302:	4805      	ldr	r0, [pc, #20]	; (8000318 <MX_USART1_UART_Init+0x4c>)
 8000304:	f001 fbc6 	bl	8001a94 <HAL_UART_Init>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800030e:	f000 f953 	bl	80005b8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000fd4 	.word	0x20000fd4
 800031c:	40013800 	.word	0x40013800

08000320 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000320:	b580      	push	{r7, lr}
 8000322:	b088      	sub	sp, #32
 8000324:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000326:	f107 0310 	add.w	r3, r7, #16
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000334:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <MX_GPIO_Init+0x80>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <MX_GPIO_Init+0x80>)
 800033a:	f043 0320 	orr.w	r3, r3, #32
 800033e:	6193      	str	r3, [r2, #24]
 8000340:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <MX_GPIO_Init+0x80>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	f003 0320 	and.w	r3, r3, #32
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800034c:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <MX_GPIO_Init+0x80>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a13      	ldr	r2, [pc, #76]	; (80003a0 <MX_GPIO_Init+0x80>)
 8000352:	f043 0308 	orr.w	r3, r3, #8
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <MX_GPIO_Init+0x80>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f003 0308 	and.w	r3, r3, #8
 8000360:	60bb      	str	r3, [r7, #8]
 8000362:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <MX_GPIO_Init+0x80>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <MX_GPIO_Init+0x80>)
 800036a:	f043 0304 	orr.w	r3, r3, #4
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <MX_GPIO_Init+0x80>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0304 	and.w	r3, r3, #4
 8000378:	607b      	str	r3, [r7, #4]
 800037a:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : boton_Pin */
	GPIO_InitStruct.Pin = boton_Pin;
 800037c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000380:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000386:	2301      	movs	r3, #1
 8000388:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(boton_GPIO_Port, &GPIO_InitStruct);
 800038a:	f107 0310 	add.w	r3, r7, #16
 800038e:	4619      	mov	r1, r3
 8000390:	4804      	ldr	r0, [pc, #16]	; (80003a4 <MX_GPIO_Init+0x84>)
 8000392:	f000 fb4f 	bl	8000a34 <HAL_GPIO_Init>

}
 8000396:	bf00      	nop
 8000398:	3720      	adds	r7, #32
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	40021000 	.word	0x40021000
 80003a4:	40010c00 	.word	0x40010c00

080003a8 <StartnormalTask>:
 * @brief  Function implementing the normalTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartnormalTask */
void StartnormalTask(void const *argument) {
 80003a8:	b5b0      	push	{r4, r5, r7, lr}
 80003aa:	b0a8      	sub	sp, #160	; 0xa0
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		uint8_t texto1[] =
 80003b0:	4b2a      	ldr	r3, [pc, #168]	; (800045c <StartnormalTask+0xb4>)
 80003b2:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80003b6:	461d      	mov	r5, r3
 80003b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003c4:	682b      	ldr	r3, [r5, #0]
 80003c6:	6023      	str	r3, [r4, #0]
				"entrando a la tarea media y esperando a semanforo\n\r";
		HAL_UART_Transmit(&huart1, texto1, sizeof(texto1), 100);
 80003c8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80003cc:	2364      	movs	r3, #100	; 0x64
 80003ce:	2234      	movs	r2, #52	; 0x34
 80003d0:	4823      	ldr	r0, [pc, #140]	; (8000460 <StartnormalTask+0xb8>)
 80003d2:	f001 fbac 	bl	8001b2e <HAL_UART_Transmit>

		osSemaphoreWait(BinarySemHandle, osWaitForever); //bloque, si esta desbloqueado
 80003d6:	4b23      	ldr	r3, [pc, #140]	; (8000464 <StartnormalTask+0xbc>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f04f 31ff 	mov.w	r1, #4294967295
 80003de:	4618      	mov	r0, r3
 80003e0:	f001 fdd2 	bl	8001f88 <osSemaphoreWait>

		uint8_t texto3[] = "semaforo aquirido por la tarea normal\n\r";
 80003e4:	4b20      	ldr	r3, [pc, #128]	; (8000468 <StartnormalTask+0xc0>)
 80003e6:	f107 040c 	add.w	r4, r7, #12
 80003ea:	461d      	mov	r5, r3
 80003ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80003f8:	e884 0003 	stmia.w	r4, {r0, r1}
		HAL_UART_Transmit(&huart1, texto3, sizeof(texto3), 100);
 80003fc:	f107 010c 	add.w	r1, r7, #12
 8000400:	2364      	movs	r3, #100	; 0x64
 8000402:	2228      	movs	r2, #40	; 0x28
 8000404:	4816      	ldr	r0, [pc, #88]	; (8000460 <StartnormalTask+0xb8>)
 8000406:	f001 fb92 	bl	8001b2e <HAL_UART_Transmit>

		while (HAL_GPIO_ReadPin(boton_GPIO_Port, boton_Pin))
 800040a:	bf00      	nop
 800040c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000410:	4816      	ldr	r0, [pc, #88]	; (800046c <StartnormalTask+0xc4>)
 8000412:	f000 fc93 	bl	8000d3c <HAL_GPIO_ReadPin>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d1f7      	bne.n	800040c <StartnormalTask+0x64>
			;

		uint8_t texto2[] =
 800041c:	4b14      	ldr	r3, [pc, #80]	; (8000470 <StartnormalTask+0xc8>)
 800041e:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8000422:	461d      	mov	r5, r3
 8000424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000428:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800042a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800042c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800042e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000430:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000434:	6020      	str	r0, [r4, #0]
 8000436:	3404      	adds	r4, #4
 8000438:	7021      	strb	r1, [r4, #0]
				"saliendo de la tarea media y soltando el semaforo\n\n\r";
		HAL_UART_Transmit(&huart1, texto2, sizeof(texto2), 100);
 800043a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800043e:	2364      	movs	r3, #100	; 0x64
 8000440:	2235      	movs	r2, #53	; 0x35
 8000442:	4807      	ldr	r0, [pc, #28]	; (8000460 <StartnormalTask+0xb8>)
 8000444:	f001 fb73 	bl	8001b2e <HAL_UART_Transmit>

		osSemaphoreRelease(BinarySemHandle); //desbloquea
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <StartnormalTask+0xbc>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4618      	mov	r0, r3
 800044e:	f001 fde9 	bl	8002024 <osSemaphoreRelease>
		osDelay(500);
 8000452:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000456:	f001 fd50 	bl	8001efa <osDelay>
	for (;;) {
 800045a:	e7a9      	b.n	80003b0 <StartnormalTask+0x8>
 800045c:	0800458c 	.word	0x0800458c
 8000460:	20000fd4 	.word	0x20000fd4
 8000464:	20000fd0 	.word	0x20000fd0
 8000468:	080045c0 	.word	0x080045c0
 800046c:	40010c00 	.word	0x40010c00
 8000470:	080045e8 	.word	0x080045e8

08000474 <StarthighTask>:
 * @brief Function implementing the HIghTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StarthighTask */
void StarthighTask(void const *argument) {
 8000474:	b5b0      	push	{r4, r5, r7, lr}
 8000476:	b0a2      	sub	sp, #136	; 0x88
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StarthighTask */
	/* Infinite loop */
	for (;;) {
		uint8_t texto1[] =
 800047c:	4b26      	ldr	r3, [pc, #152]	; (8000518 <StarthighTask+0xa4>)
 800047e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000482:	461d      	mov	r5, r3
 8000484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800048a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800048c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800048e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000490:	682b      	ldr	r3, [r5, #0]
 8000492:	461a      	mov	r2, r3
 8000494:	8022      	strh	r2, [r4, #0]
 8000496:	3402      	adds	r4, #2
 8000498:	0c1b      	lsrs	r3, r3, #16
 800049a:	7023      	strb	r3, [r4, #0]
				"entrando a la tarea alta y esperando a semanforo\n\r";
		HAL_UART_Transmit(&huart1, texto1, sizeof(texto1), 100);
 800049c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80004a0:	2364      	movs	r3, #100	; 0x64
 80004a2:	2233      	movs	r2, #51	; 0x33
 80004a4:	481d      	ldr	r0, [pc, #116]	; (800051c <StarthighTask+0xa8>)
 80004a6:	f001 fb42 	bl	8001b2e <HAL_UART_Transmit>

		osSemaphoreWait(BinarySemHandle, osWaitForever); //bloquea si esta desbloqueado
 80004aa:	4b1d      	ldr	r3, [pc, #116]	; (8000520 <StarthighTask+0xac>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f04f 31ff 	mov.w	r1, #4294967295
 80004b2:	4618      	mov	r0, r3
 80004b4:	f001 fd68 	bl	8001f88 <osSemaphoreWait>

		uint8_t texto3[] = "semaforo aquirido por la tarea alta\n\r";
 80004b8:	4b1a      	ldr	r3, [pc, #104]	; (8000524 <StarthighTask+0xb0>)
 80004ba:	f107 040c 	add.w	r4, r7, #12
 80004be:	461d      	mov	r5, r3
 80004c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80004cc:	6020      	str	r0, [r4, #0]
 80004ce:	3404      	adds	r4, #4
 80004d0:	8021      	strh	r1, [r4, #0]
		HAL_UART_Transmit(&huart1, texto3, sizeof(texto3), 100);
 80004d2:	f107 010c 	add.w	r1, r7, #12
 80004d6:	2364      	movs	r3, #100	; 0x64
 80004d8:	2226      	movs	r2, #38	; 0x26
 80004da:	4810      	ldr	r0, [pc, #64]	; (800051c <StarthighTask+0xa8>)
 80004dc:	f001 fb27 	bl	8001b2e <HAL_UART_Transmit>

		uint8_t texto2[] = "saliendo de la tarea alta\n\n\r";
 80004e0:	4b11      	ldr	r3, [pc, #68]	; (8000528 <StarthighTask+0xb4>)
 80004e2:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80004e6:	461d      	mov	r5, r3
 80004e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80004f0:	c407      	stmia	r4!, {r0, r1, r2}
 80004f2:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, texto2, sizeof(texto2), 100);
 80004f4:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80004f8:	2364      	movs	r3, #100	; 0x64
 80004fa:	221d      	movs	r2, #29
 80004fc:	4807      	ldr	r0, [pc, #28]	; (800051c <StarthighTask+0xa8>)
 80004fe:	f001 fb16 	bl	8001b2e <HAL_UART_Transmit>

		osSemaphoreRelease(BinarySemHandle); //desbloquea
 8000502:	4b07      	ldr	r3, [pc, #28]	; (8000520 <StarthighTask+0xac>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4618      	mov	r0, r3
 8000508:	f001 fd8c 	bl	8002024 <osSemaphoreRelease>
		osDelay(500);
 800050c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000510:	f001 fcf3 	bl	8001efa <osDelay>
	for (;;) {
 8000514:	e7b2      	b.n	800047c <StarthighTask+0x8>
 8000516:	bf00      	nop
 8000518:	08004620 	.word	0x08004620
 800051c:	20000fd4 	.word	0x20000fd4
 8000520:	20000fd0 	.word	0x20000fd0
 8000524:	08004654 	.word	0x08004654
 8000528:	0800467c 	.word	0x0800467c

0800052c <StartLowTask>:
 * @brief Function implementing the LowTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLowTask */
void StartLowTask(void const *argument) {
 800052c:	b5b0      	push	{r4, r5, r7, lr}
 800052e:	b092      	sub	sp, #72	; 0x48
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartLowTask */
	/* Infinite loop */
	for (;;) {
		uint8_t texto1[] = "entrando a la tarea baja\n\r";
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <StartLowTask+0x5c>)
 8000536:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800053a:	461d      	mov	r5, r3
 800053c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800053e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000540:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000544:	c403      	stmia	r4!, {r0, r1}
 8000546:	8022      	strh	r2, [r4, #0]
 8000548:	3402      	adds	r4, #2
 800054a:	0c13      	lsrs	r3, r2, #16
 800054c:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, texto1, sizeof(texto1), 100);
 800054e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000552:	2364      	movs	r3, #100	; 0x64
 8000554:	221b      	movs	r2, #27
 8000556:	480d      	ldr	r0, [pc, #52]	; (800058c <StartLowTask+0x60>)
 8000558:	f001 fae9 	bl	8001b2e <HAL_UART_Transmit>

		uint8_t texto2[] = "saliendo de la tarea baja\n\n\r";
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <StartLowTask+0x64>)
 800055e:	f107 040c 	add.w	r4, r7, #12
 8000562:	461d      	mov	r5, r3
 8000564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000568:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800056c:	c407      	stmia	r4!, {r0, r1, r2}
 800056e:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, texto2, sizeof(texto2), 100);
 8000570:	f107 010c 	add.w	r1, r7, #12
 8000574:	2364      	movs	r3, #100	; 0x64
 8000576:	221d      	movs	r2, #29
 8000578:	4804      	ldr	r0, [pc, #16]	; (800058c <StartLowTask+0x60>)
 800057a:	f001 fad8 	bl	8001b2e <HAL_UART_Transmit>
		osDelay(500);
 800057e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000582:	f001 fcba 	bl	8001efa <osDelay>
	for (;;) {
 8000586:	e7d5      	b.n	8000534 <StartLowTask+0x8>
 8000588:	0800469c 	.word	0x0800469c
 800058c:	20000fd4 	.word	0x20000fd4
 8000590:	080046b8 	.word	0x080046b8

08000594 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d101      	bne.n	80005aa <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80005a6:	f000 f949 	bl	800083c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40012c00 	.word	0x40012c00

080005b8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005bc:	b672      	cpsid	i
}
 80005be:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80005c0:	e7fe      	b.n	80005c0 <Error_Handler+0x8>
	...

080005c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ca:	4b18      	ldr	r3, [pc, #96]	; (800062c <HAL_MspInit+0x68>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	4a17      	ldr	r2, [pc, #92]	; (800062c <HAL_MspInit+0x68>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6193      	str	r3, [r2, #24]
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <HAL_MspInit+0x68>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_MspInit+0x68>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a11      	ldr	r2, [pc, #68]	; (800062c <HAL_MspInit+0x68>)
 80005e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ec:	61d3      	str	r3, [r2, #28]
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <HAL_MspInit+0x68>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	210f      	movs	r1, #15
 80005fe:	f06f 0001 	mvn.w	r0, #1
 8000602:	f000 f9ec 	bl	80009de <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <HAL_MspInit+0x6c>)
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	4a04      	ldr	r2, [pc, #16]	; (8000630 <HAL_MspInit+0x6c>)
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40021000 	.word	0x40021000
 8000630:	40010000 	.word	0x40010000

08000634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a1c      	ldr	r2, [pc, #112]	; (80006c0 <HAL_UART_MspInit+0x8c>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d131      	bne.n	80006b8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <HAL_UART_MspInit+0x90>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a1a      	ldr	r2, [pc, #104]	; (80006c4 <HAL_UART_MspInit+0x90>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <HAL_UART_MspInit+0x90>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <HAL_UART_MspInit+0x90>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a14      	ldr	r2, [pc, #80]	; (80006c4 <HAL_UART_MspInit+0x90>)
 8000672:	f043 0304 	orr.w	r3, r3, #4
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <HAL_UART_MspInit+0x90>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f003 0304 	and.w	r3, r3, #4
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000684:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000688:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068e:	2303      	movs	r3, #3
 8000690:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000692:	f107 0310 	add.w	r3, r7, #16
 8000696:	4619      	mov	r1, r3
 8000698:	480b      	ldr	r0, [pc, #44]	; (80006c8 <HAL_UART_MspInit+0x94>)
 800069a:	f000 f9cb 	bl	8000a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800069e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4619      	mov	r1, r3
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <HAL_UART_MspInit+0x94>)
 80006b4:	f000 f9be 	bl	8000a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40013800 	.word	0x40013800
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40010800 	.word	0x40010800

080006cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08c      	sub	sp, #48	; 0x30
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80006dc:	2200      	movs	r2, #0
 80006de:	6879      	ldr	r1, [r7, #4]
 80006e0:	2019      	movs	r0, #25
 80006e2:	f000 f97c 	bl	80009de <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80006e6:	2019      	movs	r0, #25
 80006e8:	f000 f995 	bl	8000a16 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80006ec:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <HAL_InitTick+0x9c>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a1d      	ldr	r2, [pc, #116]	; (8000768 <HAL_InitTick+0x9c>)
 80006f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <HAL_InitTick+0x9c>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000704:	f107 0210 	add.w	r2, r7, #16
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4611      	mov	r1, r2
 800070e:	4618      	mov	r0, r3
 8000710:	f000 ff28 	bl	8001564 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000714:	f000 ff12 	bl	800153c <HAL_RCC_GetPCLK2Freq>
 8000718:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800071a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800071c:	4a13      	ldr	r2, [pc, #76]	; (800076c <HAL_InitTick+0xa0>)
 800071e:	fba2 2303 	umull	r2, r3, r2, r3
 8000722:	0c9b      	lsrs	r3, r3, #18
 8000724:	3b01      	subs	r3, #1
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <HAL_InitTick+0xa4>)
 800072a:	4a12      	ldr	r2, [pc, #72]	; (8000774 <HAL_InitTick+0xa8>)
 800072c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <HAL_InitTick+0xa4>)
 8000730:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000734:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000736:	4a0e      	ldr	r2, [pc, #56]	; (8000770 <HAL_InitTick+0xa4>)
 8000738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800073a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <HAL_InitTick+0xa4>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <HAL_InitTick+0xa4>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000748:	4809      	ldr	r0, [pc, #36]	; (8000770 <HAL_InitTick+0xa4>)
 800074a:	f000 ff59 	bl	8001600 <HAL_TIM_Base_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d104      	bne.n	800075e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000754:	4806      	ldr	r0, [pc, #24]	; (8000770 <HAL_InitTick+0xa4>)
 8000756:	f000 ffab 	bl	80016b0 <HAL_TIM_Base_Start_IT>
 800075a:	4603      	mov	r3, r0
 800075c:	e000      	b.n	8000760 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800075e:	2301      	movs	r3, #1
}
 8000760:	4618      	mov	r0, r3
 8000762:	3730      	adds	r7, #48	; 0x30
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40021000 	.word	0x40021000
 800076c:	431bde83 	.word	0x431bde83
 8000770:	2000101c 	.word	0x2000101c
 8000774:	40012c00 	.word	0x40012c00

08000778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800077c:	e7fe      	b.n	800077c <NMI_Handler+0x4>

0800077e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <HardFault_Handler+0x4>

08000784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <MemManage_Handler+0x4>

0800078a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078e:	e7fe      	b.n	800078e <BusFault_Handler+0x4>

08000790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <UsageFault_Handler+0x4>

08000796 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
	...

080007a4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007a8:	4802      	ldr	r0, [pc, #8]	; (80007b4 <TIM1_UP_IRQHandler+0x10>)
 80007aa:	f000 ffd3 	bl	8001754 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000101c 	.word	0x2000101c

080007b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr

080007c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007c4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007c6:	e003      	b.n	80007d0 <LoopCopyDataInit>

080007c8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007c8:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80007ca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007cc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007ce:	3104      	adds	r1, #4

080007d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007d0:	480a      	ldr	r0, [pc, #40]	; (80007fc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007d4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007d6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007d8:	d3f6      	bcc.n	80007c8 <CopyDataInit>
  ldr r2, =_sbss
 80007da:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007dc:	e002      	b.n	80007e4 <LoopFillZerobss>

080007de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007de:	2300      	movs	r3, #0
  str r3, [r2], #4
 80007e0:	f842 3b04 	str.w	r3, [r2], #4

080007e4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80007e4:	4b08      	ldr	r3, [pc, #32]	; (8000808 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80007e6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007e8:	d3f9      	bcc.n	80007de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007ea:	f7ff ffe5 	bl	80007b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ee:	f003 fe4d 	bl	800448c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007f2:	f7ff fcc5 	bl	8000180 <main>
  bx lr
 80007f6:	4770      	bx	lr
  ldr r3, =_sidata
 80007f8:	08004710 	.word	0x08004710
  ldr r0, =_sdata
 80007fc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000800:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000804:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000808:	20001068 	.word	0x20001068

0800080c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800080c:	e7fe      	b.n	800080c <ADC1_2_IRQHandler>
	...

08000810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <HAL_Init+0x28>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a07      	ldr	r2, [pc, #28]	; (8000838 <HAL_Init+0x28>)
 800081a:	f043 0310 	orr.w	r3, r3, #16
 800081e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000820:	2003      	movs	r0, #3
 8000822:	f000 f8d1 	bl	80009c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000826:	2000      	movs	r0, #0
 8000828:	f7ff ff50 	bl	80006cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800082c:	f7ff feca 	bl	80005c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40022000 	.word	0x40022000

0800083c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_IncTick+0x1c>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <HAL_IncTick+0x20>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4413      	add	r3, r2
 800084c:	4a03      	ldr	r2, [pc, #12]	; (800085c <HAL_IncTick+0x20>)
 800084e:	6013      	str	r3, [r2, #0]
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	20000008 	.word	0x20000008
 800085c:	20001064 	.word	0x20001064

08000860 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  return uwTick;
 8000864:	4b02      	ldr	r3, [pc, #8]	; (8000870 <HAL_GetTick+0x10>)
 8000866:	681b      	ldr	r3, [r3, #0]
}
 8000868:	4618      	mov	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	20001064 	.word	0x20001064

08000874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000890:	4013      	ands	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800089c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008a6:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <__NVIC_SetPriorityGrouping+0x44>)
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	60d3      	str	r3, [r2, #12]
}
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c0:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <__NVIC_GetPriorityGrouping+0x18>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	0a1b      	lsrs	r3, r3, #8
 80008c6:	f003 0307 	and.w	r3, r3, #7
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	db0b      	blt.n	8000902 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 021f 	and.w	r2, r3, #31
 80008f0:	4906      	ldr	r1, [pc, #24]	; (800090c <__NVIC_EnableIRQ+0x34>)
 80008f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f6:	095b      	lsrs	r3, r3, #5
 80008f8:	2001      	movs	r0, #1
 80008fa:	fa00 f202 	lsl.w	r2, r0, r2
 80008fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	e000e100 	.word	0xe000e100

08000910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	6039      	str	r1, [r7, #0]
 800091a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800091c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000920:	2b00      	cmp	r3, #0
 8000922:	db0a      	blt.n	800093a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	b2da      	uxtb	r2, r3
 8000928:	490c      	ldr	r1, [pc, #48]	; (800095c <__NVIC_SetPriority+0x4c>)
 800092a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092e:	0112      	lsls	r2, r2, #4
 8000930:	b2d2      	uxtb	r2, r2
 8000932:	440b      	add	r3, r1
 8000934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000938:	e00a      	b.n	8000950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4908      	ldr	r1, [pc, #32]	; (8000960 <__NVIC_SetPriority+0x50>)
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	f003 030f 	and.w	r3, r3, #15
 8000946:	3b04      	subs	r3, #4
 8000948:	0112      	lsls	r2, r2, #4
 800094a:	b2d2      	uxtb	r2, r2
 800094c:	440b      	add	r3, r1
 800094e:	761a      	strb	r2, [r3, #24]
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	bc80      	pop	{r7}
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000e100 	.word	0xe000e100
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000964:	b480      	push	{r7}
 8000966:	b089      	sub	sp, #36	; 0x24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f003 0307 	and.w	r3, r3, #7
 8000976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	f1c3 0307 	rsb	r3, r3, #7
 800097e:	2b04      	cmp	r3, #4
 8000980:	bf28      	it	cs
 8000982:	2304      	movcs	r3, #4
 8000984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	3304      	adds	r3, #4
 800098a:	2b06      	cmp	r3, #6
 800098c:	d902      	bls.n	8000994 <NVIC_EncodePriority+0x30>
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	3b03      	subs	r3, #3
 8000992:	e000      	b.n	8000996 <NVIC_EncodePriority+0x32>
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000998:	f04f 32ff 	mov.w	r2, #4294967295
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	43da      	mvns	r2, r3
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	401a      	ands	r2, r3
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009ac:	f04f 31ff 	mov.w	r1, #4294967295
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	fa01 f303 	lsl.w	r3, r1, r3
 80009b6:	43d9      	mvns	r1, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009bc:	4313      	orrs	r3, r2
         );
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3724      	adds	r7, #36	; 0x24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr

080009c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff ff4f 	bl	8000874 <__NVIC_SetPriorityGrouping>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009de:	b580      	push	{r7, lr}
 80009e0:	b086      	sub	sp, #24
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	60b9      	str	r1, [r7, #8]
 80009e8:	607a      	str	r2, [r7, #4]
 80009ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009f0:	f7ff ff64 	bl	80008bc <__NVIC_GetPriorityGrouping>
 80009f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	68b9      	ldr	r1, [r7, #8]
 80009fa:	6978      	ldr	r0, [r7, #20]
 80009fc:	f7ff ffb2 	bl	8000964 <NVIC_EncodePriority>
 8000a00:	4602      	mov	r2, r0
 8000a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a06:	4611      	mov	r1, r2
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff81 	bl	8000910 <__NVIC_SetPriority>
}
 8000a0e:	bf00      	nop
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ff57 	bl	80008d8 <__NVIC_EnableIRQ>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b08b      	sub	sp, #44	; 0x2c
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a46:	e169      	b.n	8000d1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	69fa      	ldr	r2, [r7, #28]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	f040 8158 	bne.w	8000d16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	4a9a      	ldr	r2, [pc, #616]	; (8000cd4 <HAL_GPIO_Init+0x2a0>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d05e      	beq.n	8000b2e <HAL_GPIO_Init+0xfa>
 8000a70:	4a98      	ldr	r2, [pc, #608]	; (8000cd4 <HAL_GPIO_Init+0x2a0>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d875      	bhi.n	8000b62 <HAL_GPIO_Init+0x12e>
 8000a76:	4a98      	ldr	r2, [pc, #608]	; (8000cd8 <HAL_GPIO_Init+0x2a4>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d058      	beq.n	8000b2e <HAL_GPIO_Init+0xfa>
 8000a7c:	4a96      	ldr	r2, [pc, #600]	; (8000cd8 <HAL_GPIO_Init+0x2a4>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d86f      	bhi.n	8000b62 <HAL_GPIO_Init+0x12e>
 8000a82:	4a96      	ldr	r2, [pc, #600]	; (8000cdc <HAL_GPIO_Init+0x2a8>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d052      	beq.n	8000b2e <HAL_GPIO_Init+0xfa>
 8000a88:	4a94      	ldr	r2, [pc, #592]	; (8000cdc <HAL_GPIO_Init+0x2a8>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d869      	bhi.n	8000b62 <HAL_GPIO_Init+0x12e>
 8000a8e:	4a94      	ldr	r2, [pc, #592]	; (8000ce0 <HAL_GPIO_Init+0x2ac>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d04c      	beq.n	8000b2e <HAL_GPIO_Init+0xfa>
 8000a94:	4a92      	ldr	r2, [pc, #584]	; (8000ce0 <HAL_GPIO_Init+0x2ac>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d863      	bhi.n	8000b62 <HAL_GPIO_Init+0x12e>
 8000a9a:	4a92      	ldr	r2, [pc, #584]	; (8000ce4 <HAL_GPIO_Init+0x2b0>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d046      	beq.n	8000b2e <HAL_GPIO_Init+0xfa>
 8000aa0:	4a90      	ldr	r2, [pc, #576]	; (8000ce4 <HAL_GPIO_Init+0x2b0>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d85d      	bhi.n	8000b62 <HAL_GPIO_Init+0x12e>
 8000aa6:	2b12      	cmp	r3, #18
 8000aa8:	d82a      	bhi.n	8000b00 <HAL_GPIO_Init+0xcc>
 8000aaa:	2b12      	cmp	r3, #18
 8000aac:	d859      	bhi.n	8000b62 <HAL_GPIO_Init+0x12e>
 8000aae:	a201      	add	r2, pc, #4	; (adr r2, 8000ab4 <HAL_GPIO_Init+0x80>)
 8000ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab4:	08000b2f 	.word	0x08000b2f
 8000ab8:	08000b09 	.word	0x08000b09
 8000abc:	08000b1b 	.word	0x08000b1b
 8000ac0:	08000b5d 	.word	0x08000b5d
 8000ac4:	08000b63 	.word	0x08000b63
 8000ac8:	08000b63 	.word	0x08000b63
 8000acc:	08000b63 	.word	0x08000b63
 8000ad0:	08000b63 	.word	0x08000b63
 8000ad4:	08000b63 	.word	0x08000b63
 8000ad8:	08000b63 	.word	0x08000b63
 8000adc:	08000b63 	.word	0x08000b63
 8000ae0:	08000b63 	.word	0x08000b63
 8000ae4:	08000b63 	.word	0x08000b63
 8000ae8:	08000b63 	.word	0x08000b63
 8000aec:	08000b63 	.word	0x08000b63
 8000af0:	08000b63 	.word	0x08000b63
 8000af4:	08000b63 	.word	0x08000b63
 8000af8:	08000b11 	.word	0x08000b11
 8000afc:	08000b25 	.word	0x08000b25
 8000b00:	4a79      	ldr	r2, [pc, #484]	; (8000ce8 <HAL_GPIO_Init+0x2b4>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d013      	beq.n	8000b2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b06:	e02c      	b.n	8000b62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	623b      	str	r3, [r7, #32]
          break;
 8000b0e:	e029      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	3304      	adds	r3, #4
 8000b16:	623b      	str	r3, [r7, #32]
          break;
 8000b18:	e024      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	68db      	ldr	r3, [r3, #12]
 8000b1e:	3308      	adds	r3, #8
 8000b20:	623b      	str	r3, [r7, #32]
          break;
 8000b22:	e01f      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	330c      	adds	r3, #12
 8000b2a:	623b      	str	r3, [r7, #32]
          break;
 8000b2c:	e01a      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d102      	bne.n	8000b3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b36:	2304      	movs	r3, #4
 8000b38:	623b      	str	r3, [r7, #32]
          break;
 8000b3a:	e013      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d105      	bne.n	8000b50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b44:	2308      	movs	r3, #8
 8000b46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	69fa      	ldr	r2, [r7, #28]
 8000b4c:	611a      	str	r2, [r3, #16]
          break;
 8000b4e:	e009      	b.n	8000b64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b50:	2308      	movs	r3, #8
 8000b52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	69fa      	ldr	r2, [r7, #28]
 8000b58:	615a      	str	r2, [r3, #20]
          break;
 8000b5a:	e003      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
          break;
 8000b60:	e000      	b.n	8000b64 <HAL_GPIO_Init+0x130>
          break;
 8000b62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	2bff      	cmp	r3, #255	; 0xff
 8000b68:	d801      	bhi.n	8000b6e <HAL_GPIO_Init+0x13a>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	e001      	b.n	8000b72 <HAL_GPIO_Init+0x13e>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3304      	adds	r3, #4
 8000b72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	2bff      	cmp	r3, #255	; 0xff
 8000b78:	d802      	bhi.n	8000b80 <HAL_GPIO_Init+0x14c>
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	e002      	b.n	8000b86 <HAL_GPIO_Init+0x152>
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	3b08      	subs	r3, #8
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	210f      	movs	r1, #15
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	fa01 f303 	lsl.w	r3, r1, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	401a      	ands	r2, r3
 8000b98:	6a39      	ldr	r1, [r7, #32]
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba0:	431a      	orrs	r2, r3
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f000 80b1 	beq.w	8000d16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bb4:	4b4d      	ldr	r3, [pc, #308]	; (8000cec <HAL_GPIO_Init+0x2b8>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a4c      	ldr	r2, [pc, #304]	; (8000cec <HAL_GPIO_Init+0x2b8>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b4a      	ldr	r3, [pc, #296]	; (8000cec <HAL_GPIO_Init+0x2b8>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bcc:	4a48      	ldr	r2, [pc, #288]	; (8000cf0 <HAL_GPIO_Init+0x2bc>)
 8000bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd0:	089b      	lsrs	r3, r3, #2
 8000bd2:	3302      	adds	r3, #2
 8000bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bdc:	f003 0303 	and.w	r3, r3, #3
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	220f      	movs	r2, #15
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	4013      	ands	r3, r2
 8000bee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a40      	ldr	r2, [pc, #256]	; (8000cf4 <HAL_GPIO_Init+0x2c0>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d013      	beq.n	8000c20 <HAL_GPIO_Init+0x1ec>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a3f      	ldr	r2, [pc, #252]	; (8000cf8 <HAL_GPIO_Init+0x2c4>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d00d      	beq.n	8000c1c <HAL_GPIO_Init+0x1e8>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a3e      	ldr	r2, [pc, #248]	; (8000cfc <HAL_GPIO_Init+0x2c8>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d007      	beq.n	8000c18 <HAL_GPIO_Init+0x1e4>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a3d      	ldr	r2, [pc, #244]	; (8000d00 <HAL_GPIO_Init+0x2cc>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d101      	bne.n	8000c14 <HAL_GPIO_Init+0x1e0>
 8000c10:	2303      	movs	r3, #3
 8000c12:	e006      	b.n	8000c22 <HAL_GPIO_Init+0x1ee>
 8000c14:	2304      	movs	r3, #4
 8000c16:	e004      	b.n	8000c22 <HAL_GPIO_Init+0x1ee>
 8000c18:	2302      	movs	r3, #2
 8000c1a:	e002      	b.n	8000c22 <HAL_GPIO_Init+0x1ee>
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e000      	b.n	8000c22 <HAL_GPIO_Init+0x1ee>
 8000c20:	2300      	movs	r3, #0
 8000c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c24:	f002 0203 	and.w	r2, r2, #3
 8000c28:	0092      	lsls	r2, r2, #2
 8000c2a:	4093      	lsls	r3, r2
 8000c2c:	68fa      	ldr	r2, [r7, #12]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c32:	492f      	ldr	r1, [pc, #188]	; (8000cf0 <HAL_GPIO_Init+0x2bc>)
 8000c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c36:	089b      	lsrs	r3, r3, #2
 8000c38:	3302      	adds	r3, #2
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d006      	beq.n	8000c5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c4c:	4b2d      	ldr	r3, [pc, #180]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	492c      	ldr	r1, [pc, #176]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	600b      	str	r3, [r1, #0]
 8000c58:	e006      	b.n	8000c68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c5a:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	43db      	mvns	r3, r3
 8000c62:	4928      	ldr	r1, [pc, #160]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c64:	4013      	ands	r3, r2
 8000c66:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d006      	beq.n	8000c82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c74:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c76:	685a      	ldr	r2, [r3, #4]
 8000c78:	4922      	ldr	r1, [pc, #136]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	604b      	str	r3, [r1, #4]
 8000c80:	e006      	b.n	8000c90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c82:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	491e      	ldr	r1, [pc, #120]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d006      	beq.n	8000caa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000c9e:	689a      	ldr	r2, [r3, #8]
 8000ca0:	4918      	ldr	r1, [pc, #96]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	608b      	str	r3, [r1, #8]
 8000ca8:	e006      	b.n	8000cb8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000caa:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	4914      	ldr	r1, [pc, #80]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d021      	beq.n	8000d08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000cc6:	68da      	ldr	r2, [r3, #12]
 8000cc8:	490e      	ldr	r1, [pc, #56]	; (8000d04 <HAL_GPIO_Init+0x2d0>)
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	60cb      	str	r3, [r1, #12]
 8000cd0:	e021      	b.n	8000d16 <HAL_GPIO_Init+0x2e2>
 8000cd2:	bf00      	nop
 8000cd4:	10320000 	.word	0x10320000
 8000cd8:	10310000 	.word	0x10310000
 8000cdc:	10220000 	.word	0x10220000
 8000ce0:	10210000 	.word	0x10210000
 8000ce4:	10120000 	.word	0x10120000
 8000ce8:	10110000 	.word	0x10110000
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40010000 	.word	0x40010000
 8000cf4:	40010800 	.word	0x40010800
 8000cf8:	40010c00 	.word	0x40010c00
 8000cfc:	40011000 	.word	0x40011000
 8000d00:	40011400 	.word	0x40011400
 8000d04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_GPIO_Init+0x304>)
 8000d0a:	68da      	ldr	r2, [r3, #12]
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	4909      	ldr	r1, [pc, #36]	; (8000d38 <HAL_GPIO_Init+0x304>)
 8000d12:	4013      	ands	r3, r2
 8000d14:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d18:	3301      	adds	r3, #1
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d22:	fa22 f303 	lsr.w	r3, r2, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f47f ae8e 	bne.w	8000a48 <HAL_GPIO_Init+0x14>
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	372c      	adds	r7, #44	; 0x2c
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	40010400 	.word	0x40010400

08000d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	460b      	mov	r3, r1
 8000d46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	887b      	ldrh	r3, [r7, #2]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d002      	beq.n	8000d5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d54:	2301      	movs	r3, #1
 8000d56:	73fb      	strb	r3, [r7, #15]
 8000d58:	e001      	b.n	8000d5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
	...

08000d6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e26c      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 8087 	beq.w	8000e9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d8c:	4b92      	ldr	r3, [pc, #584]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 030c 	and.w	r3, r3, #12
 8000d94:	2b04      	cmp	r3, #4
 8000d96:	d00c      	beq.n	8000db2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d98:	4b8f      	ldr	r3, [pc, #572]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 030c 	and.w	r3, r3, #12
 8000da0:	2b08      	cmp	r3, #8
 8000da2:	d112      	bne.n	8000dca <HAL_RCC_OscConfig+0x5e>
 8000da4:	4b8c      	ldr	r3, [pc, #560]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000db0:	d10b      	bne.n	8000dca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db2:	4b89      	ldr	r3, [pc, #548]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d06c      	beq.n	8000e98 <HAL_RCC_OscConfig+0x12c>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d168      	bne.n	8000e98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e246      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dd2:	d106      	bne.n	8000de2 <HAL_RCC_OscConfig+0x76>
 8000dd4:	4b80      	ldr	r3, [pc, #512]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a7f      	ldr	r2, [pc, #508]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	e02e      	b.n	8000e40 <HAL_RCC_OscConfig+0xd4>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d10c      	bne.n	8000e04 <HAL_RCC_OscConfig+0x98>
 8000dea:	4b7b      	ldr	r3, [pc, #492]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a7a      	ldr	r2, [pc, #488]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	4b78      	ldr	r3, [pc, #480]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a77      	ldr	r2, [pc, #476]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	e01d      	b.n	8000e40 <HAL_RCC_OscConfig+0xd4>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e0c:	d10c      	bne.n	8000e28 <HAL_RCC_OscConfig+0xbc>
 8000e0e:	4b72      	ldr	r3, [pc, #456]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a71      	ldr	r2, [pc, #452]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	4b6f      	ldr	r3, [pc, #444]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a6e      	ldr	r2, [pc, #440]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e24:	6013      	str	r3, [r2, #0]
 8000e26:	e00b      	b.n	8000e40 <HAL_RCC_OscConfig+0xd4>
 8000e28:	4b6b      	ldr	r3, [pc, #428]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a6a      	ldr	r2, [pc, #424]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e32:	6013      	str	r3, [r2, #0]
 8000e34:	4b68      	ldr	r3, [pc, #416]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a67      	ldr	r2, [pc, #412]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d013      	beq.n	8000e70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e48:	f7ff fd0a 	bl	8000860 <HAL_GetTick>
 8000e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4e:	e008      	b.n	8000e62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e50:	f7ff fd06 	bl	8000860 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b64      	cmp	r3, #100	; 0x64
 8000e5c:	d901      	bls.n	8000e62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e1fa      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e62:	4b5d      	ldr	r3, [pc, #372]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0f0      	beq.n	8000e50 <HAL_RCC_OscConfig+0xe4>
 8000e6e:	e014      	b.n	8000e9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e70:	f7ff fcf6 	bl	8000860 <HAL_GetTick>
 8000e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e76:	e008      	b.n	8000e8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e78:	f7ff fcf2 	bl	8000860 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b64      	cmp	r3, #100	; 0x64
 8000e84:	d901      	bls.n	8000e8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e1e6      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e8a:	4b53      	ldr	r3, [pc, #332]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1f0      	bne.n	8000e78 <HAL_RCC_OscConfig+0x10c>
 8000e96:	e000      	b.n	8000e9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d063      	beq.n	8000f6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ea6:	4b4c      	ldr	r3, [pc, #304]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 030c 	and.w	r3, r3, #12
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d00b      	beq.n	8000eca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000eb2:	4b49      	ldr	r3, [pc, #292]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 030c 	and.w	r3, r3, #12
 8000eba:	2b08      	cmp	r3, #8
 8000ebc:	d11c      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x18c>
 8000ebe:	4b46      	ldr	r3, [pc, #280]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d116      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eca:	4b43      	ldr	r3, [pc, #268]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d005      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x176>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d001      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e1ba      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ee2:	4b3d      	ldr	r3, [pc, #244]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	4939      	ldr	r1, [pc, #228]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ef6:	e03a      	b.n	8000f6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	691b      	ldr	r3, [r3, #16]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d020      	beq.n	8000f42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f00:	4b36      	ldr	r3, [pc, #216]	; (8000fdc <HAL_RCC_OscConfig+0x270>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f06:	f7ff fcab 	bl	8000860 <HAL_GetTick>
 8000f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f0c:	e008      	b.n	8000f20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f0e:	f7ff fca7 	bl	8000860 <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e19b      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f20:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d0f0      	beq.n	8000f0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f2c:	4b2a      	ldr	r3, [pc, #168]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	695b      	ldr	r3, [r3, #20]
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	4927      	ldr	r1, [pc, #156]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	600b      	str	r3, [r1, #0]
 8000f40:	e015      	b.n	8000f6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f42:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <HAL_RCC_OscConfig+0x270>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f48:	f7ff fc8a 	bl	8000860 <HAL_GetTick>
 8000f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f4e:	e008      	b.n	8000f62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f50:	f7ff fc86 	bl	8000860 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d901      	bls.n	8000f62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e17a      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1f0      	bne.n	8000f50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0308 	and.w	r3, r3, #8
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d03a      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d019      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <HAL_RCC_OscConfig+0x274>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f88:	f7ff fc6a 	bl	8000860 <HAL_GetTick>
 8000f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f8e:	e008      	b.n	8000fa2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f90:	f7ff fc66 	bl	8000860 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d901      	bls.n	8000fa2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e15a      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0f0      	beq.n	8000f90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fae:	2001      	movs	r0, #1
 8000fb0:	f000 fb08 	bl	80015c4 <RCC_Delay>
 8000fb4:	e01c      	b.n	8000ff0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_RCC_OscConfig+0x274>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fbc:	f7ff fc50 	bl	8000860 <HAL_GetTick>
 8000fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc2:	e00f      	b.n	8000fe4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fc4:	f7ff fc4c 	bl	8000860 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d908      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e140      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	42420000 	.word	0x42420000
 8000fe0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fe4:	4b9e      	ldr	r3, [pc, #632]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1e9      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f000 80a6 	beq.w	800114a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ffe:	2300      	movs	r3, #0
 8001000:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001002:	4b97      	ldr	r3, [pc, #604]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10d      	bne.n	800102a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	4b94      	ldr	r3, [pc, #592]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	4a93      	ldr	r2, [pc, #588]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001018:	61d3      	str	r3, [r2, #28]
 800101a:	4b91      	ldr	r3, [pc, #580]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001026:	2301      	movs	r3, #1
 8001028:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800102a:	4b8e      	ldr	r3, [pc, #568]	; (8001264 <HAL_RCC_OscConfig+0x4f8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001032:	2b00      	cmp	r3, #0
 8001034:	d118      	bne.n	8001068 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001036:	4b8b      	ldr	r3, [pc, #556]	; (8001264 <HAL_RCC_OscConfig+0x4f8>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a8a      	ldr	r2, [pc, #552]	; (8001264 <HAL_RCC_OscConfig+0x4f8>)
 800103c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001042:	f7ff fc0d 	bl	8000860 <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001048:	e008      	b.n	800105c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800104a:	f7ff fc09 	bl	8000860 <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b64      	cmp	r3, #100	; 0x64
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e0fd      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800105c:	4b81      	ldr	r3, [pc, #516]	; (8001264 <HAL_RCC_OscConfig+0x4f8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001064:	2b00      	cmp	r3, #0
 8001066:	d0f0      	beq.n	800104a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d106      	bne.n	800107e <HAL_RCC_OscConfig+0x312>
 8001070:	4b7b      	ldr	r3, [pc, #492]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	4a7a      	ldr	r2, [pc, #488]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6213      	str	r3, [r2, #32]
 800107c:	e02d      	b.n	80010da <HAL_RCC_OscConfig+0x36e>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10c      	bne.n	80010a0 <HAL_RCC_OscConfig+0x334>
 8001086:	4b76      	ldr	r3, [pc, #472]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001088:	6a1b      	ldr	r3, [r3, #32]
 800108a:	4a75      	ldr	r2, [pc, #468]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 800108c:	f023 0301 	bic.w	r3, r3, #1
 8001090:	6213      	str	r3, [r2, #32]
 8001092:	4b73      	ldr	r3, [pc, #460]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001094:	6a1b      	ldr	r3, [r3, #32]
 8001096:	4a72      	ldr	r2, [pc, #456]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001098:	f023 0304 	bic.w	r3, r3, #4
 800109c:	6213      	str	r3, [r2, #32]
 800109e:	e01c      	b.n	80010da <HAL_RCC_OscConfig+0x36e>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	2b05      	cmp	r3, #5
 80010a6:	d10c      	bne.n	80010c2 <HAL_RCC_OscConfig+0x356>
 80010a8:	4b6d      	ldr	r3, [pc, #436]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	4a6c      	ldr	r2, [pc, #432]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	6213      	str	r3, [r2, #32]
 80010b4:	4b6a      	ldr	r3, [pc, #424]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	4a69      	ldr	r2, [pc, #420]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	6213      	str	r3, [r2, #32]
 80010c0:	e00b      	b.n	80010da <HAL_RCC_OscConfig+0x36e>
 80010c2:	4b67      	ldr	r3, [pc, #412]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	4a66      	ldr	r2, [pc, #408]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 80010c8:	f023 0301 	bic.w	r3, r3, #1
 80010cc:	6213      	str	r3, [r2, #32]
 80010ce:	4b64      	ldr	r3, [pc, #400]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 80010d0:	6a1b      	ldr	r3, [r3, #32]
 80010d2:	4a63      	ldr	r2, [pc, #396]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 80010d4:	f023 0304 	bic.w	r3, r3, #4
 80010d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d015      	beq.n	800110e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e2:	f7ff fbbd 	bl	8000860 <HAL_GetTick>
 80010e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e8:	e00a      	b.n	8001100 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ea:	f7ff fbb9 	bl	8000860 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e0ab      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001100:	4b57      	ldr	r3, [pc, #348]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001102:	6a1b      	ldr	r3, [r3, #32]
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0ee      	beq.n	80010ea <HAL_RCC_OscConfig+0x37e>
 800110c:	e014      	b.n	8001138 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110e:	f7ff fba7 	bl	8000860 <HAL_GetTick>
 8001112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001114:	e00a      	b.n	800112c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001116:	f7ff fba3 	bl	8000860 <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	f241 3288 	movw	r2, #5000	; 0x1388
 8001124:	4293      	cmp	r3, r2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e095      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800112c:	4b4c      	ldr	r3, [pc, #304]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 800112e:	6a1b      	ldr	r3, [r3, #32]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1ee      	bne.n	8001116 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001138:	7dfb      	ldrb	r3, [r7, #23]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d105      	bne.n	800114a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800113e:	4b48      	ldr	r3, [pc, #288]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	4a47      	ldr	r2, [pc, #284]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001148:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 8081 	beq.w	8001256 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001154:	4b42      	ldr	r3, [pc, #264]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 030c 	and.w	r3, r3, #12
 800115c:	2b08      	cmp	r3, #8
 800115e:	d061      	beq.n	8001224 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	69db      	ldr	r3, [r3, #28]
 8001164:	2b02      	cmp	r3, #2
 8001166:	d146      	bne.n	80011f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001168:	4b3f      	ldr	r3, [pc, #252]	; (8001268 <HAL_RCC_OscConfig+0x4fc>)
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116e:	f7ff fb77 	bl	8000860 <HAL_GetTick>
 8001172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001176:	f7ff fb73 	bl	8000860 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e067      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001188:	4b35      	ldr	r3, [pc, #212]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1f0      	bne.n	8001176 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800119c:	d108      	bne.n	80011b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800119e:	4b30      	ldr	r3, [pc, #192]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	492d      	ldr	r1, [pc, #180]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 80011ac:	4313      	orrs	r3, r2
 80011ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011b0:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a19      	ldr	r1, [r3, #32]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	430b      	orrs	r3, r1
 80011c2:	4927      	ldr	r1, [pc, #156]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 80011c4:	4313      	orrs	r3, r2
 80011c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011c8:	4b27      	ldr	r3, [pc, #156]	; (8001268 <HAL_RCC_OscConfig+0x4fc>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ce:	f7ff fb47 	bl	8000860 <HAL_GetTick>
 80011d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011d4:	e008      	b.n	80011e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011d6:	f7ff fb43 	bl	8000860 <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e037      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011e8:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0f0      	beq.n	80011d6 <HAL_RCC_OscConfig+0x46a>
 80011f4:	e02f      	b.n	8001256 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <HAL_RCC_OscConfig+0x4fc>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fc:	f7ff fb30 	bl	8000860 <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001204:	f7ff fb2c 	bl	8000860 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e020      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f0      	bne.n	8001204 <HAL_RCC_OscConfig+0x498>
 8001222:	e018      	b.n	8001256 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69db      	ldr	r3, [r3, #28]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d101      	bne.n	8001230 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e013      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	429a      	cmp	r2, r3
 8001242:	d106      	bne.n	8001252 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800124e:	429a      	cmp	r2, r3
 8001250:	d001      	beq.n	8001256 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40021000 	.word	0x40021000
 8001264:	40007000 	.word	0x40007000
 8001268:	42420060 	.word	0x42420060

0800126c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e0d0      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001280:	4b6a      	ldr	r3, [pc, #424]	; (800142c <HAL_RCC_ClockConfig+0x1c0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0307 	and.w	r3, r3, #7
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	d910      	bls.n	80012b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128e:	4b67      	ldr	r3, [pc, #412]	; (800142c <HAL_RCC_ClockConfig+0x1c0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f023 0207 	bic.w	r2, r3, #7
 8001296:	4965      	ldr	r1, [pc, #404]	; (800142c <HAL_RCC_ClockConfig+0x1c0>)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	4313      	orrs	r3, r2
 800129c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800129e:	4b63      	ldr	r3, [pc, #396]	; (800142c <HAL_RCC_ClockConfig+0x1c0>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d001      	beq.n	80012b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e0b8      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d020      	beq.n	80012fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012c8:	4b59      	ldr	r3, [pc, #356]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	4a58      	ldr	r2, [pc, #352]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d005      	beq.n	80012ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012e0:	4b53      	ldr	r3, [pc, #332]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	4a52      	ldr	r2, [pc, #328]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80012e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012ec:	4b50      	ldr	r3, [pc, #320]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	494d      	ldr	r1, [pc, #308]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	d040      	beq.n	800138c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d107      	bne.n	8001322 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001312:	4b47      	ldr	r3, [pc, #284]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d115      	bne.n	800134a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e07f      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d107      	bne.n	800133a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800132a:	4b41      	ldr	r3, [pc, #260]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d109      	bne.n	800134a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e073      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133a:	4b3d      	ldr	r3, [pc, #244]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e06b      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800134a:	4b39      	ldr	r3, [pc, #228]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f023 0203 	bic.w	r2, r3, #3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4936      	ldr	r1, [pc, #216]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 8001358:	4313      	orrs	r3, r2
 800135a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800135c:	f7ff fa80 	bl	8000860 <HAL_GetTick>
 8001360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001362:	e00a      	b.n	800137a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001364:	f7ff fa7c 	bl	8000860 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001372:	4293      	cmp	r3, r2
 8001374:	d901      	bls.n	800137a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e053      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800137a:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f003 020c 	and.w	r2, r3, #12
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	429a      	cmp	r2, r3
 800138a:	d1eb      	bne.n	8001364 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800138c:	4b27      	ldr	r3, [pc, #156]	; (800142c <HAL_RCC_ClockConfig+0x1c0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d210      	bcs.n	80013bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139a:	4b24      	ldr	r3, [pc, #144]	; (800142c <HAL_RCC_ClockConfig+0x1c0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f023 0207 	bic.w	r2, r3, #7
 80013a2:	4922      	ldr	r1, [pc, #136]	; (800142c <HAL_RCC_ClockConfig+0x1c0>)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013aa:	4b20      	ldr	r3, [pc, #128]	; (800142c <HAL_RCC_ClockConfig+0x1c0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d001      	beq.n	80013bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e032      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d008      	beq.n	80013da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013c8:	4b19      	ldr	r3, [pc, #100]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	4916      	ldr	r1, [pc, #88]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d009      	beq.n	80013fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013e6:	4b12      	ldr	r3, [pc, #72]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	490e      	ldr	r1, [pc, #56]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013fa:	f000 f821 	bl	8001440 <HAL_RCC_GetSysClockFreq>
 80013fe:	4602      	mov	r2, r0
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	091b      	lsrs	r3, r3, #4
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	490a      	ldr	r1, [pc, #40]	; (8001434 <HAL_RCC_ClockConfig+0x1c8>)
 800140c:	5ccb      	ldrb	r3, [r1, r3]
 800140e:	fa22 f303 	lsr.w	r3, r2, r3
 8001412:	4a09      	ldr	r2, [pc, #36]	; (8001438 <HAL_RCC_ClockConfig+0x1cc>)
 8001414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_RCC_ClockConfig+0x1d0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff f956 	bl	80006cc <HAL_InitTick>

  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40022000 	.word	0x40022000
 8001430:	40021000 	.word	0x40021000
 8001434:	080046f0 	.word	0x080046f0
 8001438:	20000000 	.word	0x20000000
 800143c:	20000004 	.word	0x20000004

08001440 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001440:	b490      	push	{r4, r7}
 8001442:	b08a      	sub	sp, #40	; 0x28
 8001444:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001446:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001448:	1d3c      	adds	r4, r7, #4
 800144a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800144c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001450:	f240 2301 	movw	r3, #513	; 0x201
 8001454:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800146a:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f003 030c 	and.w	r3, r3, #12
 8001476:	2b04      	cmp	r3, #4
 8001478:	d002      	beq.n	8001480 <HAL_RCC_GetSysClockFreq+0x40>
 800147a:	2b08      	cmp	r3, #8
 800147c:	d003      	beq.n	8001486 <HAL_RCC_GetSysClockFreq+0x46>
 800147e:	e02d      	b.n	80014dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001480:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001482:	623b      	str	r3, [r7, #32]
      break;
 8001484:	e02d      	b.n	80014e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	0c9b      	lsrs	r3, r3, #18
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001492:	4413      	add	r3, r2
 8001494:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001498:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d013      	beq.n	80014cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	0c5b      	lsrs	r3, r3, #17
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014b2:	4413      	add	r3, r2
 80014b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014be:	fb02 f203 	mul.w	r2, r2, r3
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ca:	e004      	b.n	80014d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80014d0:	fb02 f303 	mul.w	r3, r2, r3
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	623b      	str	r3, [r7, #32]
      break;
 80014da:	e002      	b.n	80014e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014de:	623b      	str	r3, [r7, #32]
      break;
 80014e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014e2:	6a3b      	ldr	r3, [r7, #32]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3728      	adds	r7, #40	; 0x28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc90      	pop	{r4, r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	080046d8 	.word	0x080046d8
 80014f4:	40021000 	.word	0x40021000
 80014f8:	007a1200 	.word	0x007a1200
 80014fc:	003d0900 	.word	0x003d0900

08001500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001504:	4b02      	ldr	r3, [pc, #8]	; (8001510 <HAL_RCC_GetHCLKFreq+0x10>)
 8001506:	681b      	ldr	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	20000000 	.word	0x20000000

08001514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001518:	f7ff fff2 	bl	8001500 <HAL_RCC_GetHCLKFreq>
 800151c:	4602      	mov	r2, r0
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	0a1b      	lsrs	r3, r3, #8
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	4903      	ldr	r1, [pc, #12]	; (8001538 <HAL_RCC_GetPCLK1Freq+0x24>)
 800152a:	5ccb      	ldrb	r3, [r1, r3]
 800152c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001530:	4618      	mov	r0, r3
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40021000 	.word	0x40021000
 8001538:	08004700 	.word	0x08004700

0800153c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001540:	f7ff ffde 	bl	8001500 <HAL_RCC_GetHCLKFreq>
 8001544:	4602      	mov	r2, r0
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	0adb      	lsrs	r3, r3, #11
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	4903      	ldr	r1, [pc, #12]	; (8001560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001552:	5ccb      	ldrb	r3, [r1, r3]
 8001554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001558:	4618      	mov	r0, r3
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40021000 	.word	0x40021000
 8001560:	08004700 	.word	0x08004700

08001564 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	220f      	movs	r2, #15
 8001572:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <HAL_RCC_GetClockConfig+0x58>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0203 	and.w	r2, r3, #3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001580:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <HAL_RCC_GetClockConfig+0x58>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <HAL_RCC_GetClockConfig+0x58>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <HAL_RCC_GetClockConfig+0x58>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	08db      	lsrs	r3, r3, #3
 800159e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_RCC_GetClockConfig+0x5c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0207 	and.w	r2, r3, #7
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40022000 	.word	0x40022000

080015c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <RCC_Delay+0x34>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <RCC_Delay+0x38>)
 80015d2:	fba2 2303 	umull	r2, r3, r2, r3
 80015d6:	0a5b      	lsrs	r3, r3, #9
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	fb02 f303 	mul.w	r3, r2, r3
 80015de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015e0:	bf00      	nop
  }
  while (Delay --);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	1e5a      	subs	r2, r3, #1
 80015e6:	60fa      	str	r2, [r7, #12]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1f9      	bne.n	80015e0 <RCC_Delay+0x1c>
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	20000000 	.word	0x20000000
 80015fc:	10624dd3 	.word	0x10624dd3

08001600 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e041      	b.n	8001696 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d106      	bne.n	800162c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f839 	bl	800169e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2202      	movs	r2, #2
 8001630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3304      	adds	r3, #4
 800163c:	4619      	mov	r1, r3
 800163e:	4610      	mov	r0, r2
 8001640:	f000 f9b4 	bl	80019ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d001      	beq.n	80016c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e03a      	b.n	800173e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2202      	movs	r2, #2
 80016cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0201 	orr.w	r2, r2, #1
 80016de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a18      	ldr	r2, [pc, #96]	; (8001748 <HAL_TIM_Base_Start_IT+0x98>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d00e      	beq.n	8001708 <HAL_TIM_Base_Start_IT+0x58>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f2:	d009      	beq.n	8001708 <HAL_TIM_Base_Start_IT+0x58>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a14      	ldr	r2, [pc, #80]	; (800174c <HAL_TIM_Base_Start_IT+0x9c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d004      	beq.n	8001708 <HAL_TIM_Base_Start_IT+0x58>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a13      	ldr	r2, [pc, #76]	; (8001750 <HAL_TIM_Base_Start_IT+0xa0>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d111      	bne.n	800172c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b06      	cmp	r3, #6
 8001718:	d010      	beq.n	800173c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f042 0201 	orr.w	r2, r2, #1
 8001728:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800172a:	e007      	b.n	800173c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 0201 	orr.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	40012c00 	.word	0x40012c00
 800174c:	40000400 	.word	0x40000400
 8001750:	40000800 	.word	0x40000800

08001754 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b02      	cmp	r3, #2
 8001768:	d122      	bne.n	80017b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b02      	cmp	r3, #2
 8001776:	d11b      	bne.n	80017b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f06f 0202 	mvn.w	r2, #2
 8001780:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f8ed 	bl	8001976 <HAL_TIM_IC_CaptureCallback>
 800179c:	e005      	b.n	80017aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f8e0 	bl	8001964 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 f8ef 	bl	8001988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d122      	bne.n	8001804 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d11b      	bne.n	8001804 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f06f 0204 	mvn.w	r2, #4
 80017d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2202      	movs	r2, #2
 80017da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f8c3 	bl	8001976 <HAL_TIM_IC_CaptureCallback>
 80017f0:	e005      	b.n	80017fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f8b6 	bl	8001964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f8c5 	bl	8001988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b08      	cmp	r3, #8
 8001810:	d122      	bne.n	8001858 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b08      	cmp	r3, #8
 800181e:	d11b      	bne.n	8001858 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f06f 0208 	mvn.w	r2, #8
 8001828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2204      	movs	r2, #4
 800182e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f899 	bl	8001976 <HAL_TIM_IC_CaptureCallback>
 8001844:	e005      	b.n	8001852 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f88c 	bl	8001964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 f89b 	bl	8001988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	f003 0310 	and.w	r3, r3, #16
 8001862:	2b10      	cmp	r3, #16
 8001864:	d122      	bne.n	80018ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	f003 0310 	and.w	r3, r3, #16
 8001870:	2b10      	cmp	r3, #16
 8001872:	d11b      	bne.n	80018ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f06f 0210 	mvn.w	r2, #16
 800187c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2208      	movs	r2, #8
 8001882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f86f 	bl	8001976 <HAL_TIM_IC_CaptureCallback>
 8001898:	e005      	b.n	80018a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f862 	bl	8001964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f871 	bl	8001988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d10e      	bne.n	80018d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d107      	bne.n	80018d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f06f 0201 	mvn.w	r2, #1
 80018d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7fe fe5e 	bl	8000594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e2:	2b80      	cmp	r3, #128	; 0x80
 80018e4:	d10e      	bne.n	8001904 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f0:	2b80      	cmp	r3, #128	; 0x80
 80018f2:	d107      	bne.n	8001904 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f8bf 	bl	8001a82 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800190e:	2b40      	cmp	r3, #64	; 0x40
 8001910:	d10e      	bne.n	8001930 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800191c:	2b40      	cmp	r3, #64	; 0x40
 800191e:	d107      	bne.n	8001930 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f835 	bl	800199a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	f003 0320 	and.w	r3, r3, #32
 800193a:	2b20      	cmp	r3, #32
 800193c:	d10e      	bne.n	800195c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	f003 0320 	and.w	r3, r3, #32
 8001948:	2b20      	cmp	r3, #32
 800194a:	d107      	bne.n	800195c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f06f 0220 	mvn.w	r2, #32
 8001954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f88a 	bl	8001a70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr

0800199a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a29      	ldr	r2, [pc, #164]	; (8001a64 <TIM_Base_SetConfig+0xb8>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d00b      	beq.n	80019dc <TIM_Base_SetConfig+0x30>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ca:	d007      	beq.n	80019dc <TIM_Base_SetConfig+0x30>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a26      	ldr	r2, [pc, #152]	; (8001a68 <TIM_Base_SetConfig+0xbc>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d003      	beq.n	80019dc <TIM_Base_SetConfig+0x30>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a25      	ldr	r2, [pc, #148]	; (8001a6c <TIM_Base_SetConfig+0xc0>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d108      	bne.n	80019ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a1c      	ldr	r2, [pc, #112]	; (8001a64 <TIM_Base_SetConfig+0xb8>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d00b      	beq.n	8001a0e <TIM_Base_SetConfig+0x62>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019fc:	d007      	beq.n	8001a0e <TIM_Base_SetConfig+0x62>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a19      	ldr	r2, [pc, #100]	; (8001a68 <TIM_Base_SetConfig+0xbc>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d003      	beq.n	8001a0e <TIM_Base_SetConfig+0x62>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a18      	ldr	r2, [pc, #96]	; (8001a6c <TIM_Base_SetConfig+0xc0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d108      	bne.n	8001a20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <TIM_Base_SetConfig+0xb8>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d103      	bne.n	8001a54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	691a      	ldr	r2, [r3, #16]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	615a      	str	r2, [r3, #20]
}
 8001a5a:	bf00      	nop
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	40012c00 	.word	0x40012c00
 8001a68:	40000400 	.word	0x40000400
 8001a6c:	40000800 	.word	0x40000800

08001a70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr

08001a82 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e03f      	b.n	8001b26 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d106      	bne.n	8001ac0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7fe fdba 	bl	8000634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2224      	movs	r2, #36	; 0x24
 8001ac4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ad6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 f905 	bl	8001ce8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001aec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	695a      	ldr	r2, [r3, #20]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001afc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2220      	movs	r2, #32
 8001b18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b08a      	sub	sp, #40	; 0x28
 8001b32:	af02      	add	r7, sp, #8
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b20      	cmp	r3, #32
 8001b4c:	d17c      	bne.n	8001c48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <HAL_UART_Transmit+0x2c>
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e075      	b.n	8001c4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_UART_Transmit+0x3e>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e06e      	b.n	8001c4a <HAL_UART_Transmit+0x11c>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2221      	movs	r2, #33	; 0x21
 8001b7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001b82:	f7fe fe6d 	bl	8000860 <HAL_GetTick>
 8001b86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	88fa      	ldrh	r2, [r7, #6]
 8001b8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	88fa      	ldrh	r2, [r7, #6]
 8001b92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b9c:	d108      	bne.n	8001bb0 <HAL_UART_Transmit+0x82>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d104      	bne.n	8001bb0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	61bb      	str	r3, [r7, #24]
 8001bae:	e003      	b.n	8001bb8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001bc0:	e02a      	b.n	8001c18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2180      	movs	r1, #128	; 0x80
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f000 f840 	bl	8001c52 <UART_WaitOnFlagUntilTimeout>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e036      	b.n	8001c4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10b      	bne.n	8001bfa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bf0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	3302      	adds	r3, #2
 8001bf6:	61bb      	str	r3, [r7, #24]
 8001bf8:	e007      	b.n	8001c0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	781a      	ldrb	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	3301      	adds	r3, #1
 8001c08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	3b01      	subs	r3, #1
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1cf      	bne.n	8001bc2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2140      	movs	r1, #64	; 0x40
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f000 f810 	bl	8001c52 <UART_WaitOnFlagUntilTimeout>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e006      	b.n	8001c4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e000      	b.n	8001c4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c48:	2302      	movs	r3, #2
  }
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3720      	adds	r7, #32
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	603b      	str	r3, [r7, #0]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c62:	e02c      	b.n	8001cbe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6a:	d028      	beq.n	8001cbe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d007      	beq.n	8001c82 <UART_WaitOnFlagUntilTimeout+0x30>
 8001c72:	f7fe fdf5 	bl	8000860 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d21d      	bcs.n	8001cbe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c90:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695a      	ldr	r2, [r3, #20]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 0201 	bic.w	r2, r2, #1
 8001ca0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2220      	movs	r2, #32
 8001cae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e00f      	b.n	8001cde <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	68ba      	ldr	r2, [r7, #8]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	bf0c      	ite	eq
 8001cce:	2301      	moveq	r3, #1
 8001cd0:	2300      	movne	r3, #0
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d0c3      	beq.n	8001c64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d22:	f023 030c 	bic.w	r3, r3, #12
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	68b9      	ldr	r1, [r7, #8]
 8001d2c:	430b      	orrs	r3, r1
 8001d2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699a      	ldr	r2, [r3, #24]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a2c      	ldr	r2, [pc, #176]	; (8001dfc <UART_SetConfig+0x114>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d103      	bne.n	8001d58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d50:	f7ff fbf4 	bl	800153c <HAL_RCC_GetPCLK2Freq>
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	e002      	b.n	8001d5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d58:	f7ff fbdc 	bl	8001514 <HAL_RCC_GetPCLK1Freq>
 8001d5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	009a      	lsls	r2, r3, #2
 8001d68:	441a      	add	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d74:	4a22      	ldr	r2, [pc, #136]	; (8001e00 <UART_SetConfig+0x118>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	095b      	lsrs	r3, r3, #5
 8001d7c:	0119      	lsls	r1, r3, #4
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	009a      	lsls	r2, r3, #2
 8001d88:	441a      	add	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d94:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <UART_SetConfig+0x118>)
 8001d96:	fba3 0302 	umull	r0, r3, r3, r2
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	2064      	movs	r0, #100	; 0x64
 8001d9e:	fb00 f303 	mul.w	r3, r0, r3
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	3332      	adds	r3, #50	; 0x32
 8001da8:	4a15      	ldr	r2, [pc, #84]	; (8001e00 <UART_SetConfig+0x118>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001db4:	4419      	add	r1, r3
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009a      	lsls	r2, r3, #2
 8001dc0:	441a      	add	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <UART_SetConfig+0x118>)
 8001dce:	fba3 0302 	umull	r0, r3, r3, r2
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	2064      	movs	r0, #100	; 0x64
 8001dd6:	fb00 f303 	mul.w	r3, r0, r3
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	3332      	adds	r3, #50	; 0x32
 8001de0:	4a07      	ldr	r2, [pc, #28]	; (8001e00 <UART_SetConfig+0x118>)
 8001de2:	fba2 2303 	umull	r2, r3, r2, r3
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	f003 020f 	and.w	r2, r3, #15
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	440a      	add	r2, r1
 8001df2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001df4:	bf00      	nop
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40013800 	.word	0x40013800
 8001e00:	51eb851f 	.word	0x51eb851f

08001e04 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001e12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e16:	2b84      	cmp	r3, #132	; 0x84
 8001e18:	d005      	beq.n	8001e26 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001e1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4413      	add	r3, r2
 8001e22:	3303      	adds	r3, #3
 8001e24:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001e26:	68fb      	ldr	r3, [r7, #12]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr

08001e32 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e38:	f3ef 8305 	mrs	r3, IPSR
 8001e3c:	607b      	str	r3, [r7, #4]
  return(result);
 8001e3e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	bf14      	ite	ne
 8001e44:	2301      	movne	r3, #1
 8001e46:	2300      	moveq	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001e58:	f001 f904 	bl	8003064 <vTaskStartScheduler>
  
  return osOK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001e62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e64:	b089      	sub	sp, #36	; 0x24
 8001e66:	af04      	add	r7, sp, #16
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d020      	beq.n	8001eb6 <osThreadCreate+0x54>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d01c      	beq.n	8001eb6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685c      	ldr	r4, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681d      	ldr	r5, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691e      	ldr	r6, [r3, #16]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff ffb8 	bl	8001e04 <makeFreeRtosPriority>
 8001e94:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e9e:	9202      	str	r2, [sp, #8]
 8001ea0:	9301      	str	r3, [sp, #4]
 8001ea2:	9100      	str	r1, [sp, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	4632      	mov	r2, r6
 8001ea8:	4629      	mov	r1, r5
 8001eaa:	4620      	mov	r0, r4
 8001eac:	f000 ff1b 	bl	8002ce6 <xTaskCreateStatic>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	e01c      	b.n	8001ef0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685c      	ldr	r4, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ec2:	b29e      	uxth	r6, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff ff9a 	bl	8001e04 <makeFreeRtosPriority>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	f107 030c 	add.w	r3, r7, #12
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	9200      	str	r2, [sp, #0]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	4632      	mov	r2, r6
 8001ede:	4629      	mov	r1, r5
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	f000 ff5c 	bl	8002d9e <xTaskCreate>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d001      	beq.n	8001ef0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	e000      	b.n	8001ef2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001efa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b084      	sub	sp, #16
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <osDelay+0x16>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	e000      	b.n	8001f12 <osDelay+0x18>
 8001f10:	2301      	movs	r3, #1
 8001f12:	4618      	mov	r0, r3
 8001f14:	f001 f872 	bl	8002ffc <vTaskDelay>
  
  return osOK;
 8001f18:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b086      	sub	sp, #24
 8001f26:	af02      	add	r7, sp, #8
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00f      	beq.n	8001f54 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d10a      	bne.n	8001f50 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2203      	movs	r2, #3
 8001f40:	9200      	str	r2, [sp, #0]
 8001f42:	2200      	movs	r2, #0
 8001f44:	2100      	movs	r1, #0
 8001f46:	2001      	movs	r0, #1
 8001f48:	f000 f9ba 	bl	80022c0 <xQueueGenericCreateStatic>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	e016      	b.n	8001f7e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	e014      	b.n	8001f7e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d110      	bne.n	8001f7c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	2001      	movs	r0, #1
 8001f60:	f000 fa25 	bl	80023ae <xQueueGenericCreate>
 8001f64:	60f8      	str	r0, [r7, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <osSemaphoreCreate+0x56>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2100      	movs	r1, #0
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 fa78 	bl	8002468 <xQueueGenericSend>
      return sema;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	e000      	b.n	8001f7e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8001f7c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	e03a      	b.n	8002016 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001faa:	d103      	bne.n	8001fb4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8001fac:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	e009      	b.n	8001fc8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d006      	beq.n	8001fc8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <osSemaphoreWait+0x40>
      ticks = 1;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8001fc8:	f7ff ff33 	bl	8001e32 <inHandlerMode>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d017      	beq.n	8002002 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001fd2:	f107 0308 	add.w	r3, r7, #8
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	2100      	movs	r1, #0
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fcdc 	bl	8002998 <xQueueReceiveFromISR>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d001      	beq.n	8001fea <osSemaphoreWait+0x62>
      return osErrorOS;
 8001fe6:	23ff      	movs	r3, #255	; 0xff
 8001fe8:	e015      	b.n	8002016 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d011      	beq.n	8002014 <osSemaphoreWait+0x8c>
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <osSemaphoreWait+0x98>)
 8001ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	f3bf 8f4f 	dsb	sy
 8001ffc:	f3bf 8f6f 	isb	sy
 8002000:	e008      	b.n	8002014 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002002:	68f9      	ldr	r1, [r7, #12]
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 fbbb 	bl	8002780 <xQueueSemaphoreTake>
 800200a:	4603      	mov	r3, r0
 800200c:	2b01      	cmp	r3, #1
 800200e:	d001      	beq.n	8002014 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002010:	23ff      	movs	r3, #255	; 0xff
 8002012:	e000      	b.n	8002016 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	e000ed04 	.word	0xe000ed04

08002024 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002030:	2300      	movs	r3, #0
 8002032:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002034:	f7ff fefd 	bl	8001e32 <inHandlerMode>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d016      	beq.n	800206c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800203e:	f107 0308 	add.w	r3, r7, #8
 8002042:	4619      	mov	r1, r3
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 fb0d 	bl	8002664 <xQueueGiveFromISR>
 800204a:	4603      	mov	r3, r0
 800204c:	2b01      	cmp	r3, #1
 800204e:	d001      	beq.n	8002054 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002050:	23ff      	movs	r3, #255	; 0xff
 8002052:	e017      	b.n	8002084 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d013      	beq.n	8002082 <osSemaphoreRelease+0x5e>
 800205a:	4b0c      	ldr	r3, [pc, #48]	; (800208c <osSemaphoreRelease+0x68>)
 800205c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	f3bf 8f4f 	dsb	sy
 8002066:	f3bf 8f6f 	isb	sy
 800206a:	e00a      	b.n	8002082 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800206c:	2300      	movs	r3, #0
 800206e:	2200      	movs	r2, #0
 8002070:	2100      	movs	r1, #0
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f9f8 	bl	8002468 <xQueueGenericSend>
 8002078:	4603      	mov	r3, r0
 800207a:	2b01      	cmp	r3, #1
 800207c:	d001      	beq.n	8002082 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800207e:	23ff      	movs	r3, #255	; 0xff
 8002080:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002082:	68fb      	ldr	r3, [r7, #12]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	e000ed04 	.word	0xe000ed04

08002090 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f103 0208 	add.w	r2, r3, #8
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f04f 32ff 	mov.w	r2, #4294967295
 80020a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f103 0208 	add.w	r2, r3, #8
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f103 0208 	add.w	r2, r3, #8
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr

080020ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr

080020e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020e6:	b480      	push	{r7}
 80020e8:	b085      	sub	sp, #20
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	601a      	str	r2, [r3, #0]
}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002142:	d103      	bne.n	800214c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	e00c      	b.n	8002166 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3308      	adds	r3, #8
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	e002      	b.n	800215a <vListInsert+0x2e>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	429a      	cmp	r2, r3
 8002164:	d2f6      	bcs.n	8002154 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	601a      	str	r2, [r3, #0]
}
 8002192:	bf00      	nop
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6892      	ldr	r2, [r2, #8]
 80021b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6852      	ldr	r2, [r2, #4]
 80021bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d103      	bne.n	80021d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	1e5a      	subs	r2, r3, #1
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr
	...

080021f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10a      	bne.n	800221a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002208:	f383 8811 	msr	BASEPRI, r3
 800220c:	f3bf 8f6f 	isb	sy
 8002210:	f3bf 8f4f 	dsb	sy
 8002214:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002216:	bf00      	nop
 8002218:	e7fe      	b.n	8002218 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800221a:	f001 fe5f 	bl	8003edc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002226:	68f9      	ldr	r1, [r7, #12]
 8002228:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800222a:	fb01 f303 	mul.w	r3, r1, r3
 800222e:	441a      	add	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224a:	3b01      	subs	r3, #1
 800224c:	68f9      	ldr	r1, [r7, #12]
 800224e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002250:	fb01 f303 	mul.w	r3, r1, r3
 8002254:	441a      	add	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	22ff      	movs	r2, #255	; 0xff
 800225e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	22ff      	movs	r2, #255	; 0xff
 8002266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d114      	bne.n	800229a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d01a      	beq.n	80022ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	3310      	adds	r3, #16
 800227c:	4618      	mov	r0, r3
 800227e:	f001 f937 	bl	80034f0 <xTaskRemoveFromEventList>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d012      	beq.n	80022ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <xQueueGenericReset+0xcc>)
 800228a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	f3bf 8f4f 	dsb	sy
 8002294:	f3bf 8f6f 	isb	sy
 8002298:	e009      	b.n	80022ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	3310      	adds	r3, #16
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fef6 	bl	8002090 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	3324      	adds	r3, #36	; 0x24
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fef1 	bl	8002090 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80022ae:	f001 fe45 	bl	8003f3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80022b2:	2301      	movs	r3, #1
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	e000ed04 	.word	0xe000ed04

080022c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08e      	sub	sp, #56	; 0x38
 80022c4:	af02      	add	r7, sp, #8
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10a      	bne.n	80022ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80022d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d8:	f383 8811 	msr	BASEPRI, r3
 80022dc:	f3bf 8f6f 	isb	sy
 80022e0:	f3bf 8f4f 	dsb	sy
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80022e6:	bf00      	nop
 80022e8:	e7fe      	b.n	80022e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10a      	bne.n	8002306 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80022f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f4:	f383 8811 	msr	BASEPRI, r3
 80022f8:	f3bf 8f6f 	isb	sy
 80022fc:	f3bf 8f4f 	dsb	sy
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002302:	bf00      	nop
 8002304:	e7fe      	b.n	8002304 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d002      	beq.n	8002312 <xQueueGenericCreateStatic+0x52>
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <xQueueGenericCreateStatic+0x56>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <xQueueGenericCreateStatic+0x58>
 8002316:	2300      	movs	r3, #0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10a      	bne.n	8002332 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800231c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002320:	f383 8811 	msr	BASEPRI, r3
 8002324:	f3bf 8f6f 	isb	sy
 8002328:	f3bf 8f4f 	dsb	sy
 800232c:	623b      	str	r3, [r7, #32]
}
 800232e:	bf00      	nop
 8002330:	e7fe      	b.n	8002330 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d102      	bne.n	800233e <xQueueGenericCreateStatic+0x7e>
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <xQueueGenericCreateStatic+0x82>
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <xQueueGenericCreateStatic+0x84>
 8002342:	2300      	movs	r3, #0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10a      	bne.n	800235e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234c:	f383 8811 	msr	BASEPRI, r3
 8002350:	f3bf 8f6f 	isb	sy
 8002354:	f3bf 8f4f 	dsb	sy
 8002358:	61fb      	str	r3, [r7, #28]
}
 800235a:	bf00      	nop
 800235c:	e7fe      	b.n	800235c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800235e:	2348      	movs	r3, #72	; 0x48
 8002360:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2b48      	cmp	r3, #72	; 0x48
 8002366:	d00a      	beq.n	800237e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800236c:	f383 8811 	msr	BASEPRI, r3
 8002370:	f3bf 8f6f 	isb	sy
 8002374:	f3bf 8f4f 	dsb	sy
 8002378:	61bb      	str	r3, [r7, #24]
}
 800237a:	bf00      	nop
 800237c:	e7fe      	b.n	800237c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00d      	beq.n	80023a4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002390:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	4613      	mov	r3, r2
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68b9      	ldr	r1, [r7, #8]
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 f843 	bl	800242a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80023a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3730      	adds	r7, #48	; 0x30
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b08a      	sub	sp, #40	; 0x28
 80023b2:	af02      	add	r7, sp, #8
 80023b4:	60f8      	str	r0, [r7, #12]
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	4613      	mov	r3, r2
 80023ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10a      	bne.n	80023d8 <xQueueGenericCreate+0x2a>
	__asm volatile
 80023c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c6:	f383 8811 	msr	BASEPRI, r3
 80023ca:	f3bf 8f6f 	isb	sy
 80023ce:	f3bf 8f4f 	dsb	sy
 80023d2:	613b      	str	r3, [r7, #16]
}
 80023d4:	bf00      	nop
 80023d6:	e7fe      	b.n	80023d6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d102      	bne.n	80023e4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]
 80023e2:	e004      	b.n	80023ee <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	fb02 f303 	mul.w	r3, r2, r3
 80023ec:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3348      	adds	r3, #72	; 0x48
 80023f2:	4618      	mov	r0, r3
 80023f4:	f001 fe72 	bl	80040dc <pvPortMalloc>
 80023f8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00f      	beq.n	8002420 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	3348      	adds	r3, #72	; 0x48
 8002404:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800240e:	79fa      	ldrb	r2, [r7, #7]
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	4613      	mov	r3, r2
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f805 	bl	800242a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002420:	69bb      	ldr	r3, [r7, #24]
	}
 8002422:	4618      	mov	r0, r3
 8002424:	3720      	adds	r7, #32
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b084      	sub	sp, #16
 800242e:	af00      	add	r7, sp, #0
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d103      	bne.n	8002446 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	e002      	b.n	800244c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002458:	2101      	movs	r1, #1
 800245a:	69b8      	ldr	r0, [r7, #24]
 800245c:	f7ff fec8 	bl	80021f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002460:	bf00      	nop
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08e      	sub	sp, #56	; 0x38
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002476:	2300      	movs	r3, #0
 8002478:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800247e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10a      	bne.n	800249a <xQueueGenericSend+0x32>
	__asm volatile
 8002484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002488:	f383 8811 	msr	BASEPRI, r3
 800248c:	f3bf 8f6f 	isb	sy
 8002490:	f3bf 8f4f 	dsb	sy
 8002494:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002496:	bf00      	nop
 8002498:	e7fe      	b.n	8002498 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d103      	bne.n	80024a8 <xQueueGenericSend+0x40>
 80024a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <xQueueGenericSend+0x44>
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <xQueueGenericSend+0x46>
 80024ac:	2300      	movs	r3, #0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10a      	bne.n	80024c8 <xQueueGenericSend+0x60>
	__asm volatile
 80024b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b6:	f383 8811 	msr	BASEPRI, r3
 80024ba:	f3bf 8f6f 	isb	sy
 80024be:	f3bf 8f4f 	dsb	sy
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80024c4:	bf00      	nop
 80024c6:	e7fe      	b.n	80024c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d103      	bne.n	80024d6 <xQueueGenericSend+0x6e>
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <xQueueGenericSend+0x72>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <xQueueGenericSend+0x74>
 80024da:	2300      	movs	r3, #0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10a      	bne.n	80024f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80024e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e4:	f383 8811 	msr	BASEPRI, r3
 80024e8:	f3bf 8f6f 	isb	sy
 80024ec:	f3bf 8f4f 	dsb	sy
 80024f0:	623b      	str	r3, [r7, #32]
}
 80024f2:	bf00      	nop
 80024f4:	e7fe      	b.n	80024f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024f6:	f001 f9bb 	bl	8003870 <xTaskGetSchedulerState>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d102      	bne.n	8002506 <xQueueGenericSend+0x9e>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <xQueueGenericSend+0xa2>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <xQueueGenericSend+0xa4>
 800250a:	2300      	movs	r3, #0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10a      	bne.n	8002526 <xQueueGenericSend+0xbe>
	__asm volatile
 8002510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002514:	f383 8811 	msr	BASEPRI, r3
 8002518:	f3bf 8f6f 	isb	sy
 800251c:	f3bf 8f4f 	dsb	sy
 8002520:	61fb      	str	r3, [r7, #28]
}
 8002522:	bf00      	nop
 8002524:	e7fe      	b.n	8002524 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002526:	f001 fcd9 	bl	8003edc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800252a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800252e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002532:	429a      	cmp	r2, r3
 8002534:	d302      	bcc.n	800253c <xQueueGenericSend+0xd4>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d129      	bne.n	8002590 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	68b9      	ldr	r1, [r7, #8]
 8002540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002542:	f000 fac0 	bl	8002ac6 <prvCopyDataToQueue>
 8002546:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	2b00      	cmp	r3, #0
 800254e:	d010      	beq.n	8002572 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002552:	3324      	adds	r3, #36	; 0x24
 8002554:	4618      	mov	r0, r3
 8002556:	f000 ffcb 	bl	80034f0 <xTaskRemoveFromEventList>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d013      	beq.n	8002588 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002560:	4b3f      	ldr	r3, [pc, #252]	; (8002660 <xQueueGenericSend+0x1f8>)
 8002562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	f3bf 8f4f 	dsb	sy
 800256c:	f3bf 8f6f 	isb	sy
 8002570:	e00a      	b.n	8002588 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002574:	2b00      	cmp	r3, #0
 8002576:	d007      	beq.n	8002588 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002578:	4b39      	ldr	r3, [pc, #228]	; (8002660 <xQueueGenericSend+0x1f8>)
 800257a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	f3bf 8f4f 	dsb	sy
 8002584:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002588:	f001 fcd8 	bl	8003f3c <vPortExitCritical>
				return pdPASS;
 800258c:	2301      	movs	r3, #1
 800258e:	e063      	b.n	8002658 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d103      	bne.n	800259e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002596:	f001 fcd1 	bl	8003f3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800259a:	2300      	movs	r3, #0
 800259c:	e05c      	b.n	8002658 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800259e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d106      	bne.n	80025b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	4618      	mov	r0, r3
 80025aa:	f001 f803 	bl	80035b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025ae:	2301      	movs	r3, #1
 80025b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80025b2:	f001 fcc3 	bl	8003f3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80025b6:	f000 fdb5 	bl	8003124 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025ba:	f001 fc8f 	bl	8003edc <vPortEnterCritical>
 80025be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025c4:	b25b      	sxtb	r3, r3
 80025c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ca:	d103      	bne.n	80025d4 <xQueueGenericSend+0x16c>
 80025cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025da:	b25b      	sxtb	r3, r3
 80025dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e0:	d103      	bne.n	80025ea <xQueueGenericSend+0x182>
 80025e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025ea:	f001 fca7 	bl	8003f3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025ee:	1d3a      	adds	r2, r7, #4
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	4611      	mov	r1, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fff2 	bl	80035e0 <xTaskCheckForTimeOut>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d124      	bne.n	800264c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002602:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002604:	f000 fb57 	bl	8002cb6 <prvIsQueueFull>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d018      	beq.n	8002640 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002610:	3310      	adds	r3, #16
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	4611      	mov	r1, r2
 8002616:	4618      	mov	r0, r3
 8002618:	f000 ff46 	bl	80034a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800261c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800261e:	f000 fae2 	bl	8002be6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002622:	f000 fd8d 	bl	8003140 <xTaskResumeAll>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	f47f af7c 	bne.w	8002526 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800262e:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <xQueueGenericSend+0x1f8>)
 8002630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	f3bf 8f4f 	dsb	sy
 800263a:	f3bf 8f6f 	isb	sy
 800263e:	e772      	b.n	8002526 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002642:	f000 fad0 	bl	8002be6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002646:	f000 fd7b 	bl	8003140 <xTaskResumeAll>
 800264a:	e76c      	b.n	8002526 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800264c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800264e:	f000 faca 	bl	8002be6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002652:	f000 fd75 	bl	8003140 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002656:	2300      	movs	r3, #0
		}
	}
}
 8002658:	4618      	mov	r0, r3
 800265a:	3738      	adds	r7, #56	; 0x38
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	e000ed04 	.word	0xe000ed04

08002664 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08e      	sub	sp, #56	; 0x38
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10a      	bne.n	800268e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267c:	f383 8811 	msr	BASEPRI, r3
 8002680:	f3bf 8f6f 	isb	sy
 8002684:	f3bf 8f4f 	dsb	sy
 8002688:	623b      	str	r3, [r7, #32]
}
 800268a:	bf00      	nop
 800268c:	e7fe      	b.n	800268c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <xQueueGiveFromISR+0x48>
	__asm volatile
 8002696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800269a:	f383 8811 	msr	BASEPRI, r3
 800269e:	f3bf 8f6f 	isb	sy
 80026a2:	f3bf 8f4f 	dsb	sy
 80026a6:	61fb      	str	r3, [r7, #28]
}
 80026a8:	bf00      	nop
 80026aa:	e7fe      	b.n	80026aa <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80026ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d103      	bne.n	80026bc <xQueueGiveFromISR+0x58>
 80026b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <xQueueGiveFromISR+0x5c>
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <xQueueGiveFromISR+0x5e>
 80026c0:	2300      	movs	r3, #0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10a      	bne.n	80026dc <xQueueGiveFromISR+0x78>
	__asm volatile
 80026c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ca:	f383 8811 	msr	BASEPRI, r3
 80026ce:	f3bf 8f6f 	isb	sy
 80026d2:	f3bf 8f4f 	dsb	sy
 80026d6:	61bb      	str	r3, [r7, #24]
}
 80026d8:	bf00      	nop
 80026da:	e7fe      	b.n	80026da <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026dc:	f001 fcc0 	bl	8004060 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80026e0:	f3ef 8211 	mrs	r2, BASEPRI
 80026e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e8:	f383 8811 	msr	BASEPRI, r3
 80026ec:	f3bf 8f6f 	isb	sy
 80026f0:	f3bf 8f4f 	dsb	sy
 80026f4:	617a      	str	r2, [r7, #20]
 80026f6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80026f8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002700:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002708:	429a      	cmp	r2, r3
 800270a:	d22b      	bcs.n	8002764 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800270c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800271e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002726:	d112      	bne.n	800274e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	2b00      	cmp	r3, #0
 800272e:	d016      	beq.n	800275e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002732:	3324      	adds	r3, #36	; 0x24
 8002734:	4618      	mov	r0, r3
 8002736:	f000 fedb 	bl	80034f0 <xTaskRemoveFromEventList>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00e      	beq.n	800275e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00b      	beq.n	800275e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	2201      	movs	r2, #1
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	e007      	b.n	800275e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800274e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002752:	3301      	adds	r3, #1
 8002754:	b2db      	uxtb	r3, r3
 8002756:	b25a      	sxtb	r2, r3
 8002758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800275e:	2301      	movs	r3, #1
 8002760:	637b      	str	r3, [r7, #52]	; 0x34
 8002762:	e001      	b.n	8002768 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002764:	2300      	movs	r3, #0
 8002766:	637b      	str	r3, [r7, #52]	; 0x34
 8002768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002772:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002776:	4618      	mov	r0, r3
 8002778:	3738      	adds	r7, #56	; 0x38
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08e      	sub	sp, #56	; 0x38
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800278a:	2300      	movs	r3, #0
 800278c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002792:	2300      	movs	r3, #0
 8002794:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10a      	bne.n	80027b2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800279c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a0:	f383 8811 	msr	BASEPRI, r3
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	f3bf 8f4f 	dsb	sy
 80027ac:	623b      	str	r3, [r7, #32]
}
 80027ae:	bf00      	nop
 80027b0:	e7fe      	b.n	80027b0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80027b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00a      	beq.n	80027d0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80027ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027be:	f383 8811 	msr	BASEPRI, r3
 80027c2:	f3bf 8f6f 	isb	sy
 80027c6:	f3bf 8f4f 	dsb	sy
 80027ca:	61fb      	str	r3, [r7, #28]
}
 80027cc:	bf00      	nop
 80027ce:	e7fe      	b.n	80027ce <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027d0:	f001 f84e 	bl	8003870 <xTaskGetSchedulerState>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d102      	bne.n	80027e0 <xQueueSemaphoreTake+0x60>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <xQueueSemaphoreTake+0x64>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <xQueueSemaphoreTake+0x66>
 80027e4:	2300      	movs	r3, #0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10a      	bne.n	8002800 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80027ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ee:	f383 8811 	msr	BASEPRI, r3
 80027f2:	f3bf 8f6f 	isb	sy
 80027f6:	f3bf 8f4f 	dsb	sy
 80027fa:	61bb      	str	r3, [r7, #24]
}
 80027fc:	bf00      	nop
 80027fe:	e7fe      	b.n	80027fe <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002800:	f001 fb6c 	bl	8003edc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002808:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280c:	2b00      	cmp	r3, #0
 800280e:	d024      	beq.n	800285a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002812:	1e5a      	subs	r2, r3, #1
 8002814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002816:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d104      	bne.n	800282a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002820:	f001 f9f0 	bl	8003c04 <pvTaskIncrementMutexHeldCount>
 8002824:	4602      	mov	r2, r0
 8002826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002828:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800282a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00f      	beq.n	8002852 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002834:	3310      	adds	r3, #16
 8002836:	4618      	mov	r0, r3
 8002838:	f000 fe5a 	bl	80034f0 <xTaskRemoveFromEventList>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d007      	beq.n	8002852 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002842:	4b54      	ldr	r3, [pc, #336]	; (8002994 <xQueueSemaphoreTake+0x214>)
 8002844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	f3bf 8f4f 	dsb	sy
 800284e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002852:	f001 fb73 	bl	8003f3c <vPortExitCritical>
				return pdPASS;
 8002856:	2301      	movs	r3, #1
 8002858:	e097      	b.n	800298a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d111      	bne.n	8002884 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286a:	f383 8811 	msr	BASEPRI, r3
 800286e:	f3bf 8f6f 	isb	sy
 8002872:	f3bf 8f4f 	dsb	sy
 8002876:	617b      	str	r3, [r7, #20]
}
 8002878:	bf00      	nop
 800287a:	e7fe      	b.n	800287a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800287c:	f001 fb5e 	bl	8003f3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002880:	2300      	movs	r3, #0
 8002882:	e082      	b.n	800298a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002886:	2b00      	cmp	r3, #0
 8002888:	d106      	bne.n	8002898 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800288a:	f107 030c 	add.w	r3, r7, #12
 800288e:	4618      	mov	r0, r3
 8002890:	f000 fe90 	bl	80035b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002894:	2301      	movs	r3, #1
 8002896:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002898:	f001 fb50 	bl	8003f3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800289c:	f000 fc42 	bl	8003124 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028a0:	f001 fb1c 	bl	8003edc <vPortEnterCritical>
 80028a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028aa:	b25b      	sxtb	r3, r3
 80028ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b0:	d103      	bne.n	80028ba <xQueueSemaphoreTake+0x13a>
 80028b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028c0:	b25b      	sxtb	r3, r3
 80028c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c6:	d103      	bne.n	80028d0 <xQueueSemaphoreTake+0x150>
 80028c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028d0:	f001 fb34 	bl	8003f3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028d4:	463a      	mov	r2, r7
 80028d6:	f107 030c 	add.w	r3, r7, #12
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 fe7f 	bl	80035e0 <xTaskCheckForTimeOut>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d132      	bne.n	800294e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028ea:	f000 f9ce 	bl	8002c8a <prvIsQueueEmpty>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d026      	beq.n	8002942 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d109      	bne.n	8002910 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80028fc:	f001 faee 	bl	8003edc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	4618      	mov	r0, r3
 8002906:	f000 ffd1 	bl	80038ac <xTaskPriorityInherit>
 800290a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800290c:	f001 fb16 	bl	8003f3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002912:	3324      	adds	r3, #36	; 0x24
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	4611      	mov	r1, r2
 8002918:	4618      	mov	r0, r3
 800291a:	f000 fdc5 	bl	80034a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800291e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002920:	f000 f961 	bl	8002be6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002924:	f000 fc0c 	bl	8003140 <xTaskResumeAll>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	f47f af68 	bne.w	8002800 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002930:	4b18      	ldr	r3, [pc, #96]	; (8002994 <xQueueSemaphoreTake+0x214>)
 8002932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	f3bf 8f4f 	dsb	sy
 800293c:	f3bf 8f6f 	isb	sy
 8002940:	e75e      	b.n	8002800 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002942:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002944:	f000 f94f 	bl	8002be6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002948:	f000 fbfa 	bl	8003140 <xTaskResumeAll>
 800294c:	e758      	b.n	8002800 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800294e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002950:	f000 f949 	bl	8002be6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002954:	f000 fbf4 	bl	8003140 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002958:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800295a:	f000 f996 	bl	8002c8a <prvIsQueueEmpty>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	f43f af4d 	beq.w	8002800 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00d      	beq.n	8002988 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800296c:	f001 fab6 	bl	8003edc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002970:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002972:	f000 f891 	bl	8002a98 <prvGetDisinheritPriorityAfterTimeout>
 8002976:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800297e:	4618      	mov	r0, r3
 8002980:	f001 f8a0 	bl	8003ac4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002984:	f001 fada 	bl	8003f3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002988:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800298a:	4618      	mov	r0, r3
 800298c:	3738      	adds	r7, #56	; 0x38
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	e000ed04 	.word	0xe000ed04

08002998 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08e      	sub	sp, #56	; 0x38
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80029a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10a      	bne.n	80029c4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80029ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b2:	f383 8811 	msr	BASEPRI, r3
 80029b6:	f3bf 8f6f 	isb	sy
 80029ba:	f3bf 8f4f 	dsb	sy
 80029be:	623b      	str	r3, [r7, #32]
}
 80029c0:	bf00      	nop
 80029c2:	e7fe      	b.n	80029c2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d103      	bne.n	80029d2 <xQueueReceiveFromISR+0x3a>
 80029ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <xQueueReceiveFromISR+0x3e>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <xQueueReceiveFromISR+0x40>
 80029d6:	2300      	movs	r3, #0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10a      	bne.n	80029f2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80029dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e0:	f383 8811 	msr	BASEPRI, r3
 80029e4:	f3bf 8f6f 	isb	sy
 80029e8:	f3bf 8f4f 	dsb	sy
 80029ec:	61fb      	str	r3, [r7, #28]
}
 80029ee:	bf00      	nop
 80029f0:	e7fe      	b.n	80029f0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029f2:	f001 fb35 	bl	8004060 <vPortValidateInterruptPriority>
	__asm volatile
 80029f6:	f3ef 8211 	mrs	r2, BASEPRI
 80029fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fe:	f383 8811 	msr	BASEPRI, r3
 8002a02:	f3bf 8f6f 	isb	sy
 8002a06:	f3bf 8f4f 	dsb	sy
 8002a0a:	61ba      	str	r2, [r7, #24]
 8002a0c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002a0e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d02f      	beq.n	8002a7e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a2c:	f000 f8b5 	bl	8002b9a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a32:	1e5a      	subs	r2, r3, #1
 8002a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a36:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002a38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a40:	d112      	bne.n	8002a68 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d016      	beq.n	8002a78 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4c:	3310      	adds	r3, #16
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fd4e 	bl	80034f0 <xTaskRemoveFromEventList>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00e      	beq.n	8002a78 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00b      	beq.n	8002a78 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	e007      	b.n	8002a78 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	b25a      	sxtb	r2, r3
 8002a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a7c:	e001      	b.n	8002a82 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	637b      	str	r3, [r7, #52]	; 0x34
 8002a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a84:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f383 8811 	msr	BASEPRI, r3
}
 8002a8c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3738      	adds	r7, #56	; 0x38
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d006      	beq.n	8002ab6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f1c3 0307 	rsb	r3, r3, #7
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	e001      	b.n	8002aba <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002aba:	68fb      	ldr	r3, [r7, #12]
	}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr

08002ac6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b086      	sub	sp, #24
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ada:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10d      	bne.n	8002b00 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d14d      	bne.n	8002b88 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 ff61 	bl	80039b8 <xTaskPriorityDisinherit>
 8002af6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	e043      	b.n	8002b88 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d119      	bne.n	8002b3a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6898      	ldr	r0, [r3, #8]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	f001 fcdf 	bl	80044d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	441a      	add	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d32b      	bcc.n	8002b88 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	e026      	b.n	8002b88 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	68d8      	ldr	r0, [r3, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	461a      	mov	r2, r3
 8002b44:	68b9      	ldr	r1, [r7, #8]
 8002b46:	f001 fcc5 	bl	80044d4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	425b      	negs	r3, r3
 8002b54:	441a      	add	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d207      	bcs.n	8002b76 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	425b      	negs	r3, r3
 8002b70:	441a      	add	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d105      	bne.n	8002b88 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	3b01      	subs	r3, #1
 8002b86:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002b90:	697b      	ldr	r3, [r7, #20]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3718      	adds	r7, #24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d018      	beq.n	8002bde <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	441a      	add	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d303      	bcc.n	8002bce <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68d9      	ldr	r1, [r3, #12]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	6838      	ldr	r0, [r7, #0]
 8002bda:	f001 fc7b 	bl	80044d4 <memcpy>
	}
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002bee:	f001 f975 	bl	8003edc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bf8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bfa:	e011      	b.n	8002c20 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d012      	beq.n	8002c2a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3324      	adds	r3, #36	; 0x24
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 fc71 	bl	80034f0 <xTaskRemoveFromEventList>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002c14:	f000 fd46 	bl	80036a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	dce9      	bgt.n	8002bfc <prvUnlockQueue+0x16>
 8002c28:	e000      	b.n	8002c2c <prvUnlockQueue+0x46>
					break;
 8002c2a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	22ff      	movs	r2, #255	; 0xff
 8002c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002c34:	f001 f982 	bl	8003f3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c38:	f001 f950 	bl	8003edc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c42:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c44:	e011      	b.n	8002c6a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d012      	beq.n	8002c74 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3310      	adds	r3, #16
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fc4c 	bl	80034f0 <xTaskRemoveFromEventList>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002c5e:	f000 fd21 	bl	80036a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002c62:	7bbb      	ldrb	r3, [r7, #14]
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	dce9      	bgt.n	8002c46 <prvUnlockQueue+0x60>
 8002c72:	e000      	b.n	8002c76 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002c74:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	22ff      	movs	r2, #255	; 0xff
 8002c7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002c7e:	f001 f95d 	bl	8003f3c <vPortExitCritical>
}
 8002c82:	bf00      	nop
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c92:	f001 f923 	bl	8003edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d102      	bne.n	8002ca4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	e001      	b.n	8002ca8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ca8:	f001 f948 	bl	8003f3c <vPortExitCritical>

	return xReturn;
 8002cac:	68fb      	ldr	r3, [r7, #12]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002cbe:	f001 f90d 	bl	8003edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d102      	bne.n	8002cd4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	e001      	b.n	8002cd8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cd8:	f001 f930 	bl	8003f3c <vPortExitCritical>

	return xReturn;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b08e      	sub	sp, #56	; 0x38
 8002cea:	af04      	add	r7, sp, #16
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10a      	bne.n	8002d10 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfe:	f383 8811 	msr	BASEPRI, r3
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	623b      	str	r3, [r7, #32]
}
 8002d0c:	bf00      	nop
 8002d0e:	e7fe      	b.n	8002d0e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10a      	bne.n	8002d2c <xTaskCreateStatic+0x46>
	__asm volatile
 8002d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1a:	f383 8811 	msr	BASEPRI, r3
 8002d1e:	f3bf 8f6f 	isb	sy
 8002d22:	f3bf 8f4f 	dsb	sy
 8002d26:	61fb      	str	r3, [r7, #28]
}
 8002d28:	bf00      	nop
 8002d2a:	e7fe      	b.n	8002d2a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d2c:	2354      	movs	r3, #84	; 0x54
 8002d2e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	2b54      	cmp	r3, #84	; 0x54
 8002d34:	d00a      	beq.n	8002d4c <xTaskCreateStatic+0x66>
	__asm volatile
 8002d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3a:	f383 8811 	msr	BASEPRI, r3
 8002d3e:	f3bf 8f6f 	isb	sy
 8002d42:	f3bf 8f4f 	dsb	sy
 8002d46:	61bb      	str	r3, [r7, #24]
}
 8002d48:	bf00      	nop
 8002d4a:	e7fe      	b.n	8002d4a <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d01e      	beq.n	8002d90 <xTaskCreateStatic+0xaa>
 8002d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01b      	beq.n	8002d90 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	2202      	movs	r2, #2
 8002d66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	9303      	str	r3, [sp, #12]
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	9302      	str	r3, [sp, #8]
 8002d72:	f107 0314 	add.w	r3, r7, #20
 8002d76:	9301      	str	r3, [sp, #4]
 8002d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	68b9      	ldr	r1, [r7, #8]
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 f850 	bl	8002e28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d8a:	f000 f8cd 	bl	8002f28 <prvAddNewTaskToReadyList>
 8002d8e:	e001      	b.n	8002d94 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002d94:	697b      	ldr	r3, [r7, #20]
	}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3728      	adds	r7, #40	; 0x28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b08c      	sub	sp, #48	; 0x30
 8002da2:	af04      	add	r7, sp, #16
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	603b      	str	r3, [r7, #0]
 8002daa:	4613      	mov	r3, r2
 8002dac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4618      	mov	r0, r3
 8002db4:	f001 f992 	bl	80040dc <pvPortMalloc>
 8002db8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00e      	beq.n	8002dde <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002dc0:	2054      	movs	r0, #84	; 0x54
 8002dc2:	f001 f98b 	bl	80040dc <pvPortMalloc>
 8002dc6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	631a      	str	r2, [r3, #48]	; 0x30
 8002dd4:	e005      	b.n	8002de2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002dd6:	6978      	ldr	r0, [r7, #20]
 8002dd8:	f001 fa44 	bl	8004264 <vPortFree>
 8002ddc:	e001      	b.n	8002de2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d017      	beq.n	8002e18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002df0:	88fa      	ldrh	r2, [r7, #6]
 8002df2:	2300      	movs	r3, #0
 8002df4:	9303      	str	r3, [sp, #12]
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	9302      	str	r3, [sp, #8]
 8002dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfc:	9301      	str	r3, [sp, #4]
 8002dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68b9      	ldr	r1, [r7, #8]
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 f80e 	bl	8002e28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e0c:	69f8      	ldr	r0, [r7, #28]
 8002e0e:	f000 f88b 	bl	8002f28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e12:	2301      	movs	r3, #1
 8002e14:	61bb      	str	r3, [r7, #24]
 8002e16:	e002      	b.n	8002e1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e18:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e1e:	69bb      	ldr	r3, [r7, #24]
	}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3720      	adds	r7, #32
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e40:	3b01      	subs	r3, #1
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	f023 0307 	bic.w	r3, r3, #7
 8002e4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5e:	f383 8811 	msr	BASEPRI, r3
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	617b      	str	r3, [r7, #20]
}
 8002e6c:	bf00      	nop
 8002e6e:	e7fe      	b.n	8002e6e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e70:	2300      	movs	r3, #0
 8002e72:	61fb      	str	r3, [r7, #28]
 8002e74:	e012      	b.n	8002e9c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	7819      	ldrb	r1, [r3, #0]
 8002e7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	4413      	add	r3, r2
 8002e84:	3334      	adds	r3, #52	; 0x34
 8002e86:	460a      	mov	r2, r1
 8002e88:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	4413      	add	r3, r2
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d006      	beq.n	8002ea4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	61fb      	str	r3, [r7, #28]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2b0f      	cmp	r3, #15
 8002ea0:	d9e9      	bls.n	8002e76 <prvInitialiseNewTask+0x4e>
 8002ea2:	e000      	b.n	8002ea6 <prvInitialiseNewTask+0x7e>
		{
			break;
 8002ea4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb0:	2b06      	cmp	r3, #6
 8002eb2:	d901      	bls.n	8002eb8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002eb4:	2306      	movs	r3, #6
 8002eb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ebc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ec2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ecc:	3304      	adds	r3, #4
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff f8fd 	bl	80020ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed6:	3318      	adds	r3, #24
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff f8f8 	bl	80020ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ee2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee6:	f1c3 0207 	rsb	r2, r3, #7
 8002eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ef2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	68f9      	ldr	r1, [r7, #12]
 8002f06:	69b8      	ldr	r0, [r7, #24]
 8002f08:	f000 fef6 	bl	8003cf8 <pxPortInitialiseStack>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f10:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f1e:	bf00      	nop
 8002f20:	3720      	adds	r7, #32
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f30:	f000 ffd4 	bl	8003edc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f34:	4b2a      	ldr	r3, [pc, #168]	; (8002fe0 <prvAddNewTaskToReadyList+0xb8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	4a29      	ldr	r2, [pc, #164]	; (8002fe0 <prvAddNewTaskToReadyList+0xb8>)
 8002f3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f3e:	4b29      	ldr	r3, [pc, #164]	; (8002fe4 <prvAddNewTaskToReadyList+0xbc>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d109      	bne.n	8002f5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f46:	4a27      	ldr	r2, [pc, #156]	; (8002fe4 <prvAddNewTaskToReadyList+0xbc>)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f4c:	4b24      	ldr	r3, [pc, #144]	; (8002fe0 <prvAddNewTaskToReadyList+0xb8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d110      	bne.n	8002f76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f54:	f000 fbca 	bl	80036ec <prvInitialiseTaskLists>
 8002f58:	e00d      	b.n	8002f76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f5a:	4b23      	ldr	r3, [pc, #140]	; (8002fe8 <prvAddNewTaskToReadyList+0xc0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d109      	bne.n	8002f76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f62:	4b20      	ldr	r3, [pc, #128]	; (8002fe4 <prvAddNewTaskToReadyList+0xbc>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d802      	bhi.n	8002f76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f70:	4a1c      	ldr	r2, [pc, #112]	; (8002fe4 <prvAddNewTaskToReadyList+0xbc>)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f76:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <prvAddNewTaskToReadyList+0xc4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	4a1b      	ldr	r2, [pc, #108]	; (8002fec <prvAddNewTaskToReadyList+0xc4>)
 8002f7e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	2201      	movs	r2, #1
 8002f86:	409a      	lsls	r2, r3
 8002f88:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <prvAddNewTaskToReadyList+0xc8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	4a18      	ldr	r2, [pc, #96]	; (8002ff0 <prvAddNewTaskToReadyList+0xc8>)
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4a15      	ldr	r2, [pc, #84]	; (8002ff4 <prvAddNewTaskToReadyList+0xcc>)
 8002fa0:	441a      	add	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4610      	mov	r0, r2
 8002faa:	f7ff f89c 	bl	80020e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002fae:	f000 ffc5 	bl	8003f3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <prvAddNewTaskToReadyList+0xc0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00e      	beq.n	8002fd8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fba:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <prvAddNewTaskToReadyList+0xbc>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d207      	bcs.n	8002fd8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <prvAddNewTaskToReadyList+0xd0>)
 8002fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	f3bf 8f4f 	dsb	sy
 8002fd4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fd8:	bf00      	nop
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20000380 	.word	0x20000380
 8002fe4:	20000280 	.word	0x20000280
 8002fe8:	2000038c 	.word	0x2000038c
 8002fec:	2000039c 	.word	0x2000039c
 8002ff0:	20000388 	.word	0x20000388
 8002ff4:	20000284 	.word	0x20000284
 8002ff8:	e000ed04 	.word	0xe000ed04

08002ffc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003004:	2300      	movs	r3, #0
 8003006:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d017      	beq.n	800303e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800300e:	4b13      	ldr	r3, [pc, #76]	; (800305c <vTaskDelay+0x60>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <vTaskDelay+0x30>
	__asm volatile
 8003016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301a:	f383 8811 	msr	BASEPRI, r3
 800301e:	f3bf 8f6f 	isb	sy
 8003022:	f3bf 8f4f 	dsb	sy
 8003026:	60bb      	str	r3, [r7, #8]
}
 8003028:	bf00      	nop
 800302a:	e7fe      	b.n	800302a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800302c:	f000 f87a 	bl	8003124 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003030:	2100      	movs	r1, #0
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fdfa 	bl	8003c2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003038:	f000 f882 	bl	8003140 <xTaskResumeAll>
 800303c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d107      	bne.n	8003054 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003044:	4b06      	ldr	r3, [pc, #24]	; (8003060 <vTaskDelay+0x64>)
 8003046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003054:	bf00      	nop
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	200003a8 	.word	0x200003a8
 8003060:	e000ed04 	.word	0xe000ed04

08003064 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08a      	sub	sp, #40	; 0x28
 8003068:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800306a:	2300      	movs	r3, #0
 800306c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800306e:	2300      	movs	r3, #0
 8003070:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003072:	463a      	mov	r2, r7
 8003074:	1d39      	adds	r1, r7, #4
 8003076:	f107 0308 	add.w	r3, r7, #8
 800307a:	4618      	mov	r0, r3
 800307c:	f7fd f868 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003080:	6839      	ldr	r1, [r7, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	9202      	str	r2, [sp, #8]
 8003088:	9301      	str	r3, [sp, #4]
 800308a:	2300      	movs	r3, #0
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	2300      	movs	r3, #0
 8003090:	460a      	mov	r2, r1
 8003092:	491e      	ldr	r1, [pc, #120]	; (800310c <vTaskStartScheduler+0xa8>)
 8003094:	481e      	ldr	r0, [pc, #120]	; (8003110 <vTaskStartScheduler+0xac>)
 8003096:	f7ff fe26 	bl	8002ce6 <xTaskCreateStatic>
 800309a:	4603      	mov	r3, r0
 800309c:	4a1d      	ldr	r2, [pc, #116]	; (8003114 <vTaskStartScheduler+0xb0>)
 800309e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80030a0:	4b1c      	ldr	r3, [pc, #112]	; (8003114 <vTaskStartScheduler+0xb0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80030a8:	2301      	movs	r3, #1
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	e001      	b.n	80030b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d116      	bne.n	80030e6 <vTaskStartScheduler+0x82>
	__asm volatile
 80030b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030bc:	f383 8811 	msr	BASEPRI, r3
 80030c0:	f3bf 8f6f 	isb	sy
 80030c4:	f3bf 8f4f 	dsb	sy
 80030c8:	613b      	str	r3, [r7, #16]
}
 80030ca:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80030cc:	4b12      	ldr	r3, [pc, #72]	; (8003118 <vTaskStartScheduler+0xb4>)
 80030ce:	f04f 32ff 	mov.w	r2, #4294967295
 80030d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80030d4:	4b11      	ldr	r3, [pc, #68]	; (800311c <vTaskStartScheduler+0xb8>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80030da:	4b11      	ldr	r3, [pc, #68]	; (8003120 <vTaskStartScheduler+0xbc>)
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80030e0:	f000 fe8a 	bl	8003df8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80030e4:	e00e      	b.n	8003104 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ec:	d10a      	bne.n	8003104 <vTaskStartScheduler+0xa0>
	__asm volatile
 80030ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f2:	f383 8811 	msr	BASEPRI, r3
 80030f6:	f3bf 8f6f 	isb	sy
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	60fb      	str	r3, [r7, #12]
}
 8003100:	bf00      	nop
 8003102:	e7fe      	b.n	8003102 <vTaskStartScheduler+0x9e>
}
 8003104:	bf00      	nop
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	080046e8 	.word	0x080046e8
 8003110:	080036bd 	.word	0x080036bd
 8003114:	200003a4 	.word	0x200003a4
 8003118:	200003a0 	.word	0x200003a0
 800311c:	2000038c 	.word	0x2000038c
 8003120:	20000384 	.word	0x20000384

08003124 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003128:	4b04      	ldr	r3, [pc, #16]	; (800313c <vTaskSuspendAll+0x18>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3301      	adds	r3, #1
 800312e:	4a03      	ldr	r2, [pc, #12]	; (800313c <vTaskSuspendAll+0x18>)
 8003130:	6013      	str	r3, [r2, #0]
}
 8003132:	bf00      	nop
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	200003a8 	.word	0x200003a8

08003140 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800314a:	2300      	movs	r3, #0
 800314c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800314e:	4b41      	ldr	r3, [pc, #260]	; (8003254 <xTaskResumeAll+0x114>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10a      	bne.n	800316c <xTaskResumeAll+0x2c>
	__asm volatile
 8003156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315a:	f383 8811 	msr	BASEPRI, r3
 800315e:	f3bf 8f6f 	isb	sy
 8003162:	f3bf 8f4f 	dsb	sy
 8003166:	603b      	str	r3, [r7, #0]
}
 8003168:	bf00      	nop
 800316a:	e7fe      	b.n	800316a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800316c:	f000 feb6 	bl	8003edc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003170:	4b38      	ldr	r3, [pc, #224]	; (8003254 <xTaskResumeAll+0x114>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	3b01      	subs	r3, #1
 8003176:	4a37      	ldr	r2, [pc, #220]	; (8003254 <xTaskResumeAll+0x114>)
 8003178:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800317a:	4b36      	ldr	r3, [pc, #216]	; (8003254 <xTaskResumeAll+0x114>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d161      	bne.n	8003246 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003182:	4b35      	ldr	r3, [pc, #212]	; (8003258 <xTaskResumeAll+0x118>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d05d      	beq.n	8003246 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800318a:	e02e      	b.n	80031ea <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800318c:	4b33      	ldr	r3, [pc, #204]	; (800325c <xTaskResumeAll+0x11c>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	3318      	adds	r3, #24
 8003198:	4618      	mov	r0, r3
 800319a:	f7fe ffff 	bl	800219c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	3304      	adds	r3, #4
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe fffa 	bl	800219c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	2201      	movs	r2, #1
 80031ae:	409a      	lsls	r2, r3
 80031b0:	4b2b      	ldr	r3, [pc, #172]	; (8003260 <xTaskResumeAll+0x120>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	4a2a      	ldr	r2, [pc, #168]	; (8003260 <xTaskResumeAll+0x120>)
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031be:	4613      	mov	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4a27      	ldr	r2, [pc, #156]	; (8003264 <xTaskResumeAll+0x124>)
 80031c8:	441a      	add	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	3304      	adds	r3, #4
 80031ce:	4619      	mov	r1, r3
 80031d0:	4610      	mov	r0, r2
 80031d2:	f7fe ff88 	bl	80020e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031da:	4b23      	ldr	r3, [pc, #140]	; (8003268 <xTaskResumeAll+0x128>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d302      	bcc.n	80031ea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80031e4:	4b21      	ldr	r3, [pc, #132]	; (800326c <xTaskResumeAll+0x12c>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031ea:	4b1c      	ldr	r3, [pc, #112]	; (800325c <xTaskResumeAll+0x11c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1cc      	bne.n	800318c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80031f8:	f000 fb16 	bl	8003828 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80031fc:	4b1c      	ldr	r3, [pc, #112]	; (8003270 <xTaskResumeAll+0x130>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d010      	beq.n	800322a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003208:	f000 f836 	bl	8003278 <xTaskIncrementTick>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003212:	4b16      	ldr	r3, [pc, #88]	; (800326c <xTaskResumeAll+0x12c>)
 8003214:	2201      	movs	r2, #1
 8003216:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3b01      	subs	r3, #1
 800321c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1f1      	bne.n	8003208 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003224:	4b12      	ldr	r3, [pc, #72]	; (8003270 <xTaskResumeAll+0x130>)
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800322a:	4b10      	ldr	r3, [pc, #64]	; (800326c <xTaskResumeAll+0x12c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d009      	beq.n	8003246 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003232:	2301      	movs	r3, #1
 8003234:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003236:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <xTaskResumeAll+0x134>)
 8003238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	f3bf 8f4f 	dsb	sy
 8003242:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003246:	f000 fe79 	bl	8003f3c <vPortExitCritical>

	return xAlreadyYielded;
 800324a:	68bb      	ldr	r3, [r7, #8]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	200003a8 	.word	0x200003a8
 8003258:	20000380 	.word	0x20000380
 800325c:	20000340 	.word	0x20000340
 8003260:	20000388 	.word	0x20000388
 8003264:	20000284 	.word	0x20000284
 8003268:	20000280 	.word	0x20000280
 800326c:	20000394 	.word	0x20000394
 8003270:	20000390 	.word	0x20000390
 8003274:	e000ed04 	.word	0xe000ed04

08003278 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003282:	4b51      	ldr	r3, [pc, #324]	; (80033c8 <xTaskIncrementTick+0x150>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	f040 808d 	bne.w	80033a6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800328c:	4b4f      	ldr	r3, [pc, #316]	; (80033cc <xTaskIncrementTick+0x154>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3301      	adds	r3, #1
 8003292:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003294:	4a4d      	ldr	r2, [pc, #308]	; (80033cc <xTaskIncrementTick+0x154>)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d120      	bne.n	80032e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80032a0:	4b4b      	ldr	r3, [pc, #300]	; (80033d0 <xTaskIncrementTick+0x158>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <xTaskIncrementTick+0x48>
	__asm volatile
 80032aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ae:	f383 8811 	msr	BASEPRI, r3
 80032b2:	f3bf 8f6f 	isb	sy
 80032b6:	f3bf 8f4f 	dsb	sy
 80032ba:	603b      	str	r3, [r7, #0]
}
 80032bc:	bf00      	nop
 80032be:	e7fe      	b.n	80032be <xTaskIncrementTick+0x46>
 80032c0:	4b43      	ldr	r3, [pc, #268]	; (80033d0 <xTaskIncrementTick+0x158>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	4b43      	ldr	r3, [pc, #268]	; (80033d4 <xTaskIncrementTick+0x15c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a41      	ldr	r2, [pc, #260]	; (80033d0 <xTaskIncrementTick+0x158>)
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	4a41      	ldr	r2, [pc, #260]	; (80033d4 <xTaskIncrementTick+0x15c>)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6013      	str	r3, [r2, #0]
 80032d4:	4b40      	ldr	r3, [pc, #256]	; (80033d8 <xTaskIncrementTick+0x160>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3301      	adds	r3, #1
 80032da:	4a3f      	ldr	r2, [pc, #252]	; (80033d8 <xTaskIncrementTick+0x160>)
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	f000 faa3 	bl	8003828 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80032e2:	4b3e      	ldr	r3, [pc, #248]	; (80033dc <xTaskIncrementTick+0x164>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d34d      	bcc.n	8003388 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032ec:	4b38      	ldr	r3, [pc, #224]	; (80033d0 <xTaskIncrementTick+0x158>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <xTaskIncrementTick+0x82>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <xTaskIncrementTick+0x84>
 80032fa:	2300      	movs	r3, #0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d004      	beq.n	800330a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003300:	4b36      	ldr	r3, [pc, #216]	; (80033dc <xTaskIncrementTick+0x164>)
 8003302:	f04f 32ff 	mov.w	r2, #4294967295
 8003306:	601a      	str	r2, [r3, #0]
					break;
 8003308:	e03e      	b.n	8003388 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800330a:	4b31      	ldr	r3, [pc, #196]	; (80033d0 <xTaskIncrementTick+0x158>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	429a      	cmp	r2, r3
 8003320:	d203      	bcs.n	800332a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003322:	4a2e      	ldr	r2, [pc, #184]	; (80033dc <xTaskIncrementTick+0x164>)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6013      	str	r3, [r2, #0]
						break;
 8003328:	e02e      	b.n	8003388 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	3304      	adds	r3, #4
 800332e:	4618      	mov	r0, r3
 8003330:	f7fe ff34 	bl	800219c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	2b00      	cmp	r3, #0
 800333a:	d004      	beq.n	8003346 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	3318      	adds	r3, #24
 8003340:	4618      	mov	r0, r3
 8003342:	f7fe ff2b 	bl	800219c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	2201      	movs	r2, #1
 800334c:	409a      	lsls	r2, r3
 800334e:	4b24      	ldr	r3, [pc, #144]	; (80033e0 <xTaskIncrementTick+0x168>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4313      	orrs	r3, r2
 8003354:	4a22      	ldr	r2, [pc, #136]	; (80033e0 <xTaskIncrementTick+0x168>)
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4a1f      	ldr	r2, [pc, #124]	; (80033e4 <xTaskIncrementTick+0x16c>)
 8003366:	441a      	add	r2, r3
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	3304      	adds	r3, #4
 800336c:	4619      	mov	r1, r3
 800336e:	4610      	mov	r0, r2
 8003370:	f7fe feb9 	bl	80020e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003378:	4b1b      	ldr	r3, [pc, #108]	; (80033e8 <xTaskIncrementTick+0x170>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	429a      	cmp	r2, r3
 8003380:	d3b4      	bcc.n	80032ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003382:	2301      	movs	r3, #1
 8003384:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003386:	e7b1      	b.n	80032ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003388:	4b17      	ldr	r3, [pc, #92]	; (80033e8 <xTaskIncrementTick+0x170>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338e:	4915      	ldr	r1, [pc, #84]	; (80033e4 <xTaskIncrementTick+0x16c>)
 8003390:	4613      	mov	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d907      	bls.n	80033b0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80033a0:	2301      	movs	r3, #1
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	e004      	b.n	80033b0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80033a6:	4b11      	ldr	r3, [pc, #68]	; (80033ec <xTaskIncrementTick+0x174>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3301      	adds	r3, #1
 80033ac:	4a0f      	ldr	r2, [pc, #60]	; (80033ec <xTaskIncrementTick+0x174>)
 80033ae:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80033b0:	4b0f      	ldr	r3, [pc, #60]	; (80033f0 <xTaskIncrementTick+0x178>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80033b8:	2301      	movs	r3, #1
 80033ba:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80033bc:	697b      	ldr	r3, [r7, #20]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	200003a8 	.word	0x200003a8
 80033cc:	20000384 	.word	0x20000384
 80033d0:	20000338 	.word	0x20000338
 80033d4:	2000033c 	.word	0x2000033c
 80033d8:	20000398 	.word	0x20000398
 80033dc:	200003a0 	.word	0x200003a0
 80033e0:	20000388 	.word	0x20000388
 80033e4:	20000284 	.word	0x20000284
 80033e8:	20000280 	.word	0x20000280
 80033ec:	20000390 	.word	0x20000390
 80033f0:	20000394 	.word	0x20000394

080033f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033fa:	4b26      	ldr	r3, [pc, #152]	; (8003494 <vTaskSwitchContext+0xa0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003402:	4b25      	ldr	r3, [pc, #148]	; (8003498 <vTaskSwitchContext+0xa4>)
 8003404:	2201      	movs	r2, #1
 8003406:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003408:	e03f      	b.n	800348a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800340a:	4b23      	ldr	r3, [pc, #140]	; (8003498 <vTaskSwitchContext+0xa4>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003410:	4b22      	ldr	r3, [pc, #136]	; (800349c <vTaskSwitchContext+0xa8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	fab3 f383 	clz	r3, r3
 800341c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800341e:	7afb      	ldrb	r3, [r7, #11]
 8003420:	f1c3 031f 	rsb	r3, r3, #31
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	491e      	ldr	r1, [pc, #120]	; (80034a0 <vTaskSwitchContext+0xac>)
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10a      	bne.n	8003450 <vTaskSwitchContext+0x5c>
	__asm volatile
 800343a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343e:	f383 8811 	msr	BASEPRI, r3
 8003442:	f3bf 8f6f 	isb	sy
 8003446:	f3bf 8f4f 	dsb	sy
 800344a:	607b      	str	r3, [r7, #4]
}
 800344c:	bf00      	nop
 800344e:	e7fe      	b.n	800344e <vTaskSwitchContext+0x5a>
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4a11      	ldr	r2, [pc, #68]	; (80034a0 <vTaskSwitchContext+0xac>)
 800345c:	4413      	add	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	3308      	adds	r3, #8
 8003472:	429a      	cmp	r2, r3
 8003474:	d104      	bne.n	8003480 <vTaskSwitchContext+0x8c>
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	605a      	str	r2, [r3, #4]
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	4a07      	ldr	r2, [pc, #28]	; (80034a4 <vTaskSwitchContext+0xb0>)
 8003488:	6013      	str	r3, [r2, #0]
}
 800348a:	bf00      	nop
 800348c:	371c      	adds	r7, #28
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr
 8003494:	200003a8 	.word	0x200003a8
 8003498:	20000394 	.word	0x20000394
 800349c:	20000388 	.word	0x20000388
 80034a0:	20000284 	.word	0x20000284
 80034a4:	20000280 	.word	0x20000280

080034a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10a      	bne.n	80034ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80034b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034bc:	f383 8811 	msr	BASEPRI, r3
 80034c0:	f3bf 8f6f 	isb	sy
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	60fb      	str	r3, [r7, #12]
}
 80034ca:	bf00      	nop
 80034cc:	e7fe      	b.n	80034cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034ce:	4b07      	ldr	r3, [pc, #28]	; (80034ec <vTaskPlaceOnEventList+0x44>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	3318      	adds	r3, #24
 80034d4:	4619      	mov	r1, r3
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fe fe28 	bl	800212c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034dc:	2101      	movs	r1, #1
 80034de:	6838      	ldr	r0, [r7, #0]
 80034e0:	f000 fba4 	bl	8003c2c <prvAddCurrentTaskToDelayedList>
}
 80034e4:	bf00      	nop
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20000280 	.word	0x20000280

080034f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10a      	bne.n	800351c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350a:	f383 8811 	msr	BASEPRI, r3
 800350e:	f3bf 8f6f 	isb	sy
 8003512:	f3bf 8f4f 	dsb	sy
 8003516:	60fb      	str	r3, [r7, #12]
}
 8003518:	bf00      	nop
 800351a:	e7fe      	b.n	800351a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	3318      	adds	r3, #24
 8003520:	4618      	mov	r0, r3
 8003522:	f7fe fe3b 	bl	800219c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003526:	4b1d      	ldr	r3, [pc, #116]	; (800359c <xTaskRemoveFromEventList+0xac>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d11c      	bne.n	8003568 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	3304      	adds	r3, #4
 8003532:	4618      	mov	r0, r3
 8003534:	f7fe fe32 	bl	800219c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353c:	2201      	movs	r2, #1
 800353e:	409a      	lsls	r2, r3
 8003540:	4b17      	ldr	r3, [pc, #92]	; (80035a0 <xTaskRemoveFromEventList+0xb0>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4313      	orrs	r3, r2
 8003546:	4a16      	ldr	r2, [pc, #88]	; (80035a0 <xTaskRemoveFromEventList+0xb0>)
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4a13      	ldr	r2, [pc, #76]	; (80035a4 <xTaskRemoveFromEventList+0xb4>)
 8003558:	441a      	add	r2, r3
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	3304      	adds	r3, #4
 800355e:	4619      	mov	r1, r3
 8003560:	4610      	mov	r0, r2
 8003562:	f7fe fdc0 	bl	80020e6 <vListInsertEnd>
 8003566:	e005      	b.n	8003574 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	3318      	adds	r3, #24
 800356c:	4619      	mov	r1, r3
 800356e:	480e      	ldr	r0, [pc, #56]	; (80035a8 <xTaskRemoveFromEventList+0xb8>)
 8003570:	f7fe fdb9 	bl	80020e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003578:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <xTaskRemoveFromEventList+0xbc>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357e:	429a      	cmp	r2, r3
 8003580:	d905      	bls.n	800358e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003582:	2301      	movs	r3, #1
 8003584:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003586:	4b0a      	ldr	r3, [pc, #40]	; (80035b0 <xTaskRemoveFromEventList+0xc0>)
 8003588:	2201      	movs	r2, #1
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	e001      	b.n	8003592 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800358e:	2300      	movs	r3, #0
 8003590:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003592:	697b      	ldr	r3, [r7, #20]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	200003a8 	.word	0x200003a8
 80035a0:	20000388 	.word	0x20000388
 80035a4:	20000284 	.word	0x20000284
 80035a8:	20000340 	.word	0x20000340
 80035ac:	20000280 	.word	0x20000280
 80035b0:	20000394 	.word	0x20000394

080035b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035bc:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <vTaskInternalSetTimeOutState+0x24>)
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80035c4:	4b05      	ldr	r3, [pc, #20]	; (80035dc <vTaskInternalSetTimeOutState+0x28>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	605a      	str	r2, [r3, #4]
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	20000398 	.word	0x20000398
 80035dc:	20000384 	.word	0x20000384

080035e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10a      	bne.n	8003606 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80035f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f4:	f383 8811 	msr	BASEPRI, r3
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	613b      	str	r3, [r7, #16]
}
 8003602:	bf00      	nop
 8003604:	e7fe      	b.n	8003604 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10a      	bne.n	8003622 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800360c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003610:	f383 8811 	msr	BASEPRI, r3
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	60fb      	str	r3, [r7, #12]
}
 800361e:	bf00      	nop
 8003620:	e7fe      	b.n	8003620 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003622:	f000 fc5b 	bl	8003edc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003626:	4b1d      	ldr	r3, [pc, #116]	; (800369c <xTaskCheckForTimeOut+0xbc>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363e:	d102      	bne.n	8003646 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003640:	2300      	movs	r3, #0
 8003642:	61fb      	str	r3, [r7, #28]
 8003644:	e023      	b.n	800368e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	4b15      	ldr	r3, [pc, #84]	; (80036a0 <xTaskCheckForTimeOut+0xc0>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d007      	beq.n	8003662 <xTaskCheckForTimeOut+0x82>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	429a      	cmp	r2, r3
 800365a:	d302      	bcc.n	8003662 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800365c:	2301      	movs	r3, #1
 800365e:	61fb      	str	r3, [r7, #28]
 8003660:	e015      	b.n	800368e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	429a      	cmp	r2, r3
 800366a:	d20b      	bcs.n	8003684 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	1ad2      	subs	r2, r2, r3
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff ff9b 	bl	80035b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800367e:	2300      	movs	r3, #0
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	e004      	b.n	800368e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800368a:	2301      	movs	r3, #1
 800368c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800368e:	f000 fc55 	bl	8003f3c <vPortExitCritical>

	return xReturn;
 8003692:	69fb      	ldr	r3, [r7, #28]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3720      	adds	r7, #32
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	20000384 	.word	0x20000384
 80036a0:	20000398 	.word	0x20000398

080036a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80036a8:	4b03      	ldr	r3, [pc, #12]	; (80036b8 <vTaskMissedYield+0x14>)
 80036aa:	2201      	movs	r2, #1
 80036ac:	601a      	str	r2, [r3, #0]
}
 80036ae:	bf00      	nop
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20000394 	.word	0x20000394

080036bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80036c4:	f000 f852 	bl	800376c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <prvIdleTask+0x28>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d9f9      	bls.n	80036c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80036d0:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <prvIdleTask+0x2c>)
 80036d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	f3bf 8f4f 	dsb	sy
 80036dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80036e0:	e7f0      	b.n	80036c4 <prvIdleTask+0x8>
 80036e2:	bf00      	nop
 80036e4:	20000284 	.word	0x20000284
 80036e8:	e000ed04 	.word	0xe000ed04

080036ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036f2:	2300      	movs	r3, #0
 80036f4:	607b      	str	r3, [r7, #4]
 80036f6:	e00c      	b.n	8003712 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4a12      	ldr	r2, [pc, #72]	; (800374c <prvInitialiseTaskLists+0x60>)
 8003704:	4413      	add	r3, r2
 8003706:	4618      	mov	r0, r3
 8003708:	f7fe fcc2 	bl	8002090 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3301      	adds	r3, #1
 8003710:	607b      	str	r3, [r7, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b06      	cmp	r3, #6
 8003716:	d9ef      	bls.n	80036f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003718:	480d      	ldr	r0, [pc, #52]	; (8003750 <prvInitialiseTaskLists+0x64>)
 800371a:	f7fe fcb9 	bl	8002090 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800371e:	480d      	ldr	r0, [pc, #52]	; (8003754 <prvInitialiseTaskLists+0x68>)
 8003720:	f7fe fcb6 	bl	8002090 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003724:	480c      	ldr	r0, [pc, #48]	; (8003758 <prvInitialiseTaskLists+0x6c>)
 8003726:	f7fe fcb3 	bl	8002090 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800372a:	480c      	ldr	r0, [pc, #48]	; (800375c <prvInitialiseTaskLists+0x70>)
 800372c:	f7fe fcb0 	bl	8002090 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003730:	480b      	ldr	r0, [pc, #44]	; (8003760 <prvInitialiseTaskLists+0x74>)
 8003732:	f7fe fcad 	bl	8002090 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003736:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <prvInitialiseTaskLists+0x78>)
 8003738:	4a05      	ldr	r2, [pc, #20]	; (8003750 <prvInitialiseTaskLists+0x64>)
 800373a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800373c:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <prvInitialiseTaskLists+0x7c>)
 800373e:	4a05      	ldr	r2, [pc, #20]	; (8003754 <prvInitialiseTaskLists+0x68>)
 8003740:	601a      	str	r2, [r3, #0]
}
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	20000284 	.word	0x20000284
 8003750:	20000310 	.word	0x20000310
 8003754:	20000324 	.word	0x20000324
 8003758:	20000340 	.word	0x20000340
 800375c:	20000354 	.word	0x20000354
 8003760:	2000036c 	.word	0x2000036c
 8003764:	20000338 	.word	0x20000338
 8003768:	2000033c 	.word	0x2000033c

0800376c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003772:	e019      	b.n	80037a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003774:	f000 fbb2 	bl	8003edc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003778:	4b10      	ldr	r3, [pc, #64]	; (80037bc <prvCheckTasksWaitingTermination+0x50>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3304      	adds	r3, #4
 8003784:	4618      	mov	r0, r3
 8003786:	f7fe fd09 	bl	800219c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800378a:	4b0d      	ldr	r3, [pc, #52]	; (80037c0 <prvCheckTasksWaitingTermination+0x54>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	3b01      	subs	r3, #1
 8003790:	4a0b      	ldr	r2, [pc, #44]	; (80037c0 <prvCheckTasksWaitingTermination+0x54>)
 8003792:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003794:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <prvCheckTasksWaitingTermination+0x58>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3b01      	subs	r3, #1
 800379a:	4a0a      	ldr	r2, [pc, #40]	; (80037c4 <prvCheckTasksWaitingTermination+0x58>)
 800379c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800379e:	f000 fbcd 	bl	8003f3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f810 	bl	80037c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037a8:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <prvCheckTasksWaitingTermination+0x58>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1e1      	bne.n	8003774 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80037b0:	bf00      	nop
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000354 	.word	0x20000354
 80037c0:	20000380 	.word	0x20000380
 80037c4:	20000368 	.word	0x20000368

080037c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d108      	bne.n	80037ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fd40 	bl	8004264 <vPortFree>
				vPortFree( pxTCB );
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 fd3d 	bl	8004264 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80037ea:	e018      	b.n	800381e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d103      	bne.n	80037fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fd34 	bl	8004264 <vPortFree>
	}
 80037fc:	e00f      	b.n	800381e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003804:	2b02      	cmp	r3, #2
 8003806:	d00a      	beq.n	800381e <prvDeleteTCB+0x56>
	__asm volatile
 8003808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	60fb      	str	r3, [r7, #12]
}
 800381a:	bf00      	nop
 800381c:	e7fe      	b.n	800381c <prvDeleteTCB+0x54>
	}
 800381e:	bf00      	nop
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
	...

08003828 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800382e:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <prvResetNextTaskUnblockTime+0x40>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <prvResetNextTaskUnblockTime+0x14>
 8003838:	2301      	movs	r3, #1
 800383a:	e000      	b.n	800383e <prvResetNextTaskUnblockTime+0x16>
 800383c:	2300      	movs	r3, #0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d004      	beq.n	800384c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003842:	4b0a      	ldr	r3, [pc, #40]	; (800386c <prvResetNextTaskUnblockTime+0x44>)
 8003844:	f04f 32ff 	mov.w	r2, #4294967295
 8003848:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800384a:	e008      	b.n	800385e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800384c:	4b06      	ldr	r3, [pc, #24]	; (8003868 <prvResetNextTaskUnblockTime+0x40>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	4a04      	ldr	r2, [pc, #16]	; (800386c <prvResetNextTaskUnblockTime+0x44>)
 800385c:	6013      	str	r3, [r2, #0]
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr
 8003868:	20000338 	.word	0x20000338
 800386c:	200003a0 	.word	0x200003a0

08003870 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003876:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <xTaskGetSchedulerState+0x34>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d102      	bne.n	8003884 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800387e:	2301      	movs	r3, #1
 8003880:	607b      	str	r3, [r7, #4]
 8003882:	e008      	b.n	8003896 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003884:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <xTaskGetSchedulerState+0x38>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d102      	bne.n	8003892 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800388c:	2302      	movs	r3, #2
 800388e:	607b      	str	r3, [r7, #4]
 8003890:	e001      	b.n	8003896 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003892:	2300      	movs	r3, #0
 8003894:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003896:	687b      	ldr	r3, [r7, #4]
	}
 8003898:	4618      	mov	r0, r3
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	2000038c 	.word	0x2000038c
 80038a8:	200003a8 	.word	0x200003a8

080038ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d06e      	beq.n	80039a0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c6:	4b39      	ldr	r3, [pc, #228]	; (80039ac <xTaskPriorityInherit+0x100>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d25e      	bcs.n	800398e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	db06      	blt.n	80038e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038d8:	4b34      	ldr	r3, [pc, #208]	; (80039ac <xTaskPriorityInherit+0x100>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038de:	f1c3 0207 	rsb	r2, r3, #7
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	6959      	ldr	r1, [r3, #20]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ee:	4613      	mov	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4a2e      	ldr	r2, [pc, #184]	; (80039b0 <xTaskPriorityInherit+0x104>)
 80038f8:	4413      	add	r3, r2
 80038fa:	4299      	cmp	r1, r3
 80038fc:	d101      	bne.n	8003902 <xTaskPriorityInherit+0x56>
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <xTaskPriorityInherit+0x58>
 8003902:	2300      	movs	r3, #0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d03a      	beq.n	800397e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	3304      	adds	r3, #4
 800390c:	4618      	mov	r0, r3
 800390e:	f7fe fc45 	bl	800219c <uxListRemove>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d115      	bne.n	8003944 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391c:	4924      	ldr	r1, [pc, #144]	; (80039b0 <xTaskPriorityInherit+0x104>)
 800391e:	4613      	mov	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10a      	bne.n	8003944 <xTaskPriorityInherit+0x98>
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	2201      	movs	r2, #1
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43da      	mvns	r2, r3
 800393a:	4b1e      	ldr	r3, [pc, #120]	; (80039b4 <xTaskPriorityInherit+0x108>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4013      	ands	r3, r2
 8003940:	4a1c      	ldr	r2, [pc, #112]	; (80039b4 <xTaskPriorityInherit+0x108>)
 8003942:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003944:	4b19      	ldr	r3, [pc, #100]	; (80039ac <xTaskPriorityInherit+0x100>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003952:	2201      	movs	r2, #1
 8003954:	409a      	lsls	r2, r3
 8003956:	4b17      	ldr	r3, [pc, #92]	; (80039b4 <xTaskPriorityInherit+0x108>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4313      	orrs	r3, r2
 800395c:	4a15      	ldr	r2, [pc, #84]	; (80039b4 <xTaskPriorityInherit+0x108>)
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4a10      	ldr	r2, [pc, #64]	; (80039b0 <xTaskPriorityInherit+0x104>)
 800396e:	441a      	add	r2, r3
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	3304      	adds	r3, #4
 8003974:	4619      	mov	r1, r3
 8003976:	4610      	mov	r0, r2
 8003978:	f7fe fbb5 	bl	80020e6 <vListInsertEnd>
 800397c:	e004      	b.n	8003988 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800397e:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <xTaskPriorityInherit+0x100>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003988:	2301      	movs	r3, #1
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	e008      	b.n	80039a0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003992:	4b06      	ldr	r3, [pc, #24]	; (80039ac <xTaskPriorityInherit+0x100>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	429a      	cmp	r2, r3
 800399a:	d201      	bcs.n	80039a0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800399c:	2301      	movs	r3, #1
 800399e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80039a0:	68fb      	ldr	r3, [r7, #12]
	}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	20000280 	.word	0x20000280
 80039b0:	20000284 	.word	0x20000284
 80039b4:	20000388 	.word	0x20000388

080039b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d06e      	beq.n	8003aac <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80039ce:	4b3a      	ldr	r3, [pc, #232]	; (8003ab8 <xTaskPriorityDisinherit+0x100>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d00a      	beq.n	80039ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	60fb      	str	r3, [r7, #12]
}
 80039ea:	bf00      	nop
 80039ec:	e7fe      	b.n	80039ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10a      	bne.n	8003a0c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80039f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fa:	f383 8811 	msr	BASEPRI, r3
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	60bb      	str	r3, [r7, #8]
}
 8003a08:	bf00      	nop
 8003a0a:	e7fe      	b.n	8003a0a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a10:	1e5a      	subs	r2, r3, #1
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d044      	beq.n	8003aac <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d140      	bne.n	8003aac <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fe fbb4 	bl	800219c <uxListRemove>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d115      	bne.n	8003a66 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3e:	491f      	ldr	r1, [pc, #124]	; (8003abc <xTaskPriorityDisinherit+0x104>)
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10a      	bne.n	8003a66 <xTaskPriorityDisinherit+0xae>
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	2201      	movs	r2, #1
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	43da      	mvns	r2, r3
 8003a5c:	4b18      	ldr	r3, [pc, #96]	; (8003ac0 <xTaskPriorityDisinherit+0x108>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4013      	ands	r3, r2
 8003a62:	4a17      	ldr	r2, [pc, #92]	; (8003ac0 <xTaskPriorityDisinherit+0x108>)
 8003a64:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a72:	f1c3 0207 	rsb	r2, r3, #7
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7e:	2201      	movs	r2, #1
 8003a80:	409a      	lsls	r2, r3
 8003a82:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <xTaskPriorityDisinherit+0x108>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	4a0d      	ldr	r2, [pc, #52]	; (8003ac0 <xTaskPriorityDisinherit+0x108>)
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4a08      	ldr	r2, [pc, #32]	; (8003abc <xTaskPriorityDisinherit+0x104>)
 8003a9a:	441a      	add	r2, r3
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4610      	mov	r0, r2
 8003aa4:	f7fe fb1f 	bl	80020e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003aac:	697b      	ldr	r3, [r7, #20]
	}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000280 	.word	0x20000280
 8003abc:	20000284 	.word	0x20000284
 8003ac0:	20000388 	.word	0x20000388

08003ac4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 8088 	beq.w	8003bee <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10a      	bne.n	8003afc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8003ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aea:	f383 8811 	msr	BASEPRI, r3
 8003aee:	f3bf 8f6f 	isb	sy
 8003af2:	f3bf 8f4f 	dsb	sy
 8003af6:	60fb      	str	r3, [r7, #12]
}
 8003af8:	bf00      	nop
 8003afa:	e7fe      	b.n	8003afa <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d902      	bls.n	8003b0c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	e002      	b.n	8003b12 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b10:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b16:	69fa      	ldr	r2, [r7, #28]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d068      	beq.n	8003bee <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d163      	bne.n	8003bee <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003b26:	4b34      	ldr	r3, [pc, #208]	; (8003bf8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d10a      	bne.n	8003b46 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	60bb      	str	r3, [r7, #8]
}
 8003b42:	bf00      	nop
 8003b44:	e7fe      	b.n	8003b44 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	69fa      	ldr	r2, [r7, #28]
 8003b50:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	db04      	blt.n	8003b64 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	f1c3 0207 	rsb	r2, r3, #7
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	6959      	ldr	r1, [r3, #20]
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4a22      	ldr	r2, [pc, #136]	; (8003bfc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003b74:	4413      	add	r3, r2
 8003b76:	4299      	cmp	r1, r3
 8003b78:	d101      	bne.n	8003b7e <vTaskPriorityDisinheritAfterTimeout+0xba>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d034      	beq.n	8003bee <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	3304      	adds	r3, #4
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fe fb07 	bl	800219c <uxListRemove>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d115      	bne.n	8003bc0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b98:	4918      	ldr	r1, [pc, #96]	; (8003bfc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10a      	bne.n	8003bc0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bae:	2201      	movs	r2, #1
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	43da      	mvns	r2, r3
 8003bb6:	4b12      	ldr	r3, [pc, #72]	; (8003c00 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	4a10      	ldr	r2, [pc, #64]	; (8003c00 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003bbe:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	4a0c      	ldr	r2, [pc, #48]	; (8003c00 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4a07      	ldr	r2, [pc, #28]	; (8003bfc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003be0:	441a      	add	r2, r3
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	3304      	adds	r3, #4
 8003be6:	4619      	mov	r1, r3
 8003be8:	4610      	mov	r0, r2
 8003bea:	f7fe fa7c 	bl	80020e6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003bee:	bf00      	nop
 8003bf0:	3720      	adds	r7, #32
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	20000280 	.word	0x20000280
 8003bfc:	20000284 	.word	0x20000284
 8003c00:	20000388 	.word	0x20000388

08003c04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003c08:	4b07      	ldr	r3, [pc, #28]	; (8003c28 <pvTaskIncrementMutexHeldCount+0x24>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d004      	beq.n	8003c1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003c10:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <pvTaskIncrementMutexHeldCount+0x24>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c16:	3201      	adds	r2, #1
 8003c18:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8003c1a:	4b03      	ldr	r3, [pc, #12]	; (8003c28 <pvTaskIncrementMutexHeldCount+0x24>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
	}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	20000280 	.word	0x20000280

08003c2c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c36:	4b29      	ldr	r3, [pc, #164]	; (8003cdc <prvAddCurrentTaskToDelayedList+0xb0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c3c:	4b28      	ldr	r3, [pc, #160]	; (8003ce0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3304      	adds	r3, #4
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fe faaa 	bl	800219c <uxListRemove>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10b      	bne.n	8003c66 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003c4e:	4b24      	ldr	r3, [pc, #144]	; (8003ce0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c54:	2201      	movs	r2, #1
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43da      	mvns	r2, r3
 8003c5c:	4b21      	ldr	r3, [pc, #132]	; (8003ce4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4013      	ands	r3, r2
 8003c62:	4a20      	ldr	r2, [pc, #128]	; (8003ce4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003c64:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6c:	d10a      	bne.n	8003c84 <prvAddCurrentTaskToDelayedList+0x58>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d007      	beq.n	8003c84 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c74:	4b1a      	ldr	r3, [pc, #104]	; (8003ce0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	481a      	ldr	r0, [pc, #104]	; (8003ce8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003c7e:	f7fe fa32 	bl	80020e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003c82:	e026      	b.n	8003cd2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4413      	add	r3, r2
 8003c8a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c8c:	4b14      	ldr	r3, [pc, #80]	; (8003ce0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d209      	bcs.n	8003cb0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c9c:	4b13      	ldr	r3, [pc, #76]	; (8003cec <prvAddCurrentTaskToDelayedList+0xc0>)
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4610      	mov	r0, r2
 8003caa:	f7fe fa3f 	bl	800212c <vListInsert>
}
 8003cae:	e010      	b.n	8003cd2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cb0:	4b0f      	ldr	r3, [pc, #60]	; (8003cf0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	f7fe fa35 	bl	800212c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003cc2:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d202      	bcs.n	8003cd2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003ccc:	4a09      	ldr	r2, [pc, #36]	; (8003cf4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	6013      	str	r3, [r2, #0]
}
 8003cd2:	bf00      	nop
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	20000384 	.word	0x20000384
 8003ce0:	20000280 	.word	0x20000280
 8003ce4:	20000388 	.word	0x20000388
 8003ce8:	2000036c 	.word	0x2000036c
 8003cec:	2000033c 	.word	0x2000033c
 8003cf0:	20000338 	.word	0x20000338
 8003cf4:	200003a0 	.word	0x200003a0

08003cf8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	3b04      	subs	r3, #4
 8003d08:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	3b04      	subs	r3, #4
 8003d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f023 0201 	bic.w	r2, r3, #1
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	3b04      	subs	r3, #4
 8003d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d28:	4a08      	ldr	r2, [pc, #32]	; (8003d4c <pxPortInitialiseStack+0x54>)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	3b14      	subs	r3, #20
 8003d32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	3b20      	subs	r3, #32
 8003d3e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003d40:	68fb      	ldr	r3, [r7, #12]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr
 8003d4c:	08003d51 	.word	0x08003d51

08003d50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003d5a:	4b12      	ldr	r3, [pc, #72]	; (8003da4 <prvTaskExitError+0x54>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d62:	d00a      	beq.n	8003d7a <prvTaskExitError+0x2a>
	__asm volatile
 8003d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	60fb      	str	r3, [r7, #12]
}
 8003d76:	bf00      	nop
 8003d78:	e7fe      	b.n	8003d78 <prvTaskExitError+0x28>
	__asm volatile
 8003d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7e:	f383 8811 	msr	BASEPRI, r3
 8003d82:	f3bf 8f6f 	isb	sy
 8003d86:	f3bf 8f4f 	dsb	sy
 8003d8a:	60bb      	str	r3, [r7, #8]
}
 8003d8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003d8e:	bf00      	nop
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0fc      	beq.n	8003d90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003d96:	bf00      	nop
 8003d98:	bf00      	nop
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bc80      	pop	{r7}
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	2000000c 	.word	0x2000000c
	...

08003db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003db0:	4b07      	ldr	r3, [pc, #28]	; (8003dd0 <pxCurrentTCBConst2>)
 8003db2:	6819      	ldr	r1, [r3, #0]
 8003db4:	6808      	ldr	r0, [r1, #0]
 8003db6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003dba:	f380 8809 	msr	PSP, r0
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f04f 0000 	mov.w	r0, #0
 8003dc6:	f380 8811 	msr	BASEPRI, r0
 8003dca:	f04e 0e0d 	orr.w	lr, lr, #13
 8003dce:	4770      	bx	lr

08003dd0 <pxCurrentTCBConst2>:
 8003dd0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003dd4:	bf00      	nop
 8003dd6:	bf00      	nop

08003dd8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003dd8:	4806      	ldr	r0, [pc, #24]	; (8003df4 <prvPortStartFirstTask+0x1c>)
 8003dda:	6800      	ldr	r0, [r0, #0]
 8003ddc:	6800      	ldr	r0, [r0, #0]
 8003dde:	f380 8808 	msr	MSP, r0
 8003de2:	b662      	cpsie	i
 8003de4:	b661      	cpsie	f
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	df00      	svc	0
 8003df0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003df2:	bf00      	nop
 8003df4:	e000ed08 	.word	0xe000ed08

08003df8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003dfe:	4b32      	ldr	r3, [pc, #200]	; (8003ec8 <xPortStartScheduler+0xd0>)
 8003e00:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	22ff      	movs	r2, #255	; 0xff
 8003e0e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e18:	78fb      	ldrb	r3, [r7, #3]
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	4b2a      	ldr	r3, [pc, #168]	; (8003ecc <xPortStartScheduler+0xd4>)
 8003e24:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e26:	4b2a      	ldr	r3, [pc, #168]	; (8003ed0 <xPortStartScheduler+0xd8>)
 8003e28:	2207      	movs	r2, #7
 8003e2a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e2c:	e009      	b.n	8003e42 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003e2e:	4b28      	ldr	r3, [pc, #160]	; (8003ed0 <xPortStartScheduler+0xd8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	4a26      	ldr	r2, [pc, #152]	; (8003ed0 <xPortStartScheduler+0xd8>)
 8003e36:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e42:	78fb      	ldrb	r3, [r7, #3]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4a:	2b80      	cmp	r3, #128	; 0x80
 8003e4c:	d0ef      	beq.n	8003e2e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e4e:	4b20      	ldr	r3, [pc, #128]	; (8003ed0 <xPortStartScheduler+0xd8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f1c3 0307 	rsb	r3, r3, #7
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d00a      	beq.n	8003e70 <xPortStartScheduler+0x78>
	__asm volatile
 8003e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	60bb      	str	r3, [r7, #8]
}
 8003e6c:	bf00      	nop
 8003e6e:	e7fe      	b.n	8003e6e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e70:	4b17      	ldr	r3, [pc, #92]	; (8003ed0 <xPortStartScheduler+0xd8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	021b      	lsls	r3, r3, #8
 8003e76:	4a16      	ldr	r2, [pc, #88]	; (8003ed0 <xPortStartScheduler+0xd8>)
 8003e78:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e7a:	4b15      	ldr	r3, [pc, #84]	; (8003ed0 <xPortStartScheduler+0xd8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e82:	4a13      	ldr	r2, [pc, #76]	; (8003ed0 <xPortStartScheduler+0xd8>)
 8003e84:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003e8e:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <xPortStartScheduler+0xdc>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a10      	ldr	r2, [pc, #64]	; (8003ed4 <xPortStartScheduler+0xdc>)
 8003e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003e9a:	4b0e      	ldr	r3, [pc, #56]	; (8003ed4 <xPortStartScheduler+0xdc>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a0d      	ldr	r2, [pc, #52]	; (8003ed4 <xPortStartScheduler+0xdc>)
 8003ea0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ea4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ea6:	f000 f8b9 	bl	800401c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003eaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <xPortStartScheduler+0xe0>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003eb0:	f7ff ff92 	bl	8003dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003eb4:	f7ff fa9e 	bl	80033f4 <vTaskSwitchContext>
	prvTaskExitError();
 8003eb8:	f7ff ff4a 	bl	8003d50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	e000e400 	.word	0xe000e400
 8003ecc:	200003ac 	.word	0x200003ac
 8003ed0:	200003b0 	.word	0x200003b0
 8003ed4:	e000ed20 	.word	0xe000ed20
 8003ed8:	2000000c 	.word	0x2000000c

08003edc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
	__asm volatile
 8003ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee6:	f383 8811 	msr	BASEPRI, r3
 8003eea:	f3bf 8f6f 	isb	sy
 8003eee:	f3bf 8f4f 	dsb	sy
 8003ef2:	607b      	str	r3, [r7, #4]
}
 8003ef4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003ef6:	4b0f      	ldr	r3, [pc, #60]	; (8003f34 <vPortEnterCritical+0x58>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3301      	adds	r3, #1
 8003efc:	4a0d      	ldr	r2, [pc, #52]	; (8003f34 <vPortEnterCritical+0x58>)
 8003efe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003f00:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <vPortEnterCritical+0x58>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d10f      	bne.n	8003f28 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f08:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <vPortEnterCritical+0x5c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <vPortEnterCritical+0x4c>
	__asm volatile
 8003f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	603b      	str	r3, [r7, #0]
}
 8003f24:	bf00      	nop
 8003f26:	e7fe      	b.n	8003f26 <vPortEnterCritical+0x4a>
	}
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bc80      	pop	{r7}
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	2000000c 	.word	0x2000000c
 8003f38:	e000ed04 	.word	0xe000ed04

08003f3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003f42:	4b11      	ldr	r3, [pc, #68]	; (8003f88 <vPortExitCritical+0x4c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10a      	bne.n	8003f60 <vPortExitCritical+0x24>
	__asm volatile
 8003f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4e:	f383 8811 	msr	BASEPRI, r3
 8003f52:	f3bf 8f6f 	isb	sy
 8003f56:	f3bf 8f4f 	dsb	sy
 8003f5a:	607b      	str	r3, [r7, #4]
}
 8003f5c:	bf00      	nop
 8003f5e:	e7fe      	b.n	8003f5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003f60:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <vPortExitCritical+0x4c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	3b01      	subs	r3, #1
 8003f66:	4a08      	ldr	r2, [pc, #32]	; (8003f88 <vPortExitCritical+0x4c>)
 8003f68:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003f6a:	4b07      	ldr	r3, [pc, #28]	; (8003f88 <vPortExitCritical+0x4c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d105      	bne.n	8003f7e <vPortExitCritical+0x42>
 8003f72:	2300      	movs	r3, #0
 8003f74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	f383 8811 	msr	BASEPRI, r3
}
 8003f7c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr
 8003f88:	2000000c 	.word	0x2000000c
 8003f8c:	00000000 	.word	0x00000000

08003f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003f90:	f3ef 8009 	mrs	r0, PSP
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	4b0d      	ldr	r3, [pc, #52]	; (8003fd0 <pxCurrentTCBConst>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003fa0:	6010      	str	r0, [r2, #0]
 8003fa2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003fa6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003faa:	f380 8811 	msr	BASEPRI, r0
 8003fae:	f7ff fa21 	bl	80033f4 <vTaskSwitchContext>
 8003fb2:	f04f 0000 	mov.w	r0, #0
 8003fb6:	f380 8811 	msr	BASEPRI, r0
 8003fba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003fbe:	6819      	ldr	r1, [r3, #0]
 8003fc0:	6808      	ldr	r0, [r1, #0]
 8003fc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003fc6:	f380 8809 	msr	PSP, r0
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	4770      	bx	lr

08003fd0 <pxCurrentTCBConst>:
 8003fd0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003fd4:	bf00      	nop
 8003fd6:	bf00      	nop

08003fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8003fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	607b      	str	r3, [r7, #4]
}
 8003ff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003ff2:	f7ff f941 	bl	8003278 <xTaskIncrementTick>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003ffc:	4b06      	ldr	r3, [pc, #24]	; (8004018 <SysTick_Handler+0x40>)
 8003ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	2300      	movs	r3, #0
 8004006:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	f383 8811 	msr	BASEPRI, r3
}
 800400e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004010:	bf00      	nop
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	e000ed04 	.word	0xe000ed04

0800401c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004020:	4b0a      	ldr	r3, [pc, #40]	; (800404c <vPortSetupTimerInterrupt+0x30>)
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004026:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <vPortSetupTimerInterrupt+0x34>)
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800402c:	4b09      	ldr	r3, [pc, #36]	; (8004054 <vPortSetupTimerInterrupt+0x38>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a09      	ldr	r2, [pc, #36]	; (8004058 <vPortSetupTimerInterrupt+0x3c>)
 8004032:	fba2 2303 	umull	r2, r3, r2, r3
 8004036:	099b      	lsrs	r3, r3, #6
 8004038:	4a08      	ldr	r2, [pc, #32]	; (800405c <vPortSetupTimerInterrupt+0x40>)
 800403a:	3b01      	subs	r3, #1
 800403c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800403e:	4b03      	ldr	r3, [pc, #12]	; (800404c <vPortSetupTimerInterrupt+0x30>)
 8004040:	2207      	movs	r2, #7
 8004042:	601a      	str	r2, [r3, #0]
}
 8004044:	bf00      	nop
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr
 800404c:	e000e010 	.word	0xe000e010
 8004050:	e000e018 	.word	0xe000e018
 8004054:	20000000 	.word	0x20000000
 8004058:	10624dd3 	.word	0x10624dd3
 800405c:	e000e014 	.word	0xe000e014

08004060 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004066:	f3ef 8305 	mrs	r3, IPSR
 800406a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b0f      	cmp	r3, #15
 8004070:	d914      	bls.n	800409c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004072:	4a16      	ldr	r2, [pc, #88]	; (80040cc <vPortValidateInterruptPriority+0x6c>)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4413      	add	r3, r2
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800407c:	4b14      	ldr	r3, [pc, #80]	; (80040d0 <vPortValidateInterruptPriority+0x70>)
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	7afa      	ldrb	r2, [r7, #11]
 8004082:	429a      	cmp	r2, r3
 8004084:	d20a      	bcs.n	800409c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408a:	f383 8811 	msr	BASEPRI, r3
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	607b      	str	r3, [r7, #4]
}
 8004098:	bf00      	nop
 800409a:	e7fe      	b.n	800409a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800409c:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <vPortValidateInterruptPriority+0x74>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80040a4:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <vPortValidateInterruptPriority+0x78>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d90a      	bls.n	80040c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80040ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	603b      	str	r3, [r7, #0]
}
 80040be:	bf00      	nop
 80040c0:	e7fe      	b.n	80040c0 <vPortValidateInterruptPriority+0x60>
	}
 80040c2:	bf00      	nop
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bc80      	pop	{r7}
 80040ca:	4770      	bx	lr
 80040cc:	e000e3f0 	.word	0xe000e3f0
 80040d0:	200003ac 	.word	0x200003ac
 80040d4:	e000ed0c 	.word	0xe000ed0c
 80040d8:	200003b0 	.word	0x200003b0

080040dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08a      	sub	sp, #40	; 0x28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80040e4:	2300      	movs	r3, #0
 80040e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80040e8:	f7ff f81c 	bl	8003124 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80040ec:	4b58      	ldr	r3, [pc, #352]	; (8004250 <pvPortMalloc+0x174>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80040f4:	f000 f910 	bl	8004318 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80040f8:	4b56      	ldr	r3, [pc, #344]	; (8004254 <pvPortMalloc+0x178>)
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4013      	ands	r3, r2
 8004100:	2b00      	cmp	r3, #0
 8004102:	f040 808e 	bne.w	8004222 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d01d      	beq.n	8004148 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800410c:	2208      	movs	r2, #8
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4413      	add	r3, r2
 8004112:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	2b00      	cmp	r3, #0
 800411c:	d014      	beq.n	8004148 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f023 0307 	bic.w	r3, r3, #7
 8004124:	3308      	adds	r3, #8
 8004126:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <pvPortMalloc+0x6c>
	__asm volatile
 8004132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004136:	f383 8811 	msr	BASEPRI, r3
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	617b      	str	r3, [r7, #20]
}
 8004144:	bf00      	nop
 8004146:	e7fe      	b.n	8004146 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d069      	beq.n	8004222 <pvPortMalloc+0x146>
 800414e:	4b42      	ldr	r3, [pc, #264]	; (8004258 <pvPortMalloc+0x17c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	429a      	cmp	r2, r3
 8004156:	d864      	bhi.n	8004222 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004158:	4b40      	ldr	r3, [pc, #256]	; (800425c <pvPortMalloc+0x180>)
 800415a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800415c:	4b3f      	ldr	r3, [pc, #252]	; (800425c <pvPortMalloc+0x180>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004162:	e004      	b.n	800416e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	429a      	cmp	r2, r3
 8004176:	d903      	bls.n	8004180 <pvPortMalloc+0xa4>
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1f1      	bne.n	8004164 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004180:	4b33      	ldr	r3, [pc, #204]	; (8004250 <pvPortMalloc+0x174>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004186:	429a      	cmp	r2, r3
 8004188:	d04b      	beq.n	8004222 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2208      	movs	r2, #8
 8004190:	4413      	add	r3, r2
 8004192:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	1ad2      	subs	r2, r2, r3
 80041a4:	2308      	movs	r3, #8
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d91f      	bls.n	80041ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80041ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4413      	add	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <pvPortMalloc+0xf8>
	__asm volatile
 80041be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	613b      	str	r3, [r7, #16]
}
 80041d0:	bf00      	nop
 80041d2:	e7fe      	b.n	80041d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	1ad2      	subs	r2, r2, r3
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80041e6:	69b8      	ldr	r0, [r7, #24]
 80041e8:	f000 f8f8 	bl	80043dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80041ec:	4b1a      	ldr	r3, [pc, #104]	; (8004258 <pvPortMalloc+0x17c>)
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	4a18      	ldr	r2, [pc, #96]	; (8004258 <pvPortMalloc+0x17c>)
 80041f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80041fa:	4b17      	ldr	r3, [pc, #92]	; (8004258 <pvPortMalloc+0x17c>)
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	4b18      	ldr	r3, [pc, #96]	; (8004260 <pvPortMalloc+0x184>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d203      	bcs.n	800420e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004206:	4b14      	ldr	r3, [pc, #80]	; (8004258 <pvPortMalloc+0x17c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a15      	ldr	r2, [pc, #84]	; (8004260 <pvPortMalloc+0x184>)
 800420c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	4b10      	ldr	r3, [pc, #64]	; (8004254 <pvPortMalloc+0x178>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	431a      	orrs	r2, r3
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004222:	f7fe ff8d 	bl	8003140 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <pvPortMalloc+0x16a>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	60fb      	str	r3, [r7, #12]
}
 8004242:	bf00      	nop
 8004244:	e7fe      	b.n	8004244 <pvPortMalloc+0x168>
	return pvReturn;
 8004246:	69fb      	ldr	r3, [r7, #28]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3728      	adds	r7, #40	; 0x28
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	20000fbc 	.word	0x20000fbc
 8004254:	20000fc8 	.word	0x20000fc8
 8004258:	20000fc0 	.word	0x20000fc0
 800425c:	20000fb4 	.word	0x20000fb4
 8004260:	20000fc4 	.word	0x20000fc4

08004264 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d048      	beq.n	8004308 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004276:	2308      	movs	r3, #8
 8004278:	425b      	negs	r3, r3
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	4413      	add	r3, r2
 800427e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	4b21      	ldr	r3, [pc, #132]	; (8004310 <vPortFree+0xac>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4013      	ands	r3, r2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10a      	bne.n	80042a8 <vPortFree+0x44>
	__asm volatile
 8004292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	60fb      	str	r3, [r7, #12]
}
 80042a4:	bf00      	nop
 80042a6:	e7fe      	b.n	80042a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00a      	beq.n	80042c6 <vPortFree+0x62>
	__asm volatile
 80042b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	60bb      	str	r3, [r7, #8]
}
 80042c2:	bf00      	nop
 80042c4:	e7fe      	b.n	80042c4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	4b11      	ldr	r3, [pc, #68]	; (8004310 <vPortFree+0xac>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4013      	ands	r3, r2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d019      	beq.n	8004308 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d115      	bne.n	8004308 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <vPortFree+0xac>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	43db      	mvns	r3, r3
 80042e6:	401a      	ands	r2, r3
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80042ec:	f7fe ff1a 	bl	8003124 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	4b07      	ldr	r3, [pc, #28]	; (8004314 <vPortFree+0xb0>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4413      	add	r3, r2
 80042fa:	4a06      	ldr	r2, [pc, #24]	; (8004314 <vPortFree+0xb0>)
 80042fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80042fe:	6938      	ldr	r0, [r7, #16]
 8004300:	f000 f86c 	bl	80043dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004304:	f7fe ff1c 	bl	8003140 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004308:	bf00      	nop
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20000fc8 	.word	0x20000fc8
 8004314:	20000fc0 	.word	0x20000fc0

08004318 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800431e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004322:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004324:	4b27      	ldr	r3, [pc, #156]	; (80043c4 <prvHeapInit+0xac>)
 8004326:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00c      	beq.n	800434c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	3307      	adds	r3, #7
 8004336:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 0307 	bic.w	r3, r3, #7
 800433e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	4a1f      	ldr	r2, [pc, #124]	; (80043c4 <prvHeapInit+0xac>)
 8004348:	4413      	add	r3, r2
 800434a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004350:	4a1d      	ldr	r2, [pc, #116]	; (80043c8 <prvHeapInit+0xb0>)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004356:	4b1c      	ldr	r3, [pc, #112]	; (80043c8 <prvHeapInit+0xb0>)
 8004358:	2200      	movs	r2, #0
 800435a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	4413      	add	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004364:	2208      	movs	r2, #8
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	1a9b      	subs	r3, r3, r2
 800436a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 0307 	bic.w	r3, r3, #7
 8004372:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4a15      	ldr	r2, [pc, #84]	; (80043cc <prvHeapInit+0xb4>)
 8004378:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800437a:	4b14      	ldr	r3, [pc, #80]	; (80043cc <prvHeapInit+0xb4>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2200      	movs	r2, #0
 8004380:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004382:	4b12      	ldr	r3, [pc, #72]	; (80043cc <prvHeapInit+0xb4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	1ad2      	subs	r2, r2, r3
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004398:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <prvHeapInit+0xb4>)
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	4a0a      	ldr	r2, [pc, #40]	; (80043d0 <prvHeapInit+0xb8>)
 80043a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	4a09      	ldr	r2, [pc, #36]	; (80043d4 <prvHeapInit+0xbc>)
 80043ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80043b0:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <prvHeapInit+0xc0>)
 80043b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80043b6:	601a      	str	r2, [r3, #0]
}
 80043b8:	bf00      	nop
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	bc80      	pop	{r7}
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	200003b4 	.word	0x200003b4
 80043c8:	20000fb4 	.word	0x20000fb4
 80043cc:	20000fbc 	.word	0x20000fbc
 80043d0:	20000fc4 	.word	0x20000fc4
 80043d4:	20000fc0 	.word	0x20000fc0
 80043d8:	20000fc8 	.word	0x20000fc8

080043dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80043e4:	4b27      	ldr	r3, [pc, #156]	; (8004484 <prvInsertBlockIntoFreeList+0xa8>)
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	e002      	b.n	80043f0 <prvInsertBlockIntoFreeList+0x14>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d8f7      	bhi.n	80043ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	4413      	add	r3, r2
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	429a      	cmp	r2, r3
 800440a:	d108      	bne.n	800441e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	441a      	add	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	441a      	add	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d118      	bne.n	8004464 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	4b14      	ldr	r3, [pc, #80]	; (8004488 <prvInsertBlockIntoFreeList+0xac>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d00d      	beq.n	800445a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	441a      	add	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	e008      	b.n	800446c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800445a:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <prvInsertBlockIntoFreeList+0xac>)
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	e003      	b.n	800446c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	429a      	cmp	r2, r3
 8004472:	d002      	beq.n	800447a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800447a:	bf00      	nop
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr
 8004484:	20000fb4 	.word	0x20000fb4
 8004488:	20000fbc 	.word	0x20000fbc

0800448c <__libc_init_array>:
 800448c:	b570      	push	{r4, r5, r6, lr}
 800448e:	2600      	movs	r6, #0
 8004490:	4d0c      	ldr	r5, [pc, #48]	; (80044c4 <__libc_init_array+0x38>)
 8004492:	4c0d      	ldr	r4, [pc, #52]	; (80044c8 <__libc_init_array+0x3c>)
 8004494:	1b64      	subs	r4, r4, r5
 8004496:	10a4      	asrs	r4, r4, #2
 8004498:	42a6      	cmp	r6, r4
 800449a:	d109      	bne.n	80044b0 <__libc_init_array+0x24>
 800449c:	f000 f830 	bl	8004500 <_init>
 80044a0:	2600      	movs	r6, #0
 80044a2:	4d0a      	ldr	r5, [pc, #40]	; (80044cc <__libc_init_array+0x40>)
 80044a4:	4c0a      	ldr	r4, [pc, #40]	; (80044d0 <__libc_init_array+0x44>)
 80044a6:	1b64      	subs	r4, r4, r5
 80044a8:	10a4      	asrs	r4, r4, #2
 80044aa:	42a6      	cmp	r6, r4
 80044ac:	d105      	bne.n	80044ba <__libc_init_array+0x2e>
 80044ae:	bd70      	pop	{r4, r5, r6, pc}
 80044b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b4:	4798      	blx	r3
 80044b6:	3601      	adds	r6, #1
 80044b8:	e7ee      	b.n	8004498 <__libc_init_array+0xc>
 80044ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80044be:	4798      	blx	r3
 80044c0:	3601      	adds	r6, #1
 80044c2:	e7f2      	b.n	80044aa <__libc_init_array+0x1e>
 80044c4:	08004708 	.word	0x08004708
 80044c8:	08004708 	.word	0x08004708
 80044cc:	08004708 	.word	0x08004708
 80044d0:	0800470c 	.word	0x0800470c

080044d4 <memcpy>:
 80044d4:	440a      	add	r2, r1
 80044d6:	4291      	cmp	r1, r2
 80044d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80044dc:	d100      	bne.n	80044e0 <memcpy+0xc>
 80044de:	4770      	bx	lr
 80044e0:	b510      	push	{r4, lr}
 80044e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044e6:	4291      	cmp	r1, r2
 80044e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044ec:	d1f9      	bne.n	80044e2 <memcpy+0xe>
 80044ee:	bd10      	pop	{r4, pc}

080044f0 <memset>:
 80044f0:	4603      	mov	r3, r0
 80044f2:	4402      	add	r2, r0
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d100      	bne.n	80044fa <memset+0xa>
 80044f8:	4770      	bx	lr
 80044fa:	f803 1b01 	strb.w	r1, [r3], #1
 80044fe:	e7f9      	b.n	80044f4 <memset+0x4>

08004500 <_init>:
 8004500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004502:	bf00      	nop
 8004504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004506:	bc08      	pop	{r3}
 8004508:	469e      	mov	lr, r3
 800450a:	4770      	bx	lr

0800450c <_fini>:
 800450c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450e:	bf00      	nop
 8004510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004512:	bc08      	pop	{r3}
 8004514:	469e      	mov	lr, r3
 8004516:	4770      	bx	lr
