
08timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005534  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08005644  08005644  00015644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800576c  0800576c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800576c  0800576c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800576c  0800576c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800576c  0800576c  0001576c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005770  08005770  00015770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015fc  20000074  080057e8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001670  080057e8  00021670  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000163c3  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000342b  00000000  00000000  00036460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  00039890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001118  00000000  00000000  0003ab10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5cc  00000000  00000000  0003bc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e4c  00000000  00000000  000561f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000943de  00000000  00000000  00069040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fd41e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005448  00000000  00000000  000fd474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	0800562c 	.word	0x0800562c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	0800562c 	.word	0x0800562c

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000090 	.word	0x20000090
 800017c:	200000e4 	.word	0x200000e4

08000180 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000180:	b480      	push	{r7}
 8000182:	b085      	sub	sp, #20
 8000184:	af00      	add	r7, sp, #0
 8000186:	60f8      	str	r0, [r7, #12]
 8000188:	60b9      	str	r1, [r7, #8]
 800018a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	4a07      	ldr	r2, [pc, #28]	; (80001ac <vApplicationGetTimerTaskMemory+0x2c>)
 8000190:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000192:	68bb      	ldr	r3, [r7, #8]
 8000194:	4a06      	ldr	r2, [pc, #24]	; (80001b0 <vApplicationGetTimerTaskMemory+0x30>)
 8000196:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800019e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	200002e4 	.word	0x200002e4
 80001b0:	20000338 	.word	0x20000338

080001b4 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b084      	sub	sp, #16
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	60f8      	str	r0, [r7, #12]
 80001bc:	60b9      	str	r1, [r7, #8]
 80001be:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 50);
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	b29a      	uxth	r2, r3
 80001c4:	2332      	movs	r3, #50	; 0x32
 80001c6:	68b9      	ldr	r1, [r7, #8]
 80001c8:	4803      	ldr	r0, [pc, #12]	; (80001d8 <_write+0x24>)
 80001ca:	f001 fc2e 	bl	8001a2a <HAL_UART_Transmit>
	return len;
 80001ce:	687b      	ldr	r3, [r7, #4]
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	3710      	adds	r7, #16
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	20001590 	.word	0x20001590

080001dc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001dc:	b5b0      	push	{r4, r5, r7, lr}
 80001de:	b08a      	sub	sp, #40	; 0x28
 80001e0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001e2:	f000 faab 	bl	800073c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001e6:	f000 f82f 	bl	8000248 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001ea:	f000 f89d 	bl	8000328 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80001ee:	f000 f871 	bl	80002d4 <MX_USART1_UART_Init>
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* Create the timer(s) */
	/* definition and creation of myTimer01 */
	osTimerDef(myTimer01, Callback01);
 80001f2:	4b11      	ldr	r3, [pc, #68]	; (8000238 <main+0x5c>)
 80001f4:	623b      	str	r3, [r7, #32]
 80001f6:	2300      	movs	r3, #0
 80001f8:	627b      	str	r3, [r7, #36]	; 0x24
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 80001fa:	f107 0320 	add.w	r3, r7, #32
 80001fe:	2200      	movs	r2, #0
 8000200:	2101      	movs	r1, #1
 8000202:	4618      	mov	r0, r3
 8000204:	f001 fe0c 	bl	8001e20 <osTimerCreate>
 8000208:	4603      	mov	r3, r0
 800020a:	4a0c      	ldr	r2, [pc, #48]	; (800023c <main+0x60>)
 800020c:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800020e:	4b0c      	ldr	r3, [pc, #48]	; (8000240 <main+0x64>)
 8000210:	1d3c      	adds	r4, r7, #4
 8000212:	461d      	mov	r5, r3
 8000214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000218:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800021c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2100      	movs	r1, #0
 8000224:	4618      	mov	r0, r3
 8000226:	f001 fd9a 	bl	8001d5e <osThreadCreate>
 800022a:	4603      	mov	r3, r0
 800022c:	4a05      	ldr	r2, [pc, #20]	; (8000244 <main+0x68>)
 800022e:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000230:	f001 fd8e 	bl	8001d50 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000234:	e7fe      	b.n	8000234 <main+0x58>
 8000236:	bf00      	nop
 8000238:	0800039d 	.word	0x0800039d
 800023c:	200015d0 	.word	0x200015d0
 8000240:	08005650 	.word	0x08005650
 8000244:	2000158c 	.word	0x2000158c

08000248 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000248:	b580      	push	{r7, lr}
 800024a:	b090      	sub	sp, #64	; 0x40
 800024c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800024e:	f107 0318 	add.w	r3, r7, #24
 8000252:	2228      	movs	r2, #40	; 0x28
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f004 fa80 	bl	800475c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800026a:	2301      	movs	r3, #1
 800026c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800026e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000272:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000278:	2301      	movs	r3, #1
 800027a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027c:	2302      	movs	r3, #2
 800027e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000280:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000284:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000286:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800028a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800028c:	f107 0318 	add.w	r3, r7, #24
 8000290:	4618      	mov	r0, r3
 8000292:	f000 fce9 	bl	8000c68 <HAL_RCC_OscConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x58>
		Error_Handler();
 800029c:	f000 f89e 	bl	80003dc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002a0:	230f      	movs	r3, #15
 80002a2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a4:	2302      	movs	r3, #2
 80002a6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2102      	movs	r1, #2
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 ff54 	bl	8001168 <HAL_RCC_ClockConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x82>
		Error_Handler();
 80002c6:	f000 f889 	bl	80003dc <Error_Handler>
	}
}
 80002ca:	bf00      	nop
 80002cc:	3740      	adds	r7, #64	; 0x40
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
	...

080002d4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80002d8:	4b11      	ldr	r3, [pc, #68]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 80002da:	4a12      	ldr	r2, [pc, #72]	; (8000324 <MX_USART1_UART_Init+0x50>)
 80002dc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80002de:	4b10      	ldr	r3, [pc, #64]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 80002e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002e4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002e6:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80002ec:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80002f8:	4b09      	ldr	r3, [pc, #36]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 80002fa:	220c      	movs	r2, #12
 80002fc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002fe:	4b08      	ldr	r3, [pc, #32]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 8000300:	2200      	movs	r2, #0
 8000302:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 8000306:	2200      	movs	r2, #0
 8000308:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800030a:	4805      	ldr	r0, [pc, #20]	; (8000320 <MX_USART1_UART_Init+0x4c>)
 800030c:	f001 fb40 	bl	8001990 <HAL_UART_Init>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000316:	f000 f861 	bl	80003dc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20001590 	.word	0x20001590
 8000324:	40013800 	.word	0x40013800

08000328 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <MX_GPIO_Init+0x40>)
 8000330:	699b      	ldr	r3, [r3, #24]
 8000332:	4a0d      	ldr	r2, [pc, #52]	; (8000368 <MX_GPIO_Init+0x40>)
 8000334:	f043 0320 	orr.w	r3, r3, #32
 8000338:	6193      	str	r3, [r2, #24]
 800033a:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <MX_GPIO_Init+0x40>)
 800033c:	699b      	ldr	r3, [r3, #24]
 800033e:	f003 0320 	and.w	r3, r3, #32
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <MX_GPIO_Init+0x40>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	4a07      	ldr	r2, [pc, #28]	; (8000368 <MX_GPIO_Init+0x40>)
 800034c:	f043 0304 	orr.w	r3, r3, #4
 8000350:	6193      	str	r3, [r2, #24]
 8000352:	4b05      	ldr	r3, [pc, #20]	; (8000368 <MX_GPIO_Init+0x40>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	f003 0304 	and.w	r3, r3, #4
 800035a:	603b      	str	r3, [r7, #0]
 800035c:	683b      	ldr	r3, [r7, #0]

}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	40021000 	.word	0x40021000

0800036c <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	osTimerStart(myTimer01Handle, 1000);
 8000374:	4b07      	ldr	r3, [pc, #28]	; (8000394 <StartDefaultTask+0x28>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800037c:	4618      	mov	r0, r3
 800037e:	f001 fd83 	bl	8001e88 <osTimerStart>
	/* Infinite loop */
	for (;;) {
		printf("tarea1\n\r");
 8000382:	4805      	ldr	r0, [pc, #20]	; (8000398 <StartDefaultTask+0x2c>)
 8000384:	f004 f9f2 	bl	800476c <iprintf>
		osDelay(2000);
 8000388:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800038c:	f001 fd33 	bl	8001df6 <osDelay>
		printf("tarea1\n\r");
 8000390:	e7f7      	b.n	8000382 <StartDefaultTask+0x16>
 8000392:	bf00      	nop
 8000394:	200015d0 	.word	0x200015d0
 8000398:	0800566c 	.word	0x0800566c

0800039c <Callback01>:
	}
	/* USER CODE END 5 */
}

/* Callback01 function */
void Callback01(void const *argument) {
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback01 */
	printf("escribiendo el timer\n\r");
 80003a4:	4803      	ldr	r0, [pc, #12]	; (80003b4 <Callback01+0x18>)
 80003a6:	f004 f9e1 	bl	800476c <iprintf>
	/* USER CODE END Callback01 */
}
 80003aa:	bf00      	nop
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	08005678 	.word	0x08005678

080003b8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a04      	ldr	r2, [pc, #16]	; (80003d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d101      	bne.n	80003ce <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80003ca:	f000 f9cd 	bl	8000768 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40012c00 	.word	0x40012c00

080003dc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e0:	b672      	cpsid	i
}
 80003e2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80003e4:	e7fe      	b.n	80003e4 <Error_Handler+0x8>
	...

080003e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ee:	4b18      	ldr	r3, [pc, #96]	; (8000450 <HAL_MspInit+0x68>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	4a17      	ldr	r2, [pc, #92]	; (8000450 <HAL_MspInit+0x68>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	6193      	str	r3, [r2, #24]
 80003fa:	4b15      	ldr	r3, [pc, #84]	; (8000450 <HAL_MspInit+0x68>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	60bb      	str	r3, [r7, #8]
 8000404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000406:	4b12      	ldr	r3, [pc, #72]	; (8000450 <HAL_MspInit+0x68>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	4a11      	ldr	r2, [pc, #68]	; (8000450 <HAL_MspInit+0x68>)
 800040c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000410:	61d3      	str	r3, [r2, #28]
 8000412:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <HAL_MspInit+0x68>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800041e:	2200      	movs	r2, #0
 8000420:	210f      	movs	r1, #15
 8000422:	f06f 0001 	mvn.w	r0, #1
 8000426:	f000 fa70 	bl	800090a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800042a:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <HAL_MspInit+0x6c>)
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	4a04      	ldr	r2, [pc, #16]	; (8000454 <HAL_MspInit+0x6c>)
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000446:	bf00      	nop
 8000448:	3710      	adds	r7, #16
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40021000 	.word	0x40021000
 8000454:	40010000 	.word	0x40010000

08000458 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000460:	f107 0310 	add.w	r3, r7, #16
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	609a      	str	r2, [r3, #8]
 800046c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a1c      	ldr	r2, [pc, #112]	; (80004e4 <HAL_UART_MspInit+0x8c>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d131      	bne.n	80004dc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000478:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <HAL_UART_MspInit+0x90>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a1a      	ldr	r2, [pc, #104]	; (80004e8 <HAL_UART_MspInit+0x90>)
 800047e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <HAL_UART_MspInit+0x90>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000490:	4b15      	ldr	r3, [pc, #84]	; (80004e8 <HAL_UART_MspInit+0x90>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a14      	ldr	r2, [pc, #80]	; (80004e8 <HAL_UART_MspInit+0x90>)
 8000496:	f043 0304 	orr.w	r3, r3, #4
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <HAL_UART_MspInit+0x90>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0304 	and.w	r3, r3, #4
 80004a4:	60bb      	str	r3, [r7, #8]
 80004a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ae:	2302      	movs	r3, #2
 80004b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b2:	2303      	movs	r3, #3
 80004b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b6:	f107 0310 	add.w	r3, r7, #16
 80004ba:	4619      	mov	r1, r3
 80004bc:	480b      	ldr	r0, [pc, #44]	; (80004ec <HAL_UART_MspInit+0x94>)
 80004be:	f000 fa4f 	bl	8000960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c8:	2300      	movs	r3, #0
 80004ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d0:	f107 0310 	add.w	r3, r7, #16
 80004d4:	4619      	mov	r1, r3
 80004d6:	4805      	ldr	r0, [pc, #20]	; (80004ec <HAL_UART_MspInit+0x94>)
 80004d8:	f000 fa42 	bl	8000960 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004dc:	bf00      	nop
 80004de:	3720      	adds	r7, #32
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40013800 	.word	0x40013800
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40010800 	.word	0x40010800

080004f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08c      	sub	sp, #48	; 0x30
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000500:	2200      	movs	r2, #0
 8000502:	6879      	ldr	r1, [r7, #4]
 8000504:	2019      	movs	r0, #25
 8000506:	f000 fa00 	bl	800090a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800050a:	2019      	movs	r0, #25
 800050c:	f000 fa19 	bl	8000942 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000510:	4b1e      	ldr	r3, [pc, #120]	; (800058c <HAL_InitTick+0x9c>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a1d      	ldr	r2, [pc, #116]	; (800058c <HAL_InitTick+0x9c>)
 8000516:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b1b      	ldr	r3, [pc, #108]	; (800058c <HAL_InitTick+0x9c>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000528:	f107 0210 	add.w	r2, r7, #16
 800052c:	f107 0314 	add.w	r3, r7, #20
 8000530:	4611      	mov	r1, r2
 8000532:	4618      	mov	r0, r3
 8000534:	f000 ff94 	bl	8001460 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000538:	f000 ff7e 	bl	8001438 <HAL_RCC_GetPCLK2Freq>
 800053c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800053e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000540:	4a13      	ldr	r2, [pc, #76]	; (8000590 <HAL_InitTick+0xa0>)
 8000542:	fba2 2303 	umull	r2, r3, r2, r3
 8000546:	0c9b      	lsrs	r3, r3, #18
 8000548:	3b01      	subs	r3, #1
 800054a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <HAL_InitTick+0xa4>)
 800054e:	4a12      	ldr	r2, [pc, #72]	; (8000598 <HAL_InitTick+0xa8>)
 8000550:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000552:	4b10      	ldr	r3, [pc, #64]	; (8000594 <HAL_InitTick+0xa4>)
 8000554:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000558:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800055a:	4a0e      	ldr	r2, [pc, #56]	; (8000594 <HAL_InitTick+0xa4>)
 800055c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800055e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <HAL_InitTick+0xa4>)
 8000562:	2200      	movs	r2, #0
 8000564:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <HAL_InitTick+0xa4>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800056c:	4809      	ldr	r0, [pc, #36]	; (8000594 <HAL_InitTick+0xa4>)
 800056e:	f000 ffc5 	bl	80014fc <HAL_TIM_Base_Init>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d104      	bne.n	8000582 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000578:	4806      	ldr	r0, [pc, #24]	; (8000594 <HAL_InitTick+0xa4>)
 800057a:	f001 f817 	bl	80015ac <HAL_TIM_Base_Start_IT>
 800057e:	4603      	mov	r3, r0
 8000580:	e000      	b.n	8000584 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000582:	2301      	movs	r3, #1
}
 8000584:	4618      	mov	r0, r3
 8000586:	3730      	adds	r7, #48	; 0x30
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40021000 	.word	0x40021000
 8000590:	431bde83 	.word	0x431bde83
 8000594:	200015d4 	.word	0x200015d4
 8000598:	40012c00 	.word	0x40012c00

0800059c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <NMI_Handler+0x4>

080005a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <HardFault_Handler+0x4>

080005a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <MemManage_Handler+0x4>

080005ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <BusFault_Handler+0x4>

080005b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <UsageFault_Handler+0x4>

080005ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr
	...

080005c8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80005cc:	4802      	ldr	r0, [pc, #8]	; (80005d8 <TIM1_UP_IRQHandler+0x10>)
 80005ce:	f001 f83f 	bl	8001650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200015d4 	.word	0x200015d4

080005dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
 80005ec:	e00a      	b.n	8000604 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005ee:	f3af 8000 	nop.w
 80005f2:	4601      	mov	r1, r0
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	1c5a      	adds	r2, r3, #1
 80005f8:	60ba      	str	r2, [r7, #8]
 80005fa:	b2ca      	uxtb	r2, r1
 80005fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	3301      	adds	r3, #1
 8000602:	617b      	str	r3, [r7, #20]
 8000604:	697a      	ldr	r2, [r7, #20]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	429a      	cmp	r2, r3
 800060a:	dbf0      	blt.n	80005ee <_read+0x12>
	}

return len;
 800060c:	687b      	ldr	r3, [r7, #4]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3718      	adds	r7, #24
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000616:	b480      	push	{r7}
 8000618:	b083      	sub	sp, #12
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
	return -1;
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000622:	4618      	mov	r0, r3
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800063c:	605a      	str	r2, [r3, #4]
	return 0;
 800063e:	2300      	movs	r3, #0
}
 8000640:	4618      	mov	r0, r3
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr

0800064a <_isatty>:

int _isatty(int file)
{
 800064a:	b480      	push	{r7}
 800064c:	b083      	sub	sp, #12
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
	return 1;
 8000652:	2301      	movs	r3, #1
}
 8000654:	4618      	mov	r0, r3
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr

0800065e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800065e:	b480      	push	{r7}
 8000660:	b085      	sub	sp, #20
 8000662:	af00      	add	r7, sp, #0
 8000664:	60f8      	str	r0, [r7, #12]
 8000666:	60b9      	str	r1, [r7, #8]
 8000668:	607a      	str	r2, [r7, #4]
	return 0;
 800066a:	2300      	movs	r3, #0
}
 800066c:	4618      	mov	r0, r3
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr
	...

08000678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000680:	4a14      	ldr	r2, [pc, #80]	; (80006d4 <_sbrk+0x5c>)
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <_sbrk+0x60>)
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800068c:	4b13      	ldr	r3, [pc, #76]	; (80006dc <_sbrk+0x64>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d102      	bne.n	800069a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <_sbrk+0x64>)
 8000696:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <_sbrk+0x68>)
 8000698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <_sbrk+0x64>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4413      	add	r3, r2
 80006a2:	693a      	ldr	r2, [r7, #16]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d207      	bcs.n	80006b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006a8:	f004 f820 	bl	80046ec <__errno>
 80006ac:	4603      	mov	r3, r0
 80006ae:	220c      	movs	r2, #12
 80006b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	e009      	b.n	80006cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <_sbrk+0x64>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006be:	4b07      	ldr	r3, [pc, #28]	; (80006dc <_sbrk+0x64>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	4a05      	ldr	r2, [pc, #20]	; (80006dc <_sbrk+0x64>)
 80006c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ca:	68fb      	ldr	r3, [r7, #12]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20005000 	.word	0x20005000
 80006d8:	00000400 	.word	0x00000400
 80006dc:	20000738 	.word	0x20000738
 80006e0:	20001670 	.word	0x20001670

080006e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006f2:	e003      	b.n	80006fc <LoopCopyDataInit>

080006f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006f4:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80006f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006fa:	3104      	adds	r1, #4

080006fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006fc:	480a      	ldr	r0, [pc, #40]	; (8000728 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000700:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000702:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000704:	d3f6      	bcc.n	80006f4 <CopyDataInit>
  ldr r2, =_sbss
 8000706:	4a0a      	ldr	r2, [pc, #40]	; (8000730 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000708:	e002      	b.n	8000710 <LoopFillZerobss>

0800070a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800070c:	f842 3b04 	str.w	r3, [r2], #4

08000710 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000712:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000714:	d3f9      	bcc.n	800070a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000716:	f7ff ffe5 	bl	80006e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800071a:	f003 ffed 	bl	80046f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800071e:	f7ff fd5d 	bl	80001dc <main>
  bx lr
 8000722:	4770      	bx	lr
  ldr r3, =_sidata
 8000724:	08005774 	.word	0x08005774
  ldr r0, =_sdata
 8000728:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800072c:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000730:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000734:	20001670 	.word	0x20001670

08000738 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000738:	e7fe      	b.n	8000738 <ADC1_2_IRQHandler>
	...

0800073c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <HAL_Init+0x28>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a07      	ldr	r2, [pc, #28]	; (8000764 <HAL_Init+0x28>)
 8000746:	f043 0310 	orr.w	r3, r3, #16
 800074a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800074c:	2003      	movs	r0, #3
 800074e:	f000 f8d1 	bl	80008f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000752:	2000      	movs	r0, #0
 8000754:	f7ff fecc 	bl	80004f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000758:	f7ff fe46 	bl	80003e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40022000 	.word	0x40022000

08000768 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <HAL_IncTick+0x1c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <HAL_IncTick+0x20>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4413      	add	r3, r2
 8000778:	4a03      	ldr	r2, [pc, #12]	; (8000788 <HAL_IncTick+0x20>)
 800077a:	6013      	str	r3, [r2, #0]
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	20000008 	.word	0x20000008
 8000788:	2000161c 	.word	0x2000161c

0800078c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  return uwTick;
 8000790:	4b02      	ldr	r3, [pc, #8]	; (800079c <HAL_GetTick+0x10>)
 8000792:	681b      	ldr	r3, [r3, #0]
}
 8000794:	4618      	mov	r0, r3
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	2000161c 	.word	0x2000161c

080007a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <__NVIC_SetPriorityGrouping+0x44>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007b6:	68ba      	ldr	r2, [r7, #8]
 80007b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007bc:	4013      	ands	r3, r2
 80007be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007d2:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <__NVIC_SetPriorityGrouping+0x44>)
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	60d3      	str	r3, [r2, #12]
}
 80007d8:	bf00      	nop
 80007da:	3714      	adds	r7, #20
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <__NVIC_GetPriorityGrouping+0x18>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	0a1b      	lsrs	r3, r3, #8
 80007f2:	f003 0307 	and.w	r3, r3, #7
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	2b00      	cmp	r3, #0
 8000814:	db0b      	blt.n	800082e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	f003 021f 	and.w	r2, r3, #31
 800081c:	4906      	ldr	r1, [pc, #24]	; (8000838 <__NVIC_EnableIRQ+0x34>)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	095b      	lsrs	r3, r3, #5
 8000824:	2001      	movs	r0, #1
 8000826:	fa00 f202 	lsl.w	r2, r0, r2
 800082a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr
 8000838:	e000e100 	.word	0xe000e100

0800083c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	6039      	str	r1, [r7, #0]
 8000846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084c:	2b00      	cmp	r3, #0
 800084e:	db0a      	blt.n	8000866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	b2da      	uxtb	r2, r3
 8000854:	490c      	ldr	r1, [pc, #48]	; (8000888 <__NVIC_SetPriority+0x4c>)
 8000856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085a:	0112      	lsls	r2, r2, #4
 800085c:	b2d2      	uxtb	r2, r2
 800085e:	440b      	add	r3, r1
 8000860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000864:	e00a      	b.n	800087c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4908      	ldr	r1, [pc, #32]	; (800088c <__NVIC_SetPriority+0x50>)
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	f003 030f 	and.w	r3, r3, #15
 8000872:	3b04      	subs	r3, #4
 8000874:	0112      	lsls	r2, r2, #4
 8000876:	b2d2      	uxtb	r2, r2
 8000878:	440b      	add	r3, r1
 800087a:	761a      	strb	r2, [r3, #24]
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000e100 	.word	0xe000e100
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000890:	b480      	push	{r7}
 8000892:	b089      	sub	sp, #36	; 0x24
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	f1c3 0307 	rsb	r3, r3, #7
 80008aa:	2b04      	cmp	r3, #4
 80008ac:	bf28      	it	cs
 80008ae:	2304      	movcs	r3, #4
 80008b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	3304      	adds	r3, #4
 80008b6:	2b06      	cmp	r3, #6
 80008b8:	d902      	bls.n	80008c0 <NVIC_EncodePriority+0x30>
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	3b03      	subs	r3, #3
 80008be:	e000      	b.n	80008c2 <NVIC_EncodePriority+0x32>
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c4:	f04f 32ff 	mov.w	r2, #4294967295
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	43da      	mvns	r2, r3
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	401a      	ands	r2, r3
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d8:	f04f 31ff 	mov.w	r1, #4294967295
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	fa01 f303 	lsl.w	r3, r1, r3
 80008e2:	43d9      	mvns	r1, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e8:	4313      	orrs	r3, r2
         );
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3724      	adds	r7, #36	; 0x24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr

080008f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ff4f 	bl	80007a0 <__NVIC_SetPriorityGrouping>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800090a:	b580      	push	{r7, lr}
 800090c:	b086      	sub	sp, #24
 800090e:	af00      	add	r7, sp, #0
 8000910:	4603      	mov	r3, r0
 8000912:	60b9      	str	r1, [r7, #8]
 8000914:	607a      	str	r2, [r7, #4]
 8000916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800091c:	f7ff ff64 	bl	80007e8 <__NVIC_GetPriorityGrouping>
 8000920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	68b9      	ldr	r1, [r7, #8]
 8000926:	6978      	ldr	r0, [r7, #20]
 8000928:	f7ff ffb2 	bl	8000890 <NVIC_EncodePriority>
 800092c:	4602      	mov	r2, r0
 800092e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff81 	bl	800083c <__NVIC_SetPriority>
}
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	4603      	mov	r3, r0
 800094a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800094c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff57 	bl	8000804 <__NVIC_EnableIRQ>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000960:	b480      	push	{r7}
 8000962:	b08b      	sub	sp, #44	; 0x2c
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000972:	e169      	b.n	8000c48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000974:	2201      	movs	r2, #1
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	69fa      	ldr	r2, [r7, #28]
 8000984:	4013      	ands	r3, r2
 8000986:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	429a      	cmp	r2, r3
 800098e:	f040 8158 	bne.w	8000c42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	4a9a      	ldr	r2, [pc, #616]	; (8000c00 <HAL_GPIO_Init+0x2a0>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d05e      	beq.n	8000a5a <HAL_GPIO_Init+0xfa>
 800099c:	4a98      	ldr	r2, [pc, #608]	; (8000c00 <HAL_GPIO_Init+0x2a0>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d875      	bhi.n	8000a8e <HAL_GPIO_Init+0x12e>
 80009a2:	4a98      	ldr	r2, [pc, #608]	; (8000c04 <HAL_GPIO_Init+0x2a4>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d058      	beq.n	8000a5a <HAL_GPIO_Init+0xfa>
 80009a8:	4a96      	ldr	r2, [pc, #600]	; (8000c04 <HAL_GPIO_Init+0x2a4>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d86f      	bhi.n	8000a8e <HAL_GPIO_Init+0x12e>
 80009ae:	4a96      	ldr	r2, [pc, #600]	; (8000c08 <HAL_GPIO_Init+0x2a8>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d052      	beq.n	8000a5a <HAL_GPIO_Init+0xfa>
 80009b4:	4a94      	ldr	r2, [pc, #592]	; (8000c08 <HAL_GPIO_Init+0x2a8>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d869      	bhi.n	8000a8e <HAL_GPIO_Init+0x12e>
 80009ba:	4a94      	ldr	r2, [pc, #592]	; (8000c0c <HAL_GPIO_Init+0x2ac>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d04c      	beq.n	8000a5a <HAL_GPIO_Init+0xfa>
 80009c0:	4a92      	ldr	r2, [pc, #584]	; (8000c0c <HAL_GPIO_Init+0x2ac>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d863      	bhi.n	8000a8e <HAL_GPIO_Init+0x12e>
 80009c6:	4a92      	ldr	r2, [pc, #584]	; (8000c10 <HAL_GPIO_Init+0x2b0>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d046      	beq.n	8000a5a <HAL_GPIO_Init+0xfa>
 80009cc:	4a90      	ldr	r2, [pc, #576]	; (8000c10 <HAL_GPIO_Init+0x2b0>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d85d      	bhi.n	8000a8e <HAL_GPIO_Init+0x12e>
 80009d2:	2b12      	cmp	r3, #18
 80009d4:	d82a      	bhi.n	8000a2c <HAL_GPIO_Init+0xcc>
 80009d6:	2b12      	cmp	r3, #18
 80009d8:	d859      	bhi.n	8000a8e <HAL_GPIO_Init+0x12e>
 80009da:	a201      	add	r2, pc, #4	; (adr r2, 80009e0 <HAL_GPIO_Init+0x80>)
 80009dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e0:	08000a5b 	.word	0x08000a5b
 80009e4:	08000a35 	.word	0x08000a35
 80009e8:	08000a47 	.word	0x08000a47
 80009ec:	08000a89 	.word	0x08000a89
 80009f0:	08000a8f 	.word	0x08000a8f
 80009f4:	08000a8f 	.word	0x08000a8f
 80009f8:	08000a8f 	.word	0x08000a8f
 80009fc:	08000a8f 	.word	0x08000a8f
 8000a00:	08000a8f 	.word	0x08000a8f
 8000a04:	08000a8f 	.word	0x08000a8f
 8000a08:	08000a8f 	.word	0x08000a8f
 8000a0c:	08000a8f 	.word	0x08000a8f
 8000a10:	08000a8f 	.word	0x08000a8f
 8000a14:	08000a8f 	.word	0x08000a8f
 8000a18:	08000a8f 	.word	0x08000a8f
 8000a1c:	08000a8f 	.word	0x08000a8f
 8000a20:	08000a8f 	.word	0x08000a8f
 8000a24:	08000a3d 	.word	0x08000a3d
 8000a28:	08000a51 	.word	0x08000a51
 8000a2c:	4a79      	ldr	r2, [pc, #484]	; (8000c14 <HAL_GPIO_Init+0x2b4>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d013      	beq.n	8000a5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a32:	e02c      	b.n	8000a8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	623b      	str	r3, [r7, #32]
          break;
 8000a3a:	e029      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	3304      	adds	r3, #4
 8000a42:	623b      	str	r3, [r7, #32]
          break;
 8000a44:	e024      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	3308      	adds	r3, #8
 8000a4c:	623b      	str	r3, [r7, #32]
          break;
 8000a4e:	e01f      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	330c      	adds	r3, #12
 8000a56:	623b      	str	r3, [r7, #32]
          break;
 8000a58:	e01a      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d102      	bne.n	8000a68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a62:	2304      	movs	r3, #4
 8000a64:	623b      	str	r3, [r7, #32]
          break;
 8000a66:	e013      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d105      	bne.n	8000a7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a70:	2308      	movs	r3, #8
 8000a72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	69fa      	ldr	r2, [r7, #28]
 8000a78:	611a      	str	r2, [r3, #16]
          break;
 8000a7a:	e009      	b.n	8000a90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a7c:	2308      	movs	r3, #8
 8000a7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	69fa      	ldr	r2, [r7, #28]
 8000a84:	615a      	str	r2, [r3, #20]
          break;
 8000a86:	e003      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
          break;
 8000a8c:	e000      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          break;
 8000a8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	2bff      	cmp	r3, #255	; 0xff
 8000a94:	d801      	bhi.n	8000a9a <HAL_GPIO_Init+0x13a>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	e001      	b.n	8000a9e <HAL_GPIO_Init+0x13e>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	2bff      	cmp	r3, #255	; 0xff
 8000aa4:	d802      	bhi.n	8000aac <HAL_GPIO_Init+0x14c>
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	e002      	b.n	8000ab2 <HAL_GPIO_Init+0x152>
 8000aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aae:	3b08      	subs	r3, #8
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	210f      	movs	r1, #15
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	6a39      	ldr	r1, [r7, #32]
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8000acc:	431a      	orrs	r2, r3
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f000 80b1 	beq.w	8000c42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ae0:	4b4d      	ldr	r3, [pc, #308]	; (8000c18 <HAL_GPIO_Init+0x2b8>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a4c      	ldr	r2, [pc, #304]	; (8000c18 <HAL_GPIO_Init+0x2b8>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b4a      	ldr	r3, [pc, #296]	; (8000c18 <HAL_GPIO_Init+0x2b8>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000af8:	4a48      	ldr	r2, [pc, #288]	; (8000c1c <HAL_GPIO_Init+0x2bc>)
 8000afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afc:	089b      	lsrs	r3, r3, #2
 8000afe:	3302      	adds	r3, #2
 8000b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	f003 0303 	and.w	r3, r3, #3
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	220f      	movs	r2, #15
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	43db      	mvns	r3, r3
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a40      	ldr	r2, [pc, #256]	; (8000c20 <HAL_GPIO_Init+0x2c0>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d013      	beq.n	8000b4c <HAL_GPIO_Init+0x1ec>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a3f      	ldr	r2, [pc, #252]	; (8000c24 <HAL_GPIO_Init+0x2c4>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d00d      	beq.n	8000b48 <HAL_GPIO_Init+0x1e8>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a3e      	ldr	r2, [pc, #248]	; (8000c28 <HAL_GPIO_Init+0x2c8>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d007      	beq.n	8000b44 <HAL_GPIO_Init+0x1e4>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a3d      	ldr	r2, [pc, #244]	; (8000c2c <HAL_GPIO_Init+0x2cc>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d101      	bne.n	8000b40 <HAL_GPIO_Init+0x1e0>
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	e006      	b.n	8000b4e <HAL_GPIO_Init+0x1ee>
 8000b40:	2304      	movs	r3, #4
 8000b42:	e004      	b.n	8000b4e <HAL_GPIO_Init+0x1ee>
 8000b44:	2302      	movs	r3, #2
 8000b46:	e002      	b.n	8000b4e <HAL_GPIO_Init+0x1ee>
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e000      	b.n	8000b4e <HAL_GPIO_Init+0x1ee>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b50:	f002 0203 	and.w	r2, r2, #3
 8000b54:	0092      	lsls	r2, r2, #2
 8000b56:	4093      	lsls	r3, r2
 8000b58:	68fa      	ldr	r2, [r7, #12]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b5e:	492f      	ldr	r1, [pc, #188]	; (8000c1c <HAL_GPIO_Init+0x2bc>)
 8000b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b62:	089b      	lsrs	r3, r3, #2
 8000b64:	3302      	adds	r3, #2
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d006      	beq.n	8000b86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b78:	4b2d      	ldr	r3, [pc, #180]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	492c      	ldr	r1, [pc, #176]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	600b      	str	r3, [r1, #0]
 8000b84:	e006      	b.n	8000b94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b86:	4b2a      	ldr	r3, [pc, #168]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	4928      	ldr	r1, [pc, #160]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000b90:	4013      	ands	r3, r2
 8000b92:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d006      	beq.n	8000bae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ba0:	4b23      	ldr	r3, [pc, #140]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	4922      	ldr	r1, [pc, #136]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	604b      	str	r3, [r1, #4]
 8000bac:	e006      	b.n	8000bbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bae:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000bb0:	685a      	ldr	r2, [r3, #4]
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	491e      	ldr	r1, [pc, #120]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000bb8:	4013      	ands	r3, r2
 8000bba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d006      	beq.n	8000bd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bc8:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000bca:	689a      	ldr	r2, [r3, #8]
 8000bcc:	4918      	ldr	r1, [pc, #96]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	608b      	str	r3, [r1, #8]
 8000bd4:	e006      	b.n	8000be4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000bd8:	689a      	ldr	r2, [r3, #8]
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	4914      	ldr	r1, [pc, #80]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000be0:	4013      	ands	r3, r2
 8000be2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d021      	beq.n	8000c34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000bf2:	68da      	ldr	r2, [r3, #12]
 8000bf4:	490e      	ldr	r1, [pc, #56]	; (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	60cb      	str	r3, [r1, #12]
 8000bfc:	e021      	b.n	8000c42 <HAL_GPIO_Init+0x2e2>
 8000bfe:	bf00      	nop
 8000c00:	10320000 	.word	0x10320000
 8000c04:	10310000 	.word	0x10310000
 8000c08:	10220000 	.word	0x10220000
 8000c0c:	10210000 	.word	0x10210000
 8000c10:	10120000 	.word	0x10120000
 8000c14:	10110000 	.word	0x10110000
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	40010000 	.word	0x40010000
 8000c20:	40010800 	.word	0x40010800
 8000c24:	40010c00 	.word	0x40010c00
 8000c28:	40011000 	.word	0x40011000
 8000c2c:	40011400 	.word	0x40011400
 8000c30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <HAL_GPIO_Init+0x304>)
 8000c36:	68da      	ldr	r2, [r3, #12]
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	4909      	ldr	r1, [pc, #36]	; (8000c64 <HAL_GPIO_Init+0x304>)
 8000c3e:	4013      	ands	r3, r2
 8000c40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c44:	3301      	adds	r3, #1
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f47f ae8e 	bne.w	8000974 <HAL_GPIO_Init+0x14>
  }
}
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	372c      	adds	r7, #44	; 0x2c
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	40010400 	.word	0x40010400

08000c68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d101      	bne.n	8000c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e26c      	b.n	8001154 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f000 8087 	beq.w	8000d96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c88:	4b92      	ldr	r3, [pc, #584]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 030c 	and.w	r3, r3, #12
 8000c90:	2b04      	cmp	r3, #4
 8000c92:	d00c      	beq.n	8000cae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c94:	4b8f      	ldr	r3, [pc, #572]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 030c 	and.w	r3, r3, #12
 8000c9c:	2b08      	cmp	r3, #8
 8000c9e:	d112      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x5e>
 8000ca0:	4b8c      	ldr	r3, [pc, #560]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cac:	d10b      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cae:	4b89      	ldr	r3, [pc, #548]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d06c      	beq.n	8000d94 <HAL_RCC_OscConfig+0x12c>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d168      	bne.n	8000d94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e246      	b.n	8001154 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cce:	d106      	bne.n	8000cde <HAL_RCC_OscConfig+0x76>
 8000cd0:	4b80      	ldr	r3, [pc, #512]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a7f      	ldr	r2, [pc, #508]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cda:	6013      	str	r3, [r2, #0]
 8000cdc:	e02e      	b.n	8000d3c <HAL_RCC_OscConfig+0xd4>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d10c      	bne.n	8000d00 <HAL_RCC_OscConfig+0x98>
 8000ce6:	4b7b      	ldr	r3, [pc, #492]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a7a      	ldr	r2, [pc, #488]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cf0:	6013      	str	r3, [r2, #0]
 8000cf2:	4b78      	ldr	r3, [pc, #480]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a77      	ldr	r2, [pc, #476]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	e01d      	b.n	8000d3c <HAL_RCC_OscConfig+0xd4>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d08:	d10c      	bne.n	8000d24 <HAL_RCC_OscConfig+0xbc>
 8000d0a:	4b72      	ldr	r3, [pc, #456]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a71      	ldr	r2, [pc, #452]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d14:	6013      	str	r3, [r2, #0]
 8000d16:	4b6f      	ldr	r3, [pc, #444]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a6e      	ldr	r2, [pc, #440]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d20:	6013      	str	r3, [r2, #0]
 8000d22:	e00b      	b.n	8000d3c <HAL_RCC_OscConfig+0xd4>
 8000d24:	4b6b      	ldr	r3, [pc, #428]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a6a      	ldr	r2, [pc, #424]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	4b68      	ldr	r3, [pc, #416]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a67      	ldr	r2, [pc, #412]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d013      	beq.n	8000d6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d44:	f7ff fd22 	bl	800078c <HAL_GetTick>
 8000d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d4a:	e008      	b.n	8000d5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d4c:	f7ff fd1e 	bl	800078c <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	2b64      	cmp	r3, #100	; 0x64
 8000d58:	d901      	bls.n	8000d5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e1fa      	b.n	8001154 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d5e:	4b5d      	ldr	r3, [pc, #372]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d0f0      	beq.n	8000d4c <HAL_RCC_OscConfig+0xe4>
 8000d6a:	e014      	b.n	8000d96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d6c:	f7ff fd0e 	bl	800078c <HAL_GetTick>
 8000d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d72:	e008      	b.n	8000d86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d74:	f7ff fd0a 	bl	800078c <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	2b64      	cmp	r3, #100	; 0x64
 8000d80:	d901      	bls.n	8000d86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d82:	2303      	movs	r3, #3
 8000d84:	e1e6      	b.n	8001154 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d86:	4b53      	ldr	r3, [pc, #332]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f0      	bne.n	8000d74 <HAL_RCC_OscConfig+0x10c>
 8000d92:	e000      	b.n	8000d96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d063      	beq.n	8000e6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000da2:	4b4c      	ldr	r3, [pc, #304]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f003 030c 	and.w	r3, r3, #12
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d00b      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dae:	4b49      	ldr	r3, [pc, #292]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 030c 	and.w	r3, r3, #12
 8000db6:	2b08      	cmp	r3, #8
 8000db8:	d11c      	bne.n	8000df4 <HAL_RCC_OscConfig+0x18c>
 8000dba:	4b46      	ldr	r3, [pc, #280]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d116      	bne.n	8000df4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dc6:	4b43      	ldr	r3, [pc, #268]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d005      	beq.n	8000dde <HAL_RCC_OscConfig+0x176>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	691b      	ldr	r3, [r3, #16]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d001      	beq.n	8000dde <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e1ba      	b.n	8001154 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dde:	4b3d      	ldr	r3, [pc, #244]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	00db      	lsls	r3, r3, #3
 8000dec:	4939      	ldr	r1, [pc, #228]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000dee:	4313      	orrs	r3, r2
 8000df0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000df2:	e03a      	b.n	8000e6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	691b      	ldr	r3, [r3, #16]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d020      	beq.n	8000e3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dfc:	4b36      	ldr	r3, [pc, #216]	; (8000ed8 <HAL_RCC_OscConfig+0x270>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e02:	f7ff fcc3 	bl	800078c <HAL_GetTick>
 8000e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e08:	e008      	b.n	8000e1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e0a:	f7ff fcbf 	bl	800078c <HAL_GetTick>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d901      	bls.n	8000e1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e19b      	b.n	8001154 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d0f0      	beq.n	8000e0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e28:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	695b      	ldr	r3, [r3, #20]
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	4927      	ldr	r1, [pc, #156]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	600b      	str	r3, [r1, #0]
 8000e3c:	e015      	b.n	8000e6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e3e:	4b26      	ldr	r3, [pc, #152]	; (8000ed8 <HAL_RCC_OscConfig+0x270>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e44:	f7ff fca2 	bl	800078c <HAL_GetTick>
 8000e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e4a:	e008      	b.n	8000e5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e4c:	f7ff fc9e 	bl	800078c <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d901      	bls.n	8000e5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e17a      	b.n	8001154 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d1f0      	bne.n	8000e4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 0308 	and.w	r3, r3, #8
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d03a      	beq.n	8000eec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d019      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e7e:	4b17      	ldr	r3, [pc, #92]	; (8000edc <HAL_RCC_OscConfig+0x274>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e84:	f7ff fc82 	bl	800078c <HAL_GetTick>
 8000e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e8a:	e008      	b.n	8000e9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e8c:	f7ff fc7e 	bl	800078c <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d901      	bls.n	8000e9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e15a      	b.n	8001154 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0f0      	beq.n	8000e8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f000 fb08 	bl	80014c0 <RCC_Delay>
 8000eb0:	e01c      	b.n	8000eec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_RCC_OscConfig+0x274>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb8:	f7ff fc68 	bl	800078c <HAL_GetTick>
 8000ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ebe:	e00f      	b.n	8000ee0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ec0:	f7ff fc64 	bl	800078c <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d908      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e140      	b.n	8001154 <HAL_RCC_OscConfig+0x4ec>
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	42420000 	.word	0x42420000
 8000edc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee0:	4b9e      	ldr	r3, [pc, #632]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 8000ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1e9      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 0304 	and.w	r3, r3, #4
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f000 80a6 	beq.w	8001046 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000efe:	4b97      	ldr	r3, [pc, #604]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d10d      	bne.n	8000f26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	4b94      	ldr	r3, [pc, #592]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	4a93      	ldr	r2, [pc, #588]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 8000f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f14:	61d3      	str	r3, [r2, #28]
 8000f16:	4b91      	ldr	r3, [pc, #580]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f22:	2301      	movs	r3, #1
 8000f24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f26:	4b8e      	ldr	r3, [pc, #568]	; (8001160 <HAL_RCC_OscConfig+0x4f8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d118      	bne.n	8000f64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f32:	4b8b      	ldr	r3, [pc, #556]	; (8001160 <HAL_RCC_OscConfig+0x4f8>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a8a      	ldr	r2, [pc, #552]	; (8001160 <HAL_RCC_OscConfig+0x4f8>)
 8000f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f3e:	f7ff fc25 	bl	800078c <HAL_GetTick>
 8000f42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f44:	e008      	b.n	8000f58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f46:	f7ff fc21 	bl	800078c <HAL_GetTick>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	2b64      	cmp	r3, #100	; 0x64
 8000f52:	d901      	bls.n	8000f58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f54:	2303      	movs	r3, #3
 8000f56:	e0fd      	b.n	8001154 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f58:	4b81      	ldr	r3, [pc, #516]	; (8001160 <HAL_RCC_OscConfig+0x4f8>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d0f0      	beq.n	8000f46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d106      	bne.n	8000f7a <HAL_RCC_OscConfig+0x312>
 8000f6c:	4b7b      	ldr	r3, [pc, #492]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	4a7a      	ldr	r2, [pc, #488]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6213      	str	r3, [r2, #32]
 8000f78:	e02d      	b.n	8000fd6 <HAL_RCC_OscConfig+0x36e>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10c      	bne.n	8000f9c <HAL_RCC_OscConfig+0x334>
 8000f82:	4b76      	ldr	r3, [pc, #472]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 8000f84:	6a1b      	ldr	r3, [r3, #32]
 8000f86:	4a75      	ldr	r2, [pc, #468]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 8000f88:	f023 0301 	bic.w	r3, r3, #1
 8000f8c:	6213      	str	r3, [r2, #32]
 8000f8e:	4b73      	ldr	r3, [pc, #460]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 8000f90:	6a1b      	ldr	r3, [r3, #32]
 8000f92:	4a72      	ldr	r2, [pc, #456]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 8000f94:	f023 0304 	bic.w	r3, r3, #4
 8000f98:	6213      	str	r3, [r2, #32]
 8000f9a:	e01c      	b.n	8000fd6 <HAL_RCC_OscConfig+0x36e>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	2b05      	cmp	r3, #5
 8000fa2:	d10c      	bne.n	8000fbe <HAL_RCC_OscConfig+0x356>
 8000fa4:	4b6d      	ldr	r3, [pc, #436]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 8000fa6:	6a1b      	ldr	r3, [r3, #32]
 8000fa8:	4a6c      	ldr	r2, [pc, #432]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 8000faa:	f043 0304 	orr.w	r3, r3, #4
 8000fae:	6213      	str	r3, [r2, #32]
 8000fb0:	4b6a      	ldr	r3, [pc, #424]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	4a69      	ldr	r2, [pc, #420]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6213      	str	r3, [r2, #32]
 8000fbc:	e00b      	b.n	8000fd6 <HAL_RCC_OscConfig+0x36e>
 8000fbe:	4b67      	ldr	r3, [pc, #412]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 8000fc0:	6a1b      	ldr	r3, [r3, #32]
 8000fc2:	4a66      	ldr	r2, [pc, #408]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 8000fc4:	f023 0301 	bic.w	r3, r3, #1
 8000fc8:	6213      	str	r3, [r2, #32]
 8000fca:	4b64      	ldr	r3, [pc, #400]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 8000fcc:	6a1b      	ldr	r3, [r3, #32]
 8000fce:	4a63      	ldr	r2, [pc, #396]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 8000fd0:	f023 0304 	bic.w	r3, r3, #4
 8000fd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d015      	beq.n	800100a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fde:	f7ff fbd5 	bl	800078c <HAL_GetTick>
 8000fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fe4:	e00a      	b.n	8000ffc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fe6:	f7ff fbd1 	bl	800078c <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d901      	bls.n	8000ffc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e0ab      	b.n	8001154 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ffc:	4b57      	ldr	r3, [pc, #348]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0ee      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x37e>
 8001008:	e014      	b.n	8001034 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100a:	f7ff fbbf 	bl	800078c <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001010:	e00a      	b.n	8001028 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001012:	f7ff fbbb 	bl	800078c <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001020:	4293      	cmp	r3, r2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e095      	b.n	8001154 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001028:	4b4c      	ldr	r3, [pc, #304]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1ee      	bne.n	8001012 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001034:	7dfb      	ldrb	r3, [r7, #23]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d105      	bne.n	8001046 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800103a:	4b48      	ldr	r3, [pc, #288]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	4a47      	ldr	r2, [pc, #284]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 8001040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001044:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 8081 	beq.w	8001152 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001050:	4b42      	ldr	r3, [pc, #264]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 030c 	and.w	r3, r3, #12
 8001058:	2b08      	cmp	r3, #8
 800105a:	d061      	beq.n	8001120 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69db      	ldr	r3, [r3, #28]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d146      	bne.n	80010f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001064:	4b3f      	ldr	r3, [pc, #252]	; (8001164 <HAL_RCC_OscConfig+0x4fc>)
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106a:	f7ff fb8f 	bl	800078c <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001072:	f7ff fb8b 	bl	800078c <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e067      	b.n	8001154 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001084:	4b35      	ldr	r3, [pc, #212]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1f0      	bne.n	8001072 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001098:	d108      	bne.n	80010ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800109a:	4b30      	ldr	r3, [pc, #192]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	492d      	ldr	r1, [pc, #180]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 80010a8:	4313      	orrs	r3, r2
 80010aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010ac:	4b2b      	ldr	r3, [pc, #172]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a19      	ldr	r1, [r3, #32]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010bc:	430b      	orrs	r3, r1
 80010be:	4927      	ldr	r1, [pc, #156]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 80010c0:	4313      	orrs	r3, r2
 80010c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010c4:	4b27      	ldr	r3, [pc, #156]	; (8001164 <HAL_RCC_OscConfig+0x4fc>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ca:	f7ff fb5f 	bl	800078c <HAL_GetTick>
 80010ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010d0:	e008      	b.n	80010e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010d2:	f7ff fb5b 	bl	800078c <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e037      	b.n	8001154 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010e4:	4b1d      	ldr	r3, [pc, #116]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0f0      	beq.n	80010d2 <HAL_RCC_OscConfig+0x46a>
 80010f0:	e02f      	b.n	8001152 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010f2:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <HAL_RCC_OscConfig+0x4fc>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f8:	f7ff fb48 	bl	800078c <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001100:	f7ff fb44 	bl	800078c <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e020      	b.n	8001154 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1f0      	bne.n	8001100 <HAL_RCC_OscConfig+0x498>
 800111e:	e018      	b.n	8001152 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69db      	ldr	r3, [r3, #28]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d101      	bne.n	800112c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e013      	b.n	8001154 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_RCC_OscConfig+0x4f4>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a1b      	ldr	r3, [r3, #32]
 800113c:	429a      	cmp	r2, r3
 800113e:	d106      	bne.n	800114e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800114a:	429a      	cmp	r2, r3
 800114c:	d001      	beq.n	8001152 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40021000 	.word	0x40021000
 8001160:	40007000 	.word	0x40007000
 8001164:	42420060 	.word	0x42420060

08001168 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d101      	bne.n	800117c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e0d0      	b.n	800131e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800117c:	4b6a      	ldr	r3, [pc, #424]	; (8001328 <HAL_RCC_ClockConfig+0x1c0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	429a      	cmp	r2, r3
 8001188:	d910      	bls.n	80011ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800118a:	4b67      	ldr	r3, [pc, #412]	; (8001328 <HAL_RCC_ClockConfig+0x1c0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f023 0207 	bic.w	r2, r3, #7
 8001192:	4965      	ldr	r1, [pc, #404]	; (8001328 <HAL_RCC_ClockConfig+0x1c0>)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	4313      	orrs	r3, r2
 8001198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800119a:	4b63      	ldr	r3, [pc, #396]	; (8001328 <HAL_RCC_ClockConfig+0x1c0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d001      	beq.n	80011ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e0b8      	b.n	800131e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d020      	beq.n	80011fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d005      	beq.n	80011d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011c4:	4b59      	ldr	r3, [pc, #356]	; (800132c <HAL_RCC_ClockConfig+0x1c4>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	4a58      	ldr	r2, [pc, #352]	; (800132c <HAL_RCC_ClockConfig+0x1c4>)
 80011ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0308 	and.w	r3, r3, #8
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d005      	beq.n	80011e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011dc:	4b53      	ldr	r3, [pc, #332]	; (800132c <HAL_RCC_ClockConfig+0x1c4>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	4a52      	ldr	r2, [pc, #328]	; (800132c <HAL_RCC_ClockConfig+0x1c4>)
 80011e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011e8:	4b50      	ldr	r3, [pc, #320]	; (800132c <HAL_RCC_ClockConfig+0x1c4>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	494d      	ldr	r1, [pc, #308]	; (800132c <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b00      	cmp	r3, #0
 8001204:	d040      	beq.n	8001288 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d107      	bne.n	800121e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120e:	4b47      	ldr	r3, [pc, #284]	; (800132c <HAL_RCC_ClockConfig+0x1c4>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d115      	bne.n	8001246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e07f      	b.n	800131e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b02      	cmp	r3, #2
 8001224:	d107      	bne.n	8001236 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001226:	4b41      	ldr	r3, [pc, #260]	; (800132c <HAL_RCC_ClockConfig+0x1c4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d109      	bne.n	8001246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e073      	b.n	800131e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001236:	4b3d      	ldr	r3, [pc, #244]	; (800132c <HAL_RCC_ClockConfig+0x1c4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e06b      	b.n	800131e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001246:	4b39      	ldr	r3, [pc, #228]	; (800132c <HAL_RCC_ClockConfig+0x1c4>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f023 0203 	bic.w	r2, r3, #3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	4936      	ldr	r1, [pc, #216]	; (800132c <HAL_RCC_ClockConfig+0x1c4>)
 8001254:	4313      	orrs	r3, r2
 8001256:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001258:	f7ff fa98 	bl	800078c <HAL_GetTick>
 800125c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800125e:	e00a      	b.n	8001276 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001260:	f7ff fa94 	bl	800078c <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	f241 3288 	movw	r2, #5000	; 0x1388
 800126e:	4293      	cmp	r3, r2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e053      	b.n	800131e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001276:	4b2d      	ldr	r3, [pc, #180]	; (800132c <HAL_RCC_ClockConfig+0x1c4>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 020c 	and.w	r2, r3, #12
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	429a      	cmp	r2, r3
 8001286:	d1eb      	bne.n	8001260 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001288:	4b27      	ldr	r3, [pc, #156]	; (8001328 <HAL_RCC_ClockConfig+0x1c0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	429a      	cmp	r2, r3
 8001294:	d210      	bcs.n	80012b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001296:	4b24      	ldr	r3, [pc, #144]	; (8001328 <HAL_RCC_ClockConfig+0x1c0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f023 0207 	bic.w	r2, r3, #7
 800129e:	4922      	ldr	r1, [pc, #136]	; (8001328 <HAL_RCC_ClockConfig+0x1c0>)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012a6:	4b20      	ldr	r3, [pc, #128]	; (8001328 <HAL_RCC_ClockConfig+0x1c0>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d001      	beq.n	80012b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e032      	b.n	800131e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d008      	beq.n	80012d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012c4:	4b19      	ldr	r3, [pc, #100]	; (800132c <HAL_RCC_ClockConfig+0x1c4>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	4916      	ldr	r1, [pc, #88]	; (800132c <HAL_RCC_ClockConfig+0x1c4>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d009      	beq.n	80012f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_RCC_ClockConfig+0x1c4>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	490e      	ldr	r1, [pc, #56]	; (800132c <HAL_RCC_ClockConfig+0x1c4>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012f6:	f000 f821 	bl	800133c <HAL_RCC_GetSysClockFreq>
 80012fa:	4602      	mov	r2, r0
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <HAL_RCC_ClockConfig+0x1c4>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	490a      	ldr	r1, [pc, #40]	; (8001330 <HAL_RCC_ClockConfig+0x1c8>)
 8001308:	5ccb      	ldrb	r3, [r1, r3]
 800130a:	fa22 f303 	lsr.w	r3, r2, r3
 800130e:	4a09      	ldr	r2, [pc, #36]	; (8001334 <HAL_RCC_ClockConfig+0x1cc>)
 8001310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_RCC_ClockConfig+0x1d0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f8ea 	bl	80004f0 <HAL_InitTick>

  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40022000 	.word	0x40022000
 800132c:	40021000 	.word	0x40021000
 8001330:	080056bc 	.word	0x080056bc
 8001334:	20000000 	.word	0x20000000
 8001338:	20000004 	.word	0x20000004

0800133c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800133c:	b490      	push	{r4, r7}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001342:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8001344:	1d3c      	adds	r4, r7, #4
 8001346:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001348:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800134c:	f240 2301 	movw	r3, #513	; 0x201
 8001350:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
 800135a:	2300      	movs	r3, #0
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001366:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f003 030c 	and.w	r3, r3, #12
 8001372:	2b04      	cmp	r3, #4
 8001374:	d002      	beq.n	800137c <HAL_RCC_GetSysClockFreq+0x40>
 8001376:	2b08      	cmp	r3, #8
 8001378:	d003      	beq.n	8001382 <HAL_RCC_GetSysClockFreq+0x46>
 800137a:	e02d      	b.n	80013d8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800137c:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800137e:	623b      	str	r3, [r7, #32]
      break;
 8001380:	e02d      	b.n	80013de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	0c9b      	lsrs	r3, r3, #18
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800138e:	4413      	add	r3, r2
 8001390:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001394:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d013      	beq.n	80013c8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	0c5b      	lsrs	r3, r3, #17
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013ae:	4413      	add	r3, r2
 80013b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80013b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013ba:	fb02 f203 	mul.w	r2, r2, r3
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
 80013c6:	e004      	b.n	80013d2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013cc:	fb02 f303 	mul.w	r3, r2, r3
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	623b      	str	r3, [r7, #32]
      break;
 80013d6:	e002      	b.n	80013de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013da:	623b      	str	r3, [r7, #32]
      break;
 80013dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013de:	6a3b      	ldr	r3, [r7, #32]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3728      	adds	r7, #40	; 0x28
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc90      	pop	{r4, r7}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	08005690 	.word	0x08005690
 80013f0:	40021000 	.word	0x40021000
 80013f4:	007a1200 	.word	0x007a1200
 80013f8:	003d0900 	.word	0x003d0900

080013fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001400:	4b02      	ldr	r3, [pc, #8]	; (800140c <HAL_RCC_GetHCLKFreq+0x10>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	20000000 	.word	0x20000000

08001410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001414:	f7ff fff2 	bl	80013fc <HAL_RCC_GetHCLKFreq>
 8001418:	4602      	mov	r2, r0
 800141a:	4b05      	ldr	r3, [pc, #20]	; (8001430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	0a1b      	lsrs	r3, r3, #8
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	4903      	ldr	r1, [pc, #12]	; (8001434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001426:	5ccb      	ldrb	r3, [r1, r3]
 8001428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800142c:	4618      	mov	r0, r3
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40021000 	.word	0x40021000
 8001434:	080056cc 	.word	0x080056cc

08001438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800143c:	f7ff ffde 	bl	80013fc <HAL_RCC_GetHCLKFreq>
 8001440:	4602      	mov	r2, r0
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	0adb      	lsrs	r3, r3, #11
 8001448:	f003 0307 	and.w	r3, r3, #7
 800144c:	4903      	ldr	r1, [pc, #12]	; (800145c <HAL_RCC_GetPCLK2Freq+0x24>)
 800144e:	5ccb      	ldrb	r3, [r1, r3]
 8001450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001454:	4618      	mov	r0, r3
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40021000 	.word	0x40021000
 800145c:	080056cc 	.word	0x080056cc

08001460 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	220f      	movs	r2, #15
 800146e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <HAL_RCC_GetClockConfig+0x58>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0203 	and.w	r2, r3, #3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <HAL_RCC_GetClockConfig+0x58>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001488:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <HAL_RCC_GetClockConfig+0x58>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <HAL_RCC_GetClockConfig+0x58>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	08db      	lsrs	r3, r3, #3
 800149a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_RCC_GetClockConfig+0x5c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0207 	and.w	r2, r3, #7
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40022000 	.word	0x40022000

080014c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <RCC_Delay+0x34>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <RCC_Delay+0x38>)
 80014ce:	fba2 2303 	umull	r2, r3, r2, r3
 80014d2:	0a5b      	lsrs	r3, r3, #9
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	fb02 f303 	mul.w	r3, r2, r3
 80014da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014dc:	bf00      	nop
  }
  while (Delay --);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	1e5a      	subs	r2, r3, #1
 80014e2:	60fa      	str	r2, [r7, #12]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1f9      	bne.n	80014dc <RCC_Delay+0x1c>
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	20000000 	.word	0x20000000
 80014f8:	10624dd3 	.word	0x10624dd3

080014fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e041      	b.n	8001592 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d106      	bne.n	8001528 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f839 	bl	800159a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2202      	movs	r2, #2
 800152c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3304      	adds	r3, #4
 8001538:	4619      	mov	r1, r3
 800153a:	4610      	mov	r0, r2
 800153c:	f000 f9b4 	bl	80018a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d001      	beq.n	80015c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e03a      	b.n	800163a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2202      	movs	r2, #2
 80015c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68da      	ldr	r2, [r3, #12]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f042 0201 	orr.w	r2, r2, #1
 80015da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a18      	ldr	r2, [pc, #96]	; (8001644 <HAL_TIM_Base_Start_IT+0x98>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d00e      	beq.n	8001604 <HAL_TIM_Base_Start_IT+0x58>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ee:	d009      	beq.n	8001604 <HAL_TIM_Base_Start_IT+0x58>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a14      	ldr	r2, [pc, #80]	; (8001648 <HAL_TIM_Base_Start_IT+0x9c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d004      	beq.n	8001604 <HAL_TIM_Base_Start_IT+0x58>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a13      	ldr	r2, [pc, #76]	; (800164c <HAL_TIM_Base_Start_IT+0xa0>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d111      	bne.n	8001628 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b06      	cmp	r3, #6
 8001614:	d010      	beq.n	8001638 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f042 0201 	orr.w	r2, r2, #1
 8001624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001626:	e007      	b.n	8001638 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0201 	orr.w	r2, r2, #1
 8001636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	40012c00 	.word	0x40012c00
 8001648:	40000400 	.word	0x40000400
 800164c:	40000800 	.word	0x40000800

08001650 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b02      	cmp	r3, #2
 8001664:	d122      	bne.n	80016ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b02      	cmp	r3, #2
 8001672:	d11b      	bne.n	80016ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f06f 0202 	mvn.w	r2, #2
 800167c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 f8ed 	bl	8001872 <HAL_TIM_IC_CaptureCallback>
 8001698:	e005      	b.n	80016a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f8e0 	bl	8001860 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 f8ef 	bl	8001884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	d122      	bne.n	8001700 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b04      	cmp	r3, #4
 80016c6:	d11b      	bne.n	8001700 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f06f 0204 	mvn.w	r2, #4
 80016d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2202      	movs	r2, #2
 80016d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 f8c3 	bl	8001872 <HAL_TIM_IC_CaptureCallback>
 80016ec:	e005      	b.n	80016fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f8b6 	bl	8001860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 f8c5 	bl	8001884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	2b08      	cmp	r3, #8
 800170c:	d122      	bne.n	8001754 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	f003 0308 	and.w	r3, r3, #8
 8001718:	2b08      	cmp	r3, #8
 800171a:	d11b      	bne.n	8001754 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f06f 0208 	mvn.w	r2, #8
 8001724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2204      	movs	r2, #4
 800172a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 f899 	bl	8001872 <HAL_TIM_IC_CaptureCallback>
 8001740:	e005      	b.n	800174e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f88c 	bl	8001860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f89b 	bl	8001884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	f003 0310 	and.w	r3, r3, #16
 800175e:	2b10      	cmp	r3, #16
 8001760:	d122      	bne.n	80017a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f003 0310 	and.w	r3, r3, #16
 800176c:	2b10      	cmp	r3, #16
 800176e:	d11b      	bne.n	80017a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f06f 0210 	mvn.w	r2, #16
 8001778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2208      	movs	r2, #8
 800177e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f86f 	bl	8001872 <HAL_TIM_IC_CaptureCallback>
 8001794:	e005      	b.n	80017a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f862 	bl	8001860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f871 	bl	8001884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d10e      	bne.n	80017d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d107      	bne.n	80017d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f06f 0201 	mvn.w	r2, #1
 80017cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7fe fdf2 	bl	80003b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017de:	2b80      	cmp	r3, #128	; 0x80
 80017e0:	d10e      	bne.n	8001800 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ec:	2b80      	cmp	r3, #128	; 0x80
 80017ee:	d107      	bne.n	8001800 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80017f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f8bf 	bl	800197e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800180a:	2b40      	cmp	r3, #64	; 0x40
 800180c:	d10e      	bne.n	800182c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001818:	2b40      	cmp	r3, #64	; 0x40
 800181a:	d107      	bne.n	800182c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 f835 	bl	8001896 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	f003 0320 	and.w	r3, r3, #32
 8001836:	2b20      	cmp	r3, #32
 8001838:	d10e      	bne.n	8001858 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	f003 0320 	and.w	r3, r3, #32
 8001844:	2b20      	cmp	r3, #32
 8001846:	d107      	bne.n	8001858 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f06f 0220 	mvn.w	r2, #32
 8001850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f88a 	bl	800196c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr

08001896 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a29      	ldr	r2, [pc, #164]	; (8001960 <TIM_Base_SetConfig+0xb8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d00b      	beq.n	80018d8 <TIM_Base_SetConfig+0x30>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c6:	d007      	beq.n	80018d8 <TIM_Base_SetConfig+0x30>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a26      	ldr	r2, [pc, #152]	; (8001964 <TIM_Base_SetConfig+0xbc>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d003      	beq.n	80018d8 <TIM_Base_SetConfig+0x30>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a25      	ldr	r2, [pc, #148]	; (8001968 <TIM_Base_SetConfig+0xc0>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d108      	bne.n	80018ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a1c      	ldr	r2, [pc, #112]	; (8001960 <TIM_Base_SetConfig+0xb8>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d00b      	beq.n	800190a <TIM_Base_SetConfig+0x62>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f8:	d007      	beq.n	800190a <TIM_Base_SetConfig+0x62>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a19      	ldr	r2, [pc, #100]	; (8001964 <TIM_Base_SetConfig+0xbc>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d003      	beq.n	800190a <TIM_Base_SetConfig+0x62>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a18      	ldr	r2, [pc, #96]	; (8001968 <TIM_Base_SetConfig+0xc0>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d108      	bne.n	800191c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	4313      	orrs	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	4313      	orrs	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a07      	ldr	r2, [pc, #28]	; (8001960 <TIM_Base_SetConfig+0xb8>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d103      	bne.n	8001950 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	615a      	str	r2, [r3, #20]
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr
 8001960:	40012c00 	.word	0x40012c00
 8001964:	40000400 	.word	0x40000400
 8001968:	40000800 	.word	0x40000800

0800196c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr

0800197e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e03f      	b.n	8001a22 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d106      	bne.n	80019bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7fe fd4e 	bl	8000458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2224      	movs	r2, #36	; 0x24
 80019c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 f905 	bl	8001be4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	691a      	ldr	r2, [r3, #16]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	695a      	ldr	r2, [r3, #20]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2220      	movs	r2, #32
 8001a14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2220      	movs	r2, #32
 8001a1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b08a      	sub	sp, #40	; 0x28
 8001a2e:	af02      	add	r7, sp, #8
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	603b      	str	r3, [r7, #0]
 8001a36:	4613      	mov	r3, r2
 8001a38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b20      	cmp	r3, #32
 8001a48:	d17c      	bne.n	8001b44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d002      	beq.n	8001a56 <HAL_UART_Transmit+0x2c>
 8001a50:	88fb      	ldrh	r3, [r7, #6]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e075      	b.n	8001b46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d101      	bne.n	8001a68 <HAL_UART_Transmit+0x3e>
 8001a64:	2302      	movs	r3, #2
 8001a66:	e06e      	b.n	8001b46 <HAL_UART_Transmit+0x11c>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2221      	movs	r2, #33	; 0x21
 8001a7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001a7e:	f7fe fe85 	bl	800078c <HAL_GetTick>
 8001a82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	88fa      	ldrh	r2, [r7, #6]
 8001a88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	88fa      	ldrh	r2, [r7, #6]
 8001a8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a98:	d108      	bne.n	8001aac <HAL_UART_Transmit+0x82>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d104      	bne.n	8001aac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	e003      	b.n	8001ab4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001abc:	e02a      	b.n	8001b14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2180      	movs	r1, #128	; 0x80
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f000 f840 	bl	8001b4e <UART_WaitOnFlagUntilTimeout>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e036      	b.n	8001b46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10b      	bne.n	8001af6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001aec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	3302      	adds	r3, #2
 8001af2:	61bb      	str	r3, [r7, #24]
 8001af4:	e007      	b.n	8001b06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	781a      	ldrb	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	3301      	adds	r3, #1
 8001b04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1cf      	bne.n	8001abe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	2200      	movs	r2, #0
 8001b26:	2140      	movs	r1, #64	; 0x40
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 f810 	bl	8001b4e <UART_WaitOnFlagUntilTimeout>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e006      	b.n	8001b46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	e000      	b.n	8001b46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001b44:	2302      	movs	r3, #2
  }
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3720      	adds	r7, #32
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b084      	sub	sp, #16
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	603b      	str	r3, [r7, #0]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b5e:	e02c      	b.n	8001bba <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b66:	d028      	beq.n	8001bba <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d007      	beq.n	8001b7e <UART_WaitOnFlagUntilTimeout+0x30>
 8001b6e:	f7fe fe0d 	bl	800078c <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d21d      	bcs.n	8001bba <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001b8c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	695a      	ldr	r2, [r3, #20]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0201 	bic.w	r2, r2, #1
 8001b9c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2220      	movs	r2, #32
 8001baa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e00f      	b.n	8001bda <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	bf0c      	ite	eq
 8001bca:	2301      	moveq	r3, #1
 8001bcc:	2300      	movne	r3, #0
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d0c3      	beq.n	8001b60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001c1e:	f023 030c 	bic.w	r3, r3, #12
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6812      	ldr	r2, [r2, #0]
 8001c26:	68b9      	ldr	r1, [r7, #8]
 8001c28:	430b      	orrs	r3, r1
 8001c2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699a      	ldr	r2, [r3, #24]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a2c      	ldr	r2, [pc, #176]	; (8001cf8 <UART_SetConfig+0x114>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d103      	bne.n	8001c54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001c4c:	f7ff fbf4 	bl	8001438 <HAL_RCC_GetPCLK2Freq>
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	e002      	b.n	8001c5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001c54:	f7ff fbdc 	bl	8001410 <HAL_RCC_GetPCLK1Freq>
 8001c58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	009a      	lsls	r2, r3, #2
 8001c64:	441a      	add	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c70:	4a22      	ldr	r2, [pc, #136]	; (8001cfc <UART_SetConfig+0x118>)
 8001c72:	fba2 2303 	umull	r2, r3, r2, r3
 8001c76:	095b      	lsrs	r3, r3, #5
 8001c78:	0119      	lsls	r1, r3, #4
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	009a      	lsls	r2, r3, #2
 8001c84:	441a      	add	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c90:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <UART_SetConfig+0x118>)
 8001c92:	fba3 0302 	umull	r0, r3, r3, r2
 8001c96:	095b      	lsrs	r3, r3, #5
 8001c98:	2064      	movs	r0, #100	; 0x64
 8001c9a:	fb00 f303 	mul.w	r3, r0, r3
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	3332      	adds	r3, #50	; 0x32
 8001ca4:	4a15      	ldr	r2, [pc, #84]	; (8001cfc <UART_SetConfig+0x118>)
 8001ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8001caa:	095b      	lsrs	r3, r3, #5
 8001cac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cb0:	4419      	add	r1, r3
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	009a      	lsls	r2, r3, #2
 8001cbc:	441a      	add	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <UART_SetConfig+0x118>)
 8001cca:	fba3 0302 	umull	r0, r3, r3, r2
 8001cce:	095b      	lsrs	r3, r3, #5
 8001cd0:	2064      	movs	r0, #100	; 0x64
 8001cd2:	fb00 f303 	mul.w	r3, r0, r3
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	011b      	lsls	r3, r3, #4
 8001cda:	3332      	adds	r3, #50	; 0x32
 8001cdc:	4a07      	ldr	r2, [pc, #28]	; (8001cfc <UART_SetConfig+0x118>)
 8001cde:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	f003 020f 	and.w	r2, r3, #15
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	440a      	add	r2, r1
 8001cee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001cf0:	bf00      	nop
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40013800 	.word	0x40013800
 8001cfc:	51eb851f 	.word	0x51eb851f

08001d00 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001d0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d12:	2b84      	cmp	r3, #132	; 0x84
 8001d14:	d005      	beq.n	8001d22 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001d16:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3303      	adds	r3, #3
 8001d20:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001d22:	68fb      	ldr	r3, [r7, #12]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d34:	f3ef 8305 	mrs	r3, IPSR
 8001d38:	607b      	str	r3, [r7, #4]
  return(result);
 8001d3a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf14      	ite	ne
 8001d40:	2301      	movne	r3, #1
 8001d42:	2300      	moveq	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001d54:	f001 f82a 	bl	8002dac <vTaskStartScheduler>
  
  return osOK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001d5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d60:	b089      	sub	sp, #36	; 0x24
 8001d62:	af04      	add	r7, sp, #16
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d020      	beq.n	8001db2 <osThreadCreate+0x54>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d01c      	beq.n	8001db2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685c      	ldr	r4, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681d      	ldr	r5, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691e      	ldr	r6, [r3, #16]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ffb8 	bl	8001d00 <makeFreeRtosPriority>
 8001d90:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d9a:	9202      	str	r2, [sp, #8]
 8001d9c:	9301      	str	r3, [sp, #4]
 8001d9e:	9100      	str	r1, [sp, #0]
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	4632      	mov	r2, r6
 8001da4:	4629      	mov	r1, r5
 8001da6:	4620      	mov	r0, r4
 8001da8:	f000 fe42 	bl	8002a30 <xTaskCreateStatic>
 8001dac:	4603      	mov	r3, r0
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	e01c      	b.n	8001dec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685c      	ldr	r4, [r3, #4]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001dbe:	b29e      	uxth	r6, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff ff9a 	bl	8001d00 <makeFreeRtosPriority>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	f107 030c 	add.w	r3, r7, #12
 8001dd2:	9301      	str	r3, [sp, #4]
 8001dd4:	9200      	str	r2, [sp, #0]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	4632      	mov	r2, r6
 8001dda:	4629      	mov	r1, r5
 8001ddc:	4620      	mov	r0, r4
 8001dde:	f000 fe83 	bl	8002ae8 <xTaskCreate>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d001      	beq.n	8001dec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	e000      	b.n	8001dee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001dec:	68fb      	ldr	r3, [r7, #12]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001df6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b084      	sub	sp, #16
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <osDelay+0x16>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	e000      	b.n	8001e0e <osDelay+0x18>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 ff98 	bl	8002d44 <vTaskDelay>
  
  return osOK;
 8001e14:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d013      	beq.n	8001e5e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8001e36:	7afb      	ldrb	r3, [r7, #11]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <osTimerCreate+0x20>
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	e000      	b.n	8001e42 <osTimerCreate+0x22>
 8001e40:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8001e4a:	9201      	str	r2, [sp, #4]
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	460a      	mov	r2, r1
 8001e52:	2101      	movs	r1, #1
 8001e54:	480b      	ldr	r0, [pc, #44]	; (8001e84 <osTimerCreate+0x64>)
 8001e56:	f001 fd62 	bl	800391e <xTimerCreateStatic>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	e00e      	b.n	8001e7c <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8001e5e:	7afb      	ldrb	r3, [r7, #11]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d101      	bne.n	8001e68 <osTimerCreate+0x48>
 8001e64:	2201      	movs	r2, #1
 8001e66:	e000      	b.n	8001e6a <osTimerCreate+0x4a>
 8001e68:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2101      	movs	r1, #1
 8001e74:	4803      	ldr	r0, [pc, #12]	; (8001e84 <osTimerCreate+0x64>)
 8001e76:	f001 fd31 	bl	80038dc <xTimerCreate>
 8001e7a:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	080056a0 	.word	0x080056a0

08001e88 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af02      	add	r7, sp, #8
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <osTimerStart+0x20>
    ticks = 1;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8001ea8:	f7ff ff41 	bl	8001d2e <inHandlerMode>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d01a      	beq.n	8001ee8 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8001eb2:	f107 030c 	add.w	r3, r7, #12
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	9200      	str	r2, [sp, #0]
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	2109      	movs	r1, #9
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f001 fd9c 	bl	80039fc <xTimerGenericCommand>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d002      	beq.n	8001ed0 <osTimerStart+0x48>
    {
      result = osErrorOS;
 8001eca:	23ff      	movs	r3, #255	; 0xff
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	e018      	b.n	8001f02 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d015      	beq.n	8001f02 <osTimerStart+0x7a>
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <osTimerStart+0x84>)
 8001ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	f3bf 8f4f 	dsb	sy
 8001ee2:	f3bf 8f6f 	isb	sy
 8001ee6:	e00c      	b.n	8001f02 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	2300      	movs	r3, #0
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	2104      	movs	r1, #4
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f001 fd82 	bl	80039fc <xTimerGenericCommand>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d001      	beq.n	8001f02 <osTimerStart+0x7a>
      result = osErrorOS;
 8001efe:	23ff      	movs	r3, #255	; 0xff
 8001f00:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8001f02:	697b      	ldr	r3, [r7, #20]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	e000ed04 	.word	0xe000ed04

08001f10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f103 0208 	add.w	r2, r3, #8
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f04f 32ff 	mov.w	r2, #4294967295
 8001f28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f103 0208 	add.w	r2, r3, #8
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f103 0208 	add.w	r2, r3, #8
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr

08001f4e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr

08001f66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f66:	b480      	push	{r7}
 8001f68:	b085      	sub	sp, #20
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	601a      	str	r2, [r3, #0]
}
 8001fa2:	bf00      	nop
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc2:	d103      	bne.n	8001fcc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	e00c      	b.n	8001fe6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3308      	adds	r3, #8
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	e002      	b.n	8001fda <vListInsert+0x2e>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d2f6      	bcs.n	8001fd4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	601a      	str	r2, [r3, #0]
}
 8002012:	bf00      	nop
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr

0800201c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6892      	ldr	r2, [r2, #8]
 8002032:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6852      	ldr	r2, [r2, #4]
 800203c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	429a      	cmp	r2, r3
 8002046:	d103      	bne.n	8002050 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	1e5a      	subs	r2, r3, #1
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
	...

08002070 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10a      	bne.n	800209a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002088:	f383 8811 	msr	BASEPRI, r3
 800208c:	f3bf 8f6f 	isb	sy
 8002090:	f3bf 8f4f 	dsb	sy
 8002094:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002096:	bf00      	nop
 8002098:	e7fe      	b.n	8002098 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800209a:	f002 f84f 	bl	800413c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a6:	68f9      	ldr	r1, [r7, #12]
 80020a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80020aa:	fb01 f303 	mul.w	r3, r1, r3
 80020ae:	441a      	add	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ca:	3b01      	subs	r3, #1
 80020cc:	68f9      	ldr	r1, [r7, #12]
 80020ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80020d0:	fb01 f303 	mul.w	r3, r1, r3
 80020d4:	441a      	add	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	22ff      	movs	r2, #255	; 0xff
 80020de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	22ff      	movs	r2, #255	; 0xff
 80020e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d114      	bne.n	800211a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d01a      	beq.n	800212e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	3310      	adds	r3, #16
 80020fc:	4618      	mov	r0, r3
 80020fe:	f001 f8db 	bl	80032b8 <xTaskRemoveFromEventList>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d012      	beq.n	800212e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <xQueueGenericReset+0xcc>)
 800210a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	f3bf 8f4f 	dsb	sy
 8002114:	f3bf 8f6f 	isb	sy
 8002118:	e009      	b.n	800212e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	3310      	adds	r3, #16
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fef6 	bl	8001f10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	3324      	adds	r3, #36	; 0x24
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff fef1 	bl	8001f10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800212e:	f002 f835 	bl	800419c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002132:	2301      	movs	r3, #1
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	e000ed04 	.word	0xe000ed04

08002140 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08e      	sub	sp, #56	; 0x38
 8002144:	af02      	add	r7, sp, #8
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10a      	bne.n	800216a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002158:	f383 8811 	msr	BASEPRI, r3
 800215c:	f3bf 8f6f 	isb	sy
 8002160:	f3bf 8f4f 	dsb	sy
 8002164:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002166:	bf00      	nop
 8002168:	e7fe      	b.n	8002168 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10a      	bne.n	8002186 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002174:	f383 8811 	msr	BASEPRI, r3
 8002178:	f3bf 8f6f 	isb	sy
 800217c:	f3bf 8f4f 	dsb	sy
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002182:	bf00      	nop
 8002184:	e7fe      	b.n	8002184 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <xQueueGenericCreateStatic+0x52>
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <xQueueGenericCreateStatic+0x56>
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <xQueueGenericCreateStatic+0x58>
 8002196:	2300      	movs	r3, #0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10a      	bne.n	80021b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800219c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a0:	f383 8811 	msr	BASEPRI, r3
 80021a4:	f3bf 8f6f 	isb	sy
 80021a8:	f3bf 8f4f 	dsb	sy
 80021ac:	623b      	str	r3, [r7, #32]
}
 80021ae:	bf00      	nop
 80021b0:	e7fe      	b.n	80021b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d102      	bne.n	80021be <xQueueGenericCreateStatic+0x7e>
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <xQueueGenericCreateStatic+0x82>
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <xQueueGenericCreateStatic+0x84>
 80021c2:	2300      	movs	r3, #0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10a      	bne.n	80021de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80021c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021cc:	f383 8811 	msr	BASEPRI, r3
 80021d0:	f3bf 8f6f 	isb	sy
 80021d4:	f3bf 8f4f 	dsb	sy
 80021d8:	61fb      	str	r3, [r7, #28]
}
 80021da:	bf00      	nop
 80021dc:	e7fe      	b.n	80021dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80021de:	2348      	movs	r3, #72	; 0x48
 80021e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2b48      	cmp	r3, #72	; 0x48
 80021e6:	d00a      	beq.n	80021fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80021e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ec:	f383 8811 	msr	BASEPRI, r3
 80021f0:	f3bf 8f6f 	isb	sy
 80021f4:	f3bf 8f4f 	dsb	sy
 80021f8:	61bb      	str	r3, [r7, #24]
}
 80021fa:	bf00      	nop
 80021fc:	e7fe      	b.n	80021fc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00d      	beq.n	8002224 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002210:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	4613      	mov	r3, r2
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 f805 	bl	800222e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002226:	4618      	mov	r0, r3
 8002228:	3730      	adds	r7, #48	; 0x30
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	60f8      	str	r0, [r7, #12]
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
 800223a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d103      	bne.n	800224a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	e002      	b.n	8002250 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800225c:	2101      	movs	r1, #1
 800225e:	69b8      	ldr	r0, [r7, #24]
 8002260:	f7ff ff06 	bl	8002070 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002264:	bf00      	nop
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08e      	sub	sp, #56	; 0x38
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800227a:	2300      	movs	r3, #0
 800227c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10a      	bne.n	800229e <xQueueGenericSend+0x32>
	__asm volatile
 8002288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800228c:	f383 8811 	msr	BASEPRI, r3
 8002290:	f3bf 8f6f 	isb	sy
 8002294:	f3bf 8f4f 	dsb	sy
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800229a:	bf00      	nop
 800229c:	e7fe      	b.n	800229c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d103      	bne.n	80022ac <xQueueGenericSend+0x40>
 80022a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <xQueueGenericSend+0x44>
 80022ac:	2301      	movs	r3, #1
 80022ae:	e000      	b.n	80022b2 <xQueueGenericSend+0x46>
 80022b0:	2300      	movs	r3, #0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10a      	bne.n	80022cc <xQueueGenericSend+0x60>
	__asm volatile
 80022b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ba:	f383 8811 	msr	BASEPRI, r3
 80022be:	f3bf 8f6f 	isb	sy
 80022c2:	f3bf 8f4f 	dsb	sy
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80022c8:	bf00      	nop
 80022ca:	e7fe      	b.n	80022ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d103      	bne.n	80022da <xQueueGenericSend+0x6e>
 80022d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <xQueueGenericSend+0x72>
 80022da:	2301      	movs	r3, #1
 80022dc:	e000      	b.n	80022e0 <xQueueGenericSend+0x74>
 80022de:	2300      	movs	r3, #0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10a      	bne.n	80022fa <xQueueGenericSend+0x8e>
	__asm volatile
 80022e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e8:	f383 8811 	msr	BASEPRI, r3
 80022ec:	f3bf 8f6f 	isb	sy
 80022f0:	f3bf 8f4f 	dsb	sy
 80022f4:	623b      	str	r3, [r7, #32]
}
 80022f6:	bf00      	nop
 80022f8:	e7fe      	b.n	80022f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022fa:	f001 f99d 	bl	8003638 <xTaskGetSchedulerState>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d102      	bne.n	800230a <xQueueGenericSend+0x9e>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <xQueueGenericSend+0xa2>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <xQueueGenericSend+0xa4>
 800230e:	2300      	movs	r3, #0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10a      	bne.n	800232a <xQueueGenericSend+0xbe>
	__asm volatile
 8002314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002318:	f383 8811 	msr	BASEPRI, r3
 800231c:	f3bf 8f6f 	isb	sy
 8002320:	f3bf 8f4f 	dsb	sy
 8002324:	61fb      	str	r3, [r7, #28]
}
 8002326:	bf00      	nop
 8002328:	e7fe      	b.n	8002328 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800232a:	f001 ff07 	bl	800413c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002336:	429a      	cmp	r2, r3
 8002338:	d302      	bcc.n	8002340 <xQueueGenericSend+0xd4>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b02      	cmp	r3, #2
 800233e:	d129      	bne.n	8002394 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	68b9      	ldr	r1, [r7, #8]
 8002344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002346:	f000 fa07 	bl	8002758 <prvCopyDataToQueue>
 800234a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800234c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	2b00      	cmp	r3, #0
 8002352:	d010      	beq.n	8002376 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002356:	3324      	adds	r3, #36	; 0x24
 8002358:	4618      	mov	r0, r3
 800235a:	f000 ffad 	bl	80032b8 <xTaskRemoveFromEventList>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d013      	beq.n	800238c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002364:	4b3f      	ldr	r3, [pc, #252]	; (8002464 <xQueueGenericSend+0x1f8>)
 8002366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	f3bf 8f4f 	dsb	sy
 8002370:	f3bf 8f6f 	isb	sy
 8002374:	e00a      	b.n	800238c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002378:	2b00      	cmp	r3, #0
 800237a:	d007      	beq.n	800238c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800237c:	4b39      	ldr	r3, [pc, #228]	; (8002464 <xQueueGenericSend+0x1f8>)
 800237e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	f3bf 8f4f 	dsb	sy
 8002388:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800238c:	f001 ff06 	bl	800419c <vPortExitCritical>
				return pdPASS;
 8002390:	2301      	movs	r3, #1
 8002392:	e063      	b.n	800245c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d103      	bne.n	80023a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800239a:	f001 feff 	bl	800419c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	e05c      	b.n	800245c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80023a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d106      	bne.n	80023b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 ffe5 	bl	800337c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80023b2:	2301      	movs	r3, #1
 80023b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80023b6:	f001 fef1 	bl	800419c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80023ba:	f000 fd5d 	bl	8002e78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80023be:	f001 febd 	bl	800413c <vPortEnterCritical>
 80023c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023c8:	b25b      	sxtb	r3, r3
 80023ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ce:	d103      	bne.n	80023d8 <xQueueGenericSend+0x16c>
 80023d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023de:	b25b      	sxtb	r3, r3
 80023e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e4:	d103      	bne.n	80023ee <xQueueGenericSend+0x182>
 80023e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023ee:	f001 fed5 	bl	800419c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023f2:	1d3a      	adds	r2, r7, #4
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	4611      	mov	r1, r2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 ffd4 	bl	80033a8 <xTaskCheckForTimeOut>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d124      	bne.n	8002450 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002406:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002408:	f000 fa9e 	bl	8002948 <prvIsQueueFull>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d018      	beq.n	8002444 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002414:	3310      	adds	r3, #16
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4611      	mov	r1, r2
 800241a:	4618      	mov	r0, r3
 800241c:	f000 fefc 	bl	8003218 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002420:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002422:	f000 fa29 	bl	8002878 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002426:	f000 fd35 	bl	8002e94 <xTaskResumeAll>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	f47f af7c 	bne.w	800232a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002432:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <xQueueGenericSend+0x1f8>)
 8002434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	f3bf 8f4f 	dsb	sy
 800243e:	f3bf 8f6f 	isb	sy
 8002442:	e772      	b.n	800232a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002446:	f000 fa17 	bl	8002878 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800244a:	f000 fd23 	bl	8002e94 <xTaskResumeAll>
 800244e:	e76c      	b.n	800232a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002450:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002452:	f000 fa11 	bl	8002878 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002456:	f000 fd1d 	bl	8002e94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800245a:	2300      	movs	r3, #0
		}
	}
}
 800245c:	4618      	mov	r0, r3
 800245e:	3738      	adds	r7, #56	; 0x38
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	e000ed04 	.word	0xe000ed04

08002468 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08e      	sub	sp, #56	; 0x38
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800247a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10a      	bne.n	8002496 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002484:	f383 8811 	msr	BASEPRI, r3
 8002488:	f3bf 8f6f 	isb	sy
 800248c:	f3bf 8f4f 	dsb	sy
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002492:	bf00      	nop
 8002494:	e7fe      	b.n	8002494 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d103      	bne.n	80024a4 <xQueueGenericSendFromISR+0x3c>
 800249c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <xQueueGenericSendFromISR+0x40>
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <xQueueGenericSendFromISR+0x42>
 80024a8:	2300      	movs	r3, #0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10a      	bne.n	80024c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80024ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b2:	f383 8811 	msr	BASEPRI, r3
 80024b6:	f3bf 8f6f 	isb	sy
 80024ba:	f3bf 8f4f 	dsb	sy
 80024be:	623b      	str	r3, [r7, #32]
}
 80024c0:	bf00      	nop
 80024c2:	e7fe      	b.n	80024c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d103      	bne.n	80024d2 <xQueueGenericSendFromISR+0x6a>
 80024ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <xQueueGenericSendFromISR+0x6e>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <xQueueGenericSendFromISR+0x70>
 80024d6:	2300      	movs	r3, #0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10a      	bne.n	80024f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80024dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e0:	f383 8811 	msr	BASEPRI, r3
 80024e4:	f3bf 8f6f 	isb	sy
 80024e8:	f3bf 8f4f 	dsb	sy
 80024ec:	61fb      	str	r3, [r7, #28]
}
 80024ee:	bf00      	nop
 80024f0:	e7fe      	b.n	80024f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80024f2:	f001 fee5 	bl	80042c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80024f6:	f3ef 8211 	mrs	r2, BASEPRI
 80024fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024fe:	f383 8811 	msr	BASEPRI, r3
 8002502:	f3bf 8f6f 	isb	sy
 8002506:	f3bf 8f4f 	dsb	sy
 800250a:	61ba      	str	r2, [r7, #24]
 800250c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800250e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002510:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251a:	429a      	cmp	r2, r3
 800251c:	d302      	bcc.n	8002524 <xQueueGenericSendFromISR+0xbc>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d12c      	bne.n	800257e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002526:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800252a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002534:	f000 f910 	bl	8002758 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002538:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800253c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002540:	d112      	bne.n	8002568 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	2b00      	cmp	r3, #0
 8002548:	d016      	beq.n	8002578 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800254a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254c:	3324      	adds	r3, #36	; 0x24
 800254e:	4618      	mov	r0, r3
 8002550:	f000 feb2 	bl	80032b8 <xTaskRemoveFromEventList>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00e      	beq.n	8002578 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00b      	beq.n	8002578 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	e007      	b.n	8002578 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002568:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800256c:	3301      	adds	r3, #1
 800256e:	b2db      	uxtb	r3, r3
 8002570:	b25a      	sxtb	r2, r3
 8002572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002578:	2301      	movs	r3, #1
 800257a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800257c:	e001      	b.n	8002582 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800257e:	2300      	movs	r3, #0
 8002580:	637b      	str	r3, [r7, #52]	; 0x34
 8002582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002584:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800258c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800258e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002590:	4618      	mov	r0, r3
 8002592:	3738      	adds	r7, #56	; 0x38
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08c      	sub	sp, #48	; 0x30
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80025a4:	2300      	movs	r3, #0
 80025a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80025ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10a      	bne.n	80025c8 <xQueueReceive+0x30>
	__asm volatile
 80025b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b6:	f383 8811 	msr	BASEPRI, r3
 80025ba:	f3bf 8f6f 	isb	sy
 80025be:	f3bf 8f4f 	dsb	sy
 80025c2:	623b      	str	r3, [r7, #32]
}
 80025c4:	bf00      	nop
 80025c6:	e7fe      	b.n	80025c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d103      	bne.n	80025d6 <xQueueReceive+0x3e>
 80025ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <xQueueReceive+0x42>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <xQueueReceive+0x44>
 80025da:	2300      	movs	r3, #0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10a      	bne.n	80025f6 <xQueueReceive+0x5e>
	__asm volatile
 80025e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e4:	f383 8811 	msr	BASEPRI, r3
 80025e8:	f3bf 8f6f 	isb	sy
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	61fb      	str	r3, [r7, #28]
}
 80025f2:	bf00      	nop
 80025f4:	e7fe      	b.n	80025f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025f6:	f001 f81f 	bl	8003638 <xTaskGetSchedulerState>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d102      	bne.n	8002606 <xQueueReceive+0x6e>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <xQueueReceive+0x72>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <xQueueReceive+0x74>
 800260a:	2300      	movs	r3, #0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10a      	bne.n	8002626 <xQueueReceive+0x8e>
	__asm volatile
 8002610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002614:	f383 8811 	msr	BASEPRI, r3
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	61bb      	str	r3, [r7, #24]
}
 8002622:	bf00      	nop
 8002624:	e7fe      	b.n	8002624 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002626:	f001 fd89 	bl	800413c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800262a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	2b00      	cmp	r3, #0
 8002634:	d01f      	beq.n	8002676 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002636:	68b9      	ldr	r1, [r7, #8]
 8002638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800263a:	f000 f8f7 	bl	800282c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	1e5a      	subs	r2, r3, #1
 8002642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002644:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00f      	beq.n	800266e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002650:	3310      	adds	r3, #16
 8002652:	4618      	mov	r0, r3
 8002654:	f000 fe30 	bl	80032b8 <xTaskRemoveFromEventList>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d007      	beq.n	800266e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800265e:	4b3d      	ldr	r3, [pc, #244]	; (8002754 <xQueueReceive+0x1bc>)
 8002660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	f3bf 8f4f 	dsb	sy
 800266a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800266e:	f001 fd95 	bl	800419c <vPortExitCritical>
				return pdPASS;
 8002672:	2301      	movs	r3, #1
 8002674:	e069      	b.n	800274a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d103      	bne.n	8002684 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800267c:	f001 fd8e 	bl	800419c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002680:	2300      	movs	r3, #0
 8002682:	e062      	b.n	800274a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800268a:	f107 0310 	add.w	r3, r7, #16
 800268e:	4618      	mov	r0, r3
 8002690:	f000 fe74 	bl	800337c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002694:	2301      	movs	r3, #1
 8002696:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002698:	f001 fd80 	bl	800419c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800269c:	f000 fbec 	bl	8002e78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80026a0:	f001 fd4c 	bl	800413c <vPortEnterCritical>
 80026a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026aa:	b25b      	sxtb	r3, r3
 80026ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b0:	d103      	bne.n	80026ba <xQueueReceive+0x122>
 80026b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026c0:	b25b      	sxtb	r3, r3
 80026c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c6:	d103      	bne.n	80026d0 <xQueueReceive+0x138>
 80026c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026d0:	f001 fd64 	bl	800419c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026d4:	1d3a      	adds	r2, r7, #4
 80026d6:	f107 0310 	add.w	r3, r7, #16
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 fe63 	bl	80033a8 <xTaskCheckForTimeOut>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d123      	bne.n	8002730 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026ea:	f000 f917 	bl	800291c <prvIsQueueEmpty>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d017      	beq.n	8002724 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80026f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f6:	3324      	adds	r3, #36	; 0x24
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	4611      	mov	r1, r2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 fd8b 	bl	8003218 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002704:	f000 f8b8 	bl	8002878 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002708:	f000 fbc4 	bl	8002e94 <xTaskResumeAll>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d189      	bne.n	8002626 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002712:	4b10      	ldr	r3, [pc, #64]	; (8002754 <xQueueReceive+0x1bc>)
 8002714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	f3bf 8f4f 	dsb	sy
 800271e:	f3bf 8f6f 	isb	sy
 8002722:	e780      	b.n	8002626 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002726:	f000 f8a7 	bl	8002878 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800272a:	f000 fbb3 	bl	8002e94 <xTaskResumeAll>
 800272e:	e77a      	b.n	8002626 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002732:	f000 f8a1 	bl	8002878 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002736:	f000 fbad 	bl	8002e94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800273a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800273c:	f000 f8ee 	bl	800291c <prvIsQueueEmpty>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	f43f af6f 	beq.w	8002626 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002748:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800274a:	4618      	mov	r0, r3
 800274c:	3730      	adds	r7, #48	; 0x30
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	e000ed04 	.word	0xe000ed04

08002758 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10d      	bne.n	8002792 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d14d      	bne.n	800281a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	4618      	mov	r0, r3
 8002784:	f000 ff76 	bl	8003674 <xTaskPriorityDisinherit>
 8002788:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	605a      	str	r2, [r3, #4]
 8002790:	e043      	b.n	800281a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d119      	bne.n	80027cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6898      	ldr	r0, [r3, #8]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	461a      	mov	r2, r3
 80027a2:	68b9      	ldr	r1, [r7, #8]
 80027a4:	f001 ffcc 	bl	8004740 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	441a      	add	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d32b      	bcc.n	800281a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	609a      	str	r2, [r3, #8]
 80027ca:	e026      	b.n	800281a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	68d8      	ldr	r0, [r3, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	461a      	mov	r2, r3
 80027d6:	68b9      	ldr	r1, [r7, #8]
 80027d8:	f001 ffb2 	bl	8004740 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	425b      	negs	r3, r3
 80027e6:	441a      	add	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d207      	bcs.n	8002808 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	425b      	negs	r3, r3
 8002802:	441a      	add	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b02      	cmp	r3, #2
 800280c:	d105      	bne.n	800281a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	3b01      	subs	r3, #1
 8002818:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002822:	697b      	ldr	r3, [r7, #20]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	2b00      	cmp	r3, #0
 800283c:	d018      	beq.n	8002870 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	441a      	add	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	429a      	cmp	r2, r3
 8002856:	d303      	bcc.n	8002860 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68d9      	ldr	r1, [r3, #12]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	461a      	mov	r2, r3
 800286a:	6838      	ldr	r0, [r7, #0]
 800286c:	f001 ff68 	bl	8004740 <memcpy>
	}
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002880:	f001 fc5c 	bl	800413c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800288a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800288c:	e011      	b.n	80028b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	2b00      	cmp	r3, #0
 8002894:	d012      	beq.n	80028bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3324      	adds	r3, #36	; 0x24
 800289a:	4618      	mov	r0, r3
 800289c:	f000 fd0c 	bl	80032b8 <xTaskRemoveFromEventList>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80028a6:	f000 fde1 	bl	800346c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80028b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	dce9      	bgt.n	800288e <prvUnlockQueue+0x16>
 80028ba:	e000      	b.n	80028be <prvUnlockQueue+0x46>
					break;
 80028bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	22ff      	movs	r2, #255	; 0xff
 80028c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80028c6:	f001 fc69 	bl	800419c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80028ca:	f001 fc37 	bl	800413c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80028d6:	e011      	b.n	80028fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d012      	beq.n	8002906 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3310      	adds	r3, #16
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fce7 	bl	80032b8 <xTaskRemoveFromEventList>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80028f0:	f000 fdbc 	bl	800346c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80028f4:	7bbb      	ldrb	r3, [r7, #14]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80028fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002900:	2b00      	cmp	r3, #0
 8002902:	dce9      	bgt.n	80028d8 <prvUnlockQueue+0x60>
 8002904:	e000      	b.n	8002908 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002906:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	22ff      	movs	r2, #255	; 0xff
 800290c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002910:	f001 fc44 	bl	800419c <vPortExitCritical>
}
 8002914:	bf00      	nop
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002924:	f001 fc0a 	bl	800413c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292c:	2b00      	cmp	r3, #0
 800292e:	d102      	bne.n	8002936 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002930:	2301      	movs	r3, #1
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	e001      	b.n	800293a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800293a:	f001 fc2f 	bl	800419c <vPortExitCritical>

	return xReturn;
 800293e:	68fb      	ldr	r3, [r7, #12]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002950:	f001 fbf4 	bl	800413c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295c:	429a      	cmp	r2, r3
 800295e:	d102      	bne.n	8002966 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002960:	2301      	movs	r3, #1
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	e001      	b.n	800296a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800296a:	f001 fc17 	bl	800419c <vPortExitCritical>

	return xReturn;
 800296e:	68fb      	ldr	r3, [r7, #12]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	e014      	b.n	80029b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002988:	4a0e      	ldr	r2, [pc, #56]	; (80029c4 <vQueueAddToRegistry+0x4c>)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10b      	bne.n	80029ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002994:	490b      	ldr	r1, [pc, #44]	; (80029c4 <vQueueAddToRegistry+0x4c>)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800299e:	4a09      	ldr	r2, [pc, #36]	; (80029c4 <vQueueAddToRegistry+0x4c>)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4413      	add	r3, r2
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80029aa:	e006      	b.n	80029ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	3301      	adds	r3, #1
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2b07      	cmp	r3, #7
 80029b6:	d9e7      	bls.n	8002988 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80029b8:	bf00      	nop
 80029ba:	bf00      	nop
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr
 80029c4:	20001620 	.word	0x20001620

080029c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80029d8:	f001 fbb0 	bl	800413c <vPortEnterCritical>
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029e2:	b25b      	sxtb	r3, r3
 80029e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e8:	d103      	bne.n	80029f2 <vQueueWaitForMessageRestricted+0x2a>
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029f8:	b25b      	sxtb	r3, r3
 80029fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fe:	d103      	bne.n	8002a08 <vQueueWaitForMessageRestricted+0x40>
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a08:	f001 fbc8 	bl	800419c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d106      	bne.n	8002a22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	3324      	adds	r3, #36	; 0x24
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 fc1f 	bl	8003260 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002a22:	6978      	ldr	r0, [r7, #20]
 8002a24:	f7ff ff28 	bl	8002878 <prvUnlockQueue>
	}
 8002a28:	bf00      	nop
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08e      	sub	sp, #56	; 0x38
 8002a34:	af04      	add	r7, sp, #16
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10a      	bne.n	8002a5a <xTaskCreateStatic+0x2a>
	__asm volatile
 8002a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a48:	f383 8811 	msr	BASEPRI, r3
 8002a4c:	f3bf 8f6f 	isb	sy
 8002a50:	f3bf 8f4f 	dsb	sy
 8002a54:	623b      	str	r3, [r7, #32]
}
 8002a56:	bf00      	nop
 8002a58:	e7fe      	b.n	8002a58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10a      	bne.n	8002a76 <xTaskCreateStatic+0x46>
	__asm volatile
 8002a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a64:	f383 8811 	msr	BASEPRI, r3
 8002a68:	f3bf 8f6f 	isb	sy
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	61fb      	str	r3, [r7, #28]
}
 8002a72:	bf00      	nop
 8002a74:	e7fe      	b.n	8002a74 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002a76:	2354      	movs	r3, #84	; 0x54
 8002a78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	2b54      	cmp	r3, #84	; 0x54
 8002a7e:	d00a      	beq.n	8002a96 <xTaskCreateStatic+0x66>
	__asm volatile
 8002a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a84:	f383 8811 	msr	BASEPRI, r3
 8002a88:	f3bf 8f6f 	isb	sy
 8002a8c:	f3bf 8f4f 	dsb	sy
 8002a90:	61bb      	str	r3, [r7, #24]
}
 8002a92:	bf00      	nop
 8002a94:	e7fe      	b.n	8002a94 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d01e      	beq.n	8002ada <xTaskCreateStatic+0xaa>
 8002a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d01b      	beq.n	8002ada <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	9303      	str	r3, [sp, #12]
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	9302      	str	r3, [sp, #8]
 8002abc:	f107 0314 	add.w	r3, r7, #20
 8002ac0:	9301      	str	r3, [sp, #4]
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	68b9      	ldr	r1, [r7, #8]
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 f850 	bl	8002b72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ad2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ad4:	f000 f8cc 	bl	8002c70 <prvAddNewTaskToReadyList>
 8002ad8:	e001      	b.n	8002ade <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002ade:	697b      	ldr	r3, [r7, #20]
	}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3728      	adds	r7, #40	; 0x28
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08c      	sub	sp, #48	; 0x30
 8002aec:	af04      	add	r7, sp, #16
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	603b      	str	r3, [r7, #0]
 8002af4:	4613      	mov	r3, r2
 8002af6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002af8:	88fb      	ldrh	r3, [r7, #6]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f001 fc1d 	bl	800433c <pvPortMalloc>
 8002b02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00e      	beq.n	8002b28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002b0a:	2054      	movs	r0, #84	; 0x54
 8002b0c:	f001 fc16 	bl	800433c <pvPortMalloc>
 8002b10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	631a      	str	r2, [r3, #48]	; 0x30
 8002b1e:	e005      	b.n	8002b2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002b20:	6978      	ldr	r0, [r7, #20]
 8002b22:	f001 fccf 	bl	80044c4 <vPortFree>
 8002b26:	e001      	b.n	8002b2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d017      	beq.n	8002b62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b3a:	88fa      	ldrh	r2, [r7, #6]
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	9303      	str	r3, [sp, #12]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	9302      	str	r3, [sp, #8]
 8002b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b46:	9301      	str	r3, [sp, #4]
 8002b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	68b9      	ldr	r1, [r7, #8]
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 f80e 	bl	8002b72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b56:	69f8      	ldr	r0, [r7, #28]
 8002b58:	f000 f88a 	bl	8002c70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	61bb      	str	r3, [r7, #24]
 8002b60:	e002      	b.n	8002b68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b62:	f04f 33ff 	mov.w	r3, #4294967295
 8002b66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002b68:	69bb      	ldr	r3, [r7, #24]
	}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3720      	adds	r7, #32
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b088      	sub	sp, #32
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	60f8      	str	r0, [r7, #12]
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	607a      	str	r2, [r7, #4]
 8002b7e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	f023 0307 	bic.w	r3, r3, #7
 8002b98:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00a      	beq.n	8002bba <prvInitialiseNewTask+0x48>
	__asm volatile
 8002ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba8:	f383 8811 	msr	BASEPRI, r3
 8002bac:	f3bf 8f6f 	isb	sy
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	617b      	str	r3, [r7, #20]
}
 8002bb6:	bf00      	nop
 8002bb8:	e7fe      	b.n	8002bb8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]
 8002bbe:	e012      	b.n	8002be6 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	7819      	ldrb	r1, [r3, #0]
 8002bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	4413      	add	r3, r2
 8002bce:	3334      	adds	r3, #52	; 0x34
 8002bd0:	460a      	mov	r2, r1
 8002bd2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	4413      	add	r3, r2
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d006      	beq.n	8002bee <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	3301      	adds	r3, #1
 8002be4:	61fb      	str	r3, [r7, #28]
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	2b0f      	cmp	r3, #15
 8002bea:	d9e9      	bls.n	8002bc0 <prvInitialiseNewTask+0x4e>
 8002bec:	e000      	b.n	8002bf0 <prvInitialiseNewTask+0x7e>
		{
			break;
 8002bee:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfa:	2b06      	cmp	r3, #6
 8002bfc:	d901      	bls.n	8002c02 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002bfe:	2306      	movs	r3, #6
 8002c00:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c06:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c0c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c10:	2200      	movs	r2, #0
 8002c12:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c16:	3304      	adds	r3, #4
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff f998 	bl	8001f4e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c20:	3318      	adds	r3, #24
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff f993 	bl	8001f4e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c2c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c30:	f1c3 0207 	rsb	r2, r3, #7
 8002c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c36:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	2200      	movs	r2, #0
 8002c42:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	68f9      	ldr	r1, [r7, #12]
 8002c50:	69b8      	ldr	r0, [r7, #24]
 8002c52:	f001 f983 	bl	8003f5c <pxPortInitialiseStack>
 8002c56:	4602      	mov	r2, r0
 8002c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c68:	bf00      	nop
 8002c6a:	3720      	adds	r7, #32
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002c78:	f001 fa60 	bl	800413c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002c7c:	4b2a      	ldr	r3, [pc, #168]	; (8002d28 <prvAddNewTaskToReadyList+0xb8>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	3301      	adds	r3, #1
 8002c82:	4a29      	ldr	r2, [pc, #164]	; (8002d28 <prvAddNewTaskToReadyList+0xb8>)
 8002c84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002c86:	4b29      	ldr	r3, [pc, #164]	; (8002d2c <prvAddNewTaskToReadyList+0xbc>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002c8e:	4a27      	ldr	r2, [pc, #156]	; (8002d2c <prvAddNewTaskToReadyList+0xbc>)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c94:	4b24      	ldr	r3, [pc, #144]	; (8002d28 <prvAddNewTaskToReadyList+0xb8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d110      	bne.n	8002cbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002c9c:	f000 fc0a 	bl	80034b4 <prvInitialiseTaskLists>
 8002ca0:	e00d      	b.n	8002cbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002ca2:	4b23      	ldr	r3, [pc, #140]	; (8002d30 <prvAddNewTaskToReadyList+0xc0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d109      	bne.n	8002cbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002caa:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <prvAddNewTaskToReadyList+0xbc>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d802      	bhi.n	8002cbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002cb8:	4a1c      	ldr	r2, [pc, #112]	; (8002d2c <prvAddNewTaskToReadyList+0xbc>)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <prvAddNewTaskToReadyList+0xc4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	4a1b      	ldr	r2, [pc, #108]	; (8002d34 <prvAddNewTaskToReadyList+0xc4>)
 8002cc6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	2201      	movs	r2, #1
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	4b19      	ldr	r3, [pc, #100]	; (8002d38 <prvAddNewTaskToReadyList+0xc8>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	4a18      	ldr	r2, [pc, #96]	; (8002d38 <prvAddNewTaskToReadyList+0xc8>)
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4a15      	ldr	r2, [pc, #84]	; (8002d3c <prvAddNewTaskToReadyList+0xcc>)
 8002ce8:	441a      	add	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3304      	adds	r3, #4
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	f7ff f938 	bl	8001f66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002cf6:	f001 fa51 	bl	800419c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002cfa:	4b0d      	ldr	r3, [pc, #52]	; (8002d30 <prvAddNewTaskToReadyList+0xc0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00e      	beq.n	8002d20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d02:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <prvAddNewTaskToReadyList+0xbc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d207      	bcs.n	8002d20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002d10:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <prvAddNewTaskToReadyList+0xd0>)
 8002d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	f3bf 8f4f 	dsb	sy
 8002d1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d20:	bf00      	nop
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	2000083c 	.word	0x2000083c
 8002d2c:	2000073c 	.word	0x2000073c
 8002d30:	20000848 	.word	0x20000848
 8002d34:	20000858 	.word	0x20000858
 8002d38:	20000844 	.word	0x20000844
 8002d3c:	20000740 	.word	0x20000740
 8002d40:	e000ed04 	.word	0xe000ed04

08002d44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d017      	beq.n	8002d86 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002d56:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <vTaskDelay+0x60>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00a      	beq.n	8002d74 <vTaskDelay+0x30>
	__asm volatile
 8002d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d62:	f383 8811 	msr	BASEPRI, r3
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	60bb      	str	r3, [r7, #8]
}
 8002d70:	bf00      	nop
 8002d72:	e7fe      	b.n	8002d72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002d74:	f000 f880 	bl	8002e78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d78:	2100      	movs	r1, #0
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fd00 	bl	8003780 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002d80:	f000 f888 	bl	8002e94 <xTaskResumeAll>
 8002d84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d107      	bne.n	8002d9c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002d8c:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <vTaskDelay+0x64>)
 8002d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002d9c:	bf00      	nop
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	20000864 	.word	0x20000864
 8002da8:	e000ed04 	.word	0xe000ed04

08002dac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08a      	sub	sp, #40	; 0x28
 8002db0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002dba:	463a      	mov	r2, r7
 8002dbc:	1d39      	adds	r1, r7, #4
 8002dbe:	f107 0308 	add.w	r3, r7, #8
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fd f9c4 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002dc8:	6839      	ldr	r1, [r7, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	9202      	str	r2, [sp, #8]
 8002dd0:	9301      	str	r3, [sp, #4]
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	460a      	mov	r2, r1
 8002dda:	4921      	ldr	r1, [pc, #132]	; (8002e60 <vTaskStartScheduler+0xb4>)
 8002ddc:	4821      	ldr	r0, [pc, #132]	; (8002e64 <vTaskStartScheduler+0xb8>)
 8002dde:	f7ff fe27 	bl	8002a30 <xTaskCreateStatic>
 8002de2:	4603      	mov	r3, r0
 8002de4:	4a20      	ldr	r2, [pc, #128]	; (8002e68 <vTaskStartScheduler+0xbc>)
 8002de6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002de8:	4b1f      	ldr	r3, [pc, #124]	; (8002e68 <vTaskStartScheduler+0xbc>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002df0:	2301      	movs	r3, #1
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	e001      	b.n	8002dfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d102      	bne.n	8002e06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002e00:	f000 fd24 	bl	800384c <xTimerCreateTimerTask>
 8002e04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d116      	bne.n	8002e3a <vTaskStartScheduler+0x8e>
	__asm volatile
 8002e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e10:	f383 8811 	msr	BASEPRI, r3
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	613b      	str	r3, [r7, #16]
}
 8002e1e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002e20:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <vTaskStartScheduler+0xc0>)
 8002e22:	f04f 32ff 	mov.w	r2, #4294967295
 8002e26:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002e28:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <vTaskStartScheduler+0xc4>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002e2e:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <vTaskStartScheduler+0xc8>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002e34:	f001 f910 	bl	8004058 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002e38:	e00e      	b.n	8002e58 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e40:	d10a      	bne.n	8002e58 <vTaskStartScheduler+0xac>
	__asm volatile
 8002e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e46:	f383 8811 	msr	BASEPRI, r3
 8002e4a:	f3bf 8f6f 	isb	sy
 8002e4e:	f3bf 8f4f 	dsb	sy
 8002e52:	60fb      	str	r3, [r7, #12]
}
 8002e54:	bf00      	nop
 8002e56:	e7fe      	b.n	8002e56 <vTaskStartScheduler+0xaa>
}
 8002e58:	bf00      	nop
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	080056a4 	.word	0x080056a4
 8002e64:	08003485 	.word	0x08003485
 8002e68:	20000860 	.word	0x20000860
 8002e6c:	2000085c 	.word	0x2000085c
 8002e70:	20000848 	.word	0x20000848
 8002e74:	20000840 	.word	0x20000840

08002e78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002e7c:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <vTaskSuspendAll+0x18>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	3301      	adds	r3, #1
 8002e82:	4a03      	ldr	r2, [pc, #12]	; (8002e90 <vTaskSuspendAll+0x18>)
 8002e84:	6013      	str	r3, [r2, #0]
}
 8002e86:	bf00      	nop
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20000864 	.word	0x20000864

08002e94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002ea2:	4b41      	ldr	r3, [pc, #260]	; (8002fa8 <xTaskResumeAll+0x114>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10a      	bne.n	8002ec0 <xTaskResumeAll+0x2c>
	__asm volatile
 8002eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eae:	f383 8811 	msr	BASEPRI, r3
 8002eb2:	f3bf 8f6f 	isb	sy
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	603b      	str	r3, [r7, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	e7fe      	b.n	8002ebe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002ec0:	f001 f93c 	bl	800413c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002ec4:	4b38      	ldr	r3, [pc, #224]	; (8002fa8 <xTaskResumeAll+0x114>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	4a37      	ldr	r2, [pc, #220]	; (8002fa8 <xTaskResumeAll+0x114>)
 8002ecc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ece:	4b36      	ldr	r3, [pc, #216]	; (8002fa8 <xTaskResumeAll+0x114>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d161      	bne.n	8002f9a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ed6:	4b35      	ldr	r3, [pc, #212]	; (8002fac <xTaskResumeAll+0x118>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d05d      	beq.n	8002f9a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ede:	e02e      	b.n	8002f3e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002ee0:	4b33      	ldr	r3, [pc, #204]	; (8002fb0 <xTaskResumeAll+0x11c>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	3318      	adds	r3, #24
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff f895 	bl	800201c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff f890 	bl	800201c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f00:	2201      	movs	r2, #1
 8002f02:	409a      	lsls	r2, r3
 8002f04:	4b2b      	ldr	r3, [pc, #172]	; (8002fb4 <xTaskResumeAll+0x120>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	4a2a      	ldr	r2, [pc, #168]	; (8002fb4 <xTaskResumeAll+0x120>)
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4a27      	ldr	r2, [pc, #156]	; (8002fb8 <xTaskResumeAll+0x124>)
 8002f1c:	441a      	add	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	3304      	adds	r3, #4
 8002f22:	4619      	mov	r1, r3
 8002f24:	4610      	mov	r0, r2
 8002f26:	f7ff f81e 	bl	8001f66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f2e:	4b23      	ldr	r3, [pc, #140]	; (8002fbc <xTaskResumeAll+0x128>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d302      	bcc.n	8002f3e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002f38:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <xTaskResumeAll+0x12c>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f3e:	4b1c      	ldr	r3, [pc, #112]	; (8002fb0 <xTaskResumeAll+0x11c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1cc      	bne.n	8002ee0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002f4c:	f000 fb50 	bl	80035f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002f50:	4b1c      	ldr	r3, [pc, #112]	; (8002fc4 <xTaskResumeAll+0x130>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d010      	beq.n	8002f7e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002f5c:	f000 f844 	bl	8002fe8 <xTaskIncrementTick>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002f66:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <xTaskResumeAll+0x12c>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1f1      	bne.n	8002f5c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002f78:	4b12      	ldr	r3, [pc, #72]	; (8002fc4 <xTaskResumeAll+0x130>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002f7e:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <xTaskResumeAll+0x12c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d009      	beq.n	8002f9a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002f86:	2301      	movs	r3, #1
 8002f88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002f8a:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <xTaskResumeAll+0x134>)
 8002f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	f3bf 8f4f 	dsb	sy
 8002f96:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002f9a:	f001 f8ff 	bl	800419c <vPortExitCritical>

	return xAlreadyYielded;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20000864 	.word	0x20000864
 8002fac:	2000083c 	.word	0x2000083c
 8002fb0:	200007fc 	.word	0x200007fc
 8002fb4:	20000844 	.word	0x20000844
 8002fb8:	20000740 	.word	0x20000740
 8002fbc:	2000073c 	.word	0x2000073c
 8002fc0:	20000850 	.word	0x20000850
 8002fc4:	2000084c 	.word	0x2000084c
 8002fc8:	e000ed04 	.word	0xe000ed04

08002fcc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002fd2:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <xTaskGetTickCount+0x18>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002fd8:	687b      	ldr	r3, [r7, #4]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr
 8002fe4:	20000840 	.word	0x20000840

08002fe8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ff2:	4b51      	ldr	r3, [pc, #324]	; (8003138 <xTaskIncrementTick+0x150>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f040 808d 	bne.w	8003116 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ffc:	4b4f      	ldr	r3, [pc, #316]	; (800313c <xTaskIncrementTick+0x154>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	3301      	adds	r3, #1
 8003002:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003004:	4a4d      	ldr	r2, [pc, #308]	; (800313c <xTaskIncrementTick+0x154>)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d120      	bne.n	8003052 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003010:	4b4b      	ldr	r3, [pc, #300]	; (8003140 <xTaskIncrementTick+0x158>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <xTaskIncrementTick+0x48>
	__asm volatile
 800301a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301e:	f383 8811 	msr	BASEPRI, r3
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	603b      	str	r3, [r7, #0]
}
 800302c:	bf00      	nop
 800302e:	e7fe      	b.n	800302e <xTaskIncrementTick+0x46>
 8003030:	4b43      	ldr	r3, [pc, #268]	; (8003140 <xTaskIncrementTick+0x158>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	4b43      	ldr	r3, [pc, #268]	; (8003144 <xTaskIncrementTick+0x15c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a41      	ldr	r2, [pc, #260]	; (8003140 <xTaskIncrementTick+0x158>)
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	4a41      	ldr	r2, [pc, #260]	; (8003144 <xTaskIncrementTick+0x15c>)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	4b40      	ldr	r3, [pc, #256]	; (8003148 <xTaskIncrementTick+0x160>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	3301      	adds	r3, #1
 800304a:	4a3f      	ldr	r2, [pc, #252]	; (8003148 <xTaskIncrementTick+0x160>)
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	f000 facf 	bl	80035f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003052:	4b3e      	ldr	r3, [pc, #248]	; (800314c <xTaskIncrementTick+0x164>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	429a      	cmp	r2, r3
 800305a:	d34d      	bcc.n	80030f8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800305c:	4b38      	ldr	r3, [pc, #224]	; (8003140 <xTaskIncrementTick+0x158>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <xTaskIncrementTick+0x82>
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <xTaskIncrementTick+0x84>
 800306a:	2300      	movs	r3, #0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d004      	beq.n	800307a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003070:	4b36      	ldr	r3, [pc, #216]	; (800314c <xTaskIncrementTick+0x164>)
 8003072:	f04f 32ff 	mov.w	r2, #4294967295
 8003076:	601a      	str	r2, [r3, #0]
					break;
 8003078:	e03e      	b.n	80030f8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800307a:	4b31      	ldr	r3, [pc, #196]	; (8003140 <xTaskIncrementTick+0x158>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	429a      	cmp	r2, r3
 8003090:	d203      	bcs.n	800309a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003092:	4a2e      	ldr	r2, [pc, #184]	; (800314c <xTaskIncrementTick+0x164>)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6013      	str	r3, [r2, #0]
						break;
 8003098:	e02e      	b.n	80030f8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	3304      	adds	r3, #4
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fe ffbc 	bl	800201c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d004      	beq.n	80030b6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	3318      	adds	r3, #24
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fe ffb3 	bl	800201c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ba:	2201      	movs	r2, #1
 80030bc:	409a      	lsls	r2, r3
 80030be:	4b24      	ldr	r3, [pc, #144]	; (8003150 <xTaskIncrementTick+0x168>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	4a22      	ldr	r2, [pc, #136]	; (8003150 <xTaskIncrementTick+0x168>)
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4a1f      	ldr	r2, [pc, #124]	; (8003154 <xTaskIncrementTick+0x16c>)
 80030d6:	441a      	add	r2, r3
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	3304      	adds	r3, #4
 80030dc:	4619      	mov	r1, r3
 80030de:	4610      	mov	r0, r2
 80030e0:	f7fe ff41 	bl	8001f66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e8:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <xTaskIncrementTick+0x170>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d3b4      	bcc.n	800305c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80030f2:	2301      	movs	r3, #1
 80030f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030f6:	e7b1      	b.n	800305c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80030f8:	4b17      	ldr	r3, [pc, #92]	; (8003158 <xTaskIncrementTick+0x170>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fe:	4915      	ldr	r1, [pc, #84]	; (8003154 <xTaskIncrementTick+0x16c>)
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d907      	bls.n	8003120 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003110:	2301      	movs	r3, #1
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	e004      	b.n	8003120 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003116:	4b11      	ldr	r3, [pc, #68]	; (800315c <xTaskIncrementTick+0x174>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	3301      	adds	r3, #1
 800311c:	4a0f      	ldr	r2, [pc, #60]	; (800315c <xTaskIncrementTick+0x174>)
 800311e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003120:	4b0f      	ldr	r3, [pc, #60]	; (8003160 <xTaskIncrementTick+0x178>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003128:	2301      	movs	r3, #1
 800312a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800312c:	697b      	ldr	r3, [r7, #20]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	20000864 	.word	0x20000864
 800313c:	20000840 	.word	0x20000840
 8003140:	200007f4 	.word	0x200007f4
 8003144:	200007f8 	.word	0x200007f8
 8003148:	20000854 	.word	0x20000854
 800314c:	2000085c 	.word	0x2000085c
 8003150:	20000844 	.word	0x20000844
 8003154:	20000740 	.word	0x20000740
 8003158:	2000073c 	.word	0x2000073c
 800315c:	2000084c 	.word	0x2000084c
 8003160:	20000850 	.word	0x20000850

08003164 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800316a:	4b26      	ldr	r3, [pc, #152]	; (8003204 <vTaskSwitchContext+0xa0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003172:	4b25      	ldr	r3, [pc, #148]	; (8003208 <vTaskSwitchContext+0xa4>)
 8003174:	2201      	movs	r2, #1
 8003176:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003178:	e03f      	b.n	80031fa <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800317a:	4b23      	ldr	r3, [pc, #140]	; (8003208 <vTaskSwitchContext+0xa4>)
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003180:	4b22      	ldr	r3, [pc, #136]	; (800320c <vTaskSwitchContext+0xa8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	fab3 f383 	clz	r3, r3
 800318c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800318e:	7afb      	ldrb	r3, [r7, #11]
 8003190:	f1c3 031f 	rsb	r3, r3, #31
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	491e      	ldr	r1, [pc, #120]	; (8003210 <vTaskSwitchContext+0xac>)
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10a      	bne.n	80031c0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80031aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ae:	f383 8811 	msr	BASEPRI, r3
 80031b2:	f3bf 8f6f 	isb	sy
 80031b6:	f3bf 8f4f 	dsb	sy
 80031ba:	607b      	str	r3, [r7, #4]
}
 80031bc:	bf00      	nop
 80031be:	e7fe      	b.n	80031be <vTaskSwitchContext+0x5a>
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4a11      	ldr	r2, [pc, #68]	; (8003210 <vTaskSwitchContext+0xac>)
 80031cc:	4413      	add	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	3308      	adds	r3, #8
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d104      	bne.n	80031f0 <vTaskSwitchContext+0x8c>
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	605a      	str	r2, [r3, #4]
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	4a07      	ldr	r2, [pc, #28]	; (8003214 <vTaskSwitchContext+0xb0>)
 80031f8:	6013      	str	r3, [r2, #0]
}
 80031fa:	bf00      	nop
 80031fc:	371c      	adds	r7, #28
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr
 8003204:	20000864 	.word	0x20000864
 8003208:	20000850 	.word	0x20000850
 800320c:	20000844 	.word	0x20000844
 8003210:	20000740 	.word	0x20000740
 8003214:	2000073c 	.word	0x2000073c

08003218 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10a      	bne.n	800323e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322c:	f383 8811 	msr	BASEPRI, r3
 8003230:	f3bf 8f6f 	isb	sy
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	60fb      	str	r3, [r7, #12]
}
 800323a:	bf00      	nop
 800323c:	e7fe      	b.n	800323c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800323e:	4b07      	ldr	r3, [pc, #28]	; (800325c <vTaskPlaceOnEventList+0x44>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	3318      	adds	r3, #24
 8003244:	4619      	mov	r1, r3
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fe feb0 	bl	8001fac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800324c:	2101      	movs	r1, #1
 800324e:	6838      	ldr	r0, [r7, #0]
 8003250:	f000 fa96 	bl	8003780 <prvAddCurrentTaskToDelayedList>
}
 8003254:	bf00      	nop
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	2000073c 	.word	0x2000073c

08003260 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10a      	bne.n	8003288 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003276:	f383 8811 	msr	BASEPRI, r3
 800327a:	f3bf 8f6f 	isb	sy
 800327e:	f3bf 8f4f 	dsb	sy
 8003282:	617b      	str	r3, [r7, #20]
}
 8003284:	bf00      	nop
 8003286:	e7fe      	b.n	8003286 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003288:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3318      	adds	r3, #24
 800328e:	4619      	mov	r1, r3
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f7fe fe68 	bl	8001f66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800329c:	f04f 33ff 	mov.w	r3, #4294967295
 80032a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	68b8      	ldr	r0, [r7, #8]
 80032a6:	f000 fa6b 	bl	8003780 <prvAddCurrentTaskToDelayedList>
	}
 80032aa:	bf00      	nop
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	2000073c 	.word	0x2000073c

080032b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10a      	bne.n	80032e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80032ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d2:	f383 8811 	msr	BASEPRI, r3
 80032d6:	f3bf 8f6f 	isb	sy
 80032da:	f3bf 8f4f 	dsb	sy
 80032de:	60fb      	str	r3, [r7, #12]
}
 80032e0:	bf00      	nop
 80032e2:	e7fe      	b.n	80032e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	3318      	adds	r3, #24
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fe fe97 	bl	800201c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032ee:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <xTaskRemoveFromEventList+0xac>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d11c      	bne.n	8003330 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	3304      	adds	r3, #4
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fe fe8e 	bl	800201c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	2201      	movs	r2, #1
 8003306:	409a      	lsls	r2, r3
 8003308:	4b17      	ldr	r3, [pc, #92]	; (8003368 <xTaskRemoveFromEventList+0xb0>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4313      	orrs	r3, r2
 800330e:	4a16      	ldr	r2, [pc, #88]	; (8003368 <xTaskRemoveFromEventList+0xb0>)
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4a13      	ldr	r2, [pc, #76]	; (800336c <xTaskRemoveFromEventList+0xb4>)
 8003320:	441a      	add	r2, r3
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	3304      	adds	r3, #4
 8003326:	4619      	mov	r1, r3
 8003328:	4610      	mov	r0, r2
 800332a:	f7fe fe1c 	bl	8001f66 <vListInsertEnd>
 800332e:	e005      	b.n	800333c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	3318      	adds	r3, #24
 8003334:	4619      	mov	r1, r3
 8003336:	480e      	ldr	r0, [pc, #56]	; (8003370 <xTaskRemoveFromEventList+0xb8>)
 8003338:	f7fe fe15 	bl	8001f66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003340:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <xTaskRemoveFromEventList+0xbc>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003346:	429a      	cmp	r2, r3
 8003348:	d905      	bls.n	8003356 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800334a:	2301      	movs	r3, #1
 800334c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800334e:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <xTaskRemoveFromEventList+0xc0>)
 8003350:	2201      	movs	r2, #1
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	e001      	b.n	800335a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800335a:	697b      	ldr	r3, [r7, #20]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	20000864 	.word	0x20000864
 8003368:	20000844 	.word	0x20000844
 800336c:	20000740 	.word	0x20000740
 8003370:	200007fc 	.word	0x200007fc
 8003374:	2000073c 	.word	0x2000073c
 8003378:	20000850 	.word	0x20000850

0800337c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003384:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <vTaskInternalSetTimeOutState+0x24>)
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800338c:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <vTaskInternalSetTimeOutState+0x28>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	605a      	str	r2, [r3, #4]
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	20000854 	.word	0x20000854
 80033a4:	20000840 	.word	0x20000840

080033a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10a      	bne.n	80033ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80033b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	613b      	str	r3, [r7, #16]
}
 80033ca:	bf00      	nop
 80033cc:	e7fe      	b.n	80033cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10a      	bne.n	80033ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80033d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	60fb      	str	r3, [r7, #12]
}
 80033e6:	bf00      	nop
 80033e8:	e7fe      	b.n	80033e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80033ea:	f000 fea7 	bl	800413c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80033ee:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <xTaskCheckForTimeOut+0xbc>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003406:	d102      	bne.n	800340e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003408:	2300      	movs	r3, #0
 800340a:	61fb      	str	r3, [r7, #28]
 800340c:	e023      	b.n	8003456 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	4b15      	ldr	r3, [pc, #84]	; (8003468 <xTaskCheckForTimeOut+0xc0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d007      	beq.n	800342a <xTaskCheckForTimeOut+0x82>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	429a      	cmp	r2, r3
 8003422:	d302      	bcc.n	800342a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003424:	2301      	movs	r3, #1
 8003426:	61fb      	str	r3, [r7, #28]
 8003428:	e015      	b.n	8003456 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	429a      	cmp	r2, r3
 8003432:	d20b      	bcs.n	800344c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	1ad2      	subs	r2, r2, r3
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff ff9b 	bl	800337c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003446:	2300      	movs	r3, #0
 8003448:	61fb      	str	r3, [r7, #28]
 800344a:	e004      	b.n	8003456 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003452:	2301      	movs	r3, #1
 8003454:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003456:	f000 fea1 	bl	800419c <vPortExitCritical>

	return xReturn;
 800345a:	69fb      	ldr	r3, [r7, #28]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3720      	adds	r7, #32
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	20000840 	.word	0x20000840
 8003468:	20000854 	.word	0x20000854

0800346c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003470:	4b03      	ldr	r3, [pc, #12]	; (8003480 <vTaskMissedYield+0x14>)
 8003472:	2201      	movs	r2, #1
 8003474:	601a      	str	r2, [r3, #0]
}
 8003476:	bf00      	nop
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	20000850 	.word	0x20000850

08003484 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800348c:	f000 f852 	bl	8003534 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003490:	4b06      	ldr	r3, [pc, #24]	; (80034ac <prvIdleTask+0x28>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d9f9      	bls.n	800348c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <prvIdleTask+0x2c>)
 800349a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80034a8:	e7f0      	b.n	800348c <prvIdleTask+0x8>
 80034aa:	bf00      	nop
 80034ac:	20000740 	.word	0x20000740
 80034b0:	e000ed04 	.word	0xe000ed04

080034b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034ba:	2300      	movs	r3, #0
 80034bc:	607b      	str	r3, [r7, #4]
 80034be:	e00c      	b.n	80034da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4a12      	ldr	r2, [pc, #72]	; (8003514 <prvInitialiseTaskLists+0x60>)
 80034cc:	4413      	add	r3, r2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe fd1e 	bl	8001f10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3301      	adds	r3, #1
 80034d8:	607b      	str	r3, [r7, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b06      	cmp	r3, #6
 80034de:	d9ef      	bls.n	80034c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80034e0:	480d      	ldr	r0, [pc, #52]	; (8003518 <prvInitialiseTaskLists+0x64>)
 80034e2:	f7fe fd15 	bl	8001f10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80034e6:	480d      	ldr	r0, [pc, #52]	; (800351c <prvInitialiseTaskLists+0x68>)
 80034e8:	f7fe fd12 	bl	8001f10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80034ec:	480c      	ldr	r0, [pc, #48]	; (8003520 <prvInitialiseTaskLists+0x6c>)
 80034ee:	f7fe fd0f 	bl	8001f10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80034f2:	480c      	ldr	r0, [pc, #48]	; (8003524 <prvInitialiseTaskLists+0x70>)
 80034f4:	f7fe fd0c 	bl	8001f10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80034f8:	480b      	ldr	r0, [pc, #44]	; (8003528 <prvInitialiseTaskLists+0x74>)
 80034fa:	f7fe fd09 	bl	8001f10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80034fe:	4b0b      	ldr	r3, [pc, #44]	; (800352c <prvInitialiseTaskLists+0x78>)
 8003500:	4a05      	ldr	r2, [pc, #20]	; (8003518 <prvInitialiseTaskLists+0x64>)
 8003502:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003504:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <prvInitialiseTaskLists+0x7c>)
 8003506:	4a05      	ldr	r2, [pc, #20]	; (800351c <prvInitialiseTaskLists+0x68>)
 8003508:	601a      	str	r2, [r3, #0]
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20000740 	.word	0x20000740
 8003518:	200007cc 	.word	0x200007cc
 800351c:	200007e0 	.word	0x200007e0
 8003520:	200007fc 	.word	0x200007fc
 8003524:	20000810 	.word	0x20000810
 8003528:	20000828 	.word	0x20000828
 800352c:	200007f4 	.word	0x200007f4
 8003530:	200007f8 	.word	0x200007f8

08003534 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800353a:	e019      	b.n	8003570 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800353c:	f000 fdfe 	bl	800413c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003540:	4b10      	ldr	r3, [pc, #64]	; (8003584 <prvCheckTasksWaitingTermination+0x50>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3304      	adds	r3, #4
 800354c:	4618      	mov	r0, r3
 800354e:	f7fe fd65 	bl	800201c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003552:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <prvCheckTasksWaitingTermination+0x54>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3b01      	subs	r3, #1
 8003558:	4a0b      	ldr	r2, [pc, #44]	; (8003588 <prvCheckTasksWaitingTermination+0x54>)
 800355a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800355c:	4b0b      	ldr	r3, [pc, #44]	; (800358c <prvCheckTasksWaitingTermination+0x58>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3b01      	subs	r3, #1
 8003562:	4a0a      	ldr	r2, [pc, #40]	; (800358c <prvCheckTasksWaitingTermination+0x58>)
 8003564:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003566:	f000 fe19 	bl	800419c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f810 	bl	8003590 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003570:	4b06      	ldr	r3, [pc, #24]	; (800358c <prvCheckTasksWaitingTermination+0x58>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1e1      	bne.n	800353c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003578:	bf00      	nop
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	20000810 	.word	0x20000810
 8003588:	2000083c 	.word	0x2000083c
 800358c:	20000824 	.word	0x20000824

08003590 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d108      	bne.n	80035b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 ff8c 	bl	80044c4 <vPortFree>
				vPortFree( pxTCB );
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 ff89 	bl	80044c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80035b2:	e018      	b.n	80035e6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d103      	bne.n	80035c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 ff80 	bl	80044c4 <vPortFree>
	}
 80035c4:	e00f      	b.n	80035e6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d00a      	beq.n	80035e6 <prvDeleteTCB+0x56>
	__asm volatile
 80035d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d4:	f383 8811 	msr	BASEPRI, r3
 80035d8:	f3bf 8f6f 	isb	sy
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	60fb      	str	r3, [r7, #12]
}
 80035e2:	bf00      	nop
 80035e4:	e7fe      	b.n	80035e4 <prvDeleteTCB+0x54>
	}
 80035e6:	bf00      	nop
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035f6:	4b0e      	ldr	r3, [pc, #56]	; (8003630 <prvResetNextTaskUnblockTime+0x40>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <prvResetNextTaskUnblockTime+0x14>
 8003600:	2301      	movs	r3, #1
 8003602:	e000      	b.n	8003606 <prvResetNextTaskUnblockTime+0x16>
 8003604:	2300      	movs	r3, #0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d004      	beq.n	8003614 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800360a:	4b0a      	ldr	r3, [pc, #40]	; (8003634 <prvResetNextTaskUnblockTime+0x44>)
 800360c:	f04f 32ff 	mov.w	r2, #4294967295
 8003610:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003612:	e008      	b.n	8003626 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003614:	4b06      	ldr	r3, [pc, #24]	; (8003630 <prvResetNextTaskUnblockTime+0x40>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	4a04      	ldr	r2, [pc, #16]	; (8003634 <prvResetNextTaskUnblockTime+0x44>)
 8003624:	6013      	str	r3, [r2, #0]
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr
 8003630:	200007f4 	.word	0x200007f4
 8003634:	2000085c 	.word	0x2000085c

08003638 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800363e:	4b0b      	ldr	r3, [pc, #44]	; (800366c <xTaskGetSchedulerState+0x34>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d102      	bne.n	800364c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003646:	2301      	movs	r3, #1
 8003648:	607b      	str	r3, [r7, #4]
 800364a:	e008      	b.n	800365e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800364c:	4b08      	ldr	r3, [pc, #32]	; (8003670 <xTaskGetSchedulerState+0x38>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d102      	bne.n	800365a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003654:	2302      	movs	r3, #2
 8003656:	607b      	str	r3, [r7, #4]
 8003658:	e001      	b.n	800365e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800365a:	2300      	movs	r3, #0
 800365c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800365e:	687b      	ldr	r3, [r7, #4]
	}
 8003660:	4618      	mov	r0, r3
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	bc80      	pop	{r7}
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	20000848 	.word	0x20000848
 8003670:	20000864 	.word	0x20000864

08003674 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d06e      	beq.n	8003768 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800368a:	4b3a      	ldr	r3, [pc, #232]	; (8003774 <xTaskPriorityDisinherit+0x100>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	429a      	cmp	r2, r3
 8003692:	d00a      	beq.n	80036aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	60fb      	str	r3, [r7, #12]
}
 80036a6:	bf00      	nop
 80036a8:	e7fe      	b.n	80036a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10a      	bne.n	80036c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80036b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b6:	f383 8811 	msr	BASEPRI, r3
 80036ba:	f3bf 8f6f 	isb	sy
 80036be:	f3bf 8f4f 	dsb	sy
 80036c2:	60bb      	str	r3, [r7, #8]
}
 80036c4:	bf00      	nop
 80036c6:	e7fe      	b.n	80036c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036cc:	1e5a      	subs	r2, r3, #1
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036da:	429a      	cmp	r2, r3
 80036dc:	d044      	beq.n	8003768 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d140      	bne.n	8003768 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	3304      	adds	r3, #4
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fe fc96 	bl	800201c <uxListRemove>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d115      	bne.n	8003722 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fa:	491f      	ldr	r1, [pc, #124]	; (8003778 <xTaskPriorityDisinherit+0x104>)
 80036fc:	4613      	mov	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10a      	bne.n	8003722 <xTaskPriorityDisinherit+0xae>
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	2201      	movs	r2, #1
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	43da      	mvns	r2, r3
 8003718:	4b18      	ldr	r3, [pc, #96]	; (800377c <xTaskPriorityDisinherit+0x108>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4013      	ands	r3, r2
 800371e:	4a17      	ldr	r2, [pc, #92]	; (800377c <xTaskPriorityDisinherit+0x108>)
 8003720:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	f1c3 0207 	rsb	r2, r3, #7
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373a:	2201      	movs	r2, #1
 800373c:	409a      	lsls	r2, r3
 800373e:	4b0f      	ldr	r3, [pc, #60]	; (800377c <xTaskPriorityDisinherit+0x108>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4313      	orrs	r3, r2
 8003744:	4a0d      	ldr	r2, [pc, #52]	; (800377c <xTaskPriorityDisinherit+0x108>)
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4a08      	ldr	r2, [pc, #32]	; (8003778 <xTaskPriorityDisinherit+0x104>)
 8003756:	441a      	add	r2, r3
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	3304      	adds	r3, #4
 800375c:	4619      	mov	r1, r3
 800375e:	4610      	mov	r0, r2
 8003760:	f7fe fc01 	bl	8001f66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003764:	2301      	movs	r3, #1
 8003766:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003768:	697b      	ldr	r3, [r7, #20]
	}
 800376a:	4618      	mov	r0, r3
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	2000073c 	.word	0x2000073c
 8003778:	20000740 	.word	0x20000740
 800377c:	20000844 	.word	0x20000844

08003780 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800378a:	4b29      	ldr	r3, [pc, #164]	; (8003830 <prvAddCurrentTaskToDelayedList+0xb0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003790:	4b28      	ldr	r3, [pc, #160]	; (8003834 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3304      	adds	r3, #4
 8003796:	4618      	mov	r0, r3
 8003798:	f7fe fc40 	bl	800201c <uxListRemove>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10b      	bne.n	80037ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80037a2:	4b24      	ldr	r3, [pc, #144]	; (8003834 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	2201      	movs	r2, #1
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	43da      	mvns	r2, r3
 80037b0:	4b21      	ldr	r3, [pc, #132]	; (8003838 <prvAddCurrentTaskToDelayedList+0xb8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4013      	ands	r3, r2
 80037b6:	4a20      	ldr	r2, [pc, #128]	; (8003838 <prvAddCurrentTaskToDelayedList+0xb8>)
 80037b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c0:	d10a      	bne.n	80037d8 <prvAddCurrentTaskToDelayedList+0x58>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d007      	beq.n	80037d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037c8:	4b1a      	ldr	r3, [pc, #104]	; (8003834 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3304      	adds	r3, #4
 80037ce:	4619      	mov	r1, r3
 80037d0:	481a      	ldr	r0, [pc, #104]	; (800383c <prvAddCurrentTaskToDelayedList+0xbc>)
 80037d2:	f7fe fbc8 	bl	8001f66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80037d6:	e026      	b.n	8003826 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4413      	add	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037e0:	4b14      	ldr	r3, [pc, #80]	; (8003834 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d209      	bcs.n	8003804 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037f0:	4b13      	ldr	r3, [pc, #76]	; (8003840 <prvAddCurrentTaskToDelayedList+0xc0>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	4b0f      	ldr	r3, [pc, #60]	; (8003834 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3304      	adds	r3, #4
 80037fa:	4619      	mov	r1, r3
 80037fc:	4610      	mov	r0, r2
 80037fe:	f7fe fbd5 	bl	8001fac <vListInsert>
}
 8003802:	e010      	b.n	8003826 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003804:	4b0f      	ldr	r3, [pc, #60]	; (8003844 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <prvAddCurrentTaskToDelayedList+0xb4>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	3304      	adds	r3, #4
 800380e:	4619      	mov	r1, r3
 8003810:	4610      	mov	r0, r2
 8003812:	f7fe fbcb 	bl	8001fac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003816:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	429a      	cmp	r2, r3
 800381e:	d202      	bcs.n	8003826 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003820:	4a09      	ldr	r2, [pc, #36]	; (8003848 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	6013      	str	r3, [r2, #0]
}
 8003826:	bf00      	nop
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000840 	.word	0x20000840
 8003834:	2000073c 	.word	0x2000073c
 8003838:	20000844 	.word	0x20000844
 800383c:	20000828 	.word	0x20000828
 8003840:	200007f8 	.word	0x200007f8
 8003844:	200007f4 	.word	0x200007f4
 8003848:	2000085c 	.word	0x2000085c

0800384c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08a      	sub	sp, #40	; 0x28
 8003850:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003856:	f000 fb41 	bl	8003edc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800385a:	4b1c      	ldr	r3, [pc, #112]	; (80038cc <xTimerCreateTimerTask+0x80>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d021      	beq.n	80038a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003866:	2300      	movs	r3, #0
 8003868:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800386a:	1d3a      	adds	r2, r7, #4
 800386c:	f107 0108 	add.w	r1, r7, #8
 8003870:	f107 030c 	add.w	r3, r7, #12
 8003874:	4618      	mov	r0, r3
 8003876:	f7fc fc83 	bl	8000180 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	9202      	str	r2, [sp, #8]
 8003882:	9301      	str	r3, [sp, #4]
 8003884:	2302      	movs	r3, #2
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	2300      	movs	r3, #0
 800388a:	460a      	mov	r2, r1
 800388c:	4910      	ldr	r1, [pc, #64]	; (80038d0 <xTimerCreateTimerTask+0x84>)
 800388e:	4811      	ldr	r0, [pc, #68]	; (80038d4 <xTimerCreateTimerTask+0x88>)
 8003890:	f7ff f8ce 	bl	8002a30 <xTaskCreateStatic>
 8003894:	4603      	mov	r3, r0
 8003896:	4a10      	ldr	r2, [pc, #64]	; (80038d8 <xTimerCreateTimerTask+0x8c>)
 8003898:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800389a:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <xTimerCreateTimerTask+0x8c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80038a2:	2301      	movs	r3, #1
 80038a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10a      	bne.n	80038c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80038ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	613b      	str	r3, [r7, #16]
}
 80038be:	bf00      	nop
 80038c0:	e7fe      	b.n	80038c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80038c2:	697b      	ldr	r3, [r7, #20]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	20000898 	.word	0x20000898
 80038d0:	080056ac 	.word	0x080056ac
 80038d4:	08003b19 	.word	0x08003b19
 80038d8:	2000089c 	.word	0x2000089c

080038dc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af02      	add	r7, sp, #8
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
 80038e8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80038ea:	202c      	movs	r0, #44	; 0x2c
 80038ec:	f000 fd26 	bl	800433c <pvPortMalloc>
 80038f0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00d      	beq.n	8003914 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	9301      	str	r3, [sp, #4]
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	68b9      	ldr	r1, [r7, #8]
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 f846 	bl	8003998 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8003914:	697b      	ldr	r3, [r7, #20]
	}
 8003916:	4618      	mov	r0, r3
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800391e:	b580      	push	{r7, lr}
 8003920:	b08a      	sub	sp, #40	; 0x28
 8003922:	af02      	add	r7, sp, #8
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	607a      	str	r2, [r7, #4]
 800392a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800392c:	232c      	movs	r3, #44	; 0x2c
 800392e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	2b2c      	cmp	r3, #44	; 0x2c
 8003934:	d00a      	beq.n	800394c <xTimerCreateStatic+0x2e>
	__asm volatile
 8003936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393a:	f383 8811 	msr	BASEPRI, r3
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f3bf 8f4f 	dsb	sy
 8003946:	61bb      	str	r3, [r7, #24]
}
 8003948:	bf00      	nop
 800394a:	e7fe      	b.n	800394a <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800394c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10a      	bne.n	8003968 <xTimerCreateStatic+0x4a>
	__asm volatile
 8003952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003956:	f383 8811 	msr	BASEPRI, r3
 800395a:	f3bf 8f6f 	isb	sy
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	617b      	str	r3, [r7, #20]
}
 8003964:	bf00      	nop
 8003966:	e7fe      	b.n	8003966 <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396a:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00d      	beq.n	800398e <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	9301      	str	r3, [sp, #4]
 8003976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	68b9      	ldr	r1, [r7, #8]
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 f809 	bl	8003998 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800398e:	69fb      	ldr	r3, [r7, #28]
	}
 8003990:	4618      	mov	r0, r3
 8003992:	3720      	adds	r7, #32
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10a      	bne.n	80039c2 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80039ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	617b      	str	r3, [r7, #20]
}
 80039be:	bf00      	nop
 80039c0:	e7fe      	b.n	80039c0 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d015      	beq.n	80039f4 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80039c8:	f000 fa88 	bl	8003edc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	6a3a      	ldr	r2, [r7, #32]
 80039e8:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	3304      	adds	r3, #4
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe faad 	bl	8001f4e <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80039f4:	bf00      	nop
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08a      	sub	sp, #40	; 0x28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
 8003a08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10a      	bne.n	8003a2a <xTimerGenericCommand+0x2e>
	__asm volatile
 8003a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	623b      	str	r3, [r7, #32]
}
 8003a26:	bf00      	nop
 8003a28:	e7fe      	b.n	8003a28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003a2a:	4b1a      	ldr	r3, [pc, #104]	; (8003a94 <xTimerGenericCommand+0x98>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d02a      	beq.n	8003a88 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b05      	cmp	r3, #5
 8003a42:	dc18      	bgt.n	8003a76 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a44:	f7ff fdf8 	bl	8003638 <xTaskGetSchedulerState>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d109      	bne.n	8003a62 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a4e:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <xTimerGenericCommand+0x98>)
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	f107 0114 	add.w	r1, r7, #20
 8003a56:	2300      	movs	r3, #0
 8003a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a5a:	f7fe fc07 	bl	800226c <xQueueGenericSend>
 8003a5e:	6278      	str	r0, [r7, #36]	; 0x24
 8003a60:	e012      	b.n	8003a88 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a62:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <xTimerGenericCommand+0x98>)
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	f107 0114 	add.w	r1, r7, #20
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f7fe fbfd 	bl	800226c <xQueueGenericSend>
 8003a72:	6278      	str	r0, [r7, #36]	; 0x24
 8003a74:	e008      	b.n	8003a88 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a76:	4b07      	ldr	r3, [pc, #28]	; (8003a94 <xTimerGenericCommand+0x98>)
 8003a78:	6818      	ldr	r0, [r3, #0]
 8003a7a:	f107 0114 	add.w	r1, r7, #20
 8003a7e:	2300      	movs	r3, #0
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	f7fe fcf1 	bl	8002468 <xQueueGenericSendFromISR>
 8003a86:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3728      	adds	r7, #40	; 0x28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20000898 	.word	0x20000898

08003a98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003aa2:	4b1c      	ldr	r3, [pc, #112]	; (8003b14 <prvProcessExpiredTimer+0x7c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	3304      	adds	r3, #4
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fe fab3 	bl	800201c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d122      	bne.n	8003b04 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	699a      	ldr	r2, [r3, #24]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	18d1      	adds	r1, r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	6978      	ldr	r0, [r7, #20]
 8003acc:	f000 f8c8 	bl	8003c60 <prvInsertTimerInActiveList>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d016      	beq.n	8003b04 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	2300      	movs	r3, #0
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	2100      	movs	r1, #0
 8003ae0:	6978      	ldr	r0, [r7, #20]
 8003ae2:	f7ff ff8b 	bl	80039fc <xTimerGenericCommand>
 8003ae6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10a      	bne.n	8003b04 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af2:	f383 8811 	msr	BASEPRI, r3
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	60fb      	str	r3, [r7, #12]
}
 8003b00:	bf00      	nop
 8003b02:	e7fe      	b.n	8003b02 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	6978      	ldr	r0, [r7, #20]
 8003b0a:	4798      	blx	r3
}
 8003b0c:	bf00      	nop
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	20000890 	.word	0x20000890

08003b18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b20:	f107 0308 	add.w	r3, r7, #8
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 f857 	bl	8003bd8 <prvGetNextExpireTime>
 8003b2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	4619      	mov	r1, r3
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 f803 	bl	8003b3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003b36:	f000 f8d5 	bl	8003ce4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b3a:	e7f1      	b.n	8003b20 <prvTimerTask+0x8>

08003b3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003b46:	f7ff f997 	bl	8002e78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b4a:	f107 0308 	add.w	r3, r7, #8
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 f866 	bl	8003c20 <prvSampleTimeNow>
 8003b54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d130      	bne.n	8003bbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10a      	bne.n	8003b78 <prvProcessTimerOrBlockTask+0x3c>
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d806      	bhi.n	8003b78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003b6a:	f7ff f993 	bl	8002e94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b6e:	68f9      	ldr	r1, [r7, #12]
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff ff91 	bl	8003a98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003b76:	e024      	b.n	8003bc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d008      	beq.n	8003b90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b7e:	4b13      	ldr	r3, [pc, #76]	; (8003bcc <prvProcessTimerOrBlockTask+0x90>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	bf0c      	ite	eq
 8003b88:	2301      	moveq	r3, #1
 8003b8a:	2300      	movne	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b90:	4b0f      	ldr	r3, [pc, #60]	; (8003bd0 <prvProcessTimerOrBlockTask+0x94>)
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	f7fe ff13 	bl	80029c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003ba2:	f7ff f977 	bl	8002e94 <xTaskResumeAll>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10a      	bne.n	8003bc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003bac:	4b09      	ldr	r3, [pc, #36]	; (8003bd4 <prvProcessTimerOrBlockTask+0x98>)
 8003bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	f3bf 8f6f 	isb	sy
}
 8003bbc:	e001      	b.n	8003bc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003bbe:	f7ff f969 	bl	8002e94 <xTaskResumeAll>
}
 8003bc2:	bf00      	nop
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20000894 	.word	0x20000894
 8003bd0:	20000898 	.word	0x20000898
 8003bd4:	e000ed04 	.word	0xe000ed04

08003bd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003be0:	4b0e      	ldr	r3, [pc, #56]	; (8003c1c <prvGetNextExpireTime+0x44>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	bf0c      	ite	eq
 8003bea:	2301      	moveq	r3, #1
 8003bec:	2300      	movne	r3, #0
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d105      	bne.n	8003c0a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003bfe:	4b07      	ldr	r3, [pc, #28]	; (8003c1c <prvGetNextExpireTime+0x44>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	e001      	b.n	8003c0e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	20000890 	.word	0x20000890

08003c20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003c28:	f7ff f9d0 	bl	8002fcc <xTaskGetTickCount>
 8003c2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003c2e:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <prvSampleTimeNow+0x3c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d205      	bcs.n	8003c44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003c38:	f000 f8ee 	bl	8003e18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	e002      	b.n	8003c4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003c4a:	4a04      	ldr	r2, [pc, #16]	; (8003c5c <prvSampleTimeNow+0x3c>)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003c50:	68fb      	ldr	r3, [r7, #12]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	200008a0 	.word	0x200008a0

08003c60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d812      	bhi.n	8003cac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	1ad2      	subs	r2, r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d302      	bcc.n	8003c9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003c94:	2301      	movs	r3, #1
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	e01b      	b.n	8003cd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c9a:	4b10      	ldr	r3, [pc, #64]	; (8003cdc <prvInsertTimerInActiveList+0x7c>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	f7fe f981 	bl	8001fac <vListInsert>
 8003caa:	e012      	b.n	8003cd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d206      	bcs.n	8003cc2 <prvInsertTimerInActiveList+0x62>
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d302      	bcc.n	8003cc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	e007      	b.n	8003cd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003cc2:	4b07      	ldr	r3, [pc, #28]	; (8003ce0 <prvInsertTimerInActiveList+0x80>)
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4610      	mov	r0, r2
 8003cce:	f7fe f96d 	bl	8001fac <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003cd2:	697b      	ldr	r3, [r7, #20]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3718      	adds	r7, #24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20000894 	.word	0x20000894
 8003ce0:	20000890 	.word	0x20000890

08003ce4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08c      	sub	sp, #48	; 0x30
 8003ce8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003cea:	e081      	b.n	8003df0 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	db7d      	blt.n	8003dee <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d004      	beq.n	8003d08 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	3304      	adds	r3, #4
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fe f98a 	bl	800201c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d08:	1d3b      	adds	r3, r7, #4
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff ff88 	bl	8003c20 <prvSampleTimeNow>
 8003d10:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b09      	cmp	r3, #9
 8003d16:	d86b      	bhi.n	8003df0 <prvProcessReceivedCommands+0x10c>
 8003d18:	a201      	add	r2, pc, #4	; (adr r2, 8003d20 <prvProcessReceivedCommands+0x3c>)
 8003d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1e:	bf00      	nop
 8003d20:	08003d49 	.word	0x08003d49
 8003d24:	08003d49 	.word	0x08003d49
 8003d28:	08003d49 	.word	0x08003d49
 8003d2c:	08003df1 	.word	0x08003df1
 8003d30:	08003da5 	.word	0x08003da5
 8003d34:	08003ddd 	.word	0x08003ddd
 8003d38:	08003d49 	.word	0x08003d49
 8003d3c:	08003d49 	.word	0x08003d49
 8003d40:	08003df1 	.word	0x08003df1
 8003d44:	08003da5 	.word	0x08003da5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	18d1      	adds	r1, r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a3a      	ldr	r2, [r7, #32]
 8003d54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d56:	f7ff ff83 	bl	8003c60 <prvInsertTimerInActiveList>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d047      	beq.n	8003df0 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d66:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d13f      	bne.n	8003df0 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	441a      	add	r2, r3
 8003d78:	2300      	movs	r3, #0
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	2100      	movs	r1, #0
 8003d80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d82:	f7ff fe3b 	bl	80039fc <xTimerGenericCommand>
 8003d86:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d130      	bne.n	8003df0 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 8003d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	f3bf 8f6f 	isb	sy
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	61bb      	str	r3, [r7, #24]
}
 8003da0:	bf00      	nop
 8003da2:	e7fe      	b.n	8003da2 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10a      	bne.n	8003dc8 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 8003db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	617b      	str	r3, [r7, #20]
}
 8003dc4:	bf00      	nop
 8003dc6:	e7fe      	b.n	8003dc6 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	699a      	ldr	r2, [r3, #24]
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	18d1      	adds	r1, r2, r3
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	6a3a      	ldr	r2, [r7, #32]
 8003dd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dd6:	f7ff ff43 	bl	8003c60 <prvInsertTimerInActiveList>
					break;
 8003dda:	e009      	b.n	8003df0 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d104      	bne.n	8003df0 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 8003de6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003de8:	f000 fb6c 	bl	80044c4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003dec:	e000      	b.n	8003df0 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003dee:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003df0:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <prvProcessReceivedCommands+0x130>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f107 0108 	add.w	r1, r7, #8
 8003df8:	2200      	movs	r2, #0
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fe fbcc 	bl	8002598 <xQueueReceive>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f47f af72 	bne.w	8003cec <prvProcessReceivedCommands+0x8>
	}
}
 8003e08:	bf00      	nop
 8003e0a:	bf00      	nop
 8003e0c:	3728      	adds	r7, #40	; 0x28
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	20000898 	.word	0x20000898

08003e18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e1e:	e045      	b.n	8003eac <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e20:	4b2c      	ldr	r3, [pc, #176]	; (8003ed4 <prvSwitchTimerLists+0xbc>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e2a:	4b2a      	ldr	r3, [pc, #168]	; (8003ed4 <prvSwitchTimerLists+0xbc>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	3304      	adds	r3, #4
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fe f8ef 	bl	800201c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d12e      	bne.n	8003eac <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	4413      	add	r3, r2
 8003e56:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d90e      	bls.n	8003e7e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e6c:	4b19      	ldr	r3, [pc, #100]	; (8003ed4 <prvSwitchTimerLists+0xbc>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3304      	adds	r3, #4
 8003e74:	4619      	mov	r1, r3
 8003e76:	4610      	mov	r0, r2
 8003e78:	f7fe f898 	bl	8001fac <vListInsert>
 8003e7c:	e016      	b.n	8003eac <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e7e:	2300      	movs	r3, #0
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	2300      	movs	r3, #0
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	2100      	movs	r1, #0
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f7ff fdb7 	bl	80039fc <xTimerGenericCommand>
 8003e8e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10a      	bne.n	8003eac <prvSwitchTimerLists+0x94>
	__asm volatile
 8003e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	603b      	str	r3, [r7, #0]
}
 8003ea8:	bf00      	nop
 8003eaa:	e7fe      	b.n	8003eaa <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003eac:	4b09      	ldr	r3, [pc, #36]	; (8003ed4 <prvSwitchTimerLists+0xbc>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1b4      	bne.n	8003e20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003eb6:	4b07      	ldr	r3, [pc, #28]	; (8003ed4 <prvSwitchTimerLists+0xbc>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003ebc:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <prvSwitchTimerLists+0xc0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a04      	ldr	r2, [pc, #16]	; (8003ed4 <prvSwitchTimerLists+0xbc>)
 8003ec2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003ec4:	4a04      	ldr	r2, [pc, #16]	; (8003ed8 <prvSwitchTimerLists+0xc0>)
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	6013      	str	r3, [r2, #0]
}
 8003eca:	bf00      	nop
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20000890 	.word	0x20000890
 8003ed8:	20000894 	.word	0x20000894

08003edc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003ee2:	f000 f92b 	bl	800413c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003ee6:	4b15      	ldr	r3, [pc, #84]	; (8003f3c <prvCheckForValidListAndQueue+0x60>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d120      	bne.n	8003f30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003eee:	4814      	ldr	r0, [pc, #80]	; (8003f40 <prvCheckForValidListAndQueue+0x64>)
 8003ef0:	f7fe f80e 	bl	8001f10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003ef4:	4813      	ldr	r0, [pc, #76]	; (8003f44 <prvCheckForValidListAndQueue+0x68>)
 8003ef6:	f7fe f80b 	bl	8001f10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003efa:	4b13      	ldr	r3, [pc, #76]	; (8003f48 <prvCheckForValidListAndQueue+0x6c>)
 8003efc:	4a10      	ldr	r2, [pc, #64]	; (8003f40 <prvCheckForValidListAndQueue+0x64>)
 8003efe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003f00:	4b12      	ldr	r3, [pc, #72]	; (8003f4c <prvCheckForValidListAndQueue+0x70>)
 8003f02:	4a10      	ldr	r2, [pc, #64]	; (8003f44 <prvCheckForValidListAndQueue+0x68>)
 8003f04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003f06:	2300      	movs	r3, #0
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	4b11      	ldr	r3, [pc, #68]	; (8003f50 <prvCheckForValidListAndQueue+0x74>)
 8003f0c:	4a11      	ldr	r2, [pc, #68]	; (8003f54 <prvCheckForValidListAndQueue+0x78>)
 8003f0e:	210c      	movs	r1, #12
 8003f10:	200a      	movs	r0, #10
 8003f12:	f7fe f915 	bl	8002140 <xQueueGenericCreateStatic>
 8003f16:	4603      	mov	r3, r0
 8003f18:	4a08      	ldr	r2, [pc, #32]	; (8003f3c <prvCheckForValidListAndQueue+0x60>)
 8003f1a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003f1c:	4b07      	ldr	r3, [pc, #28]	; (8003f3c <prvCheckForValidListAndQueue+0x60>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d005      	beq.n	8003f30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003f24:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <prvCheckForValidListAndQueue+0x60>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	490b      	ldr	r1, [pc, #44]	; (8003f58 <prvCheckForValidListAndQueue+0x7c>)
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fe fd24 	bl	8002978 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f30:	f000 f934 	bl	800419c <vPortExitCritical>
}
 8003f34:	bf00      	nop
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20000898 	.word	0x20000898
 8003f40:	20000868 	.word	0x20000868
 8003f44:	2000087c 	.word	0x2000087c
 8003f48:	20000890 	.word	0x20000890
 8003f4c:	20000894 	.word	0x20000894
 8003f50:	2000091c 	.word	0x2000091c
 8003f54:	200008a4 	.word	0x200008a4
 8003f58:	080056b4 	.word	0x080056b4

08003f5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	3b04      	subs	r3, #4
 8003f6c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	3b04      	subs	r3, #4
 8003f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f023 0201 	bic.w	r2, r3, #1
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	3b04      	subs	r3, #4
 8003f8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003f8c:	4a08      	ldr	r2, [pc, #32]	; (8003fb0 <pxPortInitialiseStack+0x54>)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	3b14      	subs	r3, #20
 8003f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	3b20      	subs	r3, #32
 8003fa2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr
 8003fb0:	08003fb5 	.word	0x08003fb5

08003fb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003fbe:	4b12      	ldr	r3, [pc, #72]	; (8004008 <prvTaskExitError+0x54>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc6:	d00a      	beq.n	8003fde <prvTaskExitError+0x2a>
	__asm volatile
 8003fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fcc:	f383 8811 	msr	BASEPRI, r3
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	60fb      	str	r3, [r7, #12]
}
 8003fda:	bf00      	nop
 8003fdc:	e7fe      	b.n	8003fdc <prvTaskExitError+0x28>
	__asm volatile
 8003fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	60bb      	str	r3, [r7, #8]
}
 8003ff0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003ff2:	bf00      	nop
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0fc      	beq.n	8003ff4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003ffa:	bf00      	nop
 8003ffc:	bf00      	nop
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	2000000c 	.word	0x2000000c
 800400c:	00000000 	.word	0x00000000

08004010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004010:	4b07      	ldr	r3, [pc, #28]	; (8004030 <pxCurrentTCBConst2>)
 8004012:	6819      	ldr	r1, [r3, #0]
 8004014:	6808      	ldr	r0, [r1, #0]
 8004016:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800401a:	f380 8809 	msr	PSP, r0
 800401e:	f3bf 8f6f 	isb	sy
 8004022:	f04f 0000 	mov.w	r0, #0
 8004026:	f380 8811 	msr	BASEPRI, r0
 800402a:	f04e 0e0d 	orr.w	lr, lr, #13
 800402e:	4770      	bx	lr

08004030 <pxCurrentTCBConst2>:
 8004030:	2000073c 	.word	0x2000073c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004034:	bf00      	nop
 8004036:	bf00      	nop

08004038 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004038:	4806      	ldr	r0, [pc, #24]	; (8004054 <prvPortStartFirstTask+0x1c>)
 800403a:	6800      	ldr	r0, [r0, #0]
 800403c:	6800      	ldr	r0, [r0, #0]
 800403e:	f380 8808 	msr	MSP, r0
 8004042:	b662      	cpsie	i
 8004044:	b661      	cpsie	f
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	df00      	svc	0
 8004050:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004052:	bf00      	nop
 8004054:	e000ed08 	.word	0xe000ed08

08004058 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800405e:	4b32      	ldr	r3, [pc, #200]	; (8004128 <xPortStartScheduler+0xd0>)
 8004060:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	22ff      	movs	r2, #255	; 0xff
 800406e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004078:	78fb      	ldrb	r3, [r7, #3]
 800407a:	b2db      	uxtb	r3, r3
 800407c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004080:	b2da      	uxtb	r2, r3
 8004082:	4b2a      	ldr	r3, [pc, #168]	; (800412c <xPortStartScheduler+0xd4>)
 8004084:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004086:	4b2a      	ldr	r3, [pc, #168]	; (8004130 <xPortStartScheduler+0xd8>)
 8004088:	2207      	movs	r2, #7
 800408a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800408c:	e009      	b.n	80040a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800408e:	4b28      	ldr	r3, [pc, #160]	; (8004130 <xPortStartScheduler+0xd8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	3b01      	subs	r3, #1
 8004094:	4a26      	ldr	r2, [pc, #152]	; (8004130 <xPortStartScheduler+0xd8>)
 8004096:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	b2db      	uxtb	r3, r3
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040a2:	78fb      	ldrb	r3, [r7, #3]
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040aa:	2b80      	cmp	r3, #128	; 0x80
 80040ac:	d0ef      	beq.n	800408e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80040ae:	4b20      	ldr	r3, [pc, #128]	; (8004130 <xPortStartScheduler+0xd8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f1c3 0307 	rsb	r3, r3, #7
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d00a      	beq.n	80040d0 <xPortStartScheduler+0x78>
	__asm volatile
 80040ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040be:	f383 8811 	msr	BASEPRI, r3
 80040c2:	f3bf 8f6f 	isb	sy
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	60bb      	str	r3, [r7, #8]
}
 80040cc:	bf00      	nop
 80040ce:	e7fe      	b.n	80040ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80040d0:	4b17      	ldr	r3, [pc, #92]	; (8004130 <xPortStartScheduler+0xd8>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	021b      	lsls	r3, r3, #8
 80040d6:	4a16      	ldr	r2, [pc, #88]	; (8004130 <xPortStartScheduler+0xd8>)
 80040d8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80040da:	4b15      	ldr	r3, [pc, #84]	; (8004130 <xPortStartScheduler+0xd8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040e2:	4a13      	ldr	r2, [pc, #76]	; (8004130 <xPortStartScheduler+0xd8>)
 80040e4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80040ee:	4b11      	ldr	r3, [pc, #68]	; (8004134 <xPortStartScheduler+0xdc>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a10      	ldr	r2, [pc, #64]	; (8004134 <xPortStartScheduler+0xdc>)
 80040f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80040fa:	4b0e      	ldr	r3, [pc, #56]	; (8004134 <xPortStartScheduler+0xdc>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a0d      	ldr	r2, [pc, #52]	; (8004134 <xPortStartScheduler+0xdc>)
 8004100:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004104:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004106:	f000 f8b9 	bl	800427c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800410a:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <xPortStartScheduler+0xe0>)
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004110:	f7ff ff92 	bl	8004038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004114:	f7ff f826 	bl	8003164 <vTaskSwitchContext>
	prvTaskExitError();
 8004118:	f7ff ff4c 	bl	8003fb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	e000e400 	.word	0xe000e400
 800412c:	20000964 	.word	0x20000964
 8004130:	20000968 	.word	0x20000968
 8004134:	e000ed20 	.word	0xe000ed20
 8004138:	2000000c 	.word	0x2000000c

0800413c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
	__asm volatile
 8004142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	607b      	str	r3, [r7, #4]
}
 8004154:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004156:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <vPortEnterCritical+0x58>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3301      	adds	r3, #1
 800415c:	4a0d      	ldr	r2, [pc, #52]	; (8004194 <vPortEnterCritical+0x58>)
 800415e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004160:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <vPortEnterCritical+0x58>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d10f      	bne.n	8004188 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004168:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <vPortEnterCritical+0x5c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <vPortEnterCritical+0x4c>
	__asm volatile
 8004172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004176:	f383 8811 	msr	BASEPRI, r3
 800417a:	f3bf 8f6f 	isb	sy
 800417e:	f3bf 8f4f 	dsb	sy
 8004182:	603b      	str	r3, [r7, #0]
}
 8004184:	bf00      	nop
 8004186:	e7fe      	b.n	8004186 <vPortEnterCritical+0x4a>
	}
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	2000000c 	.word	0x2000000c
 8004198:	e000ed04 	.word	0xe000ed04

0800419c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80041a2:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <vPortExitCritical+0x4c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10a      	bne.n	80041c0 <vPortExitCritical+0x24>
	__asm volatile
 80041aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ae:	f383 8811 	msr	BASEPRI, r3
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	607b      	str	r3, [r7, #4]
}
 80041bc:	bf00      	nop
 80041be:	e7fe      	b.n	80041be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80041c0:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <vPortExitCritical+0x4c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3b01      	subs	r3, #1
 80041c6:	4a08      	ldr	r2, [pc, #32]	; (80041e8 <vPortExitCritical+0x4c>)
 80041c8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80041ca:	4b07      	ldr	r3, [pc, #28]	; (80041e8 <vPortExitCritical+0x4c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d105      	bne.n	80041de <vPortExitCritical+0x42>
 80041d2:	2300      	movs	r3, #0
 80041d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	f383 8811 	msr	BASEPRI, r3
}
 80041dc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr
 80041e8:	2000000c 	.word	0x2000000c
 80041ec:	00000000 	.word	0x00000000

080041f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80041f0:	f3ef 8009 	mrs	r0, PSP
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	4b0d      	ldr	r3, [pc, #52]	; (8004230 <pxCurrentTCBConst>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004200:	6010      	str	r0, [r2, #0]
 8004202:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004206:	f04f 0050 	mov.w	r0, #80	; 0x50
 800420a:	f380 8811 	msr	BASEPRI, r0
 800420e:	f7fe ffa9 	bl	8003164 <vTaskSwitchContext>
 8004212:	f04f 0000 	mov.w	r0, #0
 8004216:	f380 8811 	msr	BASEPRI, r0
 800421a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800421e:	6819      	ldr	r1, [r3, #0]
 8004220:	6808      	ldr	r0, [r1, #0]
 8004222:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004226:	f380 8809 	msr	PSP, r0
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	4770      	bx	lr

08004230 <pxCurrentTCBConst>:
 8004230:	2000073c 	.word	0x2000073c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004234:	bf00      	nop
 8004236:	bf00      	nop

08004238 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
	__asm volatile
 800423e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	607b      	str	r3, [r7, #4]
}
 8004250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004252:	f7fe fec9 	bl	8002fe8 <xTaskIncrementTick>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800425c:	4b06      	ldr	r3, [pc, #24]	; (8004278 <SysTick_Handler+0x40>)
 800425e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	2300      	movs	r3, #0
 8004266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	f383 8811 	msr	BASEPRI, r3
}
 800426e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004270:	bf00      	nop
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	e000ed04 	.word	0xe000ed04

0800427c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004280:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <vPortSetupTimerInterrupt+0x30>)
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004286:	4b0a      	ldr	r3, [pc, #40]	; (80042b0 <vPortSetupTimerInterrupt+0x34>)
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800428c:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <vPortSetupTimerInterrupt+0x38>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a09      	ldr	r2, [pc, #36]	; (80042b8 <vPortSetupTimerInterrupt+0x3c>)
 8004292:	fba2 2303 	umull	r2, r3, r2, r3
 8004296:	099b      	lsrs	r3, r3, #6
 8004298:	4a08      	ldr	r2, [pc, #32]	; (80042bc <vPortSetupTimerInterrupt+0x40>)
 800429a:	3b01      	subs	r3, #1
 800429c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800429e:	4b03      	ldr	r3, [pc, #12]	; (80042ac <vPortSetupTimerInterrupt+0x30>)
 80042a0:	2207      	movs	r2, #7
 80042a2:	601a      	str	r2, [r3, #0]
}
 80042a4:	bf00      	nop
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr
 80042ac:	e000e010 	.word	0xe000e010
 80042b0:	e000e018 	.word	0xe000e018
 80042b4:	20000000 	.word	0x20000000
 80042b8:	10624dd3 	.word	0x10624dd3
 80042bc:	e000e014 	.word	0xe000e014

080042c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80042c6:	f3ef 8305 	mrs	r3, IPSR
 80042ca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b0f      	cmp	r3, #15
 80042d0:	d914      	bls.n	80042fc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80042d2:	4a16      	ldr	r2, [pc, #88]	; (800432c <vPortValidateInterruptPriority+0x6c>)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4413      	add	r3, r2
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80042dc:	4b14      	ldr	r3, [pc, #80]	; (8004330 <vPortValidateInterruptPriority+0x70>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	7afa      	ldrb	r2, [r7, #11]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d20a      	bcs.n	80042fc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80042e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ea:	f383 8811 	msr	BASEPRI, r3
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	607b      	str	r3, [r7, #4]
}
 80042f8:	bf00      	nop
 80042fa:	e7fe      	b.n	80042fa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80042fc:	4b0d      	ldr	r3, [pc, #52]	; (8004334 <vPortValidateInterruptPriority+0x74>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004304:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <vPortValidateInterruptPriority+0x78>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	429a      	cmp	r2, r3
 800430a:	d90a      	bls.n	8004322 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800430c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	603b      	str	r3, [r7, #0]
}
 800431e:	bf00      	nop
 8004320:	e7fe      	b.n	8004320 <vPortValidateInterruptPriority+0x60>
	}
 8004322:	bf00      	nop
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr
 800432c:	e000e3f0 	.word	0xe000e3f0
 8004330:	20000964 	.word	0x20000964
 8004334:	e000ed0c 	.word	0xe000ed0c
 8004338:	20000968 	.word	0x20000968

0800433c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08a      	sub	sp, #40	; 0x28
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004344:	2300      	movs	r3, #0
 8004346:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004348:	f7fe fd96 	bl	8002e78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800434c:	4b58      	ldr	r3, [pc, #352]	; (80044b0 <pvPortMalloc+0x174>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004354:	f000 f910 	bl	8004578 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004358:	4b56      	ldr	r3, [pc, #344]	; (80044b4 <pvPortMalloc+0x178>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4013      	ands	r3, r2
 8004360:	2b00      	cmp	r3, #0
 8004362:	f040 808e 	bne.w	8004482 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d01d      	beq.n	80043a8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800436c:	2208      	movs	r2, #8
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4413      	add	r3, r2
 8004372:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	2b00      	cmp	r3, #0
 800437c:	d014      	beq.n	80043a8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f023 0307 	bic.w	r3, r3, #7
 8004384:	3308      	adds	r3, #8
 8004386:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <pvPortMalloc+0x6c>
	__asm volatile
 8004392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004396:	f383 8811 	msr	BASEPRI, r3
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	617b      	str	r3, [r7, #20]
}
 80043a4:	bf00      	nop
 80043a6:	e7fe      	b.n	80043a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d069      	beq.n	8004482 <pvPortMalloc+0x146>
 80043ae:	4b42      	ldr	r3, [pc, #264]	; (80044b8 <pvPortMalloc+0x17c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d864      	bhi.n	8004482 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80043b8:	4b40      	ldr	r3, [pc, #256]	; (80044bc <pvPortMalloc+0x180>)
 80043ba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80043bc:	4b3f      	ldr	r3, [pc, #252]	; (80044bc <pvPortMalloc+0x180>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043c2:	e004      	b.n	80043ce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d903      	bls.n	80043e0 <pvPortMalloc+0xa4>
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1f1      	bne.n	80043c4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80043e0:	4b33      	ldr	r3, [pc, #204]	; (80044b0 <pvPortMalloc+0x174>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d04b      	beq.n	8004482 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2208      	movs	r2, #8
 80043f0:	4413      	add	r3, r2
 80043f2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	1ad2      	subs	r2, r2, r3
 8004404:	2308      	movs	r3, #8
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	429a      	cmp	r2, r3
 800440a:	d91f      	bls.n	800444c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800440c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4413      	add	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	f003 0307 	and.w	r3, r3, #7
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00a      	beq.n	8004434 <pvPortMalloc+0xf8>
	__asm volatile
 800441e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004422:	f383 8811 	msr	BASEPRI, r3
 8004426:	f3bf 8f6f 	isb	sy
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	613b      	str	r3, [r7, #16]
}
 8004430:	bf00      	nop
 8004432:	e7fe      	b.n	8004432 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	1ad2      	subs	r2, r2, r3
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004446:	69b8      	ldr	r0, [r7, #24]
 8004448:	f000 f8f8 	bl	800463c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800444c:	4b1a      	ldr	r3, [pc, #104]	; (80044b8 <pvPortMalloc+0x17c>)
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	4a18      	ldr	r2, [pc, #96]	; (80044b8 <pvPortMalloc+0x17c>)
 8004458:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800445a:	4b17      	ldr	r3, [pc, #92]	; (80044b8 <pvPortMalloc+0x17c>)
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	4b18      	ldr	r3, [pc, #96]	; (80044c0 <pvPortMalloc+0x184>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d203      	bcs.n	800446e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004466:	4b14      	ldr	r3, [pc, #80]	; (80044b8 <pvPortMalloc+0x17c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a15      	ldr	r2, [pc, #84]	; (80044c0 <pvPortMalloc+0x184>)
 800446c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	4b10      	ldr	r3, [pc, #64]	; (80044b4 <pvPortMalloc+0x178>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	431a      	orrs	r2, r3
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004482:	f7fe fd07 	bl	8002e94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00a      	beq.n	80044a6 <pvPortMalloc+0x16a>
	__asm volatile
 8004490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004494:	f383 8811 	msr	BASEPRI, r3
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	60fb      	str	r3, [r7, #12]
}
 80044a2:	bf00      	nop
 80044a4:	e7fe      	b.n	80044a4 <pvPortMalloc+0x168>
	return pvReturn;
 80044a6:	69fb      	ldr	r3, [r7, #28]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3728      	adds	r7, #40	; 0x28
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	20001574 	.word	0x20001574
 80044b4:	20001580 	.word	0x20001580
 80044b8:	20001578 	.word	0x20001578
 80044bc:	2000156c 	.word	0x2000156c
 80044c0:	2000157c 	.word	0x2000157c

080044c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d048      	beq.n	8004568 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80044d6:	2308      	movs	r3, #8
 80044d8:	425b      	negs	r3, r3
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	4413      	add	r3, r2
 80044de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	4b21      	ldr	r3, [pc, #132]	; (8004570 <vPortFree+0xac>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4013      	ands	r3, r2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10a      	bne.n	8004508 <vPortFree+0x44>
	__asm volatile
 80044f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f6:	f383 8811 	msr	BASEPRI, r3
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	60fb      	str	r3, [r7, #12]
}
 8004504:	bf00      	nop
 8004506:	e7fe      	b.n	8004506 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <vPortFree+0x62>
	__asm volatile
 8004510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	60bb      	str	r3, [r7, #8]
}
 8004522:	bf00      	nop
 8004524:	e7fe      	b.n	8004524 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	4b11      	ldr	r3, [pc, #68]	; (8004570 <vPortFree+0xac>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4013      	ands	r3, r2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d019      	beq.n	8004568 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d115      	bne.n	8004568 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <vPortFree+0xac>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	43db      	mvns	r3, r3
 8004546:	401a      	ands	r2, r3
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800454c:	f7fe fc94 	bl	8002e78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	4b07      	ldr	r3, [pc, #28]	; (8004574 <vPortFree+0xb0>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4413      	add	r3, r2
 800455a:	4a06      	ldr	r2, [pc, #24]	; (8004574 <vPortFree+0xb0>)
 800455c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800455e:	6938      	ldr	r0, [r7, #16]
 8004560:	f000 f86c 	bl	800463c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004564:	f7fe fc96 	bl	8002e94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004568:	bf00      	nop
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20001580 	.word	0x20001580
 8004574:	20001578 	.word	0x20001578

08004578 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800457e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004582:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004584:	4b27      	ldr	r3, [pc, #156]	; (8004624 <prvHeapInit+0xac>)
 8004586:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00c      	beq.n	80045ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	3307      	adds	r3, #7
 8004596:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 0307 	bic.w	r3, r3, #7
 800459e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	4a1f      	ldr	r2, [pc, #124]	; (8004624 <prvHeapInit+0xac>)
 80045a8:	4413      	add	r3, r2
 80045aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045b0:	4a1d      	ldr	r2, [pc, #116]	; (8004628 <prvHeapInit+0xb0>)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80045b6:	4b1c      	ldr	r3, [pc, #112]	; (8004628 <prvHeapInit+0xb0>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	4413      	add	r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80045c4:	2208      	movs	r2, #8
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	1a9b      	subs	r3, r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0307 	bic.w	r3, r3, #7
 80045d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4a15      	ldr	r2, [pc, #84]	; (800462c <prvHeapInit+0xb4>)
 80045d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80045da:	4b14      	ldr	r3, [pc, #80]	; (800462c <prvHeapInit+0xb4>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2200      	movs	r2, #0
 80045e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80045e2:	4b12      	ldr	r3, [pc, #72]	; (800462c <prvHeapInit+0xb4>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	1ad2      	subs	r2, r2, r3
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045f8:	4b0c      	ldr	r3, [pc, #48]	; (800462c <prvHeapInit+0xb4>)
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	4a0a      	ldr	r2, [pc, #40]	; (8004630 <prvHeapInit+0xb8>)
 8004606:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	4a09      	ldr	r2, [pc, #36]	; (8004634 <prvHeapInit+0xbc>)
 800460e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004610:	4b09      	ldr	r3, [pc, #36]	; (8004638 <prvHeapInit+0xc0>)
 8004612:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004616:	601a      	str	r2, [r3, #0]
}
 8004618:	bf00      	nop
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	2000096c 	.word	0x2000096c
 8004628:	2000156c 	.word	0x2000156c
 800462c:	20001574 	.word	0x20001574
 8004630:	2000157c 	.word	0x2000157c
 8004634:	20001578 	.word	0x20001578
 8004638:	20001580 	.word	0x20001580

0800463c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004644:	4b27      	ldr	r3, [pc, #156]	; (80046e4 <prvInsertBlockIntoFreeList+0xa8>)
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	e002      	b.n	8004650 <prvInsertBlockIntoFreeList+0x14>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	429a      	cmp	r2, r3
 8004658:	d8f7      	bhi.n	800464a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	4413      	add	r3, r2
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	429a      	cmp	r2, r3
 800466a:	d108      	bne.n	800467e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	441a      	add	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	441a      	add	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d118      	bne.n	80046c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	4b14      	ldr	r3, [pc, #80]	; (80046e8 <prvInsertBlockIntoFreeList+0xac>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d00d      	beq.n	80046ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	441a      	add	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	e008      	b.n	80046cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046ba:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <prvInsertBlockIntoFreeList+0xac>)
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	e003      	b.n	80046cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d002      	beq.n	80046da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046da:	bf00      	nop
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr
 80046e4:	2000156c 	.word	0x2000156c
 80046e8:	20001574 	.word	0x20001574

080046ec <__errno>:
 80046ec:	4b01      	ldr	r3, [pc, #4]	; (80046f4 <__errno+0x8>)
 80046ee:	6818      	ldr	r0, [r3, #0]
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	20000010 	.word	0x20000010

080046f8 <__libc_init_array>:
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	2600      	movs	r6, #0
 80046fc:	4d0c      	ldr	r5, [pc, #48]	; (8004730 <__libc_init_array+0x38>)
 80046fe:	4c0d      	ldr	r4, [pc, #52]	; (8004734 <__libc_init_array+0x3c>)
 8004700:	1b64      	subs	r4, r4, r5
 8004702:	10a4      	asrs	r4, r4, #2
 8004704:	42a6      	cmp	r6, r4
 8004706:	d109      	bne.n	800471c <__libc_init_array+0x24>
 8004708:	f000 ff90 	bl	800562c <_init>
 800470c:	2600      	movs	r6, #0
 800470e:	4d0a      	ldr	r5, [pc, #40]	; (8004738 <__libc_init_array+0x40>)
 8004710:	4c0a      	ldr	r4, [pc, #40]	; (800473c <__libc_init_array+0x44>)
 8004712:	1b64      	subs	r4, r4, r5
 8004714:	10a4      	asrs	r4, r4, #2
 8004716:	42a6      	cmp	r6, r4
 8004718:	d105      	bne.n	8004726 <__libc_init_array+0x2e>
 800471a:	bd70      	pop	{r4, r5, r6, pc}
 800471c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004720:	4798      	blx	r3
 8004722:	3601      	adds	r6, #1
 8004724:	e7ee      	b.n	8004704 <__libc_init_array+0xc>
 8004726:	f855 3b04 	ldr.w	r3, [r5], #4
 800472a:	4798      	blx	r3
 800472c:	3601      	adds	r6, #1
 800472e:	e7f2      	b.n	8004716 <__libc_init_array+0x1e>
 8004730:	0800576c 	.word	0x0800576c
 8004734:	0800576c 	.word	0x0800576c
 8004738:	0800576c 	.word	0x0800576c
 800473c:	08005770 	.word	0x08005770

08004740 <memcpy>:
 8004740:	440a      	add	r2, r1
 8004742:	4291      	cmp	r1, r2
 8004744:	f100 33ff 	add.w	r3, r0, #4294967295
 8004748:	d100      	bne.n	800474c <memcpy+0xc>
 800474a:	4770      	bx	lr
 800474c:	b510      	push	{r4, lr}
 800474e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004752:	4291      	cmp	r1, r2
 8004754:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004758:	d1f9      	bne.n	800474e <memcpy+0xe>
 800475a:	bd10      	pop	{r4, pc}

0800475c <memset>:
 800475c:	4603      	mov	r3, r0
 800475e:	4402      	add	r2, r0
 8004760:	4293      	cmp	r3, r2
 8004762:	d100      	bne.n	8004766 <memset+0xa>
 8004764:	4770      	bx	lr
 8004766:	f803 1b01 	strb.w	r1, [r3], #1
 800476a:	e7f9      	b.n	8004760 <memset+0x4>

0800476c <iprintf>:
 800476c:	b40f      	push	{r0, r1, r2, r3}
 800476e:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <iprintf+0x2c>)
 8004770:	b513      	push	{r0, r1, r4, lr}
 8004772:	681c      	ldr	r4, [r3, #0]
 8004774:	b124      	cbz	r4, 8004780 <iprintf+0x14>
 8004776:	69a3      	ldr	r3, [r4, #24]
 8004778:	b913      	cbnz	r3, 8004780 <iprintf+0x14>
 800477a:	4620      	mov	r0, r4
 800477c:	f000 f866 	bl	800484c <__sinit>
 8004780:	ab05      	add	r3, sp, #20
 8004782:	4620      	mov	r0, r4
 8004784:	9a04      	ldr	r2, [sp, #16]
 8004786:	68a1      	ldr	r1, [r4, #8]
 8004788:	9301      	str	r3, [sp, #4]
 800478a:	f000 f981 	bl	8004a90 <_vfiprintf_r>
 800478e:	b002      	add	sp, #8
 8004790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004794:	b004      	add	sp, #16
 8004796:	4770      	bx	lr
 8004798:	20000010 	.word	0x20000010

0800479c <std>:
 800479c:	2300      	movs	r3, #0
 800479e:	b510      	push	{r4, lr}
 80047a0:	4604      	mov	r4, r0
 80047a2:	e9c0 3300 	strd	r3, r3, [r0]
 80047a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047aa:	6083      	str	r3, [r0, #8]
 80047ac:	8181      	strh	r1, [r0, #12]
 80047ae:	6643      	str	r3, [r0, #100]	; 0x64
 80047b0:	81c2      	strh	r2, [r0, #14]
 80047b2:	6183      	str	r3, [r0, #24]
 80047b4:	4619      	mov	r1, r3
 80047b6:	2208      	movs	r2, #8
 80047b8:	305c      	adds	r0, #92	; 0x5c
 80047ba:	f7ff ffcf 	bl	800475c <memset>
 80047be:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <std+0x38>)
 80047c0:	6224      	str	r4, [r4, #32]
 80047c2:	6263      	str	r3, [r4, #36]	; 0x24
 80047c4:	4b04      	ldr	r3, [pc, #16]	; (80047d8 <std+0x3c>)
 80047c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80047c8:	4b04      	ldr	r3, [pc, #16]	; (80047dc <std+0x40>)
 80047ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80047cc:	4b04      	ldr	r3, [pc, #16]	; (80047e0 <std+0x44>)
 80047ce:	6323      	str	r3, [r4, #48]	; 0x30
 80047d0:	bd10      	pop	{r4, pc}
 80047d2:	bf00      	nop
 80047d4:	0800503d 	.word	0x0800503d
 80047d8:	0800505f 	.word	0x0800505f
 80047dc:	08005097 	.word	0x08005097
 80047e0:	080050bb 	.word	0x080050bb

080047e4 <_cleanup_r>:
 80047e4:	4901      	ldr	r1, [pc, #4]	; (80047ec <_cleanup_r+0x8>)
 80047e6:	f000 b8af 	b.w	8004948 <_fwalk_reent>
 80047ea:	bf00      	nop
 80047ec:	08005395 	.word	0x08005395

080047f0 <__sfmoreglue>:
 80047f0:	b570      	push	{r4, r5, r6, lr}
 80047f2:	2568      	movs	r5, #104	; 0x68
 80047f4:	1e4a      	subs	r2, r1, #1
 80047f6:	4355      	muls	r5, r2
 80047f8:	460e      	mov	r6, r1
 80047fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80047fe:	f000 f8c5 	bl	800498c <_malloc_r>
 8004802:	4604      	mov	r4, r0
 8004804:	b140      	cbz	r0, 8004818 <__sfmoreglue+0x28>
 8004806:	2100      	movs	r1, #0
 8004808:	e9c0 1600 	strd	r1, r6, [r0]
 800480c:	300c      	adds	r0, #12
 800480e:	60a0      	str	r0, [r4, #8]
 8004810:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004814:	f7ff ffa2 	bl	800475c <memset>
 8004818:	4620      	mov	r0, r4
 800481a:	bd70      	pop	{r4, r5, r6, pc}

0800481c <__sfp_lock_acquire>:
 800481c:	4801      	ldr	r0, [pc, #4]	; (8004824 <__sfp_lock_acquire+0x8>)
 800481e:	f000 b8b3 	b.w	8004988 <__retarget_lock_acquire_recursive>
 8004822:	bf00      	nop
 8004824:	20001668 	.word	0x20001668

08004828 <__sfp_lock_release>:
 8004828:	4801      	ldr	r0, [pc, #4]	; (8004830 <__sfp_lock_release+0x8>)
 800482a:	f000 b8ae 	b.w	800498a <__retarget_lock_release_recursive>
 800482e:	bf00      	nop
 8004830:	20001668 	.word	0x20001668

08004834 <__sinit_lock_acquire>:
 8004834:	4801      	ldr	r0, [pc, #4]	; (800483c <__sinit_lock_acquire+0x8>)
 8004836:	f000 b8a7 	b.w	8004988 <__retarget_lock_acquire_recursive>
 800483a:	bf00      	nop
 800483c:	20001663 	.word	0x20001663

08004840 <__sinit_lock_release>:
 8004840:	4801      	ldr	r0, [pc, #4]	; (8004848 <__sinit_lock_release+0x8>)
 8004842:	f000 b8a2 	b.w	800498a <__retarget_lock_release_recursive>
 8004846:	bf00      	nop
 8004848:	20001663 	.word	0x20001663

0800484c <__sinit>:
 800484c:	b510      	push	{r4, lr}
 800484e:	4604      	mov	r4, r0
 8004850:	f7ff fff0 	bl	8004834 <__sinit_lock_acquire>
 8004854:	69a3      	ldr	r3, [r4, #24]
 8004856:	b11b      	cbz	r3, 8004860 <__sinit+0x14>
 8004858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800485c:	f7ff bff0 	b.w	8004840 <__sinit_lock_release>
 8004860:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004864:	6523      	str	r3, [r4, #80]	; 0x50
 8004866:	4b13      	ldr	r3, [pc, #76]	; (80048b4 <__sinit+0x68>)
 8004868:	4a13      	ldr	r2, [pc, #76]	; (80048b8 <__sinit+0x6c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	62a2      	str	r2, [r4, #40]	; 0x28
 800486e:	42a3      	cmp	r3, r4
 8004870:	bf08      	it	eq
 8004872:	2301      	moveq	r3, #1
 8004874:	4620      	mov	r0, r4
 8004876:	bf08      	it	eq
 8004878:	61a3      	streq	r3, [r4, #24]
 800487a:	f000 f81f 	bl	80048bc <__sfp>
 800487e:	6060      	str	r0, [r4, #4]
 8004880:	4620      	mov	r0, r4
 8004882:	f000 f81b 	bl	80048bc <__sfp>
 8004886:	60a0      	str	r0, [r4, #8]
 8004888:	4620      	mov	r0, r4
 800488a:	f000 f817 	bl	80048bc <__sfp>
 800488e:	2200      	movs	r2, #0
 8004890:	2104      	movs	r1, #4
 8004892:	60e0      	str	r0, [r4, #12]
 8004894:	6860      	ldr	r0, [r4, #4]
 8004896:	f7ff ff81 	bl	800479c <std>
 800489a:	2201      	movs	r2, #1
 800489c:	2109      	movs	r1, #9
 800489e:	68a0      	ldr	r0, [r4, #8]
 80048a0:	f7ff ff7c 	bl	800479c <std>
 80048a4:	2202      	movs	r2, #2
 80048a6:	2112      	movs	r1, #18
 80048a8:	68e0      	ldr	r0, [r4, #12]
 80048aa:	f7ff ff77 	bl	800479c <std>
 80048ae:	2301      	movs	r3, #1
 80048b0:	61a3      	str	r3, [r4, #24]
 80048b2:	e7d1      	b.n	8004858 <__sinit+0xc>
 80048b4:	080056d4 	.word	0x080056d4
 80048b8:	080047e5 	.word	0x080047e5

080048bc <__sfp>:
 80048bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048be:	4607      	mov	r7, r0
 80048c0:	f7ff ffac 	bl	800481c <__sfp_lock_acquire>
 80048c4:	4b1e      	ldr	r3, [pc, #120]	; (8004940 <__sfp+0x84>)
 80048c6:	681e      	ldr	r6, [r3, #0]
 80048c8:	69b3      	ldr	r3, [r6, #24]
 80048ca:	b913      	cbnz	r3, 80048d2 <__sfp+0x16>
 80048cc:	4630      	mov	r0, r6
 80048ce:	f7ff ffbd 	bl	800484c <__sinit>
 80048d2:	3648      	adds	r6, #72	; 0x48
 80048d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80048d8:	3b01      	subs	r3, #1
 80048da:	d503      	bpl.n	80048e4 <__sfp+0x28>
 80048dc:	6833      	ldr	r3, [r6, #0]
 80048de:	b30b      	cbz	r3, 8004924 <__sfp+0x68>
 80048e0:	6836      	ldr	r6, [r6, #0]
 80048e2:	e7f7      	b.n	80048d4 <__sfp+0x18>
 80048e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80048e8:	b9d5      	cbnz	r5, 8004920 <__sfp+0x64>
 80048ea:	4b16      	ldr	r3, [pc, #88]	; (8004944 <__sfp+0x88>)
 80048ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80048f0:	60e3      	str	r3, [r4, #12]
 80048f2:	6665      	str	r5, [r4, #100]	; 0x64
 80048f4:	f000 f847 	bl	8004986 <__retarget_lock_init_recursive>
 80048f8:	f7ff ff96 	bl	8004828 <__sfp_lock_release>
 80048fc:	2208      	movs	r2, #8
 80048fe:	4629      	mov	r1, r5
 8004900:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004904:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004908:	6025      	str	r5, [r4, #0]
 800490a:	61a5      	str	r5, [r4, #24]
 800490c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004910:	f7ff ff24 	bl	800475c <memset>
 8004914:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004918:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800491c:	4620      	mov	r0, r4
 800491e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004920:	3468      	adds	r4, #104	; 0x68
 8004922:	e7d9      	b.n	80048d8 <__sfp+0x1c>
 8004924:	2104      	movs	r1, #4
 8004926:	4638      	mov	r0, r7
 8004928:	f7ff ff62 	bl	80047f0 <__sfmoreglue>
 800492c:	4604      	mov	r4, r0
 800492e:	6030      	str	r0, [r6, #0]
 8004930:	2800      	cmp	r0, #0
 8004932:	d1d5      	bne.n	80048e0 <__sfp+0x24>
 8004934:	f7ff ff78 	bl	8004828 <__sfp_lock_release>
 8004938:	230c      	movs	r3, #12
 800493a:	603b      	str	r3, [r7, #0]
 800493c:	e7ee      	b.n	800491c <__sfp+0x60>
 800493e:	bf00      	nop
 8004940:	080056d4 	.word	0x080056d4
 8004944:	ffff0001 	.word	0xffff0001

08004948 <_fwalk_reent>:
 8004948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800494c:	4606      	mov	r6, r0
 800494e:	4688      	mov	r8, r1
 8004950:	2700      	movs	r7, #0
 8004952:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004956:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800495a:	f1b9 0901 	subs.w	r9, r9, #1
 800495e:	d505      	bpl.n	800496c <_fwalk_reent+0x24>
 8004960:	6824      	ldr	r4, [r4, #0]
 8004962:	2c00      	cmp	r4, #0
 8004964:	d1f7      	bne.n	8004956 <_fwalk_reent+0xe>
 8004966:	4638      	mov	r0, r7
 8004968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800496c:	89ab      	ldrh	r3, [r5, #12]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d907      	bls.n	8004982 <_fwalk_reent+0x3a>
 8004972:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004976:	3301      	adds	r3, #1
 8004978:	d003      	beq.n	8004982 <_fwalk_reent+0x3a>
 800497a:	4629      	mov	r1, r5
 800497c:	4630      	mov	r0, r6
 800497e:	47c0      	blx	r8
 8004980:	4307      	orrs	r7, r0
 8004982:	3568      	adds	r5, #104	; 0x68
 8004984:	e7e9      	b.n	800495a <_fwalk_reent+0x12>

08004986 <__retarget_lock_init_recursive>:
 8004986:	4770      	bx	lr

08004988 <__retarget_lock_acquire_recursive>:
 8004988:	4770      	bx	lr

0800498a <__retarget_lock_release_recursive>:
 800498a:	4770      	bx	lr

0800498c <_malloc_r>:
 800498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498e:	1ccd      	adds	r5, r1, #3
 8004990:	f025 0503 	bic.w	r5, r5, #3
 8004994:	3508      	adds	r5, #8
 8004996:	2d0c      	cmp	r5, #12
 8004998:	bf38      	it	cc
 800499a:	250c      	movcc	r5, #12
 800499c:	2d00      	cmp	r5, #0
 800499e:	4606      	mov	r6, r0
 80049a0:	db01      	blt.n	80049a6 <_malloc_r+0x1a>
 80049a2:	42a9      	cmp	r1, r5
 80049a4:	d903      	bls.n	80049ae <_malloc_r+0x22>
 80049a6:	230c      	movs	r3, #12
 80049a8:	6033      	str	r3, [r6, #0]
 80049aa:	2000      	movs	r0, #0
 80049ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049ae:	f000 fdb1 	bl	8005514 <__malloc_lock>
 80049b2:	4921      	ldr	r1, [pc, #132]	; (8004a38 <_malloc_r+0xac>)
 80049b4:	680a      	ldr	r2, [r1, #0]
 80049b6:	4614      	mov	r4, r2
 80049b8:	b99c      	cbnz	r4, 80049e2 <_malloc_r+0x56>
 80049ba:	4f20      	ldr	r7, [pc, #128]	; (8004a3c <_malloc_r+0xb0>)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	b923      	cbnz	r3, 80049ca <_malloc_r+0x3e>
 80049c0:	4621      	mov	r1, r4
 80049c2:	4630      	mov	r0, r6
 80049c4:	f000 fb2a 	bl	800501c <_sbrk_r>
 80049c8:	6038      	str	r0, [r7, #0]
 80049ca:	4629      	mov	r1, r5
 80049cc:	4630      	mov	r0, r6
 80049ce:	f000 fb25 	bl	800501c <_sbrk_r>
 80049d2:	1c43      	adds	r3, r0, #1
 80049d4:	d123      	bne.n	8004a1e <_malloc_r+0x92>
 80049d6:	230c      	movs	r3, #12
 80049d8:	4630      	mov	r0, r6
 80049da:	6033      	str	r3, [r6, #0]
 80049dc:	f000 fda0 	bl	8005520 <__malloc_unlock>
 80049e0:	e7e3      	b.n	80049aa <_malloc_r+0x1e>
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	1b5b      	subs	r3, r3, r5
 80049e6:	d417      	bmi.n	8004a18 <_malloc_r+0x8c>
 80049e8:	2b0b      	cmp	r3, #11
 80049ea:	d903      	bls.n	80049f4 <_malloc_r+0x68>
 80049ec:	6023      	str	r3, [r4, #0]
 80049ee:	441c      	add	r4, r3
 80049f0:	6025      	str	r5, [r4, #0]
 80049f2:	e004      	b.n	80049fe <_malloc_r+0x72>
 80049f4:	6863      	ldr	r3, [r4, #4]
 80049f6:	42a2      	cmp	r2, r4
 80049f8:	bf0c      	ite	eq
 80049fa:	600b      	streq	r3, [r1, #0]
 80049fc:	6053      	strne	r3, [r2, #4]
 80049fe:	4630      	mov	r0, r6
 8004a00:	f000 fd8e 	bl	8005520 <__malloc_unlock>
 8004a04:	f104 000b 	add.w	r0, r4, #11
 8004a08:	1d23      	adds	r3, r4, #4
 8004a0a:	f020 0007 	bic.w	r0, r0, #7
 8004a0e:	1ac2      	subs	r2, r0, r3
 8004a10:	d0cc      	beq.n	80049ac <_malloc_r+0x20>
 8004a12:	1a1b      	subs	r3, r3, r0
 8004a14:	50a3      	str	r3, [r4, r2]
 8004a16:	e7c9      	b.n	80049ac <_malloc_r+0x20>
 8004a18:	4622      	mov	r2, r4
 8004a1a:	6864      	ldr	r4, [r4, #4]
 8004a1c:	e7cc      	b.n	80049b8 <_malloc_r+0x2c>
 8004a1e:	1cc4      	adds	r4, r0, #3
 8004a20:	f024 0403 	bic.w	r4, r4, #3
 8004a24:	42a0      	cmp	r0, r4
 8004a26:	d0e3      	beq.n	80049f0 <_malloc_r+0x64>
 8004a28:	1a21      	subs	r1, r4, r0
 8004a2a:	4630      	mov	r0, r6
 8004a2c:	f000 faf6 	bl	800501c <_sbrk_r>
 8004a30:	3001      	adds	r0, #1
 8004a32:	d1dd      	bne.n	80049f0 <_malloc_r+0x64>
 8004a34:	e7cf      	b.n	80049d6 <_malloc_r+0x4a>
 8004a36:	bf00      	nop
 8004a38:	20001584 	.word	0x20001584
 8004a3c:	20001588 	.word	0x20001588

08004a40 <__sfputc_r>:
 8004a40:	6893      	ldr	r3, [r2, #8]
 8004a42:	b410      	push	{r4}
 8004a44:	3b01      	subs	r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	6093      	str	r3, [r2, #8]
 8004a4a:	da07      	bge.n	8004a5c <__sfputc_r+0x1c>
 8004a4c:	6994      	ldr	r4, [r2, #24]
 8004a4e:	42a3      	cmp	r3, r4
 8004a50:	db01      	blt.n	8004a56 <__sfputc_r+0x16>
 8004a52:	290a      	cmp	r1, #10
 8004a54:	d102      	bne.n	8004a5c <__sfputc_r+0x1c>
 8004a56:	bc10      	pop	{r4}
 8004a58:	f000 bb34 	b.w	80050c4 <__swbuf_r>
 8004a5c:	6813      	ldr	r3, [r2, #0]
 8004a5e:	1c58      	adds	r0, r3, #1
 8004a60:	6010      	str	r0, [r2, #0]
 8004a62:	7019      	strb	r1, [r3, #0]
 8004a64:	4608      	mov	r0, r1
 8004a66:	bc10      	pop	{r4}
 8004a68:	4770      	bx	lr

08004a6a <__sfputs_r>:
 8004a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6c:	4606      	mov	r6, r0
 8004a6e:	460f      	mov	r7, r1
 8004a70:	4614      	mov	r4, r2
 8004a72:	18d5      	adds	r5, r2, r3
 8004a74:	42ac      	cmp	r4, r5
 8004a76:	d101      	bne.n	8004a7c <__sfputs_r+0x12>
 8004a78:	2000      	movs	r0, #0
 8004a7a:	e007      	b.n	8004a8c <__sfputs_r+0x22>
 8004a7c:	463a      	mov	r2, r7
 8004a7e:	4630      	mov	r0, r6
 8004a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a84:	f7ff ffdc 	bl	8004a40 <__sfputc_r>
 8004a88:	1c43      	adds	r3, r0, #1
 8004a8a:	d1f3      	bne.n	8004a74 <__sfputs_r+0xa>
 8004a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a90 <_vfiprintf_r>:
 8004a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a94:	460d      	mov	r5, r1
 8004a96:	4614      	mov	r4, r2
 8004a98:	4698      	mov	r8, r3
 8004a9a:	4606      	mov	r6, r0
 8004a9c:	b09d      	sub	sp, #116	; 0x74
 8004a9e:	b118      	cbz	r0, 8004aa8 <_vfiprintf_r+0x18>
 8004aa0:	6983      	ldr	r3, [r0, #24]
 8004aa2:	b90b      	cbnz	r3, 8004aa8 <_vfiprintf_r+0x18>
 8004aa4:	f7ff fed2 	bl	800484c <__sinit>
 8004aa8:	4b89      	ldr	r3, [pc, #548]	; (8004cd0 <_vfiprintf_r+0x240>)
 8004aaa:	429d      	cmp	r5, r3
 8004aac:	d11b      	bne.n	8004ae6 <_vfiprintf_r+0x56>
 8004aae:	6875      	ldr	r5, [r6, #4]
 8004ab0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ab2:	07d9      	lsls	r1, r3, #31
 8004ab4:	d405      	bmi.n	8004ac2 <_vfiprintf_r+0x32>
 8004ab6:	89ab      	ldrh	r3, [r5, #12]
 8004ab8:	059a      	lsls	r2, r3, #22
 8004aba:	d402      	bmi.n	8004ac2 <_vfiprintf_r+0x32>
 8004abc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004abe:	f7ff ff63 	bl	8004988 <__retarget_lock_acquire_recursive>
 8004ac2:	89ab      	ldrh	r3, [r5, #12]
 8004ac4:	071b      	lsls	r3, r3, #28
 8004ac6:	d501      	bpl.n	8004acc <_vfiprintf_r+0x3c>
 8004ac8:	692b      	ldr	r3, [r5, #16]
 8004aca:	b9eb      	cbnz	r3, 8004b08 <_vfiprintf_r+0x78>
 8004acc:	4629      	mov	r1, r5
 8004ace:	4630      	mov	r0, r6
 8004ad0:	f000 fb5c 	bl	800518c <__swsetup_r>
 8004ad4:	b1c0      	cbz	r0, 8004b08 <_vfiprintf_r+0x78>
 8004ad6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ad8:	07dc      	lsls	r4, r3, #31
 8004ada:	d50e      	bpl.n	8004afa <_vfiprintf_r+0x6a>
 8004adc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae0:	b01d      	add	sp, #116	; 0x74
 8004ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ae6:	4b7b      	ldr	r3, [pc, #492]	; (8004cd4 <_vfiprintf_r+0x244>)
 8004ae8:	429d      	cmp	r5, r3
 8004aea:	d101      	bne.n	8004af0 <_vfiprintf_r+0x60>
 8004aec:	68b5      	ldr	r5, [r6, #8]
 8004aee:	e7df      	b.n	8004ab0 <_vfiprintf_r+0x20>
 8004af0:	4b79      	ldr	r3, [pc, #484]	; (8004cd8 <_vfiprintf_r+0x248>)
 8004af2:	429d      	cmp	r5, r3
 8004af4:	bf08      	it	eq
 8004af6:	68f5      	ldreq	r5, [r6, #12]
 8004af8:	e7da      	b.n	8004ab0 <_vfiprintf_r+0x20>
 8004afa:	89ab      	ldrh	r3, [r5, #12]
 8004afc:	0598      	lsls	r0, r3, #22
 8004afe:	d4ed      	bmi.n	8004adc <_vfiprintf_r+0x4c>
 8004b00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b02:	f7ff ff42 	bl	800498a <__retarget_lock_release_recursive>
 8004b06:	e7e9      	b.n	8004adc <_vfiprintf_r+0x4c>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b0c:	2320      	movs	r3, #32
 8004b0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b12:	2330      	movs	r3, #48	; 0x30
 8004b14:	f04f 0901 	mov.w	r9, #1
 8004b18:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b1c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004cdc <_vfiprintf_r+0x24c>
 8004b20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b24:	4623      	mov	r3, r4
 8004b26:	469a      	mov	sl, r3
 8004b28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b2c:	b10a      	cbz	r2, 8004b32 <_vfiprintf_r+0xa2>
 8004b2e:	2a25      	cmp	r2, #37	; 0x25
 8004b30:	d1f9      	bne.n	8004b26 <_vfiprintf_r+0x96>
 8004b32:	ebba 0b04 	subs.w	fp, sl, r4
 8004b36:	d00b      	beq.n	8004b50 <_vfiprintf_r+0xc0>
 8004b38:	465b      	mov	r3, fp
 8004b3a:	4622      	mov	r2, r4
 8004b3c:	4629      	mov	r1, r5
 8004b3e:	4630      	mov	r0, r6
 8004b40:	f7ff ff93 	bl	8004a6a <__sfputs_r>
 8004b44:	3001      	adds	r0, #1
 8004b46:	f000 80aa 	beq.w	8004c9e <_vfiprintf_r+0x20e>
 8004b4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b4c:	445a      	add	r2, fp
 8004b4e:	9209      	str	r2, [sp, #36]	; 0x24
 8004b50:	f89a 3000 	ldrb.w	r3, [sl]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 80a2 	beq.w	8004c9e <_vfiprintf_r+0x20e>
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b64:	f10a 0a01 	add.w	sl, sl, #1
 8004b68:	9304      	str	r3, [sp, #16]
 8004b6a:	9307      	str	r3, [sp, #28]
 8004b6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b70:	931a      	str	r3, [sp, #104]	; 0x68
 8004b72:	4654      	mov	r4, sl
 8004b74:	2205      	movs	r2, #5
 8004b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b7a:	4858      	ldr	r0, [pc, #352]	; (8004cdc <_vfiprintf_r+0x24c>)
 8004b7c:	f000 fcbc 	bl	80054f8 <memchr>
 8004b80:	9a04      	ldr	r2, [sp, #16]
 8004b82:	b9d8      	cbnz	r0, 8004bbc <_vfiprintf_r+0x12c>
 8004b84:	06d1      	lsls	r1, r2, #27
 8004b86:	bf44      	itt	mi
 8004b88:	2320      	movmi	r3, #32
 8004b8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b8e:	0713      	lsls	r3, r2, #28
 8004b90:	bf44      	itt	mi
 8004b92:	232b      	movmi	r3, #43	; 0x2b
 8004b94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b98:	f89a 3000 	ldrb.w	r3, [sl]
 8004b9c:	2b2a      	cmp	r3, #42	; 0x2a
 8004b9e:	d015      	beq.n	8004bcc <_vfiprintf_r+0x13c>
 8004ba0:	4654      	mov	r4, sl
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	f04f 0c0a 	mov.w	ip, #10
 8004ba8:	9a07      	ldr	r2, [sp, #28]
 8004baa:	4621      	mov	r1, r4
 8004bac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bb0:	3b30      	subs	r3, #48	; 0x30
 8004bb2:	2b09      	cmp	r3, #9
 8004bb4:	d94e      	bls.n	8004c54 <_vfiprintf_r+0x1c4>
 8004bb6:	b1b0      	cbz	r0, 8004be6 <_vfiprintf_r+0x156>
 8004bb8:	9207      	str	r2, [sp, #28]
 8004bba:	e014      	b.n	8004be6 <_vfiprintf_r+0x156>
 8004bbc:	eba0 0308 	sub.w	r3, r0, r8
 8004bc0:	fa09 f303 	lsl.w	r3, r9, r3
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	46a2      	mov	sl, r4
 8004bc8:	9304      	str	r3, [sp, #16]
 8004bca:	e7d2      	b.n	8004b72 <_vfiprintf_r+0xe2>
 8004bcc:	9b03      	ldr	r3, [sp, #12]
 8004bce:	1d19      	adds	r1, r3, #4
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	9103      	str	r1, [sp, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	bfbb      	ittet	lt
 8004bd8:	425b      	neglt	r3, r3
 8004bda:	f042 0202 	orrlt.w	r2, r2, #2
 8004bde:	9307      	strge	r3, [sp, #28]
 8004be0:	9307      	strlt	r3, [sp, #28]
 8004be2:	bfb8      	it	lt
 8004be4:	9204      	strlt	r2, [sp, #16]
 8004be6:	7823      	ldrb	r3, [r4, #0]
 8004be8:	2b2e      	cmp	r3, #46	; 0x2e
 8004bea:	d10c      	bne.n	8004c06 <_vfiprintf_r+0x176>
 8004bec:	7863      	ldrb	r3, [r4, #1]
 8004bee:	2b2a      	cmp	r3, #42	; 0x2a
 8004bf0:	d135      	bne.n	8004c5e <_vfiprintf_r+0x1ce>
 8004bf2:	9b03      	ldr	r3, [sp, #12]
 8004bf4:	3402      	adds	r4, #2
 8004bf6:	1d1a      	adds	r2, r3, #4
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	9203      	str	r2, [sp, #12]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	bfb8      	it	lt
 8004c00:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c04:	9305      	str	r3, [sp, #20]
 8004c06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004cec <_vfiprintf_r+0x25c>
 8004c0a:	2203      	movs	r2, #3
 8004c0c:	4650      	mov	r0, sl
 8004c0e:	7821      	ldrb	r1, [r4, #0]
 8004c10:	f000 fc72 	bl	80054f8 <memchr>
 8004c14:	b140      	cbz	r0, 8004c28 <_vfiprintf_r+0x198>
 8004c16:	2340      	movs	r3, #64	; 0x40
 8004c18:	eba0 000a 	sub.w	r0, r0, sl
 8004c1c:	fa03 f000 	lsl.w	r0, r3, r0
 8004c20:	9b04      	ldr	r3, [sp, #16]
 8004c22:	3401      	adds	r4, #1
 8004c24:	4303      	orrs	r3, r0
 8004c26:	9304      	str	r3, [sp, #16]
 8004c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c2c:	2206      	movs	r2, #6
 8004c2e:	482c      	ldr	r0, [pc, #176]	; (8004ce0 <_vfiprintf_r+0x250>)
 8004c30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c34:	f000 fc60 	bl	80054f8 <memchr>
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	d03f      	beq.n	8004cbc <_vfiprintf_r+0x22c>
 8004c3c:	4b29      	ldr	r3, [pc, #164]	; (8004ce4 <_vfiprintf_r+0x254>)
 8004c3e:	bb1b      	cbnz	r3, 8004c88 <_vfiprintf_r+0x1f8>
 8004c40:	9b03      	ldr	r3, [sp, #12]
 8004c42:	3307      	adds	r3, #7
 8004c44:	f023 0307 	bic.w	r3, r3, #7
 8004c48:	3308      	adds	r3, #8
 8004c4a:	9303      	str	r3, [sp, #12]
 8004c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c4e:	443b      	add	r3, r7
 8004c50:	9309      	str	r3, [sp, #36]	; 0x24
 8004c52:	e767      	b.n	8004b24 <_vfiprintf_r+0x94>
 8004c54:	460c      	mov	r4, r1
 8004c56:	2001      	movs	r0, #1
 8004c58:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c5c:	e7a5      	b.n	8004baa <_vfiprintf_r+0x11a>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f04f 0c0a 	mov.w	ip, #10
 8004c64:	4619      	mov	r1, r3
 8004c66:	3401      	adds	r4, #1
 8004c68:	9305      	str	r3, [sp, #20]
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c70:	3a30      	subs	r2, #48	; 0x30
 8004c72:	2a09      	cmp	r2, #9
 8004c74:	d903      	bls.n	8004c7e <_vfiprintf_r+0x1ee>
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0c5      	beq.n	8004c06 <_vfiprintf_r+0x176>
 8004c7a:	9105      	str	r1, [sp, #20]
 8004c7c:	e7c3      	b.n	8004c06 <_vfiprintf_r+0x176>
 8004c7e:	4604      	mov	r4, r0
 8004c80:	2301      	movs	r3, #1
 8004c82:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c86:	e7f0      	b.n	8004c6a <_vfiprintf_r+0x1da>
 8004c88:	ab03      	add	r3, sp, #12
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	462a      	mov	r2, r5
 8004c8e:	4630      	mov	r0, r6
 8004c90:	4b15      	ldr	r3, [pc, #84]	; (8004ce8 <_vfiprintf_r+0x258>)
 8004c92:	a904      	add	r1, sp, #16
 8004c94:	f3af 8000 	nop.w
 8004c98:	4607      	mov	r7, r0
 8004c9a:	1c78      	adds	r0, r7, #1
 8004c9c:	d1d6      	bne.n	8004c4c <_vfiprintf_r+0x1bc>
 8004c9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ca0:	07d9      	lsls	r1, r3, #31
 8004ca2:	d405      	bmi.n	8004cb0 <_vfiprintf_r+0x220>
 8004ca4:	89ab      	ldrh	r3, [r5, #12]
 8004ca6:	059a      	lsls	r2, r3, #22
 8004ca8:	d402      	bmi.n	8004cb0 <_vfiprintf_r+0x220>
 8004caa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cac:	f7ff fe6d 	bl	800498a <__retarget_lock_release_recursive>
 8004cb0:	89ab      	ldrh	r3, [r5, #12]
 8004cb2:	065b      	lsls	r3, r3, #25
 8004cb4:	f53f af12 	bmi.w	8004adc <_vfiprintf_r+0x4c>
 8004cb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cba:	e711      	b.n	8004ae0 <_vfiprintf_r+0x50>
 8004cbc:	ab03      	add	r3, sp, #12
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	462a      	mov	r2, r5
 8004cc2:	4630      	mov	r0, r6
 8004cc4:	4b08      	ldr	r3, [pc, #32]	; (8004ce8 <_vfiprintf_r+0x258>)
 8004cc6:	a904      	add	r1, sp, #16
 8004cc8:	f000 f882 	bl	8004dd0 <_printf_i>
 8004ccc:	e7e4      	b.n	8004c98 <_vfiprintf_r+0x208>
 8004cce:	bf00      	nop
 8004cd0:	080056f8 	.word	0x080056f8
 8004cd4:	08005718 	.word	0x08005718
 8004cd8:	080056d8 	.word	0x080056d8
 8004cdc:	08005738 	.word	0x08005738
 8004ce0:	08005742 	.word	0x08005742
 8004ce4:	00000000 	.word	0x00000000
 8004ce8:	08004a6b 	.word	0x08004a6b
 8004cec:	0800573e 	.word	0x0800573e

08004cf0 <_printf_common>:
 8004cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cf4:	4616      	mov	r6, r2
 8004cf6:	4699      	mov	r9, r3
 8004cf8:	688a      	ldr	r2, [r1, #8]
 8004cfa:	690b      	ldr	r3, [r1, #16]
 8004cfc:	4607      	mov	r7, r0
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	bfb8      	it	lt
 8004d02:	4613      	movlt	r3, r2
 8004d04:	6033      	str	r3, [r6, #0]
 8004d06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d0a:	460c      	mov	r4, r1
 8004d0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d10:	b10a      	cbz	r2, 8004d16 <_printf_common+0x26>
 8004d12:	3301      	adds	r3, #1
 8004d14:	6033      	str	r3, [r6, #0]
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	0699      	lsls	r1, r3, #26
 8004d1a:	bf42      	ittt	mi
 8004d1c:	6833      	ldrmi	r3, [r6, #0]
 8004d1e:	3302      	addmi	r3, #2
 8004d20:	6033      	strmi	r3, [r6, #0]
 8004d22:	6825      	ldr	r5, [r4, #0]
 8004d24:	f015 0506 	ands.w	r5, r5, #6
 8004d28:	d106      	bne.n	8004d38 <_printf_common+0x48>
 8004d2a:	f104 0a19 	add.w	sl, r4, #25
 8004d2e:	68e3      	ldr	r3, [r4, #12]
 8004d30:	6832      	ldr	r2, [r6, #0]
 8004d32:	1a9b      	subs	r3, r3, r2
 8004d34:	42ab      	cmp	r3, r5
 8004d36:	dc28      	bgt.n	8004d8a <_printf_common+0x9a>
 8004d38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d3c:	1e13      	subs	r3, r2, #0
 8004d3e:	6822      	ldr	r2, [r4, #0]
 8004d40:	bf18      	it	ne
 8004d42:	2301      	movne	r3, #1
 8004d44:	0692      	lsls	r2, r2, #26
 8004d46:	d42d      	bmi.n	8004da4 <_printf_common+0xb4>
 8004d48:	4649      	mov	r1, r9
 8004d4a:	4638      	mov	r0, r7
 8004d4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d50:	47c0      	blx	r8
 8004d52:	3001      	adds	r0, #1
 8004d54:	d020      	beq.n	8004d98 <_printf_common+0xa8>
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	68e5      	ldr	r5, [r4, #12]
 8004d5a:	f003 0306 	and.w	r3, r3, #6
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	bf18      	it	ne
 8004d62:	2500      	movne	r5, #0
 8004d64:	6832      	ldr	r2, [r6, #0]
 8004d66:	f04f 0600 	mov.w	r6, #0
 8004d6a:	68a3      	ldr	r3, [r4, #8]
 8004d6c:	bf08      	it	eq
 8004d6e:	1aad      	subeq	r5, r5, r2
 8004d70:	6922      	ldr	r2, [r4, #16]
 8004d72:	bf08      	it	eq
 8004d74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	bfc4      	itt	gt
 8004d7c:	1a9b      	subgt	r3, r3, r2
 8004d7e:	18ed      	addgt	r5, r5, r3
 8004d80:	341a      	adds	r4, #26
 8004d82:	42b5      	cmp	r5, r6
 8004d84:	d11a      	bne.n	8004dbc <_printf_common+0xcc>
 8004d86:	2000      	movs	r0, #0
 8004d88:	e008      	b.n	8004d9c <_printf_common+0xac>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	4652      	mov	r2, sl
 8004d8e:	4649      	mov	r1, r9
 8004d90:	4638      	mov	r0, r7
 8004d92:	47c0      	blx	r8
 8004d94:	3001      	adds	r0, #1
 8004d96:	d103      	bne.n	8004da0 <_printf_common+0xb0>
 8004d98:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004da0:	3501      	adds	r5, #1
 8004da2:	e7c4      	b.n	8004d2e <_printf_common+0x3e>
 8004da4:	2030      	movs	r0, #48	; 0x30
 8004da6:	18e1      	adds	r1, r4, r3
 8004da8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004db2:	4422      	add	r2, r4
 8004db4:	3302      	adds	r3, #2
 8004db6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004dba:	e7c5      	b.n	8004d48 <_printf_common+0x58>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	4622      	mov	r2, r4
 8004dc0:	4649      	mov	r1, r9
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	47c0      	blx	r8
 8004dc6:	3001      	adds	r0, #1
 8004dc8:	d0e6      	beq.n	8004d98 <_printf_common+0xa8>
 8004dca:	3601      	adds	r6, #1
 8004dcc:	e7d9      	b.n	8004d82 <_printf_common+0x92>
	...

08004dd0 <_printf_i>:
 8004dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dd4:	460c      	mov	r4, r1
 8004dd6:	7e27      	ldrb	r7, [r4, #24]
 8004dd8:	4691      	mov	r9, r2
 8004dda:	2f78      	cmp	r7, #120	; 0x78
 8004ddc:	4680      	mov	r8, r0
 8004dde:	469a      	mov	sl, r3
 8004de0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004de2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004de6:	d807      	bhi.n	8004df8 <_printf_i+0x28>
 8004de8:	2f62      	cmp	r7, #98	; 0x62
 8004dea:	d80a      	bhi.n	8004e02 <_printf_i+0x32>
 8004dec:	2f00      	cmp	r7, #0
 8004dee:	f000 80d9 	beq.w	8004fa4 <_printf_i+0x1d4>
 8004df2:	2f58      	cmp	r7, #88	; 0x58
 8004df4:	f000 80a4 	beq.w	8004f40 <_printf_i+0x170>
 8004df8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004dfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e00:	e03a      	b.n	8004e78 <_printf_i+0xa8>
 8004e02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e06:	2b15      	cmp	r3, #21
 8004e08:	d8f6      	bhi.n	8004df8 <_printf_i+0x28>
 8004e0a:	a001      	add	r0, pc, #4	; (adr r0, 8004e10 <_printf_i+0x40>)
 8004e0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004e10:	08004e69 	.word	0x08004e69
 8004e14:	08004e7d 	.word	0x08004e7d
 8004e18:	08004df9 	.word	0x08004df9
 8004e1c:	08004df9 	.word	0x08004df9
 8004e20:	08004df9 	.word	0x08004df9
 8004e24:	08004df9 	.word	0x08004df9
 8004e28:	08004e7d 	.word	0x08004e7d
 8004e2c:	08004df9 	.word	0x08004df9
 8004e30:	08004df9 	.word	0x08004df9
 8004e34:	08004df9 	.word	0x08004df9
 8004e38:	08004df9 	.word	0x08004df9
 8004e3c:	08004f8b 	.word	0x08004f8b
 8004e40:	08004ead 	.word	0x08004ead
 8004e44:	08004f6d 	.word	0x08004f6d
 8004e48:	08004df9 	.word	0x08004df9
 8004e4c:	08004df9 	.word	0x08004df9
 8004e50:	08004fad 	.word	0x08004fad
 8004e54:	08004df9 	.word	0x08004df9
 8004e58:	08004ead 	.word	0x08004ead
 8004e5c:	08004df9 	.word	0x08004df9
 8004e60:	08004df9 	.word	0x08004df9
 8004e64:	08004f75 	.word	0x08004f75
 8004e68:	680b      	ldr	r3, [r1, #0]
 8004e6a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e6e:	1d1a      	adds	r2, r3, #4
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	600a      	str	r2, [r1, #0]
 8004e74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e0a4      	b.n	8004fc6 <_printf_i+0x1f6>
 8004e7c:	6825      	ldr	r5, [r4, #0]
 8004e7e:	6808      	ldr	r0, [r1, #0]
 8004e80:	062e      	lsls	r6, r5, #24
 8004e82:	f100 0304 	add.w	r3, r0, #4
 8004e86:	d50a      	bpl.n	8004e9e <_printf_i+0xce>
 8004e88:	6805      	ldr	r5, [r0, #0]
 8004e8a:	600b      	str	r3, [r1, #0]
 8004e8c:	2d00      	cmp	r5, #0
 8004e8e:	da03      	bge.n	8004e98 <_printf_i+0xc8>
 8004e90:	232d      	movs	r3, #45	; 0x2d
 8004e92:	426d      	negs	r5, r5
 8004e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e98:	230a      	movs	r3, #10
 8004e9a:	485e      	ldr	r0, [pc, #376]	; (8005014 <_printf_i+0x244>)
 8004e9c:	e019      	b.n	8004ed2 <_printf_i+0x102>
 8004e9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004ea2:	6805      	ldr	r5, [r0, #0]
 8004ea4:	600b      	str	r3, [r1, #0]
 8004ea6:	bf18      	it	ne
 8004ea8:	b22d      	sxthne	r5, r5
 8004eaa:	e7ef      	b.n	8004e8c <_printf_i+0xbc>
 8004eac:	680b      	ldr	r3, [r1, #0]
 8004eae:	6825      	ldr	r5, [r4, #0]
 8004eb0:	1d18      	adds	r0, r3, #4
 8004eb2:	6008      	str	r0, [r1, #0]
 8004eb4:	0628      	lsls	r0, r5, #24
 8004eb6:	d501      	bpl.n	8004ebc <_printf_i+0xec>
 8004eb8:	681d      	ldr	r5, [r3, #0]
 8004eba:	e002      	b.n	8004ec2 <_printf_i+0xf2>
 8004ebc:	0669      	lsls	r1, r5, #25
 8004ebe:	d5fb      	bpl.n	8004eb8 <_printf_i+0xe8>
 8004ec0:	881d      	ldrh	r5, [r3, #0]
 8004ec2:	2f6f      	cmp	r7, #111	; 0x6f
 8004ec4:	bf0c      	ite	eq
 8004ec6:	2308      	moveq	r3, #8
 8004ec8:	230a      	movne	r3, #10
 8004eca:	4852      	ldr	r0, [pc, #328]	; (8005014 <_printf_i+0x244>)
 8004ecc:	2100      	movs	r1, #0
 8004ece:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ed2:	6866      	ldr	r6, [r4, #4]
 8004ed4:	2e00      	cmp	r6, #0
 8004ed6:	bfa8      	it	ge
 8004ed8:	6821      	ldrge	r1, [r4, #0]
 8004eda:	60a6      	str	r6, [r4, #8]
 8004edc:	bfa4      	itt	ge
 8004ede:	f021 0104 	bicge.w	r1, r1, #4
 8004ee2:	6021      	strge	r1, [r4, #0]
 8004ee4:	b90d      	cbnz	r5, 8004eea <_printf_i+0x11a>
 8004ee6:	2e00      	cmp	r6, #0
 8004ee8:	d04d      	beq.n	8004f86 <_printf_i+0x1b6>
 8004eea:	4616      	mov	r6, r2
 8004eec:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ef0:	fb03 5711 	mls	r7, r3, r1, r5
 8004ef4:	5dc7      	ldrb	r7, [r0, r7]
 8004ef6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004efa:	462f      	mov	r7, r5
 8004efc:	42bb      	cmp	r3, r7
 8004efe:	460d      	mov	r5, r1
 8004f00:	d9f4      	bls.n	8004eec <_printf_i+0x11c>
 8004f02:	2b08      	cmp	r3, #8
 8004f04:	d10b      	bne.n	8004f1e <_printf_i+0x14e>
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	07df      	lsls	r7, r3, #31
 8004f0a:	d508      	bpl.n	8004f1e <_printf_i+0x14e>
 8004f0c:	6923      	ldr	r3, [r4, #16]
 8004f0e:	6861      	ldr	r1, [r4, #4]
 8004f10:	4299      	cmp	r1, r3
 8004f12:	bfde      	ittt	le
 8004f14:	2330      	movle	r3, #48	; 0x30
 8004f16:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f1a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f1e:	1b92      	subs	r2, r2, r6
 8004f20:	6122      	str	r2, [r4, #16]
 8004f22:	464b      	mov	r3, r9
 8004f24:	4621      	mov	r1, r4
 8004f26:	4640      	mov	r0, r8
 8004f28:	f8cd a000 	str.w	sl, [sp]
 8004f2c:	aa03      	add	r2, sp, #12
 8004f2e:	f7ff fedf 	bl	8004cf0 <_printf_common>
 8004f32:	3001      	adds	r0, #1
 8004f34:	d14c      	bne.n	8004fd0 <_printf_i+0x200>
 8004f36:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3a:	b004      	add	sp, #16
 8004f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f40:	4834      	ldr	r0, [pc, #208]	; (8005014 <_printf_i+0x244>)
 8004f42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f46:	680e      	ldr	r6, [r1, #0]
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004f4e:	061f      	lsls	r7, r3, #24
 8004f50:	600e      	str	r6, [r1, #0]
 8004f52:	d514      	bpl.n	8004f7e <_printf_i+0x1ae>
 8004f54:	07d9      	lsls	r1, r3, #31
 8004f56:	bf44      	itt	mi
 8004f58:	f043 0320 	orrmi.w	r3, r3, #32
 8004f5c:	6023      	strmi	r3, [r4, #0]
 8004f5e:	b91d      	cbnz	r5, 8004f68 <_printf_i+0x198>
 8004f60:	6823      	ldr	r3, [r4, #0]
 8004f62:	f023 0320 	bic.w	r3, r3, #32
 8004f66:	6023      	str	r3, [r4, #0]
 8004f68:	2310      	movs	r3, #16
 8004f6a:	e7af      	b.n	8004ecc <_printf_i+0xfc>
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	f043 0320 	orr.w	r3, r3, #32
 8004f72:	6023      	str	r3, [r4, #0]
 8004f74:	2378      	movs	r3, #120	; 0x78
 8004f76:	4828      	ldr	r0, [pc, #160]	; (8005018 <_printf_i+0x248>)
 8004f78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f7c:	e7e3      	b.n	8004f46 <_printf_i+0x176>
 8004f7e:	065e      	lsls	r6, r3, #25
 8004f80:	bf48      	it	mi
 8004f82:	b2ad      	uxthmi	r5, r5
 8004f84:	e7e6      	b.n	8004f54 <_printf_i+0x184>
 8004f86:	4616      	mov	r6, r2
 8004f88:	e7bb      	b.n	8004f02 <_printf_i+0x132>
 8004f8a:	680b      	ldr	r3, [r1, #0]
 8004f8c:	6826      	ldr	r6, [r4, #0]
 8004f8e:	1d1d      	adds	r5, r3, #4
 8004f90:	6960      	ldr	r0, [r4, #20]
 8004f92:	600d      	str	r5, [r1, #0]
 8004f94:	0635      	lsls	r5, r6, #24
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	d501      	bpl.n	8004f9e <_printf_i+0x1ce>
 8004f9a:	6018      	str	r0, [r3, #0]
 8004f9c:	e002      	b.n	8004fa4 <_printf_i+0x1d4>
 8004f9e:	0671      	lsls	r1, r6, #25
 8004fa0:	d5fb      	bpl.n	8004f9a <_printf_i+0x1ca>
 8004fa2:	8018      	strh	r0, [r3, #0]
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	4616      	mov	r6, r2
 8004fa8:	6123      	str	r3, [r4, #16]
 8004faa:	e7ba      	b.n	8004f22 <_printf_i+0x152>
 8004fac:	680b      	ldr	r3, [r1, #0]
 8004fae:	1d1a      	adds	r2, r3, #4
 8004fb0:	600a      	str	r2, [r1, #0]
 8004fb2:	681e      	ldr	r6, [r3, #0]
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	6862      	ldr	r2, [r4, #4]
 8004fba:	f000 fa9d 	bl	80054f8 <memchr>
 8004fbe:	b108      	cbz	r0, 8004fc4 <_printf_i+0x1f4>
 8004fc0:	1b80      	subs	r0, r0, r6
 8004fc2:	6060      	str	r0, [r4, #4]
 8004fc4:	6863      	ldr	r3, [r4, #4]
 8004fc6:	6123      	str	r3, [r4, #16]
 8004fc8:	2300      	movs	r3, #0
 8004fca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fce:	e7a8      	b.n	8004f22 <_printf_i+0x152>
 8004fd0:	4632      	mov	r2, r6
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	4640      	mov	r0, r8
 8004fd6:	6923      	ldr	r3, [r4, #16]
 8004fd8:	47d0      	blx	sl
 8004fda:	3001      	adds	r0, #1
 8004fdc:	d0ab      	beq.n	8004f36 <_printf_i+0x166>
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	079b      	lsls	r3, r3, #30
 8004fe2:	d413      	bmi.n	800500c <_printf_i+0x23c>
 8004fe4:	68e0      	ldr	r0, [r4, #12]
 8004fe6:	9b03      	ldr	r3, [sp, #12]
 8004fe8:	4298      	cmp	r0, r3
 8004fea:	bfb8      	it	lt
 8004fec:	4618      	movlt	r0, r3
 8004fee:	e7a4      	b.n	8004f3a <_printf_i+0x16a>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	4632      	mov	r2, r6
 8004ff4:	4649      	mov	r1, r9
 8004ff6:	4640      	mov	r0, r8
 8004ff8:	47d0      	blx	sl
 8004ffa:	3001      	adds	r0, #1
 8004ffc:	d09b      	beq.n	8004f36 <_printf_i+0x166>
 8004ffe:	3501      	adds	r5, #1
 8005000:	68e3      	ldr	r3, [r4, #12]
 8005002:	9903      	ldr	r1, [sp, #12]
 8005004:	1a5b      	subs	r3, r3, r1
 8005006:	42ab      	cmp	r3, r5
 8005008:	dcf2      	bgt.n	8004ff0 <_printf_i+0x220>
 800500a:	e7eb      	b.n	8004fe4 <_printf_i+0x214>
 800500c:	2500      	movs	r5, #0
 800500e:	f104 0619 	add.w	r6, r4, #25
 8005012:	e7f5      	b.n	8005000 <_printf_i+0x230>
 8005014:	08005749 	.word	0x08005749
 8005018:	0800575a 	.word	0x0800575a

0800501c <_sbrk_r>:
 800501c:	b538      	push	{r3, r4, r5, lr}
 800501e:	2300      	movs	r3, #0
 8005020:	4d05      	ldr	r5, [pc, #20]	; (8005038 <_sbrk_r+0x1c>)
 8005022:	4604      	mov	r4, r0
 8005024:	4608      	mov	r0, r1
 8005026:	602b      	str	r3, [r5, #0]
 8005028:	f7fb fb26 	bl	8000678 <_sbrk>
 800502c:	1c43      	adds	r3, r0, #1
 800502e:	d102      	bne.n	8005036 <_sbrk_r+0x1a>
 8005030:	682b      	ldr	r3, [r5, #0]
 8005032:	b103      	cbz	r3, 8005036 <_sbrk_r+0x1a>
 8005034:	6023      	str	r3, [r4, #0]
 8005036:	bd38      	pop	{r3, r4, r5, pc}
 8005038:	2000166c 	.word	0x2000166c

0800503c <__sread>:
 800503c:	b510      	push	{r4, lr}
 800503e:	460c      	mov	r4, r1
 8005040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005044:	f000 fabe 	bl	80055c4 <_read_r>
 8005048:	2800      	cmp	r0, #0
 800504a:	bfab      	itete	ge
 800504c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800504e:	89a3      	ldrhlt	r3, [r4, #12]
 8005050:	181b      	addge	r3, r3, r0
 8005052:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005056:	bfac      	ite	ge
 8005058:	6563      	strge	r3, [r4, #84]	; 0x54
 800505a:	81a3      	strhlt	r3, [r4, #12]
 800505c:	bd10      	pop	{r4, pc}

0800505e <__swrite>:
 800505e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005062:	461f      	mov	r7, r3
 8005064:	898b      	ldrh	r3, [r1, #12]
 8005066:	4605      	mov	r5, r0
 8005068:	05db      	lsls	r3, r3, #23
 800506a:	460c      	mov	r4, r1
 800506c:	4616      	mov	r6, r2
 800506e:	d505      	bpl.n	800507c <__swrite+0x1e>
 8005070:	2302      	movs	r3, #2
 8005072:	2200      	movs	r2, #0
 8005074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005078:	f000 f9c8 	bl	800540c <_lseek_r>
 800507c:	89a3      	ldrh	r3, [r4, #12]
 800507e:	4632      	mov	r2, r6
 8005080:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005084:	81a3      	strh	r3, [r4, #12]
 8005086:	4628      	mov	r0, r5
 8005088:	463b      	mov	r3, r7
 800508a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800508e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005092:	f000 b869 	b.w	8005168 <_write_r>

08005096 <__sseek>:
 8005096:	b510      	push	{r4, lr}
 8005098:	460c      	mov	r4, r1
 800509a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800509e:	f000 f9b5 	bl	800540c <_lseek_r>
 80050a2:	1c43      	adds	r3, r0, #1
 80050a4:	89a3      	ldrh	r3, [r4, #12]
 80050a6:	bf15      	itete	ne
 80050a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80050aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80050ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050b2:	81a3      	strheq	r3, [r4, #12]
 80050b4:	bf18      	it	ne
 80050b6:	81a3      	strhne	r3, [r4, #12]
 80050b8:	bd10      	pop	{r4, pc}

080050ba <__sclose>:
 80050ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050be:	f000 b8d3 	b.w	8005268 <_close_r>
	...

080050c4 <__swbuf_r>:
 80050c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c6:	460e      	mov	r6, r1
 80050c8:	4614      	mov	r4, r2
 80050ca:	4605      	mov	r5, r0
 80050cc:	b118      	cbz	r0, 80050d6 <__swbuf_r+0x12>
 80050ce:	6983      	ldr	r3, [r0, #24]
 80050d0:	b90b      	cbnz	r3, 80050d6 <__swbuf_r+0x12>
 80050d2:	f7ff fbbb 	bl	800484c <__sinit>
 80050d6:	4b21      	ldr	r3, [pc, #132]	; (800515c <__swbuf_r+0x98>)
 80050d8:	429c      	cmp	r4, r3
 80050da:	d12b      	bne.n	8005134 <__swbuf_r+0x70>
 80050dc:	686c      	ldr	r4, [r5, #4]
 80050de:	69a3      	ldr	r3, [r4, #24]
 80050e0:	60a3      	str	r3, [r4, #8]
 80050e2:	89a3      	ldrh	r3, [r4, #12]
 80050e4:	071a      	lsls	r2, r3, #28
 80050e6:	d52f      	bpl.n	8005148 <__swbuf_r+0x84>
 80050e8:	6923      	ldr	r3, [r4, #16]
 80050ea:	b36b      	cbz	r3, 8005148 <__swbuf_r+0x84>
 80050ec:	6923      	ldr	r3, [r4, #16]
 80050ee:	6820      	ldr	r0, [r4, #0]
 80050f0:	b2f6      	uxtb	r6, r6
 80050f2:	1ac0      	subs	r0, r0, r3
 80050f4:	6963      	ldr	r3, [r4, #20]
 80050f6:	4637      	mov	r7, r6
 80050f8:	4283      	cmp	r3, r0
 80050fa:	dc04      	bgt.n	8005106 <__swbuf_r+0x42>
 80050fc:	4621      	mov	r1, r4
 80050fe:	4628      	mov	r0, r5
 8005100:	f000 f948 	bl	8005394 <_fflush_r>
 8005104:	bb30      	cbnz	r0, 8005154 <__swbuf_r+0x90>
 8005106:	68a3      	ldr	r3, [r4, #8]
 8005108:	3001      	adds	r0, #1
 800510a:	3b01      	subs	r3, #1
 800510c:	60a3      	str	r3, [r4, #8]
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	6022      	str	r2, [r4, #0]
 8005114:	701e      	strb	r6, [r3, #0]
 8005116:	6963      	ldr	r3, [r4, #20]
 8005118:	4283      	cmp	r3, r0
 800511a:	d004      	beq.n	8005126 <__swbuf_r+0x62>
 800511c:	89a3      	ldrh	r3, [r4, #12]
 800511e:	07db      	lsls	r3, r3, #31
 8005120:	d506      	bpl.n	8005130 <__swbuf_r+0x6c>
 8005122:	2e0a      	cmp	r6, #10
 8005124:	d104      	bne.n	8005130 <__swbuf_r+0x6c>
 8005126:	4621      	mov	r1, r4
 8005128:	4628      	mov	r0, r5
 800512a:	f000 f933 	bl	8005394 <_fflush_r>
 800512e:	b988      	cbnz	r0, 8005154 <__swbuf_r+0x90>
 8005130:	4638      	mov	r0, r7
 8005132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005134:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <__swbuf_r+0x9c>)
 8005136:	429c      	cmp	r4, r3
 8005138:	d101      	bne.n	800513e <__swbuf_r+0x7a>
 800513a:	68ac      	ldr	r4, [r5, #8]
 800513c:	e7cf      	b.n	80050de <__swbuf_r+0x1a>
 800513e:	4b09      	ldr	r3, [pc, #36]	; (8005164 <__swbuf_r+0xa0>)
 8005140:	429c      	cmp	r4, r3
 8005142:	bf08      	it	eq
 8005144:	68ec      	ldreq	r4, [r5, #12]
 8005146:	e7ca      	b.n	80050de <__swbuf_r+0x1a>
 8005148:	4621      	mov	r1, r4
 800514a:	4628      	mov	r0, r5
 800514c:	f000 f81e 	bl	800518c <__swsetup_r>
 8005150:	2800      	cmp	r0, #0
 8005152:	d0cb      	beq.n	80050ec <__swbuf_r+0x28>
 8005154:	f04f 37ff 	mov.w	r7, #4294967295
 8005158:	e7ea      	b.n	8005130 <__swbuf_r+0x6c>
 800515a:	bf00      	nop
 800515c:	080056f8 	.word	0x080056f8
 8005160:	08005718 	.word	0x08005718
 8005164:	080056d8 	.word	0x080056d8

08005168 <_write_r>:
 8005168:	b538      	push	{r3, r4, r5, lr}
 800516a:	4604      	mov	r4, r0
 800516c:	4608      	mov	r0, r1
 800516e:	4611      	mov	r1, r2
 8005170:	2200      	movs	r2, #0
 8005172:	4d05      	ldr	r5, [pc, #20]	; (8005188 <_write_r+0x20>)
 8005174:	602a      	str	r2, [r5, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	f7fb f81c 	bl	80001b4 <_write>
 800517c:	1c43      	adds	r3, r0, #1
 800517e:	d102      	bne.n	8005186 <_write_r+0x1e>
 8005180:	682b      	ldr	r3, [r5, #0]
 8005182:	b103      	cbz	r3, 8005186 <_write_r+0x1e>
 8005184:	6023      	str	r3, [r4, #0]
 8005186:	bd38      	pop	{r3, r4, r5, pc}
 8005188:	2000166c 	.word	0x2000166c

0800518c <__swsetup_r>:
 800518c:	4b32      	ldr	r3, [pc, #200]	; (8005258 <__swsetup_r+0xcc>)
 800518e:	b570      	push	{r4, r5, r6, lr}
 8005190:	681d      	ldr	r5, [r3, #0]
 8005192:	4606      	mov	r6, r0
 8005194:	460c      	mov	r4, r1
 8005196:	b125      	cbz	r5, 80051a2 <__swsetup_r+0x16>
 8005198:	69ab      	ldr	r3, [r5, #24]
 800519a:	b913      	cbnz	r3, 80051a2 <__swsetup_r+0x16>
 800519c:	4628      	mov	r0, r5
 800519e:	f7ff fb55 	bl	800484c <__sinit>
 80051a2:	4b2e      	ldr	r3, [pc, #184]	; (800525c <__swsetup_r+0xd0>)
 80051a4:	429c      	cmp	r4, r3
 80051a6:	d10f      	bne.n	80051c8 <__swsetup_r+0x3c>
 80051a8:	686c      	ldr	r4, [r5, #4]
 80051aa:	89a3      	ldrh	r3, [r4, #12]
 80051ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051b0:	0719      	lsls	r1, r3, #28
 80051b2:	d42c      	bmi.n	800520e <__swsetup_r+0x82>
 80051b4:	06dd      	lsls	r5, r3, #27
 80051b6:	d411      	bmi.n	80051dc <__swsetup_r+0x50>
 80051b8:	2309      	movs	r3, #9
 80051ba:	6033      	str	r3, [r6, #0]
 80051bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80051c0:	f04f 30ff 	mov.w	r0, #4294967295
 80051c4:	81a3      	strh	r3, [r4, #12]
 80051c6:	e03e      	b.n	8005246 <__swsetup_r+0xba>
 80051c8:	4b25      	ldr	r3, [pc, #148]	; (8005260 <__swsetup_r+0xd4>)
 80051ca:	429c      	cmp	r4, r3
 80051cc:	d101      	bne.n	80051d2 <__swsetup_r+0x46>
 80051ce:	68ac      	ldr	r4, [r5, #8]
 80051d0:	e7eb      	b.n	80051aa <__swsetup_r+0x1e>
 80051d2:	4b24      	ldr	r3, [pc, #144]	; (8005264 <__swsetup_r+0xd8>)
 80051d4:	429c      	cmp	r4, r3
 80051d6:	bf08      	it	eq
 80051d8:	68ec      	ldreq	r4, [r5, #12]
 80051da:	e7e6      	b.n	80051aa <__swsetup_r+0x1e>
 80051dc:	0758      	lsls	r0, r3, #29
 80051de:	d512      	bpl.n	8005206 <__swsetup_r+0x7a>
 80051e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051e2:	b141      	cbz	r1, 80051f6 <__swsetup_r+0x6a>
 80051e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051e8:	4299      	cmp	r1, r3
 80051ea:	d002      	beq.n	80051f2 <__swsetup_r+0x66>
 80051ec:	4630      	mov	r0, r6
 80051ee:	f000 f99d 	bl	800552c <_free_r>
 80051f2:	2300      	movs	r3, #0
 80051f4:	6363      	str	r3, [r4, #52]	; 0x34
 80051f6:	89a3      	ldrh	r3, [r4, #12]
 80051f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80051fc:	81a3      	strh	r3, [r4, #12]
 80051fe:	2300      	movs	r3, #0
 8005200:	6063      	str	r3, [r4, #4]
 8005202:	6923      	ldr	r3, [r4, #16]
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	89a3      	ldrh	r3, [r4, #12]
 8005208:	f043 0308 	orr.w	r3, r3, #8
 800520c:	81a3      	strh	r3, [r4, #12]
 800520e:	6923      	ldr	r3, [r4, #16]
 8005210:	b94b      	cbnz	r3, 8005226 <__swsetup_r+0x9a>
 8005212:	89a3      	ldrh	r3, [r4, #12]
 8005214:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800521c:	d003      	beq.n	8005226 <__swsetup_r+0x9a>
 800521e:	4621      	mov	r1, r4
 8005220:	4630      	mov	r0, r6
 8005222:	f000 f929 	bl	8005478 <__smakebuf_r>
 8005226:	89a0      	ldrh	r0, [r4, #12]
 8005228:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800522c:	f010 0301 	ands.w	r3, r0, #1
 8005230:	d00a      	beq.n	8005248 <__swsetup_r+0xbc>
 8005232:	2300      	movs	r3, #0
 8005234:	60a3      	str	r3, [r4, #8]
 8005236:	6963      	ldr	r3, [r4, #20]
 8005238:	425b      	negs	r3, r3
 800523a:	61a3      	str	r3, [r4, #24]
 800523c:	6923      	ldr	r3, [r4, #16]
 800523e:	b943      	cbnz	r3, 8005252 <__swsetup_r+0xc6>
 8005240:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005244:	d1ba      	bne.n	80051bc <__swsetup_r+0x30>
 8005246:	bd70      	pop	{r4, r5, r6, pc}
 8005248:	0781      	lsls	r1, r0, #30
 800524a:	bf58      	it	pl
 800524c:	6963      	ldrpl	r3, [r4, #20]
 800524e:	60a3      	str	r3, [r4, #8]
 8005250:	e7f4      	b.n	800523c <__swsetup_r+0xb0>
 8005252:	2000      	movs	r0, #0
 8005254:	e7f7      	b.n	8005246 <__swsetup_r+0xba>
 8005256:	bf00      	nop
 8005258:	20000010 	.word	0x20000010
 800525c:	080056f8 	.word	0x080056f8
 8005260:	08005718 	.word	0x08005718
 8005264:	080056d8 	.word	0x080056d8

08005268 <_close_r>:
 8005268:	b538      	push	{r3, r4, r5, lr}
 800526a:	2300      	movs	r3, #0
 800526c:	4d05      	ldr	r5, [pc, #20]	; (8005284 <_close_r+0x1c>)
 800526e:	4604      	mov	r4, r0
 8005270:	4608      	mov	r0, r1
 8005272:	602b      	str	r3, [r5, #0]
 8005274:	f7fb f9cf 	bl	8000616 <_close>
 8005278:	1c43      	adds	r3, r0, #1
 800527a:	d102      	bne.n	8005282 <_close_r+0x1a>
 800527c:	682b      	ldr	r3, [r5, #0]
 800527e:	b103      	cbz	r3, 8005282 <_close_r+0x1a>
 8005280:	6023      	str	r3, [r4, #0]
 8005282:	bd38      	pop	{r3, r4, r5, pc}
 8005284:	2000166c 	.word	0x2000166c

08005288 <__sflush_r>:
 8005288:	898a      	ldrh	r2, [r1, #12]
 800528a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800528e:	4605      	mov	r5, r0
 8005290:	0710      	lsls	r0, r2, #28
 8005292:	460c      	mov	r4, r1
 8005294:	d458      	bmi.n	8005348 <__sflush_r+0xc0>
 8005296:	684b      	ldr	r3, [r1, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	dc05      	bgt.n	80052a8 <__sflush_r+0x20>
 800529c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800529e:	2b00      	cmp	r3, #0
 80052a0:	dc02      	bgt.n	80052a8 <__sflush_r+0x20>
 80052a2:	2000      	movs	r0, #0
 80052a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052aa:	2e00      	cmp	r6, #0
 80052ac:	d0f9      	beq.n	80052a2 <__sflush_r+0x1a>
 80052ae:	2300      	movs	r3, #0
 80052b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80052b4:	682f      	ldr	r7, [r5, #0]
 80052b6:	602b      	str	r3, [r5, #0]
 80052b8:	d032      	beq.n	8005320 <__sflush_r+0x98>
 80052ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052bc:	89a3      	ldrh	r3, [r4, #12]
 80052be:	075a      	lsls	r2, r3, #29
 80052c0:	d505      	bpl.n	80052ce <__sflush_r+0x46>
 80052c2:	6863      	ldr	r3, [r4, #4]
 80052c4:	1ac0      	subs	r0, r0, r3
 80052c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052c8:	b10b      	cbz	r3, 80052ce <__sflush_r+0x46>
 80052ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052cc:	1ac0      	subs	r0, r0, r3
 80052ce:	2300      	movs	r3, #0
 80052d0:	4602      	mov	r2, r0
 80052d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052d4:	4628      	mov	r0, r5
 80052d6:	6a21      	ldr	r1, [r4, #32]
 80052d8:	47b0      	blx	r6
 80052da:	1c43      	adds	r3, r0, #1
 80052dc:	89a3      	ldrh	r3, [r4, #12]
 80052de:	d106      	bne.n	80052ee <__sflush_r+0x66>
 80052e0:	6829      	ldr	r1, [r5, #0]
 80052e2:	291d      	cmp	r1, #29
 80052e4:	d82c      	bhi.n	8005340 <__sflush_r+0xb8>
 80052e6:	4a2a      	ldr	r2, [pc, #168]	; (8005390 <__sflush_r+0x108>)
 80052e8:	40ca      	lsrs	r2, r1
 80052ea:	07d6      	lsls	r6, r2, #31
 80052ec:	d528      	bpl.n	8005340 <__sflush_r+0xb8>
 80052ee:	2200      	movs	r2, #0
 80052f0:	6062      	str	r2, [r4, #4]
 80052f2:	6922      	ldr	r2, [r4, #16]
 80052f4:	04d9      	lsls	r1, r3, #19
 80052f6:	6022      	str	r2, [r4, #0]
 80052f8:	d504      	bpl.n	8005304 <__sflush_r+0x7c>
 80052fa:	1c42      	adds	r2, r0, #1
 80052fc:	d101      	bne.n	8005302 <__sflush_r+0x7a>
 80052fe:	682b      	ldr	r3, [r5, #0]
 8005300:	b903      	cbnz	r3, 8005304 <__sflush_r+0x7c>
 8005302:	6560      	str	r0, [r4, #84]	; 0x54
 8005304:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005306:	602f      	str	r7, [r5, #0]
 8005308:	2900      	cmp	r1, #0
 800530a:	d0ca      	beq.n	80052a2 <__sflush_r+0x1a>
 800530c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005310:	4299      	cmp	r1, r3
 8005312:	d002      	beq.n	800531a <__sflush_r+0x92>
 8005314:	4628      	mov	r0, r5
 8005316:	f000 f909 	bl	800552c <_free_r>
 800531a:	2000      	movs	r0, #0
 800531c:	6360      	str	r0, [r4, #52]	; 0x34
 800531e:	e7c1      	b.n	80052a4 <__sflush_r+0x1c>
 8005320:	6a21      	ldr	r1, [r4, #32]
 8005322:	2301      	movs	r3, #1
 8005324:	4628      	mov	r0, r5
 8005326:	47b0      	blx	r6
 8005328:	1c41      	adds	r1, r0, #1
 800532a:	d1c7      	bne.n	80052bc <__sflush_r+0x34>
 800532c:	682b      	ldr	r3, [r5, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0c4      	beq.n	80052bc <__sflush_r+0x34>
 8005332:	2b1d      	cmp	r3, #29
 8005334:	d001      	beq.n	800533a <__sflush_r+0xb2>
 8005336:	2b16      	cmp	r3, #22
 8005338:	d101      	bne.n	800533e <__sflush_r+0xb6>
 800533a:	602f      	str	r7, [r5, #0]
 800533c:	e7b1      	b.n	80052a2 <__sflush_r+0x1a>
 800533e:	89a3      	ldrh	r3, [r4, #12]
 8005340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005344:	81a3      	strh	r3, [r4, #12]
 8005346:	e7ad      	b.n	80052a4 <__sflush_r+0x1c>
 8005348:	690f      	ldr	r7, [r1, #16]
 800534a:	2f00      	cmp	r7, #0
 800534c:	d0a9      	beq.n	80052a2 <__sflush_r+0x1a>
 800534e:	0793      	lsls	r3, r2, #30
 8005350:	bf18      	it	ne
 8005352:	2300      	movne	r3, #0
 8005354:	680e      	ldr	r6, [r1, #0]
 8005356:	bf08      	it	eq
 8005358:	694b      	ldreq	r3, [r1, #20]
 800535a:	eba6 0807 	sub.w	r8, r6, r7
 800535e:	600f      	str	r7, [r1, #0]
 8005360:	608b      	str	r3, [r1, #8]
 8005362:	f1b8 0f00 	cmp.w	r8, #0
 8005366:	dd9c      	ble.n	80052a2 <__sflush_r+0x1a>
 8005368:	4643      	mov	r3, r8
 800536a:	463a      	mov	r2, r7
 800536c:	4628      	mov	r0, r5
 800536e:	6a21      	ldr	r1, [r4, #32]
 8005370:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005372:	47b0      	blx	r6
 8005374:	2800      	cmp	r0, #0
 8005376:	dc06      	bgt.n	8005386 <__sflush_r+0xfe>
 8005378:	89a3      	ldrh	r3, [r4, #12]
 800537a:	f04f 30ff 	mov.w	r0, #4294967295
 800537e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005382:	81a3      	strh	r3, [r4, #12]
 8005384:	e78e      	b.n	80052a4 <__sflush_r+0x1c>
 8005386:	4407      	add	r7, r0
 8005388:	eba8 0800 	sub.w	r8, r8, r0
 800538c:	e7e9      	b.n	8005362 <__sflush_r+0xda>
 800538e:	bf00      	nop
 8005390:	20400001 	.word	0x20400001

08005394 <_fflush_r>:
 8005394:	b538      	push	{r3, r4, r5, lr}
 8005396:	690b      	ldr	r3, [r1, #16]
 8005398:	4605      	mov	r5, r0
 800539a:	460c      	mov	r4, r1
 800539c:	b913      	cbnz	r3, 80053a4 <_fflush_r+0x10>
 800539e:	2500      	movs	r5, #0
 80053a0:	4628      	mov	r0, r5
 80053a2:	bd38      	pop	{r3, r4, r5, pc}
 80053a4:	b118      	cbz	r0, 80053ae <_fflush_r+0x1a>
 80053a6:	6983      	ldr	r3, [r0, #24]
 80053a8:	b90b      	cbnz	r3, 80053ae <_fflush_r+0x1a>
 80053aa:	f7ff fa4f 	bl	800484c <__sinit>
 80053ae:	4b14      	ldr	r3, [pc, #80]	; (8005400 <_fflush_r+0x6c>)
 80053b0:	429c      	cmp	r4, r3
 80053b2:	d11b      	bne.n	80053ec <_fflush_r+0x58>
 80053b4:	686c      	ldr	r4, [r5, #4]
 80053b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d0ef      	beq.n	800539e <_fflush_r+0xa>
 80053be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80053c0:	07d0      	lsls	r0, r2, #31
 80053c2:	d404      	bmi.n	80053ce <_fflush_r+0x3a>
 80053c4:	0599      	lsls	r1, r3, #22
 80053c6:	d402      	bmi.n	80053ce <_fflush_r+0x3a>
 80053c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053ca:	f7ff fadd 	bl	8004988 <__retarget_lock_acquire_recursive>
 80053ce:	4628      	mov	r0, r5
 80053d0:	4621      	mov	r1, r4
 80053d2:	f7ff ff59 	bl	8005288 <__sflush_r>
 80053d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053d8:	4605      	mov	r5, r0
 80053da:	07da      	lsls	r2, r3, #31
 80053dc:	d4e0      	bmi.n	80053a0 <_fflush_r+0xc>
 80053de:	89a3      	ldrh	r3, [r4, #12]
 80053e0:	059b      	lsls	r3, r3, #22
 80053e2:	d4dd      	bmi.n	80053a0 <_fflush_r+0xc>
 80053e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053e6:	f7ff fad0 	bl	800498a <__retarget_lock_release_recursive>
 80053ea:	e7d9      	b.n	80053a0 <_fflush_r+0xc>
 80053ec:	4b05      	ldr	r3, [pc, #20]	; (8005404 <_fflush_r+0x70>)
 80053ee:	429c      	cmp	r4, r3
 80053f0:	d101      	bne.n	80053f6 <_fflush_r+0x62>
 80053f2:	68ac      	ldr	r4, [r5, #8]
 80053f4:	e7df      	b.n	80053b6 <_fflush_r+0x22>
 80053f6:	4b04      	ldr	r3, [pc, #16]	; (8005408 <_fflush_r+0x74>)
 80053f8:	429c      	cmp	r4, r3
 80053fa:	bf08      	it	eq
 80053fc:	68ec      	ldreq	r4, [r5, #12]
 80053fe:	e7da      	b.n	80053b6 <_fflush_r+0x22>
 8005400:	080056f8 	.word	0x080056f8
 8005404:	08005718 	.word	0x08005718
 8005408:	080056d8 	.word	0x080056d8

0800540c <_lseek_r>:
 800540c:	b538      	push	{r3, r4, r5, lr}
 800540e:	4604      	mov	r4, r0
 8005410:	4608      	mov	r0, r1
 8005412:	4611      	mov	r1, r2
 8005414:	2200      	movs	r2, #0
 8005416:	4d05      	ldr	r5, [pc, #20]	; (800542c <_lseek_r+0x20>)
 8005418:	602a      	str	r2, [r5, #0]
 800541a:	461a      	mov	r2, r3
 800541c:	f7fb f91f 	bl	800065e <_lseek>
 8005420:	1c43      	adds	r3, r0, #1
 8005422:	d102      	bne.n	800542a <_lseek_r+0x1e>
 8005424:	682b      	ldr	r3, [r5, #0]
 8005426:	b103      	cbz	r3, 800542a <_lseek_r+0x1e>
 8005428:	6023      	str	r3, [r4, #0]
 800542a:	bd38      	pop	{r3, r4, r5, pc}
 800542c:	2000166c 	.word	0x2000166c

08005430 <__swhatbuf_r>:
 8005430:	b570      	push	{r4, r5, r6, lr}
 8005432:	460e      	mov	r6, r1
 8005434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005438:	4614      	mov	r4, r2
 800543a:	2900      	cmp	r1, #0
 800543c:	461d      	mov	r5, r3
 800543e:	b096      	sub	sp, #88	; 0x58
 8005440:	da07      	bge.n	8005452 <__swhatbuf_r+0x22>
 8005442:	2300      	movs	r3, #0
 8005444:	602b      	str	r3, [r5, #0]
 8005446:	89b3      	ldrh	r3, [r6, #12]
 8005448:	061a      	lsls	r2, r3, #24
 800544a:	d410      	bmi.n	800546e <__swhatbuf_r+0x3e>
 800544c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005450:	e00e      	b.n	8005470 <__swhatbuf_r+0x40>
 8005452:	466a      	mov	r2, sp
 8005454:	f000 f8c8 	bl	80055e8 <_fstat_r>
 8005458:	2800      	cmp	r0, #0
 800545a:	dbf2      	blt.n	8005442 <__swhatbuf_r+0x12>
 800545c:	9a01      	ldr	r2, [sp, #4]
 800545e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005462:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005466:	425a      	negs	r2, r3
 8005468:	415a      	adcs	r2, r3
 800546a:	602a      	str	r2, [r5, #0]
 800546c:	e7ee      	b.n	800544c <__swhatbuf_r+0x1c>
 800546e:	2340      	movs	r3, #64	; 0x40
 8005470:	2000      	movs	r0, #0
 8005472:	6023      	str	r3, [r4, #0]
 8005474:	b016      	add	sp, #88	; 0x58
 8005476:	bd70      	pop	{r4, r5, r6, pc}

08005478 <__smakebuf_r>:
 8005478:	898b      	ldrh	r3, [r1, #12]
 800547a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800547c:	079d      	lsls	r5, r3, #30
 800547e:	4606      	mov	r6, r0
 8005480:	460c      	mov	r4, r1
 8005482:	d507      	bpl.n	8005494 <__smakebuf_r+0x1c>
 8005484:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005488:	6023      	str	r3, [r4, #0]
 800548a:	6123      	str	r3, [r4, #16]
 800548c:	2301      	movs	r3, #1
 800548e:	6163      	str	r3, [r4, #20]
 8005490:	b002      	add	sp, #8
 8005492:	bd70      	pop	{r4, r5, r6, pc}
 8005494:	466a      	mov	r2, sp
 8005496:	ab01      	add	r3, sp, #4
 8005498:	f7ff ffca 	bl	8005430 <__swhatbuf_r>
 800549c:	9900      	ldr	r1, [sp, #0]
 800549e:	4605      	mov	r5, r0
 80054a0:	4630      	mov	r0, r6
 80054a2:	f7ff fa73 	bl	800498c <_malloc_r>
 80054a6:	b948      	cbnz	r0, 80054bc <__smakebuf_r+0x44>
 80054a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054ac:	059a      	lsls	r2, r3, #22
 80054ae:	d4ef      	bmi.n	8005490 <__smakebuf_r+0x18>
 80054b0:	f023 0303 	bic.w	r3, r3, #3
 80054b4:	f043 0302 	orr.w	r3, r3, #2
 80054b8:	81a3      	strh	r3, [r4, #12]
 80054ba:	e7e3      	b.n	8005484 <__smakebuf_r+0xc>
 80054bc:	4b0d      	ldr	r3, [pc, #52]	; (80054f4 <__smakebuf_r+0x7c>)
 80054be:	62b3      	str	r3, [r6, #40]	; 0x28
 80054c0:	89a3      	ldrh	r3, [r4, #12]
 80054c2:	6020      	str	r0, [r4, #0]
 80054c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c8:	81a3      	strh	r3, [r4, #12]
 80054ca:	9b00      	ldr	r3, [sp, #0]
 80054cc:	6120      	str	r0, [r4, #16]
 80054ce:	6163      	str	r3, [r4, #20]
 80054d0:	9b01      	ldr	r3, [sp, #4]
 80054d2:	b15b      	cbz	r3, 80054ec <__smakebuf_r+0x74>
 80054d4:	4630      	mov	r0, r6
 80054d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054da:	f000 f897 	bl	800560c <_isatty_r>
 80054de:	b128      	cbz	r0, 80054ec <__smakebuf_r+0x74>
 80054e0:	89a3      	ldrh	r3, [r4, #12]
 80054e2:	f023 0303 	bic.w	r3, r3, #3
 80054e6:	f043 0301 	orr.w	r3, r3, #1
 80054ea:	81a3      	strh	r3, [r4, #12]
 80054ec:	89a0      	ldrh	r0, [r4, #12]
 80054ee:	4305      	orrs	r5, r0
 80054f0:	81a5      	strh	r5, [r4, #12]
 80054f2:	e7cd      	b.n	8005490 <__smakebuf_r+0x18>
 80054f4:	080047e5 	.word	0x080047e5

080054f8 <memchr>:
 80054f8:	4603      	mov	r3, r0
 80054fa:	b510      	push	{r4, lr}
 80054fc:	b2c9      	uxtb	r1, r1
 80054fe:	4402      	add	r2, r0
 8005500:	4293      	cmp	r3, r2
 8005502:	4618      	mov	r0, r3
 8005504:	d101      	bne.n	800550a <memchr+0x12>
 8005506:	2000      	movs	r0, #0
 8005508:	e003      	b.n	8005512 <memchr+0x1a>
 800550a:	7804      	ldrb	r4, [r0, #0]
 800550c:	3301      	adds	r3, #1
 800550e:	428c      	cmp	r4, r1
 8005510:	d1f6      	bne.n	8005500 <memchr+0x8>
 8005512:	bd10      	pop	{r4, pc}

08005514 <__malloc_lock>:
 8005514:	4801      	ldr	r0, [pc, #4]	; (800551c <__malloc_lock+0x8>)
 8005516:	f7ff ba37 	b.w	8004988 <__retarget_lock_acquire_recursive>
 800551a:	bf00      	nop
 800551c:	20001664 	.word	0x20001664

08005520 <__malloc_unlock>:
 8005520:	4801      	ldr	r0, [pc, #4]	; (8005528 <__malloc_unlock+0x8>)
 8005522:	f7ff ba32 	b.w	800498a <__retarget_lock_release_recursive>
 8005526:	bf00      	nop
 8005528:	20001664 	.word	0x20001664

0800552c <_free_r>:
 800552c:	b538      	push	{r3, r4, r5, lr}
 800552e:	4605      	mov	r5, r0
 8005530:	2900      	cmp	r1, #0
 8005532:	d043      	beq.n	80055bc <_free_r+0x90>
 8005534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005538:	1f0c      	subs	r4, r1, #4
 800553a:	2b00      	cmp	r3, #0
 800553c:	bfb8      	it	lt
 800553e:	18e4      	addlt	r4, r4, r3
 8005540:	f7ff ffe8 	bl	8005514 <__malloc_lock>
 8005544:	4a1e      	ldr	r2, [pc, #120]	; (80055c0 <_free_r+0x94>)
 8005546:	6813      	ldr	r3, [r2, #0]
 8005548:	4610      	mov	r0, r2
 800554a:	b933      	cbnz	r3, 800555a <_free_r+0x2e>
 800554c:	6063      	str	r3, [r4, #4]
 800554e:	6014      	str	r4, [r2, #0]
 8005550:	4628      	mov	r0, r5
 8005552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005556:	f7ff bfe3 	b.w	8005520 <__malloc_unlock>
 800555a:	42a3      	cmp	r3, r4
 800555c:	d90a      	bls.n	8005574 <_free_r+0x48>
 800555e:	6821      	ldr	r1, [r4, #0]
 8005560:	1862      	adds	r2, r4, r1
 8005562:	4293      	cmp	r3, r2
 8005564:	bf01      	itttt	eq
 8005566:	681a      	ldreq	r2, [r3, #0]
 8005568:	685b      	ldreq	r3, [r3, #4]
 800556a:	1852      	addeq	r2, r2, r1
 800556c:	6022      	streq	r2, [r4, #0]
 800556e:	6063      	str	r3, [r4, #4]
 8005570:	6004      	str	r4, [r0, #0]
 8005572:	e7ed      	b.n	8005550 <_free_r+0x24>
 8005574:	461a      	mov	r2, r3
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	b10b      	cbz	r3, 800557e <_free_r+0x52>
 800557a:	42a3      	cmp	r3, r4
 800557c:	d9fa      	bls.n	8005574 <_free_r+0x48>
 800557e:	6811      	ldr	r1, [r2, #0]
 8005580:	1850      	adds	r0, r2, r1
 8005582:	42a0      	cmp	r0, r4
 8005584:	d10b      	bne.n	800559e <_free_r+0x72>
 8005586:	6820      	ldr	r0, [r4, #0]
 8005588:	4401      	add	r1, r0
 800558a:	1850      	adds	r0, r2, r1
 800558c:	4283      	cmp	r3, r0
 800558e:	6011      	str	r1, [r2, #0]
 8005590:	d1de      	bne.n	8005550 <_free_r+0x24>
 8005592:	6818      	ldr	r0, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	4401      	add	r1, r0
 8005598:	6011      	str	r1, [r2, #0]
 800559a:	6053      	str	r3, [r2, #4]
 800559c:	e7d8      	b.n	8005550 <_free_r+0x24>
 800559e:	d902      	bls.n	80055a6 <_free_r+0x7a>
 80055a0:	230c      	movs	r3, #12
 80055a2:	602b      	str	r3, [r5, #0]
 80055a4:	e7d4      	b.n	8005550 <_free_r+0x24>
 80055a6:	6820      	ldr	r0, [r4, #0]
 80055a8:	1821      	adds	r1, r4, r0
 80055aa:	428b      	cmp	r3, r1
 80055ac:	bf01      	itttt	eq
 80055ae:	6819      	ldreq	r1, [r3, #0]
 80055b0:	685b      	ldreq	r3, [r3, #4]
 80055b2:	1809      	addeq	r1, r1, r0
 80055b4:	6021      	streq	r1, [r4, #0]
 80055b6:	6063      	str	r3, [r4, #4]
 80055b8:	6054      	str	r4, [r2, #4]
 80055ba:	e7c9      	b.n	8005550 <_free_r+0x24>
 80055bc:	bd38      	pop	{r3, r4, r5, pc}
 80055be:	bf00      	nop
 80055c0:	20001584 	.word	0x20001584

080055c4 <_read_r>:
 80055c4:	b538      	push	{r3, r4, r5, lr}
 80055c6:	4604      	mov	r4, r0
 80055c8:	4608      	mov	r0, r1
 80055ca:	4611      	mov	r1, r2
 80055cc:	2200      	movs	r2, #0
 80055ce:	4d05      	ldr	r5, [pc, #20]	; (80055e4 <_read_r+0x20>)
 80055d0:	602a      	str	r2, [r5, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	f7fb f802 	bl	80005dc <_read>
 80055d8:	1c43      	adds	r3, r0, #1
 80055da:	d102      	bne.n	80055e2 <_read_r+0x1e>
 80055dc:	682b      	ldr	r3, [r5, #0]
 80055de:	b103      	cbz	r3, 80055e2 <_read_r+0x1e>
 80055e0:	6023      	str	r3, [r4, #0]
 80055e2:	bd38      	pop	{r3, r4, r5, pc}
 80055e4:	2000166c 	.word	0x2000166c

080055e8 <_fstat_r>:
 80055e8:	b538      	push	{r3, r4, r5, lr}
 80055ea:	2300      	movs	r3, #0
 80055ec:	4d06      	ldr	r5, [pc, #24]	; (8005608 <_fstat_r+0x20>)
 80055ee:	4604      	mov	r4, r0
 80055f0:	4608      	mov	r0, r1
 80055f2:	4611      	mov	r1, r2
 80055f4:	602b      	str	r3, [r5, #0]
 80055f6:	f7fb f819 	bl	800062c <_fstat>
 80055fa:	1c43      	adds	r3, r0, #1
 80055fc:	d102      	bne.n	8005604 <_fstat_r+0x1c>
 80055fe:	682b      	ldr	r3, [r5, #0]
 8005600:	b103      	cbz	r3, 8005604 <_fstat_r+0x1c>
 8005602:	6023      	str	r3, [r4, #0]
 8005604:	bd38      	pop	{r3, r4, r5, pc}
 8005606:	bf00      	nop
 8005608:	2000166c 	.word	0x2000166c

0800560c <_isatty_r>:
 800560c:	b538      	push	{r3, r4, r5, lr}
 800560e:	2300      	movs	r3, #0
 8005610:	4d05      	ldr	r5, [pc, #20]	; (8005628 <_isatty_r+0x1c>)
 8005612:	4604      	mov	r4, r0
 8005614:	4608      	mov	r0, r1
 8005616:	602b      	str	r3, [r5, #0]
 8005618:	f7fb f817 	bl	800064a <_isatty>
 800561c:	1c43      	adds	r3, r0, #1
 800561e:	d102      	bne.n	8005626 <_isatty_r+0x1a>
 8005620:	682b      	ldr	r3, [r5, #0]
 8005622:	b103      	cbz	r3, 8005626 <_isatty_r+0x1a>
 8005624:	6023      	str	r3, [r4, #0]
 8005626:	bd38      	pop	{r3, r4, r5, pc}
 8005628:	2000166c 	.word	0x2000166c

0800562c <_init>:
 800562c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562e:	bf00      	nop
 8005630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005632:	bc08      	pop	{r3}
 8005634:	469e      	mov	lr, r3
 8005636:	4770      	bx	lr

08005638 <_fini>:
 8005638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563a:	bf00      	nop
 800563c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800563e:	bc08      	pop	{r3}
 8005640:	469e      	mov	lr, r3
 8005642:	4770      	bx	lr
